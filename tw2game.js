(function (global) {
    var namespace = function (name, value) {
        var parts = name.split('.'), scope = global, i, len = parts.length;
        for (i = 0; i < len; i++) {
            scope = scope[parts[i]] = scope[parts[i]] || (i == len - 1 && value || {});
        }
        return scope;
    };
    var callsParent = /var x/.test(function () {
        var x;
    }) ? /callParent/ : /\.*/;
    var createWrapper = function (name, value, base) {
        return function () {
            var ret;
            this.callParent = base.prototype[name];
            ret = value.apply(this, arguments);
            this.callParent = null;
            return ret;
        };
    };
    var createClass = function (base, properties) {
        var ctor, prototype, i, Class, property;
        ctor = function () {
        };
        ctor.prototype = base && base.prototype;
        prototype = new ctor;
        prototype._super = base;
        for (i in properties) {
            property = properties[i];
            if (typeof prototype[i] === 'function' && typeof property === 'function' && callsParent.test(property)) {
                prototype[i] = createWrapper(i, property, base);
            } else {
                prototype[i] = properties[i];
            }
        }
        Class = function () {
            if (prototype.init)this.init.apply(this, arguments);
        };
        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        return Class;
    };
    namespace('west', {
        namespace: namespace, createClass: createClass, define: function (name, base, properties) {
            if ('string' === typeof base) {
                base = this.get(base);
            }
            namespace(name, createClass(base, properties));
        }, get: function (name) {
            var namespace = window, parts = name.split('.'), i;
            for (i = 0; i < parts.length; i++) {
                namespace = namespace[parts[i]];
                if ('undefined' === typeof namespace) {
                    break;
                }
            }
            return namespace;
        }, getClosestTree: function (name) {
            var new_namespace = window, parts = name.split('.'), steps = [], i;
            for (i = 0; i < parts.length; i++) {
                new_namespace = new_namespace[parts[i]];
                if ('undefined' === typeof new_namespace) {
                    break;
                } else {
                    steps.push(new_namespace);
                }
            }
            return steps;
        }, getClosest: function (name) {
            var tree = this.getClosestTree(name);
            return tree.pop();
        }, instanciateSingle: function (path, name, options) {
            options = options || {};
            if ('string' === typeof path) {
                path = path.split('.');
            }
            if ($.isPlainObject(name)) {
                options = name;
                name = null;
            }
            name = name || 'controller';
            var path_id = path.pop();
            path = this.get(path.join('.'));
            if (path && path[path_id] && path[path_id][name]) {
                path[path_id] = new path[path_id][name](options);
                return path[path_id];
            }
            return undefined;
        }
    });
}(window));

function _(text) {
    return text.substr((text.indexOf('|') || 0) + 1);
}
function s(text) {
    for (var i = 1; i < arguments.length; i++) {
        text = text.split('%' + i).join(arguments[i]);
    }
    return text;
}
function ntext(singular, plural, value) {
    if (value == 1)return singular;
    return plural;
}
function gendertext(male, female, gender) {
    gender = gender || Character.getGender();
    return gender === 'male' ? male : female;
}
function round_number(number, max_length) {
    max_length = max_length || 3;
    var units = ['', 'К', 'М', 'Г', 'Т'], count = Math.ceil(Math.abs(max_length / 3)) - 1, len = Math.ceil(Math.abs(parseInt(number).toString().length / 3)) - 1, power = len > count ? len - count : 0, calculateNewNumber = function (num, pow) {
        return Math.round(num / Math.pow(1000, pow));
    }, result = calculateNewNumber(number, power), ret = '';
    if (0 === result && power) {
        power += -1;
        result = calculateNewNumber(number, power);
    }
    if (result * Math.pow(1000, power) != number) {
        ret += String('\u2248');
    }
    ret += result + units[power];
    return ret;
}
function format_number(number, thousands_separator) {
    if (!/\d+/.test(number.toString())) {
        return number;
    }
    thousands_separator = thousands_separator || '.';
    var num;
    num = number.toString().match(/(=?(?:\d+\.?\d*)|$)/ig)[0];
    number = number.toString().split(num);
    num = num.split('.');
    var decimal_separator = '.', prefix = number[0], suffix = number[1], int = num[0].split(/(?=(?:\d{3})+(?:$))/g), frac = num[1];
    return prefix + int.join(thousands_separator) + (frac && frac.length ? (decimal_separator + frac) : '') + suffix;
}
function deformat_number(number, thousands_separator) {
    if ('number' === typeof number) {
        return number;
    }
    thousands_separator = thousands_separator || '.';
    var decimal_separator = '.', num;
    num = number.replace(new RegExp('[' + thousands_separator + ']+', 'g'), '').match(new RegExp('[0-9' + decimal_separator + ']+', 'g'))[0];
    if (!!~num.indexOf(decimal_separator)) {
        num = parseFloat(num.replace(decimal_separator, '.'));
    } else {
        num = parseInt(num);
    }
    return num;
}
function format_money(number, TZ) {
    return format_number(number, TZ);
}
function deformat_money(number, TZ) {
    return deformat_number(number, TZ);
}
function isDateWithin(start, end, check) {
    var c = check instanceof Date ? check : Date.parse(check);
    return (c >= Date.parse(start) && c <= Date.parse(end));
}
function to_cdn(path) {
    return Game.cdnURL ? Game.cdnURL + '/' + path : path;
}
function showlink(url) {
    url = url.unescapeHTML();
    if (url.match(/^https?:\/\/([^\/]*\.|)(youtube|twitter|google|yahoo|the-west|wikipedia)\.(tr|com|de|co\.uk|net|org|pl|nl|se|ro|com\.pt|cz|es|ru|com\.br|hu|gr|dk|sk|fr|it|no\.com)(\/|$)/)) {
        window.open(url);
    } else {
        var $content = $('<div>' +
            "Эта ссылка ведёт на внешний сайт. Внешние сайты могут содержать вирусы и прочую гадость." + "<ul>" + "<li style='font-weight: bold;'>" + "Никогда не вводи свой игровой пароль на внешних сайтах." + "</li>" + "<li>" + "Иди по ссылке только если ты доверяешь игроку, приславшему тебе эту ссылку." + "</li>" + "</ul>" +
            "Пойти по ссылке:" + "<br />" + "<div style='text-align:center;margin:15px 0 0;font-size:16pt;'><b></b></div>" + '</div>');
        $('b', $content).text(url);
        new west.gui.Dialog("Внешняя ссылка", "", west.gui.Dialog.SYS_WARNING).setText($content).addButton("Следовать", function () {
            window.open(url, '_blank');
        }).addButton("cancel").show();
    }
}
function sextext(maleText, femaleText, gender) {
    gender = gender.toLowerCase();
    if (gender == 'male' || gender == 'man')return maleText; else return femaleText;
}
function wopen(obj) {
    obj.target = '_blank';
}
function ollisEgg() {
    return "deltaover 896'##\"ok\"'";
}
function get_throbber(withoutText) {
    return $('<div class="throbber">' + '<img src="https://westrus.innogamescdn.com/images/throbber2.gif" alt="' + 'Идёт загрузка'.escapeHTML() + '" />' +
        (withoutText ? '' : 'Идёт загрузка') + '</div>');
}
function isDefined(variable) {
    if (typeof variable == 'undefined' || variable == null) {
        return false;
    } else {
        return true;
    }
}
function countObjectKeys(obj) {
    var count = 0;
    if (Object && Object.keys) {
        count = Object.keys(obj).length;
    } else {
        jQuery.each(obj, function () {
            count++;
        });
    }
    return count;
}
function clone(src) {
    if (src === undefined || typeof src !== 'object' || src === null) {
        return src;
    }
    if (Array.isArray(src)) {
        return src.slice();
    }
    var trg = {};
    for (var i in src) {
        if (!src.hasOwnProperty(i))continue;
        trg[i] = clone(src[i]);
    }
    return trg;
}
function jq2Html(jqObject) {
    if (!$(jqObject))return jqObject;
    return $('<span/>').append(jqObject).html();
}
function littleGauss(n) {
    return (n * (n + 1)) / 2;
}
function get_server_date(delta) {
    return new Date(new Date().getTime() + Game.serverTimeDifference - Game.clientTimedrift + (delta === undefined ? 0 : delta));
}
function get_server_date_string(noday, timeinfo, isabsolute) {
    var srvTimer = isabsolute ? new Date(timeinfo) : get_server_date(timeinfo);
    var pad = function (x) {
        return x < 10 ? '0' + x : x;
    }
    var srvDay = pad(srvTimer.getDate());
    var srvMonth = pad(srvTimer.getMonth() + 1);
    var srvYear = srvTimer.getFullYear();
    var srvHours = pad(srvTimer.getHours());
    var srvMinutes = pad(srvTimer.getMinutes());
    var srvSeconds = pad(srvTimer.getSeconds());
    var srvDateText = srvHours + ':' + srvMinutes + ':' + srvSeconds;
    if (noday)return srvDateText;
    return srvDateText + ' ' + srvDay + '/' + srvMonth + '/' + srvYear;
}
function handleOpenWindowRequest(w) {
    var windows = [];
    var m = window.location.search.match(/igw=([a-z.]+)/);
    var s = window.location.search.substring(1).split('&');
    if (s.length) {
        var c = {};
        for (var i = 0; i < s.length; i++) {
            var parts = s[i].split('=');
            c[unescape(parts[0])] = unescape(parts[1]);
        }
    }
    if (m)windows = windows.concat(m[1].split(/\./));
    if (w)windows = windows.concat(w);
    if (!windows.length)return;
    windows.each(function (m) {
        switch (m) {
            case"report":
                if (c['report_id'] && c['hash'])
                    ReportWindow.open(c['report_id'], c['hash']); else
                    MessagesWindow.open('report');
                break;
            case"telegram":
                if (c['telegramid'])
                    MessagesWindow.Telegram.open(c['telegramid']); else
                    MessagesWindow.open();
                break;
            case"fort":
                if (c['id'] && c['x'] && c['y'])
                    FortWindow.open(c['id'], c['x'], c['y']); else
                    FortOverviewWindow.open();
                break;
            case"forum":
                ForumWindow.open();
                break;
            case"fortoverview":
                FortOverviewWindow.open();
                break;
            case'shop':
                west.window.shop.open('igw');
                break;
            case'inventory':
                Wear.open();
                break;
            case'duel':
                DuelsWindow.open();
                break;
            case'character':
                CharacterWindow.open();
                break;
            case'friend':
                FriendslistWindow.open();
                break;
            case'saloon':
                QuestSaloonWindow.open();
                break;
            case'adventures':
                MultiplayerWindow.open();
                break;
            case'multiplayer':
                west.window.multiplayer.open();
                break;
        }
    });
}
(function () {
    var fns = {};
    window.batch = function (fn, timeout, identifier) {
        var key, timeoutReference;
        timeout = timeout || 5000;
        timeoutReference = window.setTimeout(function () {
            fn();
            delete fns[key];
        }, timeout);
        key = identifier || ('batch-' + timeoutReference);
        if (fns[key]) {
            window.clearTimeout(fns[key]);
        }
        fns[key] = timeoutReference;
        return key;
    };
})();
function br2nl(str) {
    return str.replace(/<br\s*\/?>/mg, "\n");
}
function nl2br(str) {
    return (str + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1<br />$2');
}
(function () {
    function g(o) {
        console.log("$f.fireEvent", [].slice.call(o))
    }

    function k(q) {
        if (!q || typeof q != "object") {
            return q
        }
        var o = new q.constructor();
        for (var p in q) {
            if (q.hasOwnProperty(p)) {
                o[p] = k(q[p])
            }
        }
        return o
    }

    function m(t, q) {
        if (!t) {
            return
        }
        var o, p = 0, r = t.length;
        if (r === undefined) {
            for (o in t) {
                if (q.call(t[o], o, t[o]) === false) {
                    break
                }
            }
        } else {
            for (var s = t[0]; p < r && q.call(s, p, s) !== false; s = t[++p]) {
            }
        }
        return t
    }

    function c(o) {
        return document.getElementById(o)
    }

    function i(q, p, o) {
        if (typeof p != "object") {
            return q
        }
        if (q && p) {
            m(p, function (r, s) {
                if (!o || typeof s != "function") {
                    q[r] = s
                }
            })
        }
        return q
    }

    function n(s) {
        var q = s.indexOf(".");
        if (q != -1) {
            var p = s.slice(0, q) || "*";
            var o = s.slice(q + 1, s.length);
            var r = [];
            m(document.getElementsByTagName(p), function () {
                if (this.className && this.className.indexOf(o) != -1) {
                    r.push(this)
                }
            });
            return r
        }
    }

    function f(o) {
        o = o || window.event;
        if (o.preventDefault) {
            o.stopPropagation();
            o.preventDefault()
        } else {
            o.returnValue = false;
            o.cancelBubble = true
        }
        return false
    }

    function j(q, o, p) {
        q[o] = q[o] || [];
        q[o].push(p)
    }

    function e() {
        return "_" + ("" + Math.random()).slice(2, 10)
    }

    var h = function (t, r, s) {
        var q = this, p = {}, u = {};
        q.index = r;
        if (typeof t == "string") {
            t = {url: t}
        }
        i(this, t, true);
        m(("Begin*,Start,Pause*,Resume*,Seek*,Stop*,Finish*,LastSecond,Update,BufferFull,BufferEmpty,BufferStop").split(","), function () {
            var v = "on" + this;
            if (v.indexOf("*") != -1) {
                v = v.slice(0, v.length - 1);
                var w = "onBefore" + v.slice(2);
                q[w] = function (x) {
                    j(u, w, x);
                    return q
                }
            }
            q[v] = function (x) {
                j(u, v, x);
                return q
            };
            if (r == -1) {
                if (q[w]) {
                    s[w] = q[w]
                }
                if (q[v]) {
                    s[v] = q[v]
                }
            }
        });
        i(this, {
            onCuepoint: function (x, w) {
                if (arguments.length == 1) {
                    p.embedded = [null, x];
                    return q
                }
                if (typeof x == "number") {
                    x = [x]
                }
                var v = e();
                p[v] = [x, w];
                if (s.isLoaded()) {
                    s._api().fp_addCuepoints(x, r, v)
                }
                return q
            }, update: function (w) {
                i(q, w);
                if (s.isLoaded()) {
                    s._api().fp_updateClip(w, r)
                }
                var v = s.getConfig();
                var x = (r == -1) ? v.clip : v.playlist[r];
                i(x, w, true)
            }, _fireEvent: function (v, y, w, A) {
                if (v == "onLoad") {
                    m(p, function (B, C) {
                        if (C[0]) {
                            s._api().fp_addCuepoints(C[0], r, B)
                        }
                    });
                    return false
                }
                A = A || q;
                if (v == "onCuepoint") {
                    var z = p[y];
                    if (z) {
                        return z[1].call(s, A, w)
                    }
                }
                if (y && "onBeforeBegin,onMetaData,onStart,onUpdate,onResume".indexOf(v) != -1) {
                    i(A, y);
                    if (y.metaData) {
                        if (!A.duration) {
                            A.duration = y.metaData.duration
                        } else {
                            A.fullDuration = y.metaData.duration
                        }
                    }
                }
                var x = true;
                m(u[v], function () {
                    x = this.call(s, A, y, w)
                });
                return x
            }
        });
        if (t.onCuepoint) {
            var o = t.onCuepoint;
            q.onCuepoint.apply(q, typeof o == "function" ? [o] : o);
            delete t.onCuepoint
        }
        m(t, function (v, w) {
            if (typeof w == "function") {
                j(u, v, w);
                delete t[v]
            }
        });
        if (r == -1) {
            s.onCuepoint = this.onCuepoint
        }
    };
    var l = function (p, r, q, t) {
        var o = this, s = {}, u = false;
        if (t) {
            i(s, t)
        }
        m(r, function (v, w) {
            if (typeof w == "function") {
                s[v] = w;
                delete r[v]
            }
        });
        i(this, {
            animate: function (y, z, x) {
                if (!y) {
                    return o
                }
                if (typeof z == "function") {
                    x = z;
                    z = 500
                }
                if (typeof y == "string") {
                    var w = y;
                    y = {};
                    y[w] = z;
                    z = 500
                }
                if (x) {
                    var v = e();
                    s[v] = x
                }
                if (z === undefined) {
                    z = 500
                }
                r = q._api().fp_animate(p, y, z, v);
                return o
            }, css: function (w, x) {
                if (x !== undefined) {
                    var v = {};
                    v[w] = x;
                    w = v
                }
                r = q._api().fp_css(p, w);
                i(o, r);
                return o
            }, show: function () {
                this.display = "block";
                q._api().fp_showPlugin(p);
                return o
            }, hide: function () {
                this.display = "none";
                q._api().fp_hidePlugin(p);
                return o
            }, toggle: function () {
                this.display = q._api().fp_togglePlugin(p);
                return o
            }, fadeTo: function (y, x, w) {
                if (typeof x == "function") {
                    w = x;
                    x = 500
                }
                if (w) {
                    var v = e();
                    s[v] = w
                }
                this.display = q._api().fp_fadeTo(p, y, x, v);
                this.opacity = y;
                return o
            }, fadeIn: function (w, v) {
                return o.fadeTo(1, w, v)
            }, fadeOut: function (w, v) {
                return o.fadeTo(0, w, v)
            }, getName: function () {
                return p
            }, getPlayer: function () {
                return q
            }, _fireEvent: function (w, v, x) {
                if (w == "onUpdate") {
                    var z = q._api().fp_getPlugin(p);
                    if (!z) {
                        return
                    }
                    i(o, z);
                    delete o.methods;
                    if (!u) {
                        m(z.methods, function () {
                            var B = "" + this;
                            o[B] = function () {
                                var C = [].slice.call(arguments);
                                var D = q._api().fp_invoke(p, B, C);
                                return D === "undefined" || D === undefined ? o : D
                            }
                        });
                        u = true
                    }
                }
                var A = s[w];
                if (A) {
                    var y = A.apply(o, v);
                    if (w.slice(0, 1) == "_") {
                        delete s[w]
                    }
                    return y
                }
                return o
            }
        })
    };

    function b(q, G, t) {
        var w = this, v = null, D = false, u, s, F = [], y = {}, x = {}, E, r, p, C, o, A;
        i(w, {
            id: function () {
                return E
            }, isLoaded: function () {
                return (v !== null && v.fp_play !== undefined && !D)
            }, getParent: function () {
                return q
            }, hide: function (H) {
                if (H) {
                    q.style.height = "0px"
                }
                if (w.isLoaded()) {
                    v.style.height = "0px"
                }
                return w
            }, show: function () {
                q.style.height = A + "px";
                if (w.isLoaded()) {
                    v.style.height = o + "px"
                }
                return w
            }, isHidden: function () {
                return w.isLoaded() && parseInt(v.style.height, 10) === 0
            }, load: function (J) {
                if (!w.isLoaded() && w._fireEvent("onBeforeLoad") !== false) {
                    var H = function () {
                        u = q.innerHTML;
                        if (u && !flashembed.isSupported(G.version)) {
                            q.innerHTML = ""
                        }
                        if (J) {
                            J.cached = true;
                            j(x, "onLoad", J)
                        }
                        flashembed(q, G, {config: t})
                    };
                    var I = 0;
                    m(a, function () {
                        this.unload(function (K) {
                            if (++I == a.length) {
                                H()
                            }
                        })
                    })
                }
                return w
            }, unload: function (J) {
                if (this.isFullscreen() && /WebKit/i.test(navigator.userAgent)) {
                    if (J) {
                        J(false)
                    }
                    return w
                }
                if (u.replace(/\s/g, "") !== "") {
                    if (w._fireEvent("onBeforeUnload") === false) {
                        if (J) {
                            J(false)
                        }
                        return w
                    }
                    D = true;
                    try {
                        if (v) {
                            v.fp_close();
                            w._fireEvent("onUnload")
                        }
                    } catch (H) {
                    }
                    var I = function () {
                        v = null;
                        q.innerHTML = u;
                        D = false;
                        if (J) {
                            J(true)
                        }
                    };
                    setTimeout(I, 50)
                } else {
                    if (J) {
                        J(false)
                    }
                }
                return w
            }, getClip: function (H) {
                if (H === undefined) {
                    H = C
                }
                return F[H]
            }, getCommonClip: function () {
                return s
            }, getPlaylist: function () {
                return F
            }, getPlugin: function (H) {
                var J = y[H];
                if (!J && w.isLoaded()) {
                    var I = w._api().fp_getPlugin(H);
                    if (I) {
                        J = new l(H, I, w);
                        y[H] = J
                    }
                }
                return J
            }, getScreen: function () {
                return w.getPlugin("screen")
            }, getControls: function () {
                return w.getPlugin("controls")._fireEvent("onUpdate")
            }, getLogo: function () {
                try {
                    return w.getPlugin("logo")._fireEvent("onUpdate")
                } catch (H) {
                }
            }, getPlay: function () {
                return w.getPlugin("play")._fireEvent("onUpdate")
            }, getConfig: function (H) {
                return H ? k(t) : t
            }, getFlashParams: function () {
                return G
            }, loadPlugin: function (K, J, M, L) {
                if (typeof M == "function") {
                    L = M;
                    M = {}
                }
                var I = L ? e() : "_";
                w._api().fp_loadPlugin(K, J, M, I);
                var H = {};
                H[I] = L;
                var N = new l(K, null, w, H);
                y[K] = N;
                return N
            }, getState: function () {
                return w.isLoaded() ? v.fp_getState() : -1
            }, play: function (I, H) {
                var J = function () {
                    if (I !== undefined) {
                        w._api().fp_play(I, H)
                    } else {
                        w._api().fp_play()
                    }
                };
                if (w.isLoaded()) {
                    J()
                } else {
                    if (D) {
                        setTimeout(function () {
                            w.play(I, H)
                        }, 50)
                    } else {
                        w.load(function () {
                            J()
                        })
                    }
                }
                return w
            }, getVersion: function () {
                var I = "flowplayer.js 3.2.6";
                if (w.isLoaded()) {
                    var H = v.fp_getVersion();
                    H.push(I);
                    return H
                }
                return I
            }, _api: function () {
                if (!w.isLoaded()) {
                    throw"Flowplayer " + w.id() + " not loaded when calling an API method"
                }
                return v
            }, setClip: function (H) {
                w.setPlaylist([H]);
                return w
            }, getIndex: function () {
                return p
            }, _swfHeight: function () {
                return v.clientHeight
            }
        });
        m(("Click*,Load*,Unload*,Keypress*,Volume*,Mute*,Unmute*,PlaylistReplace,ClipAdd,Fullscreen*,FullscreenExit,Error,MouseOver,MouseOut").split(","), function () {
            var H = "on" + this;
            if (H.indexOf("*") != -1) {
                H = H.slice(0, H.length - 1);
                var I = "onBefore" + H.slice(2);
                w[I] = function (J) {
                    j(x, I, J);
                    return w
                }
            }
            w[H] = function (J) {
                j(x, H, J);
                return w
            }
        });
        m(("pause,resume,mute,unmute,stop,toggle,seek,getStatus,getVolume,setVolume,getTime,isPaused,isPlaying,startBuffering,stopBuffering,isFullscreen,toggleFullscreen,reset,close,setPlaylist,addClip,playFeed,setKeyboardShortcutsEnabled,isKeyboardShortcutsEnabled").split(","), function () {
            var H = this;
            w[H] = function (J, I) {
                if (!w.isLoaded()) {
                    return w
                }
                var K = null;
                if (J !== undefined && I !== undefined) {
                    K = v["fp_" + H](J, I)
                } else {
                    K = (J === undefined) ? v["fp_" + H]() : v["fp_" + H](J)
                }
                return K === "undefined" || K === undefined ? w : K
            }
        });
        w._fireEvent = function (Q) {
            if (typeof Q == "string") {
                Q = [Q]
            }
            var R = Q[0], O = Q[1], M = Q[2], L = Q[3], K = 0;
            if (t.debug) {
                g(Q)
            }
            if (!w.isLoaded() && R == "onLoad" && O == "player") {
                v = v || c(r);
                o = w._swfHeight();
                m(F, function () {
                    this._fireEvent("onLoad")
                });
                m(y, function (S, T) {
                    T._fireEvent("onUpdate")
                });
                s._fireEvent("onLoad")
            }
            if (R == "onLoad" && O != "player") {
                return
            }
            if (R == "onError") {
                if (typeof O == "string" || (typeof O == "number" && typeof M == "number")) {
                    O = M;
                    M = L
                }
            }
            if (R == "onContextMenu") {
                m(t.contextMenu[O], function (S, T) {
                    T.call(w)
                });
                return
            }
            if (R == "onPluginEvent" || R == "onBeforePluginEvent") {
                var H = O.name || O;
                var I = y[H];
                if (I) {
                    I._fireEvent("onUpdate", O);
                    return I._fireEvent(M, Q.slice(3))
                }
                return
            }
            if (R == "onPlaylistReplace") {
                F = [];
                var N = 0;
                m(O, function () {
                    F.push(new h(this, N++, w))
                })
            }
            if (R == "onClipAdd") {
                if (O.isInStream) {
                    return
                }
                O = new h(O, M, w);
                F.splice(M, 0, O);
                for (K = M + 1; K < F.length; K++) {
                    F[K].index++
                }
            }
            var P = true;
            if (typeof O == "number" && O < F.length) {
                C = O;
                var J = F[O];
                if (J) {
                    P = J._fireEvent(R, M, L)
                }
                if (!J || P !== false) {
                    P = s._fireEvent(R, M, L, J)
                }
            }
            m(x[R], function () {
                P = this.call(w, O, M);
                if (this.cached) {
                    x[R].splice(K, 1)
                }
                if (P === false) {
                    return false
                }
                K++
            });
            return P
        };
        function B() {
            if ($f(q)) {
                $f(q).getParent().innerHTML = "";
                p = $f(q).getIndex();
                a[p] = w
            } else {
                a.push(w);
                p = a.length - 1
            }
            A = parseInt(q.style.height, 10) || q.clientHeight;
            E = q.id || "fp" + e();
            r = G.id || E + "_api";
            G.id = r;
            t.playerId = E;
            if (typeof t == "string") {
                t = {clip: {url: t}}
            }
            if (typeof t.clip == "string") {
                t.clip = {url: t.clip}
            }
            t.clip = t.clip || {};
            if (q.getAttribute("href", 2) && !t.clip.url) {
                t.clip.url = q.getAttribute("href", 2)
            }
            s = new h(t.clip, -1, w);
            t.playlist = t.playlist || [t.clip];
            var I = 0;
            m(t.playlist, function () {
                var K = this;
                if (typeof K == "object" && K.length) {
                    K = {url: "" + K}
                }
                m(t.clip, function (L, M) {
                    if (M !== undefined && K[L] === undefined && typeof M != "function") {
                        K[L] = M
                    }
                });
                t.playlist[I] = K;
                K = new h(K, I, w);
                F.push(K);
                I++
            });
            m(t, function (K, L) {
                if (typeof L == "function") {
                    if (s[K]) {
                        s[K](L)
                    } else {
                        j(x, K, L)
                    }
                    delete t[K]
                }
            });
            m(t.plugins, function (K, L) {
                if (L) {
                    y[K] = new l(K, L, w)
                }
            });
            if (!t.plugins || t.plugins.controls === undefined) {
                y.controls = new l("controls", null, w)
            }
            y.canvas = new l("canvas", null, w);
            u = q.innerHTML;
            function J(L) {
                var K = w.hasiPadSupport && w.hasiPadSupport();
                if (/iPad|iPhone|iPod/i.test(navigator.userAgent) && !/.flv$/i.test(F[0].url) && !K) {
                    return true
                }
                if (!w.isLoaded() && w._fireEvent("onBeforeClick") !== false) {
                    w.load()
                }
                return f(L)
            }

            function H() {
                if (u.replace(/\s/g, "") !== "") {
                    if (q.addEventListener) {
                        q.addEventListener("click", J, false)
                    } else {
                        if (q.attachEvent) {
                            q.attachEvent("onclick", J)
                        }
                    }
                } else {
                    if (q.addEventListener) {
                        q.addEventListener("click", f, false)
                    }
                    w.load()
                }
            }

            setTimeout(H, 0)
        }

        if (typeof q == "string") {
            var z = c(q);
            if (!z) {
                throw"Flowplayer cannot access element: " + q
            }
            q = z;
            B()
        } else {
            B()
        }
    }

    var a = [];

    function d(o) {
        this.length = o.length;
        this.each = function (p) {
            m(o, p)
        };
        this.size = function () {
            return o.length
        }
    }

    window.flowplayer = window.$f = function () {
        var p = null;
        var o = arguments[0];
        if (!arguments.length) {
            m(a, function () {
                if (this.isLoaded()) {
                    p = this;
                    return false
                }
            });
            return p || a[0]
        }
        if (arguments.length == 1) {
            if (typeof o == "number") {
                return a[o]
            } else {
                if (o == "*") {
                    return new d(a)
                }
                m(a, function () {
                    if (this.id() == o.id || this.id() == o || this.getParent() == o) {
                        p = this;
                        return false
                    }
                });
                return p
            }
        }
        if (arguments.length > 1) {
            var t = arguments[1], q = (arguments.length == 3) ? arguments[2] : {};
            if (typeof t == "string") {
                t = {src: t}
            }
            t = i({
                bgcolor: "#000000",
                version: [9, 0],
                expressInstall: "http://static.flowplayer.org/swf/expressinstall.swf",
                cachebusting: false
            }, t);
            if (typeof o == "string") {
                if (o.indexOf(".") != -1) {
                    var s = [];
                    m(n(o), function () {
                        s.push(new b(this, k(t), k(q)))
                    });
                    return new d(s)
                } else {
                    var r = c(o);
                    return new b(r !== null ? r : o, t, q)
                }
            } else {
                if (o) {
                    return new b(o, t, q)
                }
            }
        }
        return null
    };
    i(window.$f, {
        fireEvent: function () {
            var o = [].slice.call(arguments);
            var q = $f(o[0]);
            return q ? q._fireEvent(o.slice(1)) : null
        }, addPlugin: function (o, p) {
            b.prototype[o] = p;
            return $f
        }, each: m, extend: i
    });
    if (typeof jQuery == "function") {
        jQuery.fn.flowplayer = function (q, p) {
            if (!arguments.length || typeof arguments[0] == "number") {
                var o = [];
                this.each(function () {
                    var r = $f(this);
                    if (r) {
                        o.push(r)
                    }
                });
                return arguments.length ? o[arguments[0]] : new d(o)
            }
            return this.each(function () {
                $f(this, k(q), p ? k(p) : {})
            })
        }
    }
})();
(function () {
    var e = typeof jQuery == "function";
    var i = {
        width: "100%",
        height: "100%",
        allowfullscreen: true,
        allowscriptaccess: "always",
        quality: "high",
        version: null,
        onFail: null,
        expressInstall: null,
        w3c: false,
        cachebusting: false
    };
    if (e) {
        jQuery.tools = jQuery.tools || {};
        jQuery.tools.flashembed = {version: "1.0.4", conf: i}
    }
    function j() {
        if (c.done) {
            return false
        }
        var l = document;
        if (l && l.getElementsByTagName && l.getElementById && l.body) {
            clearInterval(c.timer);
            c.timer = null;
            for (var k = 0; k < c.ready.length; k++) {
                c.ready[k].call()
            }
            c.ready = null;
            c.done = true
        }
    }

    var c = e ? jQuery : function (k) {
        if (c.done) {
            return k()
        }
        if (c.timer) {
            c.ready.push(k)
        } else {
            c.ready = [k];
            c.timer = setInterval(j, 13)
        }
    };

    function f(l, k) {
        if (k) {
            for (key in k) {
                if (k.hasOwnProperty(key)) {
                    l[key] = k[key]
                }
            }
        }
        return l
    }

    function g(k) {
        switch (h(k)) {
            case"string":
                k = k.replace(new RegExp('(["\\\\])', "g"), "\\$1");
                k = k.replace(/^\s?(\d+)%/, "$1pct");
                return '"' + k + '"';
            case"array":
                return "[" + b(k, function (n) {
                        return g(n)
                    }).join(",") + "]";
            case"function":
                return '"function()"';
            case"object":
                var l = [];
                for (var m in k) {
                    if (k.hasOwnProperty(m)) {
                        l.push('"' + m + '":' + g(k[m]))
                    }
                }
                return "{" + l.join(",") + "}"
        }
        return String(k).replace(/\s/g, " ").replace(/\'/g, '"')
    }

    function h(l) {
        if (l === null || l === undefined) {
            return false
        }
        var k = typeof l;
        return (k == "object" && l.push) ? "array" : k
    }

    if (window.attachEvent) {
        window.attachEvent("onbeforeunload", function () {
            __flash_unloadHandler = function () {
            };
            __flash_savedUnloadHandler = function () {
            }
        })
    }
    function b(k, n) {
        var m = [];
        for (var l in k) {
            if (k.hasOwnProperty(l)) {
                m[l] = n(k[l])
            }
        }
        return m
    }

    function a(r, t) {
        var q = f({}, r);
        var s = document.all;
        var n = '<object width="' + q.width + '" height="' + q.height + '"';
        if (s && !q.id) {
            q.id = "_" + ("" + Math.random()).substring(9)
        }
        if (q.id) {
            n += ' id="' + q.id + '"'
        }
        if (q.cachebusting) {
            q.src += ((q.src.indexOf("?") != -1 ? "&" : "?") + Math.random())
        }
        if (q.w3c || !s) {
            n += ' data="' + q.src + '" type="application/x-shockwave-flash"'
        } else {
            n += ' classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'
        }
        n += ">";
        if (q.w3c || s) {
            n += '<param name="movie" value="' + q.src + '" />'
        }
        q.width = q.height = q.id = q.w3c = q.src = null;
        for (var l in q) {
            if (q[l] !== null) {
                n += '<param name="' + l + '" value="' + q[l] + '" />'
            }
        }
        var o = "";
        if (t) {
            for (var m in t) {
                if (t[m] !== null) {
                    o += m + "=" + (typeof t[m] == "object" ? g(t[m]) : t[m]) + "&"
                }
            }
            o = o.substring(0, o.length - 1);
            n += '<param name="flashvars" value=\'' + o + "' />"
        }
        n += "</object>";
        return n
    }

    function d(m, p, l) {
        var k = flashembed.getVersion();
        f(this, {
            getContainer: function () {
                return m
            }, getConf: function () {
                return p
            }, getVersion: function () {
                return k
            }, getFlashvars: function () {
                return l
            }, getApi: function () {
                return m.firstChild
            }, getHTML: function () {
                return a(p, l)
            }
        });
        var q = p.version;
        var r = p.expressInstall;
        var o = !q || flashembed.isSupported(q);
        if (o) {
            p.onFail = p.version = p.expressInstall = null;
            m.innerHTML = a(p, l)
        } else {
            if (q && r && flashembed.isSupported([6, 65])) {
                f(p, {src: r});
                l = {MMredirectURL: location.href, MMplayerType: "PlugIn", MMdoctitle: document.title};
                m.innerHTML = a(p, l)
            } else {
                if (m.innerHTML.replace(/\s/g, "") !== "") {
                } else {
                    m.innerHTML = "<h2>Flash version " + q + " or greater is required</h2><h3>" + (k[0] > 0 ? "Your version is " + k : "You have no flash plugin installed") + "</h3>" + (m.tagName == "A" ? "<p>Click here to download latest version</p>" : "<p>Download latest version from <a href='http://www.adobe.com/go/getflashplayer'>here</a></p>");
                    if (m.tagName == "A") {
                        m.onclick = function () {
                            location.href = "http://www.adobe.com/go/getflashplayer"
                        }
                    }
                }
            }
        }
        if (!o && p.onFail) {
            var n = p.onFail.call(this);
            if (typeof n == "string") {
                m.innerHTML = n
            }
        }
        if (document.all) {
            window[p.id] = document.getElementById(p.id)
        }
    }

    window.flashembed = function (l, m, k) {
        if (typeof l == "string") {
            var n = document.getElementById(l);
            if (n) {
                l = n
            } else {
                c(function () {
                    flashembed(l, m, k)
                });
                return
            }
        }
        if (!l) {
            return
        }
        if (typeof m == "string") {
            m = {src: m}
        }
        var o = f({}, i);
        f(o, m);
        return new d(l, o, k)
    };
    f(window.flashembed, {
        getVersion: function () {
            var m = [0, 0];
            if (navigator.plugins && typeof navigator.plugins["Shockwave Flash"] == "object") {
                var l = navigator.plugins["Shockwave Flash"].description;
                if (typeof l != "undefined") {
                    l = l.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
                    var n = parseInt(l.replace(/^(.*)\..*$/, "$1"), 10);
                    var r = /r/.test(l) ? parseInt(l.replace(/^.*r(.*)$/, "$1"), 10) : 0;
                    m = [n, r]
                }
            } else {
                if (window.ActiveXObject) {
                    try {
                        var p = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7")
                    } catch (q) {
                        try {
                            p = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
                            m = [6, 0];
                            p.AllowScriptAccess = "always"
                        } catch (k) {
                            if (m[0] == 6) {
                                return m
                            }
                        }
                        try {
                            p = new ActiveXObject("ShockwaveFlash.ShockwaveFlash")
                        } catch (o) {
                        }
                    }
                    if (typeof p == "object") {
                        l = p.GetVariable("$version");
                        if (typeof l != "undefined") {
                            l = l.replace(/^\S+\s+(.*)$/, "$1").split(",");
                            m = [parseInt(l[0], 10), parseInt(l[2], 10)]
                        }
                    }
                }
            }
            return m
        }, isSupported: function (k) {
            var m = flashembed.getVersion();
            var l = (m[0] > k[0]) || (m[0] == k[0] && m[1] >= k[1]);
            return l
        }, domReady: c, asString: g, getHTML: a
    });
    if (e) {
        jQuery.fn.flashembed = function (l, k) {
            var m = null;
            this.each(function () {
                m = flashembed(this, l, k)
            });
            return l.api === false ? this : m
        }
    }
})();
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
};
function getRandomSequence(min, max) {
    var tmp = [];
    var seq = [];
    for (var i = min; i <= max; ++i)tmp.push(i);
    do {
        seq.push(tmp.splice(getRandomInt(0, tmp.length - 1), 1)[0]);
    } while (0 < tmp.length);
    return seq;
};
function getRandomString(length) {
    return new Array(length).join().replace(/(.|$)/g, function () {
        return ((Math.random() * 26) | 0 + 10).toString(36);
    });
}
function buildDateObject(timeStr, isServerTime) {
    var regEx, match, d = new Date(0), today = new Date();
    regEx = /^(?:(3[01]|[012]?[0-9]|\*)\.(?:(1[012]|0?[1-9]|\*)\.((?:19|20)?\d\d|\*)))?(?: ?(2[0-3]|[01]?\d|\*)\:([0-5]?\d|\*)(?:\:([0-5]?\d|\*))?)?$/;
    if (match = timeStr.match(regEx)) {
        d.setMilliseconds(0);
        d.setSeconds(match[6] !== undefined ? (match[6] == '*' ? today.getSeconds() : match[6]) : 0);
        d.setMinutes(match[5] !== undefined ? (match[5] == '*' ? today.getMinutes() : match[5]) : 0);
        d.setHours(match[4] !== undefined ? (match[4] == '*' ? today.getHours() : match[4]) : 0);
        d.setDate(match[1] !== undefined ? (match[1] == '*' ? today.getDate() : parseInt(match[1], 10)) : today.getDate());
        d.setMonth(match[2] !== undefined ? (match[2] == '*' ? today.getMonth() : parseInt(match[2], 10) - 1) : today.getMonth());
        d.setFullYear(match[3] !== undefined ? (match[3] == '*' ? today.getFullYear() : parseInt(match[3], 10)) : today.getFullYear());
    }
    if (isServerTime) {
        d = new Date(d - Game.serverTimeDifference);
    }
    return d;
};
function buildTimestamp(timeStr, isServerTime) {
    return buildDateObject(timeStr, isServerTime).getTime();
};
west.namespace('west.common', {
    forEach: function (obj, cb, context, include) {
        var value;
        for (var i in obj) {
            if (!include && !obj.hasOwnProperty(i))continue;
            value = cb.call(context, obj[i], i);
            if (false === value) {
                break;
            }
        }
    }, some: function (obj, cb, context, include) {
        for (var i in obj) {
            if (!include && !obj.hasOwnProperty(i))continue;
            if (cb.call(context, obj[i], i))return true;
        }
        return false;
    }, swap: function (a, b) {
        var tmp;
        this.forEach(a, function (val, key) {
            tmp = b[key];
            b[key] = val;
            a[key] = tmp;
        });
    }, createObjKey: function (obj, key, val) {
        if (undefined === obj[key])
            obj[key] = val;
    }, round: function (number, numberOfDecimals) {
        var aux = Math.pow(10, numberOfDecimals);
        return Math.round(number * aux) / aux;
    }, floor: function (number, numberOfDecimals) {
        var aux = Math.pow(10, numberOfDecimals);
        return Math.floor(number * aux) / aux;
    }, ceil: function (number, numberOfDecimals) {
        var aux = Math.pow(10, numberOfDecimals);
        return Math.ceil(number * aux) / aux;
    }, countTo: function ($el, to, from, cb) {
        from = from || "" !== $el.text() && $el.text() || 0, cb = 'function' === typeof cb ? cb : function (val) {
            $el.text(Math.ceil(val));
        };
        jQuery({val: from}).animate({val: to}, {
            duration: 1000, easing: 'swing', step: function () {
                cb(this.val);
            }, complete: function () {
                cb(to);
            }
        });
    }, singularize: function (str) {
        if ('s' === str.slice(-1)) {
            str = str.slice(0, -1);
        }
        return str;
    }, capitalize: function (str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }, pushIfUnique: function (array, item) {
        if (!~array.indexOf(item)) {
            array.push(item);
        }
        return array;
    }, unshiftIfUnique: function (array, item) {
        if (!~array.indexOf(item)) {
            array.unshift(item);
        }
        return array;
    }, removeFromArray: function (array, item) {
        var position = array.indexOf(item);
        if (!!~position) {
            array.splice(position, 1);
        }
        return array;
    }
});
function readCookie(name) {
    var nameEQ = escape(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ')
            c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0)
            return unescape(c.substring(nameEQ.length, c.length));
    }
    return null;
}

Date.prototype.toTime = function () {
    return [this.getHours().zerofill(2), ":", this.getMinutes().zerofill(2), ":", this.getSeconds().zerofill(2)].join("");
};
Date.prototype.toDateString = function () {
    return [this.getDate().zerofill(2), "-", (parseInt(this.getMonth()) + 1).zerofill(2), "-", this.getFullYear()].join("");
};
Date.prototype.toDateTimeString = function () {
    return [this.getDate().zerofill(2), '-', (parseInt(this.getMonth()) + 1).zerofill(2), '-', this.getFullYear() + ' ' +
    this.getHours().zerofill(2), ':', this.getMinutes().zerofill(2), ':', this.getSeconds().zerofill(2)].join('');
};
Date.prototype.toDateTimeStringNice = function () {
    var timestamp = this.getTime();
    var withinSameDay = function (timestamp) {
        var now = new Date(), check_date = new Date(timestamp);
        return check_date.getDate() === now.getDate() && check_date.getMonth() === now.getMonth() && check_date.getFullYear() === now.getFullYear();
    };
    if (withinSameDay(timestamp)) {
        return s('сегодня в %1', this.toTime());
    }
    if (withinSameDay(timestamp - 86400000)) {
        return s('завтра в %1', this.toTime());
    }
    return s('%1 в %2', this.toDateString(), this.toTime());
};
Date.prototype.locale = {dayNames: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота']};
Date.prototype.getLocalDay = function () {
    return this.locale.dayNames[this.getDay()];
};
Date.prototype.isWinterTime = function () {
    var y1 = this.getFullYear();
    var y2 = this.getFullYear();
    (this.getMonth() + 1) < 12 ? y1 = this.getFullYear() - 1 : y2 = this.getFullYear() + 1;
    return (this >= Date.parse('Dec 01, ' + y1) && this <= Date.parse('Jan 10, ' + y2));
};
Date.prototype.getWeekdayNo = function () {
    var dayNo = this.getDay();
    return dayNo > 0 ? dayNo - 1 : 6;
};
if (!Date.now) {
    Date.now = function now() {
        return new Date().getTime();
    };
}
function ServerDate() {
    this.date = new Date();
    this.date.setTime(this.date.getTime() - Game.clientTimedrift);
};
ServerDate.prototype.setTime = function (time) {
    return this.date.setTime(time);
};
ServerDate.prototype.getTime = function () {
    return this.date.getTime();
};
if (!Function.prototype.bind) {
    Function.prototype.bind = function () {
        if ("function" !== typeof(this)) {
            return this;
        }
        var args = Array.prototype.slice.call(arguments), new_scope = args.shift(), fn = this, fNOP = function () {
        }, fnBounded = function () {
            fn.apply(this instanceof(fNOP) && new_scope ? this : new_scope, args.concat(Array.prototype.slice.call(arguments)));
        };
        fNOP.prototype = this.prototype;
        fnBounded.prototype = new fNOP();
        return fnBounded;
    };
}
Array.prototype.rar = function (index) {
    var retval = this[index];
    this.splice(index, 1);
};
if (!Array.prototype.forEach) {
    Array.prototype.forEach = function (callback, thisArg) {
        var T, k, O, len;
        if (this === null) {
            throw new TypeError(' this is null or not defined');
        }
        O = Object(this);
        len = O.length >>> 0;
        if ("function" !== typeof callback) {
            throw new TypeError(callback + ' is not a function');
        }
        if (arguments.length > 1) {
            T = thisArg;
        }
        k = 0;
        while (k < len) {
            var kValue;
            if (k in O) {
                kValue = O[k];
                callback.call(T, kValue, k, O);
            }
            k++;
        }
    };
}
Array.prototype.each = Array.prototype.forEach;
if (!Array.prototype.map) {
    Array.prototype.map = function (callback, thisArg) {
        var T, A, k;
        if (this == null) {
            throw new TypeError(' this is null or not defined');
        }
        var O = Object(this), len = O.length >>> 0;
        if (typeof callback !== 'function') {
            throw new TypeError(callback + ' is not a function');
        }
        if (arguments.length > 1) {
            T = thisArg;
        }
        A = new Array(len);
        k = 0;
        while (k < len) {
            var kValue, mappedValue;
            if (k in O) {
                kValue = O[k];
                mappedValue = callback.call(T, kValue, k, O);
                A[k] = mappedValue;
            }
            k++;
        }
        return A;
    };
}
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (elm) {
        var len = this.length, from = Number(arguments[1]) || 0;
        from = from < 0 ? Math.ceil(from) : Math.floor(from);
        if (from < 0)from += len;
        for (; from < len; from++) {
            if (from in this && this[from] === elm)return from;
        }
        return -1;
    };
}
if (!Array.prototype.some) {
    Array.prototype.some = function (fun) {
        'use strict';
        if (this == null) {
            throw new TypeError('Array.prototype.some called on null or undefined');
        }
        if (typeof fun !== 'function') {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;
        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(thisArg, t[i], i, t)) {
                return true;
            }
        }
        return false;
    };
}
Array.prototype.shuffle = function () {
    for (var j, x, i = this.length; i; j = Math.floor(Math.random() * i), x = this[--i], this[i] = this[j], this[j] = x);
    return this;
};
if (!Array.prototype.every) {
    Array.prototype.every = function (callbackfn, thisArg) {
        'use strict';
        var T, k, O, len;
        if (this == null) {
            throw new TypeError('this is null or not defined');
        }
        O = Object(this);
        len = O.length >>> 0;
        if (typeof callbackfn !== 'function') {
            throw new TypeError();
        }
        if (arguments.length > 1) {
            T = thisArg;
        }
        k = 0;
        while (k < len) {
            var kValue;
            if (k in O) {
                kValue = O[k];
                var testResult = callbackfn.call(T, kValue, k, O);
                if (!testResult) {
                    return false;
                }
            }
            k++;
        }
        return true;
    };
}
if (!Array.isArray) {
    Array.isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
    };
}
if (!Array.prototype.filter) {
    Array.prototype.filter = function (fun) {
        'use strict';
        if (this === void 0 || this === null) {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;
        if (typeof fun !== 'function') {
            throw new TypeError();
        }
        var res = [];
        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
        for (var i = 0; i < len; i++) {
            if (i in t) {
                var val = t[i];
                if (fun.call(thisArg, val, i, t)) {
                    res.push(val);
                }
            }
        }
        return res;
    };
}
Number.prototype.zerofill = function (len) {
    if (!isDefined(len)) {
        len = 2;
    }
    var tmp = this + '';
    while (tmp.length < len) {
        tmp = '0' + tmp;
    }
    return tmp;
};
Number.prototype.formatDuration = function () {
    var hours = Math.floor(this / 3600);
    var minutes = Math.floor(this / 60 - hours * 60);
    var seconds = Math.floor(this % 60);
    return hours.zerofill() + ':' + minutes.zerofill() + ':' + seconds.zerofill();
};
Number.prototype.formatDurationBuffWay = function () {
    var days = Math.floor(this / 3600 / 24);
    var hours = Math.floor(this / 3600 - days * 24);
    var minutes = Math.floor(this / 60 - hours * 60);
    var seconds = Math.floor(this % 60);
    return days > 0 ? days + 'д.' + " " + hours + 'ч.' : hours > 0 ? hours + 'ч.' + " " + minutes + 'м.' : minutes > 0 ? minutes + " " + 'м.' : seconds > 0 ? seconds + " " + 'с.' : "";
};
Number.prototype.formatDurationWorkProgress = function () {
    var hours = Math.floor(this / 3600);
    var minutes = Math.floor(this / 60 - hours * 60);
    var seconds = Math.floor(this % 60);
    return hours > 0 ? hours + 'ч.' + " " + minutes + 'м.' : minutes > 10 ? minutes + " " + 'м.' : minutes.zerofill() + ":" + seconds.zerofill();
};
Number.prototype.formatBignum = function () {
    var unit = ['T', 'G', 'M', 'k', ''];
    var out = Math.abs(this);
    while (out > 9999 && unit.length >= 2) {
        out /= 1000;
        unit.pop();
    }
    return Math.floor(out) + unit[unit.length - 1];
};
Number.prototype.timestamp2TimeObject = function () {
    var rest = this
    var formattedTime = {};
    formattedTime['days'] = 0;
    formattedTime['hours'] = 0;
    formattedTime['minutes'] = 0;
    formattedTime['seconds'] = 0;
    var tmpRes = 0;
    if (rest >= 86400) {
        tmpRes = rest / 86400;
        formattedTime['days'] = Math.floor(tmpRes);
        rest = (tmpRes - formattedTime['days']) * 86400;
    }
    if (rest >= 3600) {
        tmpRes = rest / 3600;
        formattedTime['hours'] = Math.floor(tmpRes);
        rest = (tmpRes - formattedTime['hours']) * 3600;
    }
    if (rest >= 60) {
        tmpRes = rest / 60;
        formattedTime['minutes'] = Math.floor(tmpRes);
        rest = (tmpRes - formattedTime['minutes']) * 60;
    }
    formattedTime['seconds'] = Math.floor(rest);
    return formattedTime;
}
Number.prototype.getTime2EndString = function (noch) {
    var l10n = {
        'no_noch': function () {
            return '%1 %2';
        }, 'noch': function (count) {
            return ngettext('ещё %1 %2', new Array('ещё %1 %2', 'ещё %1 %2', 'ещё %1 %2'), count);
        }, 'day': function (count) {
            return ngettext('день', new Array('день', 'дня', 'дней'), count);
        }, 'hour': function (count) {
            return ngettext('час', new Array('час', 'часов', 'часов'), count);
        }, 'minute': function (count) {
            return ngettext('минута', new Array('минута', 'минуты', 'минут'), count);
        }, 'second': function (count) {
            return ngettext('секунда', new Array('секунда', 'секунды', 'секунд'), count);
        }, 'default': 'Время истекло'
    }, txt = l10n.noch, result = this.timestamp2TimeObject();
    if ("undefined" !== typeof noch && !noch) {
        txt = l10n.no_noch;
    }
    if (result.days > 0)
        return s(txt(result.days), result.days, l10n.day(result.days)); else if (result.hours > 0)
        return s(txt(result.hours), result.hours, l10n.hour(result.hours)); else if (result.minutes > 0)
        return s(txt(result.minutes), result.minutes, l10n.minute(result.minutes)); else if (result.seconds > 0)
        return s(txt(result.seconds), result.seconds, l10n.second(result.seconds)); else
        return l10n['default'];
};
Number.prototype.getTimeString4Timestamp = function () {
    var result = this.timestamp2TimeObject();
    if (this <= 0)
        return 'Время истекло';
    var txt = '%1';
    var resString = '';
    if (result.days > 0)
        resString += result.days + ' ' + 'д.' + ', ';
    if (result.hours > 0)
        resString += result.hours + ' ' + 'ч.' + ', ';
    if (result.minutes > 0)
        resString += result.minutes + ' ' + 'м.' + ', ';
    if (result.seconds > 0)
        resString += result.seconds + ' ' + 'с.';
    txt = s(txt, resString);
    return txt;
}
Number.prototype.getTime2EndToken = function (timeOverString) {
    var timestamp = this;
    var result = timestamp.timestamp2TimeObject();
    var txt = [];
    if (result.days > 0)
        txt.push(result.days + 'д.');
    if (result.hours > 0)
        txt.push(result.hours + 'ч.');
    if (result.minutes > 0)
        txt.push(result.minutes + 'м.');
    if (result.seconds > 0)
        txt.push(result.seconds + 'с.');
    if (txt.length == 0)
        return timeOverString ? timeOverString.escapeHTML() : 'Завершены';
    return txt.join(' ');
};
Number.prototype.getTime2EndShort = function (timeOverString) {
    var timestamp = this;
    var result = timestamp.timestamp2TimeObject();
    var txt = [];
    if (result.days > 0) {
        txt.push(result.days + 'д.');
    } else if (result.hours > 1) {
        txt.push(result.hours + 'ч.');
    } else {
        if (result.hours > 0) {
            txt.push(result.hours + 'ч.');
            if (result.minutes > 0) {
                txt.push(result.minutes.zerofill());
            }
        } else {
            if (result.minutes > 0) {
                txt.push(result.minutes + 'м.');
                txt.push(result.seconds.zerofill());
            } else {
                txt.push(result.seconds + 'с.');
            }
        }
    }
    return txt.length > 1 ? txt.join(':') : txt[0];
};
Number.prototype.getFormattedTimeString4Timestamp = function () {
    return new Date(parseInt(this) * 1000).toDateTimeString();
};
Number.prototype.getLocaleFormattedTime4Timestamp = function () {
    return new Date(parseInt(this) * 1000).toLocaleString();
};
String.prototype.shuffle = function () {
    var ls = [], i, sc = [], idx;
    for (i = 0; i < this.length; i += 1)ls[i] = this.charAt(i);
    for (i = 0; i < this.length; i += 1) {
        idx = Math.floor(Math.random() * ls.length);
        sc.push(ls.splice(idx, 1));
    }
    return sc.join("");
}
String.prototype.escapeHTML = function () {
    return this.replace(/[&<>'"]/g, function (x) {
        switch (x) {
            case'&':
                return '&amp;';
            case'>':
                return '&gt;';
            case'<':
                return '&lt;';
            case"'":
                return '&#39;';
            case'"':
                return '&quot;';
        }
    });
}
String.prototype.unescapeHTML = function () {
    return this.replace(/&(amp|gt|lt|#39|quot);/g, function (x) {
        switch (x) {
            case'&amp;':
                return '&';
            case'&gt;':
                return '>';
            case'&lt;':
                return '<';
            case'&#39;':
                return "'";
            case'&quot;':
                return '"';
        }
    });
}
String.prototype.fillValues = function (obj) {
    return this.replace(/%(\w+)%/g, function (_, k) {
        return obj[k]
    })
}
String.prototype.cutIt = function (len) {
    if (len >= this.length)return this.toString();
    return this.substr(0, (len - 1)) + '...';
}
String.prototype.cut = function (parentWidth) {
    if (parentWidth >= (this.length * 10))
        return this;
    var that = "this";
    var strWidth = parseInt($(that).width() + 10);
    var border = parentWidth - strWidth;
    return this;
}
String.prototype.parseTextblock = function (maxlength) {
    maxlength = maxlength || 50;
    if (this.length <= maxlength)return true;
    var textArr = this.escapeHTML().split(' ');
    for (var i = 0; i < textArr.length; i++) {
        if (textArr[i].toString().length > maxlength)
            return false;
    }
    return true;
};
String.prototype.prepareTextblock = function (maxlength) {
    maxlength = maxlength || 50;
    if (this.length <= maxlength)return this;
    var textArr = this.escapeHTML().split(' ');
    for (var i = 0; i < textArr.length; i++) {
        if (textArr[i].toString().length > maxlength)
            textArr[i] = textArr[i].cutIt(maxlength);
    }
    return textArr.join(' ');
};
String.prototype.replaceAll = function (replacer, replaceWith) {
    return this.replace(new RegExp(replacer, 'g'), replaceWith);
};
String.prototype.containsString = function (substr) {
    return this.indexOf(substr) != -1;
};
if (typeof String.prototype.trim !== 'function') {
    String.prototype.trim = function () {
        return $.trim(this);
    };
}
var objectLength = function (obj) {
    var counter = 0;
    for (var o in obj) {
        if (obj.hasOwnProperty(o))
            counter++;
    }
    return counter;
};
var getPopupWindowCode = function (width, height) {
    return 'onclick="window.open(this.href,\'\', \'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=' + height + ',width=' + width + '\'); return false;"';
};
var Sort = (function () {
    var obj = {};
    obj.create = function (orderBy, get) {
        if (!get)get = function (a) {
            return a;
        };
        return function (x, y) {
            var a = get(orderBy === 'desc' ? y : x);
            var b = get(orderBy === 'desc' ? x : y);
            if (typeof a === 'string')
                return Sort.byString(a, b);
            return Sort.byNumber(a, b);
        };
    };
    obj.byNumber = function (a, b) {
        return a - b;
    };
    obj.byString = function (a, b) {
        return a.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") > b.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") ? 1 : -1;
    };
    return obj;
})();
Array.prototype.unique = function () {
    var uqArr = [], found = false;
    for (var i = 0; i < this.length; i++) {
        found = false;
        for (var j = 0; j < uqArr.length; j++) {
            for (var key in this[i])
                break;
            if (this[i][key] === uqArr[j][key]) {
                found = true;
                break;
            }
        }
        if (!found)uqArr.push(this[i]);
    }
    return uqArr;
};
(function () {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
    }
    if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function (callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function () {
                callback(currTime + timeToCall);
            }, timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
    if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function (id) {
            clearTimeout(id);
        };
}());

var MousePopup = function (text, disableBg, type, handler, delay) {
    this.setXHTML(text);
    this.disableBg = disableBg;
    this.type = type;
    this.teaserTimeoutDelay = delay === undefined ? 1300 : delay + 1000;
    this.handler = handler;
    this.delay = delay === undefined ? 300 : delay;
    this.relativePosition = false;
    this.active = false;
};
MousePopup.prototype.updatePosition = function (e, resetText) {
    if (!this.active || resetText) {
        MousePopup.getEl().html(this.getXHTML());
    }
    var css = this.calculatePosition(e.clientX, e.clientY, e.target, this.type);
    MousePopup.getEl().css({top: css.top, left: css.left});
    if (!this.active) {
        this.active = true;
        this.setTimeout();
    }
    this.notify('onPosUpdate', [css, e]);
};
MousePopup.prototype.calculatePosition = function (x, y, targetEl, type) {
    var top, left, el = MousePopup.getEl(), refOffset;
    var scrollLeft, scrollTop, window_height, window_width, margin_bottom, margin_right;
    var height = el.height();
    var width = el.width();
    if (this.relativePosition) {
        refOffset = this.getPopupHolderOffset(targetEl);
        top = this.relativePosition.top + refOffset.top;
        left = this.relativePosition.left + refOffset.left;
    } else {
        scrollLeft = $(window).scrollLeft();
        scrollTop = $(window).scrollTop();
        window_height = window.Map && Map.height || $(window).height();
        margin_bottom = window_height - y;
        window_width = window.Map && Map.width || $(window).width();
        margin_right = window_width - x;
        if (margin_bottom < height + 20) {
            top = window_height - height - 10 + scrollTop;
        } else {
            top = y + scrollTop + 10;
        }
        if (x > (window_width / 2) && type) {
            left = x + scrollLeft - 20 - width;
        } else {
            if (margin_right > width + 25) {
                left = x + scrollLeft + 20;
            } else {
                left = x - 20 - width;
            }
        }
    }
    return {top: top, left: left, width: width, height: height};
};
MousePopup.prototype.getPopupHolderOffset = function (el) {
    while (el._mpopup !== this && el !== document.body) {
        el = el.parentNode;
    }
    return $(el).offset();
};
MousePopup.prototype.wrap = function (xhtml) {
    var result;
    if ($.type(xhtml) === "string") {
        result = xhtml;
        if (/(teaser_headline)/.test(result)) {
            result = result.replace(/<[^>]*teaser_content.*?>/i, '<div class="teaser_animation">&#8226;&#8226;&#8226;</div>$&')
            this.setTeaserTimeout();
        }
    } else if ($.isFunction(xhtml)) {
        try {
            result = xhtml();
        } catch (e) {
            if (window.DEBUG)console.log('error in MousePopup.wrap - xhtml function thrown an error: ', e);
        }
    } else if ($.isPlainObject(xhtml)) {
        result = '<div class="teaser_headline">' + xhtml.teaser + '</div><div class="teaser_animation">&#8226;&#8226;&#8226;</div><div class="teaser_content">' + xhtml.content + '</div>';
        this.setTeaserTimeout();
    } else {
        if (window.DEBUG)console.log('error in MousePopup.wrap - xhtml of unknown type: ', xhtml);
    }
    if (this.disableBg) {
        return result;
    }
    result = "<div class='tp_front'><div class='tw2gui_bg_tl'></div><div class='tw2gui_bg_tr'></div><div class='tw2gui_bg_bl'></div><div class='tw2gui_bg_br'></div></div>" + "<div class='popup_content'>"
        + "<table><tr><td>"
        + result + "</td></tr></table>" + "</div>";
    return result;
};
MousePopup.prototype.setXHTML = function (xhtml) {
    if ($.isPlainObject(xhtml) && !xhtml.teaser) {
        xhtml = xhtml.content;
    }
    this.text = xhtml;
    if (this.active)MousePopup.getEl().html(this.wrap(xhtml));
};
MousePopup.prototype.getXHTML = function (just_text) {
    if (just_text) {
        return this.text;
    } else {
        return this.wrap(this.text);
    }
};
MousePopup.prototype.kill = function () {
    MousePopup.getEl().css({visibility: 'hidden', top: 0, left: 0});
    this.active = false;
    MousePopup.clearTimeout();
    MousePopup.clearTeaserTimeout()
    MousePopup.getEl().removeClass('extended');
    this.notify('onHide');
};
MousePopup.clearTeaserTimeout = function () {
    if (MousePopup.teaserTimer) {
        window.clearTimeout(MousePopup.teaserTimer);
    }
};
MousePopup.prototype.setTeaserTimeout = function () {
    MousePopup.clearTeaserTimeout();
    MousePopup.teaserTimer = window.setTimeout(function () {
        MousePopup.getEl().addClass('extended');
    }, this.teaserTimeoutDelay);
};
MousePopup.prototype.setRelativePosition = function (left, top) {
    this.relativePosition = {top: top, left: left};
    return this;
};
MousePopup.prototype.setTimeout = function () {
    MousePopup.clearTimeout();
    var that = this;
    MousePopup.timer = window.setTimeout(function () {
        MousePopup.getEl().css('visibility', 'visible');
        that.notify('onShow');
    }, this.delay);
};
MousePopup.clearTimeout = function () {
    if (MousePopup.timer)window.clearTimeout(MousePopup.timer);
};
MousePopup.prototype.notify = function (action, param) {
    if (this.handler && this.handler[action])
        this.handler[action].apply(this, param || []);
};
MousePopup.getEl = (function () {
    var el;
    return function () {
        return el ? el : (el = $('#popup'));
    };
})();

(function ($) {
    'use strict';
    var single_instance = true, class_path = 'west.popup.handler', class_parent = null;
    var controller = {
        active_el: null, active_popup: null, init: function () {
            this.addEventListeners();
            return this;
        }, addEventListeners: function () {
            this.removeEventListeners();
            $(document).on('mousemove.popup_handler', this.handleMouseMove.bind(this));
            return this;
        }, removeEventListeners: function () {
            $(document).off('.popup_handler');
            return this;
        }, handleMouseMove: function (e) {
            var target = e.target, active_el = this.active_el, active_popup = this.active_popup;
            if (this.canHavePopup(target)) {
                this.checkForPopup(target);
            }
            if (this.hasPopup(target)) {
                if (active_el !== target) {
                    this.show(target);
                    return this;
                }
            } else {
                if (this.hasParentPopup(target)) {
                    target = $(target).closest('.hasMousePopup');
                    if (!target.is(active_el)) {
                        this.show(target);
                        return this;
                    }
                } else if (active_el) {
                    this.hide();
                    return this;
                }
            }
            this.updatePosition(e);
            return this;
        }, hasParentPopup: function (el) {
            return el._parentHasPopup === true;
        }, hadParentPopupCheck: function (el) {
            return undefined !== el._parentHasPopup;
        }, hasPopup: function (el) {
            return el._hasPopup === true;
        }, hadPopupCheck: function (el) {
            return undefined !== el._hasPopup;
        }, canHavePopup: function (el) {
            if (el instanceof jQuery) {
                el = el[0];
            }
            if (el === document || el === document.window || el === $('body')[0]) {
                return false;
            }
            return true;
        }, checkForPopup: function (el) {
            var popup, $el = $(el), title = $el.attr('title'), parent;
            if (title) {
                popup = title instanceof MousePopup ? title : new MousePopup(title);
                $el.removeAttr('title');
                this.add(el, popup);
                return true;
            }
            if (this.hadPopupCheck(el)) {
                return this.hasPopup(el) || this.hasParentPopup(el);
            }
            el._hasPopup = false;
            if (this.hadParentPopupCheck(el)) {
                return this.hasParentPopup(el);
            }
            parent = el.parentNode;
            if (this.canHavePopup(parent)) {
                if (this.checkForPopup(parent)) {
                    el._parentHasPopup = true;
                    return true;
                }
            }
            return false;
        }, updatePosition: function (e) {
            if (this.active_popup) {
                this.active_popup.updatePosition(e);
            }
            return this;
        }, addPopup: function () {
            return this.add.apply(this, arguments);
        }, add: function (el, popup) {
            if (!el || !popup || (el instanceof jQuery && !el[0])) {
                return false;
            }
            var $el;
            if (el instanceof jQuery) {
                $el = el;
                el = el[0];
                $el.addClass('hasMousePopup');
            } else {
                $(el).addClass('hasMousePopup');
            }
            el._mpopup = popup instanceof MousePopup ? popup : new MousePopup(popup);
            el._hasPopup = true;
            this.markChildren(el, true);
            return $el || el;
        }, removePopup: function () {
            return this.remove.apply(this, arguments);
        }, remove: function (el) {
            if (el instanceof jQuery) {
                el = el[0];
            }
            delete el._mpopup;
            el._hasPopup = false;
            if (!this.hasParentPopup(el)) {
                this.markChildren(el, false);
            }
            return el;
        }, getPopup: function (el) {
            var popup;
            if (el) {
                if (el instanceof jQuery) {
                    el = el[0];
                }
                popup = el._mpopup;
            } else {
                popup = this.active_popup;
            }
            return popup;
        }, markChildren: function (el, bool) {
            var that = this, $el = $(el), children = $($el).children();
            children.each(function (i, child) {
                if (that.hasPopup(child)) {
                    child._parentHasPopup = bool;
                } else {
                    if (bool) {
                        child._parentHasPopup = bool;
                    } else {
                        delete child._parentHasPopup;
                        delete child._hasPopup;
                    }
                    that.markChildren(child, bool);
                }
            });
        }, show: function (target) {
            if (!target) {
                return;
            }
            var popup;
            if (target instanceof MousePopup) {
                popup = target;
                target = null;
            } else {
                if (target instanceof jQuery) {
                    target = target[0];
                }
                popup = target._mpopup;
            }
            if (popup && popup !== this.active_popup) {
                this.hide();
                this.active_el = target;
                this.active_popup = popup;
            }
            return this;
        }, hide: function (popup) {
            if (this.active_popup) {
                if (popup && this.active_popup !== popup) {
                    return this;
                }
                this.active_popup.kill();
            }
            this.active_el = null;
            this.active_popup = null;
            return this;
        }
    };
    west.define(class_path + '.controller', class_parent + '.controller', controller);
    if (single_instance) {
        var path = class_path.split('.'), path_id = path.pop();
        path = west.get(path.join('.'));
        if (path && path[path_id] && path[path_id].controller) {
            path[path_id] = new path[path_id].controller;
            window.PopupHandler = path[path_id];
        }
    }
})(jQuery);
function ngettext(s, p, n) {
    return (n == 1) ? s : (("string" == typeof p) ? p : p[Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2)]);
}
(function ($) {
    $(function () {
        if (!window.DEBUG)return;
        var el;
        if (!(el = $('#debugPanel')).length) {
            $('body').append(el = $('<div id="debugPanel" onclick="javascript: this.parentNode.removeChild(this);" />'));
        }
        window.setInterval(function () {
            var info = window._query_info || {}, fs = Math.min(300, Math.max(8, info.count / 2));
            el.empty().append('<p>jQuery cache count: ' + (Object.keys && Object.keys(jQuery.cache).length || 'get a proper browser') + '</p>').append('<p style="font-size: ' + fs + 'px">Query count: ' + info.count + '</p>').append('<p>Query time: ' + Math.floor(info.time + .5) + '</p>');
        }, 1000);
    });
    $.fn.pulse = function (duration, until) {
        var pulse = function (el, from, to) {
            el.animate(to, duration, 'linear', function () {
                if (!until || false == until(el)) {
                    pulse(el, to, from);
                }
            });
        };
        pulse(this, {opacity: 0}, {opacity: 1.0});
        return this;
    };
    $.fn.bringToTop = function () {
        if (this.css("z-index") != wman.lastIndex)this.css('z-index', ++wman.lastIndex);
        return this;
    };
    $.fn.md_center = function (opt, callback) {
        var opt = $.extend({top: 0, left: 0, transition: 0, opacity: 1.0}, opt);
        opt.top = 0 >= opt.top ? ((($(window).height() - $(this).outerHeight()) / 2) || 0) : opt.top;
        opt.left = 0 >= opt.left ? ((($(window).width() - $(this).outerWidth()) / 2) || 0) : opt.left;
        var props = {margin: 0, top: opt.top + "px", left: opt.left + "px", opacity: opt.opacity};
        if (0 < opt.transition) {
            $(this).animate(props, opt.transition, callback);
        }
        else $(this).css(props);
        return this;
    }
    $.fn.center = function (x, y, relative) {
        var p = this.position();
        if (!relative)relative = $(window);
        if (x !== false) {
            var w = this.outerWidth();
            var sw = relative.outerWidth();
            this.first().css('left', Math.max((sw - w) >> 1, 0) + "px");
        }
        if (y !== false) {
            var h = this.outerHeight();
            var sh = relative.outerHeight();
            this.first().css('top', Math.max((sh - h) >> 1, 0) + "px");
        }
        return this;
    }
    $.fn.rect = function (margin) {
        margin = margin || 0;
        var p = this.get(0) == window ? {left: 0, top: 0} : $(this).position();
        return {
            x0: p.left + margin,
            x1: $(this).width() + p.left + margin,
            y0: p.top + margin,
            y1: $(this).height() + p.top + margin
        };
    }
    $.fn.inside = function (e, margin) {
        margin = margin || 0;
        var r1 = this.rect(), r2 = $(e).rect(margin);
        return r1.x0 >= r2.x0 && r1.x1 <= r2.x1 && r1.y0 >= r2.y0 && r1.y1 <= r2.y1;
    }
    $.fn.cloneObj = function (jsObj) {
        return jQuery.extend(true, {}, jsObj);
    }
    $.fn.isInArray = function (pattern, searchArray) {
        return $.inArray(pattern, searchArray) > -1 ? true : false;
    }
    $.inObject = function (search, obj) {
        for (var key in obj) {
            if (obj[key] == search)return true;
        }
        return false;
    }
    $.removeFromObject = function (value, obj) {
        for (var key in obj) {
            if (obj[key] == value) {
                obj[key] = null;
                return obj;
            }
        }
        return obj;
    }
    $.insertValue2Object = function (value, obj) {
        for (var key in obj) {
            if (obj[key] == null) {
                obj[key] = value;
                return obj;
            }
        }
        return obj;
    }
    $.fn.appendArray = function (jqObjectArray) {
        if (jqObjectArray.length < 1)return (this);
        var translateArray = $.map
        (jqObjectArray, function (val, ix) {
            return (val.get());
        });
        this.append(translateArray);
        return (this);
    };
    jQuery.prototype.cut = function () {
        var txt = this.text();
        if (!txt || txt == "...")
            return this;
        var parW = this.parent().width();
        var thisW = this.width() + 10;
        if (parW >= thisW)
            return this;
        this.text(txt.substr(0, txt.length - 7) + "...").cut();
    }
    jQuery.prototype.addMousePopup = function (popup) {
        PopupHandler.addPopup(this, popup);
        return this;
    };
    jQuery.prototype.removeMousePopup = function () {
        PopupHandler.removePopup(this);
        return this;
    };
    jQuery.prototype.getMousePopup = function () {
        return PopupHandler.getPopup(this);
    };
})(jQuery);

Ajax = function () {
    jQuery.ajaxSetup({type: 'POST', dataType: 'json'});
    var forcedLogout = false;
    var makeUrl = function (options) {
        var url = 'game.php', params = [];
        if (options.window)params.push('window=' + options.window);
        if (options.action)params.push('action=' + options.action, 'h=' + Player.h);
        if (options.ajax)params.push('ajax=' + options.ajax);
        if (options.mode)params.push('mode=' + options.mode);
        return url + params.length ? '?' + params.join('&') : '';
    };
    var responseError = function (message, data) {
        new SystemError(message, undefined, false).show();
        ErrorLog.log(message, data);
    };
    var onFinish = function (window) {
        return function () {
            if (window && window.hideLoader)
                window.hideLoader(); else if (window && window.hasOwnProperty('window'))
                window.window.hideLoader();
        };
    };
    var onSuccess = function (callback) {
        return function (resp, status, jqXHR) {
            if (!resp)
                return responseError('Empty Server response', JSON.stringify({url: this.url, data: this.data}));
            if (resp.error && 'fatal' == resp.error)
                return responseError('Fatal Server error', JSON.stringify({url: this.url, data: this.data}));
            if (resp.qinf)window._query_info = resp.qinf;
            typeof callback === 'function' && callback(resp);
        };
    };
    var onInvalidSession = function (resp) {
        if (!resp || !resp.logout)return;
        forcedLogout = true;
        Player.forceLogout(resp.message);
        throw'invalid session';
    };
    var onFail = function (jqXHR, status, error) {
        if ((status === 'error' && error === '') || status === 'abort' || error === 'abort')return;
        responseError('Invalid Server response', JSON.stringify({url: this.url, data: this.data, status: status}));
        if (DEBUG && window.console && error !== 'Service Temporarily Unavailable') {
            console.log('Request failed, unexpected/no response:');
            console.log(error.toString() + ':');
            console.log(error.stack);
            console.log('Server\'s response:');
            console.log(jqXHR.responseText);
        }
    }
    var request = function (options) {
        if (forcedLogout)throw'invalid session';
        var url = options.url || makeUrl(options);
        return jQuery.ajax(url, options).done(onInvalidSession);
    };
    var defaultCallbackRequest = function (options, callback, window) {
        if (window && window.showLoader)
            window.showLoader(); else if (window && window.hasOwnProperty('window'))
            window.window.showLoader();
        return request(options).always(onFinish(window)).done(onSuccess(callback)).fail(onFail);
    };
    return {
        remoteCall: function (window, action, param, callback, view) {
            return defaultCallbackRequest({window: window, action: action, data: param}, callback, view);
        }, remoteCallMode: function (window, mode, param, callback, view) {
            return defaultCallbackRequest({window: window, mode: mode, data: param}, callback, view);
        }, get: function (window, ajax, param, callback, view) {
            return defaultCallbackRequest({window: window, ajax: ajax, data: param}, callback, view);
        }, gameServiceRequest: function (method, urlparam, post, callback) {
            return defaultCallbackRequest({url: Game.serviceURL + '/' + method + '/' + urlparam, data: post}, callback);
        }, request: request
    }
}();

(function ($) {
    $.fn.guiElement = function () {
        for (var i = 0; i < this.length; i += 1)if (this[i].guiElement)return this[i].guiElement;
        return null;
    }
    west.define('west.gui.Component', null, {
        init: function (ext) {
            for (var k in ext)
                this[k] = ext[k];
        }, $: function (css) {
            return $(css, this.divMain);
        }, getMainDiv: function () {
            return this.divMain;
        }, appendTo: function (el) {
            $(el).append(this.divMain);
            return this;
        }, addClass: function (cls) {
            $(this.getMainDiv()).addClass(cls);
            return this;
        }, removeClass: function (cls) {
            $(this.getMainDiv()).removeClass(cls);
            return this;
        }, setTooltip: function (tooltip) {
            if (tooltip) {
                $(this.getMainDiv()).addMousePopup(tooltip);
            } else {
                this.removeTooltip();
            }
            return this;
        }, removeTooltip: function () {
            $(this.getMainDiv()).removeMousePopup();
            return this;
        }
    });
    west.define('west.gui.Icon', west.gui.Component, {
        init: function (name, title) {
            this.divMain = $("<img alt='' class='tw2gui-iconset' src='https://westrus.innogamescdn.com/images/tw2gui/pixel-vfl3z5WfW.gif'/>");
            if (undefined !== title) {
                this.setTitle(title);
            }
            if (undefined !== name) {
                this.setName(name);
            }
        }, setTitle: function (title) {
            return this.setTooltip(title);
        }, setName: function (name) {
            name = "tw2gui-icon-" + name;
            if (undefined !== this.name)
                this.removeClass(this.name);
            this.addClass(name);
            this.name = name;
            return this;
        }, getName: function () {
            return this.name;
        }
    });
    west.gui.Icon.get = function (name, title) {
        return new west.gui.Icon(name, title).getMainDiv();
    };
    west.define('west.gui.Textart', west.gui.Component, {
        init: function (tx, width, height, font) {
            this.div = $("<div class='textart_title'/>")[0];
            this.setGlow(3).setScaleX(1).setSize(width, height);
            if (tx)this.setText(tx);
            if (font)this.setFont(font);
        }, setGlow: function (glow) {
            this.glow = glow;
            if (this.canvas)this.canvas.getContext("2d").shadowBlur = glow;
            return this;
        }, setSize: function (width, height) {
            if (!(width && height)) {
                return this;
            }
            if (this.canvas) {
                this.canvas.width = width;
                this.canvas.height = height;
                var ctx = this.canvas.getContext("2d");
                ctx.textAlign = "center";
                ctx.textBaseline = "top";
                ctx.shadowBlur = this.glow;
                ctx.shadowColor = "#000";
                ctx.font = this.font;
            }
            $(this.div || this.canvas).css({width: width + "px", height: height + "px", "line-height": height + "px"});
            this.width = width;
            this.height = height;
            if (this.text)this.setText(this.text);
            return this;
        }, setFont: function (font) {
            if (this.div)this.div.style.font = font; else this.canvas.font = font;
            this.font = font;
            return this;
        }, setScaleX: function (x) {
            this.scaleX = x;
            return this;
        }, appendTo: function (div) {
            $(div).append(this.div || this.canvas);
            return this;
        }, getText: function () {
            return this.text;
        }, setText: function (tx) {
            if (this.canvas) {
                var img = new Image();
                img.src = "https://westrus.innogamescdn.com/images/tw2gui/textfield/textglow.jpg?2";
                var self = this;
                img.onload = function () {
                    var ctx = self.canvas.getContext("2d");
                    var p = ctx.createPattern(img, "repeat");
                    ctx.clearRect(0, 0, self.width, self.height);
                    ctx.fillStyle = p;
                    ctx.setTransform(1, 0, 0, 1, 0, 0);
                    ctx.scale(self.scaleX, 1);
                    ctx.fillText(tx, self.width / 2 / self.scaleX, 0, self.width);
                    ctx.fill();
                }
            } else {
                this.div.innerHTML = tx;
            }
            this.text = tx;
            return this;
        }, ellipsis: function () {
            this.div.className = (this.div.className || "") + " shorten";
        }
    });
    west.define('west.gui.Button', west.gui.Component, {
        init: function (caption, onclick, context, data, title, cls) {
            this.divMain = $("<div class='tw2gui_button " + ((cls) ? cls : "") + "' " + (title ? ("title='" + title + "'") : "") + ">" + "<div class='tw2gui_button_right_cap'></div>" + "<div class='tw2gui_button_left_cap'></div>" + "<div class='tw2gui_button_middle_bg'></div>" + "</div>").click(this, this.handler.click)[0];
            this.divMain.guiElement = this;
            this.caption = new west.gui.Textart(caption, '', '', '').appendTo(this.divMain);
            this.setCaption(caption);
            this.disabled = false;
            this.onclick = onclick;
            this.context = context;
            this.data = data;
        }, handler: {
            click: function (e) {
                e.data.click()
            }
        }, click: function (callback, context, data) {
            if (undefined !== callback) {
                this.onclick = callback;
                this.context = context;
                this.data = data;
                return this;
            }
            if (this.disabled)return this;
            if (this.onclick)this.onclick.apply(this.context, [this, this.data]);
            return this;
        }, setCaption: function (caption) {
            this.caption.setText(caption);
            return this;
        }, setMinWidth: function (w) {
            this.divMain.style.minWidth = w + "px";
            return this;
        }, setMaxWidth: function (w) {
            this.divMain.style.maxWidth = w + "px";
            this.caption.ellipsis();
            return this;
        }, setWidth: function (w) {
            this.setMinWidth(w).setMaxWidth(w);
            return this;
        }, disable: function () {
            this.disabled = true;
            this.addClass("inactive");
            return this;
        }, setVisible: function (state) {
            $(this.divMain).css("display", state ? "inline-block" : "none");
            return this;
        }, enable: function () {
            this.disabled = false;
            this.removeClass("inactive");
            return this;
        }, setSelectbox: function (selectbox) {
            var that = this;
            this.click(function (e) {
                selectBox.show(e);
            });
        }
    });
    west.define('west.gui.Iconbutton', west.gui.Component, {
        init: function (icon, onclick, context, data, title) {
            if (icon instanceof west.gui.Icon)
                icon = icon.getMainDiv(); else
                icon = $('<img class="button_icon" src="' + icon + '" />');
            this.divMain = $('<span class="tw2gui_iconbutton" ' + (title ? 'title="' + title + '"' : '') + '>' + '<span class="tw2gui_button_right_cap"></span>' + '<span class="tw2gui_button_left_cap"></span>' + '<span class="tw2gui_button_middle_bg"></span>' + '</span>').append(icon).click(this, this.handler.click)[0];
            this.divMain.guiElement = this;
            this.disabled = false;
            this.onclick = onclick;
            this.context = context || null;
            this.data = data || null;
        }, handler: {
            click: function (e) {
                e.data.click()
            }
        }, click: function () {
            if (this.disabled)return this;
            if (this.onclick)this.onclick.apply(this.context, [this, this.data]);
            return this;
        }, setTitle: function (title) {
            return this.setTooltip(title);
        }, setWidth: function (w) {
            $(this.divMain).css('min-width', w + 'px');
            return this;
        }, disable: function () {
            this.disabled = true;
            this.addClass("inactive");
            return this;
        }, enable: function () {
            this.disabled = false;
            this.removeClass("inactive");
            return this;
        }
    });
    west.define('west.gui.Scrollbar', west.gui.Component, {
        init: function (horizontal, noautohide) {
            this.divMain = $("<div class='tw2gui_scrollbar'>"
                + "<div class='tw2gui_scrollbar_bg1' />"
                + "<div class='tw2gui_scrollbar_bg2' />"
                + "<div class='tw2gui_scrollbar_pulley_area'>"
                + "<div class='tw2gui_scrollbar_pulley'>"
                + "<div class='tw2gui_scrollbar_pulley_bg1' />"
                + "<div class='tw2gui_scrollbar_pulley_bg2' />"
                + "<div class='tw2gui_scrollbar_pulley_bg3' />"
                + "</div>"
                + "</div>"
                + "<div class='tw2gui_scrollbar_arrow_leup' />"
                + "<div class='tw2gui_scrollbar_arrow_ribo' />"
                + "</div>")[0];
            this.divMain.guiElement = this;
            $(this.divMain).addClass(horizontal ? 'horizontal' : 'vertical').resize(this, this.handler.onResize);
            var that = this;
            $(this.divMain).mousewheel(function (e, d) {
                that.onWheeled(d);
                return false
            });
            $('.tw2gui_scrollbar_arrow_leup', this.divMain).on('mousedown', {
                bar: this,
                dir: -1
            }, this.handler.onArrowMouseDown).on('mouseup', this, this.handler.onArrowMouseUp);
            $('.tw2gui_scrollbar_arrow_ribo', this.divMain).on('mousedown', {
                bar: this,
                dir: 1
            }, this.handler.onArrowMouseDown).on('mouseup', this, this.handler.onArrowMouseUp);
            $('div.tw2gui_scrollbar_pulley_area', this.divMain).on('mousedown', this, this.handler.onAreaMouseDown);
            this._divPullArea = $('div.tw2gui_scrollbar_pulley_area', this.divMain);
            this._divPulley = $('div.tw2gui_scrollbar_pulley', this.divMain);
            this._divPulley.jqDrag(this._divPulley, {
                onStart: this.handler.onDragStart,
                onStop: this.handler.onDragStop,
                onDrag: this.handler.onDrag,
                bar: this
            })
            this.listeners = [];
            this.horizontal = horizontal || false;
            this.currentPosition = 0;
            this.setPullRange(300);
            this.scrollmode = "absolute";
            if (!(this.noautohide = noautohide))
                this.hide();
            this.maxScrolled = true;
        }, getCurrentPosition: function () {
            return this.currentPosition;
        }, handler: {
            onDragStart: function () {
                if (this.bar.horizontal) {
                    this.rangex = [0, $('div.tw2gui_scrollbar_pulley_area', this.bar.divMain).width() - $('div.tw2gui_scrollbar_pulley', this.bar.divMain).width()];
                    this.rangey = [0, 0];
                } else {
                    this.rangex = [0, 0];
                    this.rangey = [0, $('div.tw2gui_scrollbar_pulley_area', this.bar.divMain).height() - $('div.tw2gui_scrollbar_pulley', this.bar.divMain).height()];
                }
            }, onDragStop: function () {
                this.bar.move(0);
            }, onDrag: function () {
                this.bar.scream(true)
            }, onResize: function (e) {
                e.data.setPullRange();
                e.stopPropagation();
            }, onAreaMouseDown: function (e) {
                var that = e.data;
                var y = that.horizontal ? e.offsetX || e.layerX : e.offsetY || e.layerY;
                var ph = that._divPulley[that.horizontal ? 'width' : 'height']();
                var py = that._divPulley.position()[that.horizontal ? 'left' : 'top'];
                that.move((y - ph / 2) - py, true);
                return false;
            }, onArrowMouseDown: function (e) {
                var that = e.data.bar;
                that.move(e.data.dir * 10)
                that._scroller = window.setInterval(function () {
                    that.move(e.data.dir * 10)
                }, 100);
                return false;
            }, onArrowMouseUp: function (e) {
                var that = e.data;
                window.clearInterval(that._scroller);
                delete that._scroller;
            }
        }, setScrollmode: function (mode) {
            this.scrollmode = mode
            return this;
        }, setPullRange: function (range) {
            if (range === undefined)range = this.pullRange; else this.pullRange = range;
            var havail = this._divPullArea[this.horizontal ? 'width' : 'height']();
            var per = Math.max(15, Math.floor(Math.min(1, (havail + 30) / this.pullRange) * 100));
            this._divPulley.css(this.horizontal ? 'width' : 'height', per + "%");
            this.checkHide(per);
            this.currentPosition = -1;
            return this;
        }, checkHide: function (per) {
            if (this.noautohide)
                return this;
            if (per == 100 && this.visible()) {
                this.hide();
            } else if (per != 100 && !this.visible()) {
                this.show();
            }
            return this;
        }, hide: function () {
            this.divMain.style.visibility = "hidden";
        }, show: function () {
            this.divMain.style.visibility = "visible";
        }, visible: function () {
            return this.divMain.style.visibility != "hidden";
        }, addDragListener: function (f, context, data) {
            this.listeners.unshift({f: f, c: context, d: data});
            return this;
        }, removeDragListener: function (f) {
            for (var i = this.listeners.length - 1; i >= 0; i -= 1) {
                this.listeners.splice(i, 1);
            }
            return this;
        }, move: function (px, animated, absolute) {
            var pulley = $('div.tw2gui_scrollbar_pulley', this.divMain), hare = $('div.tw2gui_scrollbar_pulley_area', this.divMain)[this.horizontal ? 'width' : 'height'](), topMax = hare - pulley[this.horizontal ? 'width' : 'height'](), top = Math.min(topMax, Math.max(0, px + (absolute ? 0 : pulley.position()[this.horizontal ? 'left' : 'top']))), css = {};
            css[this.horizontal ? 'left' : 'top'] = top + 'px';
            this.maxScrolled = top == topMax;
            if (animated) {
                var that = this;
                pulley.animate(css, {
                    step: function () {
                        that.scream()
                    }
                });
            } else {
                pulley.css(css);
            }
            return this.scream();
        }, onWheeled: function (delta) {
            var hare = $('div.tw2gui_scrollbar_pulley_area', this.divMain)[this.horizontal ? 'width' : 'height']();
            var pulley = $('div.tw2gui_scrollbar_pulley', this.divMain);
            var hpul = pulley[this.horizontal ? 'width' : 'height']();
            var hrest = hare - hpul;
            var amount = 0;
            if (hrest >= 0) {
                amount = Math.floor(.5 - delta * 50 * hrest / this.pullRange);
            }
            if (amount == 0)amount = delta < 0 ? 1 : -1;
            this.move(amount);
            return false;
        }, calcRelpos: function () {
            var hare = $('div.tw2gui_scrollbar_pulley_area', this.divMain)[this.horizontal ? 'width' : 'height']();
            var pulley = $('div.tw2gui_scrollbar_pulley', this.divMain);
            var hpul = pulley[this.horizontal ? 'width' : 'height']();
            var puly = pulley.position()[this.horizontal ? 'left' : 'top'];
            if (hpul + puly > hare) {
                puly = Math.max(0, hare - hpul);
                pulley.css(this.horizontal ? 'left' : 'top', puly + "px");
            }
            return hare == hpul ? 0 : Math.min(1, Math.max(0, puly / (hare - hpul)));
        }, scream: function (done) {
            var rel = this.calcRelpos();
            if (rel == this.currentPosition)return;
            this.currentPosition = rel;
            var hfull = $(this.divMain)[this.horizontal ? 'width' : 'height']();
            var pxposnow = Math.floor(rel * (this.pullRange - hfull));
            var pxposprev = Math.floor(rel * (this.pullRange - hfull));
            for (var i = this.listeners.length - 1; i >= 0; i -= 1) {
                var h = this.listeners[i];
                h.f.apply(h.c, [this, pxposnow, pxposprev, h.d]);
            }
            return this;
        }
    });
    west.define('west.gui.Scrollpane', west.gui.Component, {
        init: function (classname, noautohide, smartscrolling) {
            this.divMain = $("<div class='tw2gui_scrollpane'>"
                + "<div class='tw2gui_scrollpane_clipper'>"
                + "<div class='tw2gui_scrollpane_clipper_contentpane' />"
                + "</div>"
                + "<div class='tw2gui_scrollpane_verticalscrollbar_area' />"
                + "</div>")[0];
            this.divMain.guiElement = this;
            this.contentPane = $('div.tw2gui_scrollpane_clipper_contentpane', this.divMain).resize(this, this.handler.onResize);
            this.clipPane = $('div.tw2gui_scrollpane_clipper', this.divMain);
            $(this.divMain).addClass(classname);
            this.verticalBar = new west.gui.Scrollbar(false, noautohide).addDragListener(this.onScrolled, this, true);
            $('div.tw2gui_scrollpane_verticalscrollbar_area', this.divMain).append(this.verticalBar.getMainDiv());
            var that = this;
            $(this.divMain).mousewheel(function (e, d) {
                that.verticalBar.onWheeled(d);
            });
            this.smartscrolling = smartscrolling;
        }, handler: {
            onResize: function (e) {
                e.data.onResized();
                e.stopPropagation();
            }
        }, getContentPane: function () {
            return this.contentPane;
        }, appendContent: function (c) {
            this.contentPane.append(c);
            return this
        }, onScrolled: function (bar, pos, oldpos, isvertical) {
            this.contentPane.css('top', -pos + "px");
        }, onResized: function () {
            var ch = this.contentPane.height(), mh = parseInt($(this.divMain).css("max-height")), maxScrolled = this.verticalBar.maxScrolled, scrollPos = this.getScrollPos();
            if (mh)$(this.divMain).css("height", Math.min(ch, mh));
            this.verticalBar.setPullRange(ch);
            if (!this.verticalBar.visible()) {
                if (scrollPos.rely !== 0)this.scrollTo(0, 0);
                this.clipPane.css("margin-right", "0px");
            } else {
                if (this.smartscrolling && maxScrolled)this.scrollToEnd();
                this.clipPane.css("margin-right", "15px");
            }
        }, getScrollPos: function () {
            var xy = this.contentPane.position();
            var info = {
                contentHeight: this.contentPane.height(),
                contentWidth: this.contentPane.width(),
                x: -xy.left,
                y: -xy.top,
                clipHeight: this.clipPane.height(),
                clipWidth: this.clipPane.width()
            };
            info.relx = info.clipWidth > info.contentWidth ? 0 : Math.min(1, info.x / (info.contentWidth - info.clipWidth));
            info.rely = info.clipHeight > info.contentHeight ? 0 : Math.min(1, info.y / (info.contentHeight - info.clipHeight));
            return info;
        }, scrollTo: function (x, y, absolute) {
            this.verticalBar.setPullRange(this.contentPane.height()).move(y, false, absolute);
        }, scrollToEnd: function () {
            this.scrollTo(0, this.contentPane.height(), true);
        }, scrollToTop: function () {
            this.scrollTo(0, 0, true);
        }, scrollBy: function (x, y) {
            this.scrollTo(x, y, false);
        }
    });
    west.define('west.gui.Groupframe', west.gui.Component, {
        init: function (cssclass, content) {
            this.divMain = $("<div class='tw2gui_groupframe " + (cssclass || "") + "'>" + "<div class='tw2gui_groupframe_background bg0'></div>" + "<div class='tw2gui_groupframe_background bg1'></div>" + "<div class='tw2gui_groupframe_background bg2'></div>" + "<div class='tw2gui_groupframe_background bg3'></div>" + "<div class='tw2gui_groupframe_background bg4'></div>" + "<div class='tw2gui_groupframe_frame tw2gui_bg_tl'></div>" + "<div class='tw2gui_groupframe_frame tw2gui_bg_tr'></div>" + "<div class='tw2gui_groupframe_frame tw2gui_bg_bl'></div>" + "<div class='tw2gui_groupframe_frame tw2gui_bg_br'></div>" + "<div class='tw2gui_groupframe_content_pane'>" +
                (content || "") + "</div>" + "</div>");
            this.divMain[0].guiElement = this;
        }, appendToContentPane: function () {
            var self = $('> div.tw2gui_groupframe_content_pane', this.divMain);
            self.append.apply(self, arguments);
            return this;
        }, setId: function (id) {
            this.divMain.attr('id', id);
            return this;
        }, getMainDiv: function () {
            return this.divMain[0];
        }
    });
    west.define('west.gui.Table', west.gui.Component, {
        init: function (no_scrollbar) {
            this.divMain = $('<div class="fancytable"/>').append("<div class='_bg tw2gui_bg_tl'/>", "<div class='_bg tw2gui_bg_tr'/>", "<div class='_bg tw2gui_bg_bl'/>", "<div class='_bg tw2gui_bg_br'/>", "<div class='trows'><div class='thead statics'><div class='row_head'></div></div>"
                + "<div class='tbody'>"
                + "<div class='_bg tw2gui_bg_l'/>"
                + "<div class='_bg tw2gui_bg_r'/>"
                + "<div class='rows' />"
                + "</div>"
                + "<div class='tfoot statics'><div class='row_foot'></div></div></div>");
            this.divMain[0].guiElement = this;
            this.noScrollbar = no_scrollbar;
            if (no_scrollbar) {
                this.tbody = this.$('div.rows', this.divMain);
            } else {
                this.bodyscroll = new west.gui.Scrollpane();
                this.$('div.tbody', this.divMain).append(this.bodyscroll.getMainDiv())
                this.tbody = this.bodyscroll.getContentPane();
            }
            this.column = [];
            this.colnames = {};
            this.rows = [];
        }, setScrollbar: function () {
            this.noScrollbar = false;
            return this;
        }, removeScrollbar: function () {
            this.noScrollbar = true;
            return this;
        }, setId: function (id) {
            this.divMain.attr('id', id);
            return this;
        }, addColumn: function (css, dataObj) {
            var col = $('<div class="cell cell_' + this.column.length + ' ' + css + '"></div>');
            if (dataObj)col.data(dataObj);
            this.$('>div.trows >div.statics > div').append(col);
            this.colnames[css] = this.column.length;
            this.column.push(css);
            return this;
        }, addColumns: function (arr_css) {
            var appends = "";
            for (var i = 0; i < arr_css.length; i++) {
                appends += "<div class='cell cell_" + this.column.length + " " + arr_css[i] + "'></div>";
                this.colnames[arr_css[i]] = this.column.length;
                this.column.push(arr_css[i]);
            }
            this.$('>div.trows >div.statics > div').append(appends);
            return this;
        }, appendRow: function (data, cssclass) {
            var row = $('<div class="row row_' + this.rows.length + ' ' + (cssclass || "") + '"></div>');
            if (undefined != data)
                data.appendTo(row);
            this.rows.push(row);
            this.tbody.append(row);
            return this;
        }, buildRow: function (cssclass, contentObj, modifyRow) {
            var row = $('<div class="row row_' + this.rows.length + ' ' + (cssclass || "") + '"></div>');
            var appends = '';
            var i = 0;
            for (var key in contentObj) {
                appends += '<div class="cell_' + i + ' ' + key + '">' + contentObj[key] + '</div>';
                i++;
            }
            row.html(appends);
            if (modifyRow)
                row = modifyRow(row);
            this.rows.push(row);
            this.tbody.append(row);
            return this;
        }, createEmptyMessage: function (text) {
            this.$('div.tbody').append($('<div class="no-content" style="position: absolute; left:20px;right:20px; top:50px; text-align: center;"><img src="https://westrus.innogamescdn.com/images/icons/warn_circle.png">&nbsp;&nbsp;<span class="empty-list" style="font-size: 10pt; font-weight: bold;">' + text + '</span></div>').hide());
            return this;
        }, clearBody: function () {
            if (!this.noScrollbar)
                this.bodyscroll.scrollToTop();
            this.tbody.empty();
            this.rows = [];
        }, getCell: function (row, col) {
            if (typeof col == "string")col = this.colnames[col];
            if (col < 0 || col >= this.column.length)return null;
            if (row < 0)row += this.rows.length;
            row = this.$('div.row_' + row).first();
            var cell = $('div.cell_' + col, row);
            if (cell.length == 0) {
                var c;
                for (var i = col - 1; i >= 0; i -= 1) {
                    if ((c = $('div.cell_' + i, row)).length)break;
                }
                cell = $('<div class="cell cell_' + col + ' ' + this.column[col] + '"></div>');
                if (!c || !c.length)row.append(cell); else c.after(cell);
            }
            return cell;
        }, getRow: function (id) {
            return id === undefined ? this.rows[this.rows.length - 1] : this.rows[id];
        }, appendToCell: function (row, col, content) {
            var cell = this.getCell(row, col);
            cell.append(content);
            return this;
        }, appendTitleToCell: function (row, col, title) {
            var cell = this.getCell(row, col);
            cell.attr('title', title);
            return this;
        }, appendToThCell: function (row, col, title, content) {
            var cell = this.getCell(row, col);
            cell.append($('<span title="' + title + '">' + content + '</span>'));
            return this;
        }, appendToFooter: function (cell, content) {
            this.$('div.row_foot div.' + cell, this.divMain).append(content);
            return this;
        }, removeFooter: function () {
            this.$('div.row_foot', this.divMain).remove();
            return this;
        }
    });
    west.define('west.gui.Htmltable', west.gui.Component, {
        init: function () {
            this.divMain = $('<table class="tw2gui_htmltable"><thead></thead>' + '<tbody><tr><td class="tw2gui_htmltable_tdcontainer" colspan="1">' + '<div class="tw2gui_htmltable_div_content"><table class="tw2gui_htmltable_contenttable"></table></div>' + '</td></tr></tbody><tfoot></tfoot></table>');
            this.divMain[0].guiElement = this;
        }, buildHeader: function (headerObj) {
            var header = '<tr>';
            var counter = 0;
            for (var key in headerObj) {
                header += '<th class="' + key + '">' + headerObj[key] + '</th>';
                counter++;
            }
            header += '<th class="for_scrollbar">&nbsp;</th></tr>';
            $('thead', this.divMain).html(header);
            $('td.tw2gui_htmltable_tdcontainer', this.divMain).attr('colspan', counter);
            return this;
        }, buildFooter: function (footerObj) {
            var footer = '<tr>';
            for (var key in footerObj) {
                footer += '<th class="' + key + '">' + footerObj[key] + '</th>';
            }
            footer += '<th class="for_scrollbar">&nbsp;</th></tr>';
            $('tfoot', this.divMain).html(footer);
            return this;
        }, appendRow: function (id, bodyObj) {
            var row = '<tr id="' + id + '">';
            for (var key in bodyObj) {
                row += '<td class="' + key + '">' + bodyObj[key] + '</td>';
            }
            row += '</tr>';
            $('table.tw2gui_htmltable_contenttable', this.divMain).append($(row));
            return this;
        }, createRow: function (rowObj) {
            var row = '<tr>';
            for (var key in rowObj) {
                row += '<td class="' + key + '">' + rowObj[key] + '</td>';
            }
            row += '</tr>';
            return row;
        }, appendRows: function (arrBodyObj) {
            var tbody = '';
            for (var i in arrBodyObj) {
                tbody += this.createRow(arrBodyObj[i]);
            }
            $('table.tw2gui_htmltable_contenttable', this.divMain).html($(tbody));
            return this;
        }, setSize: function (width, height) {
            $(this.divMain).css({'width': width + 'px', 'height': height + 'px'});
            $('div.tw2gui_htmltable_div_content, table.tw2gui_htmltable_contenttable', this.divMain).css({'height': height - 25 + 'px'});
            return this;
        }, clearBody: function () {
            $('table.tw2gui_htmltable_contenttable', this.divMain).empty();
        }
    });
    west.define('west.gui.Combobox', west.gui.Component, {
        init: function (id) {
            this.divMain = $('<span ' + (id ? 'id="' + id + '" ' : '') + 'class="tw2gui_combobox"><span class="tw2gui_combobox_text"></span>' + '<input type="hidden" id="' + id + '_value" value="" />' + '<span class="tw2gui_combobox_btn"></span></span>').click(this, this.handler.onDropdown);
            if (id)this.divMain.attr("id", id);
            this.divMain[0].guiElement = this;
            this.items = [];
            this.box = this.$('span.tw2gui_combobox_text');
            this.listeners = [];
            this.directionTop = false;
        }, handler: {
            onDropdown: function (e) {
                e.data.onDropdown()
            }
        }, addListener: function (fn, ctx, data) {
            this.listeners.push({f: fn, c: ctx, d: data});
            return this;
        }, modalBoxDirectionTop: function (top) {
            this.directionTop = top;
            return this;
        }, onDropdown: function () {
            var close = function () {
                $(box.getMainDiv()).hide().slideUp(function () {
                    modal.remove()
                });
            }
            var modal = $("<div class='tw2gui_modal_box'></div>").click(close).height(Math.max(document.body.scrollHeight, $(document.body).height())).width(Math.max(document.body.scrollWidth, $(document.body).width()));
            $(document.body).append(modal);
            var pos = this.divMain.offset();
            var boxwrap = $('<div class="tw2gui_combobox_list"></div>').css("min-width", this.box.width() + "px").appendTo(modal);
            var box = new west.gui.Groupframe();
            var that = this;
            for (var i = 0; i < this.items.length; i += 1) {
                var el = this.items[i];
                box.appendToContentPane(el.node.clone().click((function (el) {
                    return function () {
                        close();
                        that.select(el.value);
                        return false;
                    }
                })(el)));
            }
            $(box.getMainDiv()).appendTo(boxwrap);
            var top = this.directionTop ? (pos.top + 15 - boxwrap.height()) : (pos.top + this.box.height());
            boxwrap.css({"left": pos.left + "px", "top": top + "px"});
        }, removeItem: function (value) {
            for (var i = 0; i < this.items.length; i += 1)if (this.items[i].value == value)break;
            if (i >= this.items.length)return this;
            if (value == this.value) {
                if (this.items.length == 1) {
                    this.box.empty();
                    this.value = null;
                    this.items = [];
                    return this;
                }
                this.select(this.items[i > 0 ? i - 1 : i + 1].value);
            }
            this.items.splice(i, 1);
            return this;
        }, addItem: function (value, htmlelement) {
            if (typeof(htmlelement) == "string")htmlelement = "<span>" + htmlelement + "</span>";
            this.items.push({value: value, node: $(htmlelement)});
            if (this.items.length == 1) {
                this.select(value);
            }
            return this;
        }, select: function (value) {
            for (var i = 0; i < this.items.length - 1; i += 1)if (this.items[i].value == value)break;
            var el = this.items[i];
            this.value = el.value;
            this.$(' > input', this.divMain).val(this.value);
            this.divMain.data('value', this.value);
            this.box.empty().append(el.node.clone());
            for (i = 0; i < this.listeners.length; i++) {
                var fi = this.listeners[i];
                fi.f.apply(fi.c, [value, fi.d]);
            }
            return this;
        }, getValue: function () {
            return this.value;
        }, setWidth: function (newWidth) {
            this.$(' > span.tw2gui_combobox_text', this.divMain).css('width', newWidth + 'px');
            return this;
        }
    });
    west.define('west.gui.Selectbox', west.gui.Component, {
        init: function () {
            this.divModal = $("<div class='tw2gui_modal_fixed' />");
            this.divMain = $("<div class='tw2gui_selectbox'>"
                + "<div class='tw2gui_selectbgr'>"
                + "<div class='tw2gui_bg_tl'/>"
                + "<div class='tw2gui_bg_tr'/>"
                + "<div class='tw2gui_bg_bl'/>"
                + "<div class='tw2gui_bg_br'/>"
                + "<div class='arrow'/>"
                + "</div>"
                + "<div class='tw2gui_selectbox_header'>"
                + "<div class='tw2gui_selectbgr'>"
                + "<div class='tw2gui_bg_tl' />"
                + "<div class='tw2gui_bg_tr' />"
                + "</div>"
                + "<div class='header_title' />"
                + "</div>"
                + "<ul class='tw2gui_selectbox_content' />"
                + "</div>");
            this.divWrap = $("<div class='tw2gui_selectbox_wrapper' />");
            this.elContent = $(".tw2gui_selectbox_content", this.divMain);
            this.items = [];
            this.listeners = [];
        }, addListener: function (fn, ctx, data) {
            this.listeners.push({f: fn, c: ctx, d: data});
            return this;
        }, removeItem: function (value) {
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i].value == value)
                    break;
            }
            if (i >= this.items.length)
                return this;
            if (value == this.value && 1 == this.items.length) {
                this.box.empty();
                this.value = null;
                this.items = [];
                return this;
            }
            this.items.splice(i, 1);
            this._build();
            return this;
        }, setHeader: function (header) {
            this.$(".tw2gui_selectbox_header").show();
            this.$(".tw2gui_selectbox_header .header_title").html(header);
            return this;
        }, setWidth: function (width) {
            this.elContent.css("width", width);
            return this;
        }, setHeight: function (height) {
            this.elContent.css("height", height);
            return this;
        }, addEmpty: function () {
            this.addItem(null, $("<div style='height: 16px;' />"));
            return this;
        }, removeAll: function () {
            this.items = [];
            this._build();
        }, addItem: function (value, htmlelement, title) {
            if (typeof(htmlelement) == "string") {
                htmlelement = "<span>" + htmlelement + "</span>";
            }
            this.items.push({value: value, node: $(htmlelement), title: title});
            this._build();
            return this;
        }, _getScrollpane: function () {
            if (this.scrollpane) {
                this.scrollpane.getMainDiv().detach();
            } else {
                this.scrollpane = new west.gui.Scrollpane();
                this.getMainDiv().addClass('with_scrollbar');
            }
            this.elContent.empty().append(this.scrollpane.getMainDiv());
            return this.scrollpane.getContentPane();
        }, _getContent: function () {
            if (this.scrollpane) {
                this.getMainDiv().removeClass('with_scrollbar');
                this.scrollpane.getMainDiv().remove();
                delete this.scrollpane;
            }
            return this.elContent;
        }, _build: function (show) {
            var item, isSubmenu = false, that = this, $content;
            if (!show && !this.divWrap.is(':visible')) {
                return;
            }
            if (this.items.length > 14) {
                $content = this._getScrollpane();
            } else {
                $content = this._getContent();
            }
            $content.empty();
            for (var i = 0; i < this.items.length; i++) {
                item = this.items[i];
                isSubmenu = item.title instanceof west.gui.Selectbox;
                var li = $("<li />").append($(item.node));
                if (isSubmenu) {
                    li.append(new west.gui.Icon.get('arrowright'));
                    (function (li) {
                        item.title.hide = function () {
                            that.divWrap.remove();
                            return this;
                        };
                        var el = item.title._build(show).getMainDiv(), dohide = false;
                        el.hide();
                        that.divWrap.append(el);
                        var onHover = function () {
                            dohide = false;
                            var pos = li.offset();
                            el.css({top: pos.top - (li.height()) + 10, left: pos.left + that.divMain.width() + 5})
                            setTimeout(function () {
                                el.show();
                            }, 400);
                        }
                        var onFade = function () {
                            dohide = true;
                            setTimeout(function () {
                                if (dohide)el.hide();
                            }, 400);
                        };
                        li.hover(onHover, onFade);
                        el.hover(onHover, onFade);
                    })(li);
                } else {
                    li.attr("title", item.title).click(function (value) {
                        return function () {
                            that.select(value);
                        }
                    }(item.value));
                }
                $content.append(li);
            }
            this.divModal.click(function () {
                that.hide();
            });
            return this;
        }, show: function (e, data) {
            this.showData = data;
            this._build(true);
            this.divWrap.append(this.divMain, this.divModal);
            $("#popup-container").append(this.divWrap);
            if (null != e) {
                this.setPosition(e.clientX, e.clientY);
            }
            return this;
        }, hide: function () {
            delete this.scrollpane;
            this.divWrap.remove();
            return this;
        }, select: function (index) {
            if (null == index)return this;
            for (var i = 0; i < this.listeners.length; i++) {
                var fi = this.listeners[i];
                fi.f.apply(fi.c, [index, fi.d, this.showData]);
            }
            this.hide();
            return this;
        }, setPosition: function (x, y) {
            var top, left, arrClass, el = this.divMain;
            var scrollLeft = $(window).scrollLeft(), scrollTop = $(window).scrollTop();
            var window_height = window.Map && Map.height || $(window).height(), window_width = window.Map && Map.width || $(window).width(), margin_bottom = window_height - y;
            var height = el.height(), width = el.width();
            if (margin_bottom < height + 30) {
                arrClass = "bottom";
                top = y - height + scrollTop - 25;
            } else {
                arrClass = "top";
                top = y + scrollTop + 15;
            }
            left = x - (width / 2);
            if (left < 0) {
                left = 0;
            } else if (left + width > (window_width - 35)) {
                left -= (left + width) - window_width + 35 - scrollLeft;
            }
            var arrow = $(".arrow", this.divMain);
            arrow.removeClass("top").removeClass("bottom").addClass(arrClass).css({left: x - left - (arrow.width() / 2) + scrollLeft});
            $(this.divMain).css({top: top, left: left});
            return this;
        }
    });
    west.define('west.gui.Textfield', west.gui.Component, {
        init: function (tid, type, cls) {
            type = type || 'text';
            this.divMain = $('<span class="tw2gui_textfield_wrapper">' + '<span class="tw2gui_textfield_label" />' + '<span class="tw2gui_textfield"><span><input type="' + type + '" /></span></span></span>');
            var inp = $('input', this.divMain);
            if (tid)inp.attr('id', tid);
            if (cls)inp.attr('class', cls);
            inp[0].guiElement = this.divMain[0].guiElement = this;
            this.listeners = [];
            var that = this;
            inp.keyup(function (e) {
                if (e.keyCode == 13) {
                    for (var i = 0; i < that.listeners.length; i++) {
                        var fi = that.listeners[i];
                        fi.f.apply(fi.c, [inp.val(), fi.d]);
                    }
                }
            });
        }, setName: function (name) {
            this.$('input', this.divMain).attr('name', name);
            return this;
        }, maxlength: function (ml) {
            this.$('input', this.divMain).attr('maxlength', ml);
            return this;
        }, setId: function (id) {
            this.$('input', this.divMain).attr('id', id);
            return this;
        }, setClass4Input: function (className) {
            $('input', this.divMain).attr('class', className);
            return this;
        }, getField: function () {
            return this.$('> .tw2gui_textfield input', this.divMain);
        }, getValue: function () {
            return this.getField().attr('value');
        }, setValue: function (val) {
            this.getField().attr('value', val);
            return this;
        }, setPlaceholder: function (val) {
            this.getField().attr('placeholder', val);
            return this;
        }, setTooltip: function (text) {
            this.$('span.tw2gui_textfield', this.divMain).attr('title', text);
            return this;
        }, setMaxLength: function (val) {
            this.getField().attr('maxlength', val);
            return this;
        }, setSize: function (size) {
            this.getField().attr('size', size);
            return this;
        }, setWidth: function (width) {
            this.$('input', this.divMain).css('width', width + 'px');
            return this;
        }, setLabel: function (label) {
            this.$(' span.tw2gui_textfield_label', this.divMain).html(label);
            return this;
        }, setReadonly: function (state) {
            if (undefined === state || true === state)
                this.$('input', this.divMain).attr('readonly', 'readonly');
            return this;
        }, addListener: function (fn, ctx, data) {
            this.listeners.push({f: fn, c: ctx, d: data});
            return this;
        }, onlyNumeric: function () {
            this.$('input', this.divMain).keypress(function (e) {
                var key = String.fromCharCode(!e.charCode ? e.which : e.charCode);
                if (!new RegExp("^[0-9]+$").test(key)) {
                    e.preventDefault();
                    return false;
                }
            });
            return this;
        }, focus: function () {
            this.getField().focus();
            return this;
        }, addKeyUpListener: function (callback, ctx) {
            if (ctx) {
                callback = callback.bind(ctx);
            }
            this.getField().on('keyup', callback);
            return this;
        }, click: function (callback) {
            this.$("input", this.divMain).on('click', callback);
            return this;
        }, blur: function (callback) {
            this.$("input", this.divMain).on('blur', callback);
            return this;
        }
    });
    west.define('west.gui.Progressbar', west.gui.Component, {
        init: function (current, max) {
            this.divMain = $('<div class="tw2gui_progressbar">'
                + '<div class="tw2gui_progressbar_progress">'
                + '<div class="tw2gui_progressbar_begin"/>'
                + '<div class="tw2gui_progressbar_end"/>'
                + '<div class="tw2gui_progressbar_fill"/>'
                + '<div class="tw2gui_progressbar_contents"/>'
                + '</div>'
                + '</div>');
            this.divMain[0].guiElement = this;
            this.valueIsTime = false;
            this.value = current;
            this.maxValue = max;
            this.endless = false;
            this.percentOnly = false;
            this.textOnly = false;
            this.color = 'green';
            this.direction = 'direction_ltr';
            this.update();
        }, setMaxValue: function (val) {
            this.maxValue = val;
            this.update();
            return this;
        }, setColor: function (color) {
            this.removeClass(this.color);
            this.addClass(color);
            this.color = color;
            return this;
        }, setDirection: function (direction) {
            direction = 'direction_' + direction;
            this.removeClass(this.direction);
            this.addClass(direction);
            this.direction = direction;
            return this;
        }, setValue: function (val) {
            this.value = val;
            this.update();
            return this;
        }, increase: function (step) {
            this.value = this.value + (step || 1);
            this.update();
            return this;
        }, showPercentOnly: function (bool) {
            this.percentOnly = bool;
            this.update();
            return this;
        }, getValue: function () {
            return this.value;
        }, update: function () {
            var calc, contents, fill;
            if (this.endless)
                calc = 100; else {
                calc = this.maxValue > 0 ? Math.floor((this.value / this.maxValue) * 100) : 100;
                calc = calc > 100 ? 100 : calc;
            }
            contents = this.$('div.tw2gui_progressbar_contents', this.divMain);
            fill = this.$('div.tw2gui_progressbar_fill', this.divMain);
            if (null != this.maxValue && null != this.value) {
                if ($.browser.msie && $.browser.version <= 8)
                    fill.css("width", calc + "%"); else {
                    fill.css("width", calc + "%");
                }
            }
            contents.empty();
            var v = this.value, m = this.maxValue, differentValue = this.differentValue;
            if (this.valueIsTime) {
                var tcalc = function (val) {
                    var h, m, s;
                    m = s = "00";
                    h = Math.floor(val / 3600);
                    if (0 != (val % 3600)) {
                        var c = val - (h * 3600);
                        minute = Math.floor(c / 60);
                        if (0 != (c % 60))s = c % 60;
                    }
                    return (h <= 0 ? "" : h + ":") + m + ":" + s;
                };
                v = tcalc(v);
                m = tcalc(m);
            }
            if (this.endless)contents.append($("<span>" + v + "</span>")); else if (this.percentOnly)contents.append($('<span>' + calc + '%</span>'))
            else if (this.textOnly)contents.append("<span>" + v + " / " + m + "</span>"); else if (this.valueDifferent)contents.append("<span>" + differentValue + "</span>"); else contents.append($('<span>' + (v + ' / ' + m + (' (' + calc + '%)')) + '</span>'));
        }, setLabel: function (text, icon) {
            var el = this.$('.tw2gui_progressbar_label', this.divMain);
            if (el)el.remove();
            if (!(icon instanceof west.gui.Icon) && undefined !== icon)
                icon = new west.gui.Icon(icon);
            el = $("<div class='tw2gui_progressbar_label'/>");
            if (undefined !== icon)el.append(icon.getMainDiv());
            el.append("<span>" + text + "</span>");
            this.divMain.prepend(el);
            return this;
        }, dropShadow: function () {
            this.divMain.append($("<div class='tw2gui_progressbar_shadow'/>"));
            return this;
        }, setEndless: function (state) {
            this.endless = state;
            this.update();
            return this;
        }, setTextOnly: function (state) {
            this.textOnly = state;
            this.update();
            return this;
        }, setValueTime: function () {
            this.valueIsTime = true;
        }, setDifferentValue: function (value) {
            this.valueDifferent = true;
            this.differentValue = value
        }
    });
    west.define('west.gui.Searchbox', west.gui.Component, {
        init: function (formName, callbackFunction) {
            this.divMain = $('<div class="searchbox"><span class="iSearchbox"></span>' + '<span class="butSearchbox"></span></div>');
            this.$('span.iSearchbox', this.divMain).append(new west.gui.Textfield().setName(formName + '_search').setMaxLength(100).getMainDiv());
            this.divMain[0].guiElement = this;
        }, setWidth: function (width) {
            this.divMain.css('width', width);
            $('span.iSearchbox .tw2gui_textfield', this.divMain).css({
                'max-width': (width - 40) + 'px',
                'width': (width - 40) + 'px',
                'float': 'left'
            });
            return this;
        }, addEnterEvent: function () {
            var that = this;
            $('span.iSearchbox .tw2gui_textfield input:text', this.divMain).keypress(function (e) {
                if (e.which == 13)$('.tw2gui_button', that.divMain).click();
            });
        }
    });
    west.define('west.gui.Checkbox', west.gui.Component, {
        init: function (label, groupClass, callback) {
            this.divMain = $('<div class="tw2gui_checkbox ' + groupClass + '" />');
            this.divMain[0].guiElement = this;
            var that = this;
            this.divMain.click(function () {
                that.toggle();
            });
            if (callback)this.setCallback(callback);
            this.setLabel(label);
            this.groupClass = groupClass;
            this.radiobutton = false;
            this.enabled = true;
        }, setSelected: function (state, noCallback) {
            if (!this.enabled)return this;
            if (state) {
                if (!this.divMain.hasClass('tw2gui_checkbox_checked'))
                    this.divMain.addClass('tw2gui_checkbox_checked');
                this.divMain.data('enabled', true);
            } else {
                this.divMain.removeClass('tw2gui_checkbox_checked');
                this.divMain.data('enabled', false);
            }
            if (this.radiobutton) {
                $('div.tw2gui_checkbox.' + this.groupClass).removeClass('tw2gui_checkbox_checked');
                this.divMain.addClass('tw2gui_checkbox_checked');
            }
            if (noCallback)return this;
            if (undefined != this.callback)
                this.callback(state);
            return this;
        }, isSelected: function () {
            return this.divMain.hasClass('tw2gui_checkbox_checked');
        }, toggle: function () {
            this.setSelected(!this.isSelected());
            return false;
        }, setRadiobutton: function () {
            this.divMain.addClass('tw2gui_radiobutton')
            this.radiobutton = true;
            return this;
        }, reset: function () {
            if (!this.enabled)return this;
            try {
                $(this.divMain).toggleClass('tw2gui_checkbox_checked');
            }
            catch (e) {
                $(this.divMain).removeClass('tw2gui_checkbox_checked');
            }
            this.divMain.data('enabled', $(this.divMain).hasClass('tw2gui_checkbox_checked'));
            return this;
        }, setValue: function (value) {
            this.divMain.data('value', value);
            return this;
        }, getValue: function () {
            return this.divMain.data('value');
        }, setLabel: function (label) {
            this.divMain.html(label);
            if (undefined == label || "" == label) {
                this.divMain.removeClass('tw2gui_checkbox_labeled');
            } else {
                this.divMain.addClass('tw2gui_checkbox_labeled');
            }
            return this;
        }, setEnabled: function (state) {
            this.enabled = state;
            this.divMain.data('enabled', state);
            return this;
        }, setCallback: function (callback) {
            this.callback = callback;
            return this;
        }, setId: function (id) {
            this.divMain.attr('id', id);
            return this;
        }, setTitle: function (text) {
            return this.setTooltip(text);
        }
    });
    west.define('west.gui.Accordion', west.gui.Component, {
        init: function (id, name, groupname) {
            this.id = id;
            this.group = groupname;
            this.divMain = $('<div id="' + id + '" class="tw2gui_accordion_categorybar' + (this.group ? ' accordiongroup_' + this.group : '') + '">' + '<div class="accordion_right"></div>' + '<div class="accordion_left_closed"></div>' + '<span class="accordion_label">' + name + '</span>' + '</div>' + '<div id="' + this.id + '_content" class="tw2gui_accordion_content' + (this.group ? ' accordiongroup_' + this.group : '') + '"></div>');
            this.divMain.addClass('accordion_closed');
            $(this.divMain[0]).click(this.click).data('accordiongroup', groupname);
            this.scrollpane = new west.gui.Scrollpane();
            $(this.divMain[1]).append(this.scrollpane.getMainDiv());
        }, setContent: function (content) {
            $(this.divMain[1]).html(content);
            return this;
        }, addContentRow: function (content, title) {
            this.scrollpane.appendContent($('<p class="accordion_contentRow" ' + (title ? title : '') + '/>').append(content));
            return this;
        }, clearContent: function () {
            $('#' + this.id + '_content', this.divMain).empty();
            return this;
        }, setClickable: function () {
            $(this.accordion).on('click', this.click);
            return this;
        }, setUnClickable: function () {
            $(this.accordion).off('click');
            return this;
        }, click: function () {
            if ($(this).hasClass('accordion_opened')) {
                $('#' + this.id + '_content').hide();
                $(this).removeClass('accordion_opened').addClass('accordion_closed');
                $('#' + this.id + ' div.accordion_left_opened').removeClass('accordion_left_opened').addClass('accordion_left_closed');
                $('div.tw2gui_accordion_categorybar.accordiongroup_' + $(this).data("accordiongroup")).show();
            }
            else {
                if ($(this).attr('class').match('accordiongroup_')) {
                    var classes = $(this).attr('class').split(' ');
                    $.each(classes, function (k, v) {
                        if (v.match('accordiongroup_')) {
                            var group = v.split('group_')[1];
                            $('div.accordiongroup_' + group + '.accordion_opened').removeClass('accordion_opened').addClass('accordion_closed');
                            $('div.accordiongroup_' + group + ' .accordion_left_opened').removeClass('accordion_left_opened').addClass('accordion_left_closed');
                            $('div.tw2gui_accordion_content.accordiongroup_' + group).hide();
                        }
                    });
                }
                $('#' + this.id + '_content').show();
                $(this).removeClass('accordion_closed').addClass('accordion_opened');
                $('#' + this.id + ' .accordion_left_closed').removeClass('accordion_left_closed').addClass('accordion_left_opened');
                $('div.tw2gui_accordion_categorybar.accordiongroup_' + $(this).data("accordiongroup")).hide();
                $(this).show();
            }
        }
    });
    west.define('west.gui.Accordiongroup', west.gui.Component, {
        init: function (groupname) {
            this.divMain = $('<div class="accordion_root ' + groupname + '"></div>');
            this.groupname = groupname;
        }, addAccordion: function (accordion) {
            this.divMain.append(accordion);
            return this;
        }, createAccordion: function (id, label) {
            var acc = new west.gui.Accordion(id, label, this.groupname).getMainDiv();
            this.divMain.append(acc);
            return this;
        }
    });
    west.define('west.gui.Textarea', west.gui.Component, {
        init: function (content, classes) {
            this.divMain = $("<span class='tw2gui_textarea " + (classes || "") + "'>" + "<div class='tw2gui_bg'></div>" + "<div class='tw2gui_bg_tl'></div><div class='tw2gui_bg_br'></div>" + "<div class='tw2gui_bg_tr'></div><div class='tw2gui_bg_bl'></div>" + "<div class='tw2gui_textarea_wrapper'><textarea></textarea></div></span>");
            this.divMain[0].guiElement = this;
            this.textarea = $('textarea', this.divMain);
            this.textarea.val(content || "");
        }, setContent: function (c) {
            this.textarea.val(c || "");
            return this;
        }, getContent: function () {
            return this.textarea.val();
        }, setReadonly: function () {
            this.textarea.attr('readonly', 'readonly');
            return this;
        }, setWidth: function (width) {
            this.textarea.css('width', width);
            return this;
        }, setHeight: function (height) {
            this.textarea.css('height', height);
            return this;
        }, setId: function (id) {
            this.textarea.attr('id', id);
            return this;
        }, setExpandable: function (opts) {
            var align = opts.align || 'left';
            this.toggler = $(s('<div title="%1" class="tw2gui_textarea_toggler %2"></div>', 'Развернуть'.escapeHTML(), 'align_' + align)).click(this.expandToggle.bind(this));
            this._expandable = true;
            this._expandedWidth = opts.width;
            this._closedWidth = this.textarea.width();
            this.getMainDiv().append(this.toggler);
            return this;
        }, expandToggle: function () {
            if (!this._expandable)return;
            if (this.toggler.hasClass('expanded')) {
                this.textarea.animate({width: this._closedWidth});
                this.toggler.addMousePopup('Развернуть')
            } else {
                this.textarea.animate({width: this._expandedWidth});
                this.toggler.addMousePopup('Свернуть');
            }
            this.toggler.toggleClass('expanded');
        }
    });
    west.define('west.gui.Pagebar', west.gui.Component, {
        init: function (page, pages, callback, context, hasNext) {
            var that = this;
            this.relative = pages == null ? true : false;
            this.callback = callback;
            this.context = context;
            this.divMain = $("<div class='tw2gui_pagebar'/>").append($('<span class="button prev firstPage"></span>').click(function () {
                that.btnClick('first');
            }), $('<span class="button prev previousPage"></span>').click(function () {
                that.btnClick('prev');
            }), $("<div class='current_page'/>").click(function () {
                that.togglePagePrompt();
            }), $('<span class="button next nextPage"></span>').click(function () {
                that.btnClick('next');
            }), $('<span class="button next lastPage"></span>').click(function () {
                that.btnClick('last');
            }));
            if (this.relative)$("span.lastPage", this.divMain).remove();
            this.update(page, pages, hasNext);
            if (!this.relative)this.addPageprompt();
        }, update: function (page, maxPages, hasNext) {
            this.setPage(page);
            this.setMaxPages(maxPages);
            if (this.page <= 1)
                $("span.prev", this.divMain).hide(); else
                $("span.prev", this.divMain).show();
            if ((!this.relative && this.page >= this.pages) || (this.relative && !hasNext))
                $("span.next", this.divMain).hide(); else
                $("span.next", this.divMain).show();
        }, setPage: function (p) {
            this.page = p;
            $("div.current_page", this.divMain).text(this.page);
            if (this.textfield)this.textfield.setValue(this.page);
        }, setMaxPages: function (p) {
            if (null !== p) {
                this.pages = Math.max(this.page, p);
                $("span.maxpages", this.pageprompt).text("/ " + this.pages);
            }
        }, addPageprompt: function () {
            var that = this;
            this.textfield = new west.gui.Textfield().setSize(3);
            this.textfield.getField().keypress(function (e) {
                if (e.which == 13) {
                    that.pageprompt.hide();
                    that.btnClick("certain");
                }
            });
            this.pageprompt = $('<span class="pageprompt"/>').append('<div class="background"/>').append('<div class="frame tw2gui_bg_tl"></div>').append('<div class="frame tw2gui_bg_tr"></div>').append('<div class="frame tw2gui_bg_bl"></div>').append('<div class="frame tw2gui_bg_br"></div>').append(this.textfield.getMainDiv()).append($("<span class='maxpages'>/ " + this.pages + "</span>"));
            this.divMain.append(this.pageprompt);
        }, btnClick: function (dir) {
            if (this.relative)return this.callback.call(this.context, dir);
            var param = 1;
            switch (dir) {
                case'next':
                    param = this.page + 1;
                    break;
                case'prev':
                    param = this.page - 1;
                    break;
                case'first':
                    param = 1
                    break;
                case'last':
                    param = this.pages;
                    break;
                case'certain':
                    param = parseInt(this.textfield.getValue()) || 1;
                    break;
            }
            this.callback.call(this.context, Math.min(Math.max(param, 1)), this.pages);
        }, togglePagePrompt: function () {
            if (this.relative)return;
            this.textfield.setValue(this.page)
            this.pageprompt.toggle();
            this.textfield.getField().focus().val(this.textfield.getValue());
        }
    });
    west.define('west.gui.Bbcodes', west.gui.Component, {
        init: function (target, skip) {
            if (target instanceof west.gui.Textarea)
                target = target.textarea[0];
            this.target = target;
            this.divMain = $("<div class='tw2gui_bbcodes'>" + "<span title='" + 'Жирный' + "' class='bbbold'></span>" + "<span title='" + 'Курсив' + "' class='bbitalic'></span>" + "<span title='" + 'Подчёркивание' + "' class='bbunderline'></span>" + "<span title='" + 'Зачёркивание' + "' class='bbstrike'></span>" +
                (($.inArray("player", skip) === -1) ? "<span title='" + 'Игрок' + "' class='bbplayer'></span>" : "") +
                (($.inArray("town", skip) === -1) ? "<span title='" + 'Город' + "' class='bbtown'></span>" : "") +
                (($.inArray("fort", skip) === -1) ? "<span title='" + 'Форт' + "' class='bbfort'></span>" : "") +
                (($.inArray("alliance", skip) === -1) ? "<span title='" + 'Альянс' + "' class='bballiance'></span>" : "") +
                (($.inArray("url", skip) === -1) ? "<span title='" + 'Ссылка' + "' class='bburl'></span>" : "") + "<div style='clear: both;'></div" + "</div>");
            var BB = new BBCode(this.target);
            $('span.bbbold', this.divMain).click(function () {
                BB.addCodeTag('b');
            });
            $('span.bbitalic', this.divMain).click(function () {
                BB.addCodeTag('i');
            });
            $('span.bbunderline', this.divMain).click(function () {
                BB.addCodeTag('u');
            });
            $('span.bbstrike', this.divMain).click(function () {
                BB.addCodeTag('del');
            });
            if ($.inArray("player", skip) === -1)
                $('span.bbplayer', this.divMain).click(function () {
                    BB.addCodeTag('player');
                });
            if ($.inArray("town", skip) === -1)
                $('span.bbtown', this.divMain).click(function () {
                    BB.addCodeTag('town');
                });
            if ($.inArray("fort", skip) === -1)
                $('span.bbfort', this.divMain).click(function () {
                    BB.addCodeTag('fort');
                });
            if ($.inArray("alliance", skip) === -1)
                $('span.bballiance', this.divMain).click(function () {
                    BB.addCodeTag('alliance');
                });
            if ($.inArray("url", skip) === -1)
                $('span.bburl', this.divMain).click(function () {
                    BB.addExtendedCodeTag('Введи, пожалуйста, ссылку.', 'url');
                });
        }
    });
    currentHighlight = null;
    west.define('west.gui.Window', west.gui.Component, {
        init: function (title, winclass, noDragEvent) {
            this.divMain = $("<div class='tw2gui_window tw2gui_win2 tw2gui_window_notabs " + (winclass || "") + "'></div>").append("<div class='tw2gui_window_shadow_box'>" + "<div class='tw2gui_window_shadow tw2gui_bg_br'></div>" + "<div class='tw2gui_window_shadow tw2gui_bg_tr'></div>" + "<div class='tw2gui_window_shadow tw2gui_bg_bl'></div>" + "</div>", "<div class='tw2gui_window_inset'>" + "<div class='tw2gui_inner_window_bg'></div>" + "<div class='tw2gui_inner_window_bg2'></div></div>", "<div class='tw2gui_window_inset_bottom'></div>", "<div class='tw2gui_window_inset_right'></div>", "<div class='tw2gui_inner_splitwindow_container'>" + "<div class='tw2gui_inner_splitwindow'>" + "<div class='tw2gui_inner_splitwindow_rightfade'></div>" + "</div></div>", "<div class='tw2gui_window_border tw2gui_bg_tl'></div>", "<div class='tw2gui_window_border tw2gui_bg_br'></div>", "<div class='tw2gui_window_border tw2gui_bg_tr'></div>", "<div class='tw2gui_window_border tw2gui_bg_bl'></div>", "<div class='tw2gui_inner_window_title tw2gui_window_notabs'>" + "<div class='tw2gui_inner_window_title_left'></div>" + "<div class='tw2gui_inner_window_title_right'></div>" + "</div>", "<div class='tw2gui_window_pane'>" + "<div class='tw2gui_window_border_ext tw2gui_window_border_ext_tl'></div>" + "<div class='tw2gui_window_border_ext tw2gui_window_border_ext_tr'></div>" + "<div class='loader'><img src='https://westrus.innogamescdn.com/images/throbber2.gif' /></div>" + "</div>", "<div class='tw2gui_window_content_pane'></div>", "<div class='tw2gui_window_sizer'></div>", "<div class='tw2gui_window_tabbar'><div class='tw2gui_window_tabbar_tabs'></div>" + "<div class='tw2gui_window_tabbar_faderight'></div>" + "<div class='tw2gui_window_tabbar_fadeleft'></div></div>", "<div class='tw2gui_window_tab_control_clipper'><div class='tw2gui_window_tab_control'>" + "<div class='tw2gui_window_tab_control_btnleft'></div>" + "<div class='tw2gui_window_tab_control_btnright'></div>" + "<div class='tw2gui_window_tab_control_select'></div></div></div>", "<div class='tw2gui_window_buttons'>" + "<div class='tw2gui_window_buttons_reload' title='&lt;b&gt;" + 'Обновить содержание' + "'&lt;/b&gt;></div>" + "<div class='tw2gui_window_buttons_closeall' title='&lt;b&gt;" + 'Закрыть все окна' + "&lt;/b&gt;'></div>" + "<div class='tw2gui_window_buttons_minimize' title='&lt;b&gt;" + 'Свернуть окно' + "&lt;/b&gt;'></div>" + "<div class='tw2gui_window_buttons_close' title='&lt;b&gt;" + 'Закрыть окно' + "&lt;/b&gt;'></div>" + "</div>").appendTo("#windows")[0];
            var now = new Date();
            if (now.isWinterTime()) {
                $(this.divMain).addClass('snow');
            } else if (now < buildDateObject('2.4.2014') && now > buildDateObject('1.4.2014')) {
                $(this.divMain).addClass('fire');
            }
            this.divMain.guiElement = this;
            var divTitleHandle = $('div.tw2gui_inner_window_title', this.divMain)[0];
            this.sizeRange = {x: [220, 749], y: [220, 471]};
            this.draggable = noDragEvent ? false : true;
            $(this.divMain).jqResize($('div.tw2gui_window_sizer', this.divMain), {
                rangex: this.sizeRange.x,
                rangey: this.sizeRange.y,
                onStart: this.handler.onResizeStart,
                onStop: this.handler.onResizeStop,
                onDrag: this.handler.onResizing,
                win: this
            });
            if (this.draggable) {
                $(this.divMain).jqDrag(divTitleHandle, {
                    onStart: this.handler.onDragStart,
                    onStop: this.handler.onDragStop,
                    onDrag: this.handler.onDrag,
                    win: this
                });
            }
            $(this.divMain).on('mousedown', {win: this}, this.handler.onWindowMouseDown).on('mouseenter', {win: this}, this.handler.onWindowMouseEnter);
            $(this.divMain).on('click', {win: this}, this.handler.onClick);
            $('div.tw2gui_window_tab_control_btnleft', this.divMain).on('click', {win: this}, this.handler.onClickTabCtrlLeft);
            $('div.tw2gui_window_tab_control_btnright', this.divMain).on('click', {win: this}, this.handler.onClickTabCtrlRight);
            $('div.tw2gui_window_tab_control_select', this.divMain).on('click', {win: this}, this.handler.onClickTabCtrlSelect);
            $('div.tw2gui_window_buttons_close', this.divMain).on('click', {
                win: this,
                type: TWE('WINDOW_CLOSE')
            }, this.handler.windowFireEvent);
            $('div.tw2gui_window_buttons_reload', this.divMain).on('click', {
                win: this,
                type: TWE('WINDOW_RELOAD')
            }, this.handler.windowFireEvent);
            $('div.tw2gui_window_buttons_minimize', this.divMain).on('click', {
                win: this,
                type: TWE('WINDOW_MINIMIZE')
            }, this.handler.windowFireEvent);
            $('div.tw2gui_window_buttons_closeall', this.divMain).on('click', {
                win: this,
                type: TWE('WINDOW_CLOSEALL_OPEN')
            }, this.handler.windowFireEvent);
            this.titler = new west.gui.Textart("", "", 32, "bold 20pt Times New Roman").appendTo(divTitleHandle).setScaleX(.8);
            this.setResizeable(false).setTitle(title).center().bringToTop();
            this.tabIds = {};
            this.eventListeners = {};
        }, showTabLoader: function (tab_id) {
            $(".tw2gui_window_tab" + (tab_id ? '._tab_id_' + tab_id : ''), this.divMain).addClass('loading');
        }, showLoader: function () {
            $(".tw2gui_window_pane > .loader", this.divMain).show();
            if (!($.browser.msie && $.browser.version <= 8))
                $("div.tw2gui_window_content_pane", this.divMain).css("opacity", "0.5");
        }, hideLoader: function () {
            $(".tw2gui_window_pane > .loader", this.divMain).hide();
            $(".tw2gui_window_tab.loading", this.divMain).removeClass('loading');
            if (!($.browser.msie && $.browser.version <= 8))
                $("div.tw2gui_window_content_pane", this.divMain).css("opacity", "1.0");
        }, addEventListener: function (etype, handler, context, data) {
            TWE(etype);
            if (!this.eventListeners[etype])this.eventListeners[etype] = [{
                f: handler,
                c: context,
                d: data
            }]; else this.eventListeners[etype].unshift({f: handler, c: context, d: data});
            return this;
        }, setMinSize: function (w, h) {
            this.sizeRange.x[0] = w;
            this.sizeRange.y[0] = h;
            return this;
        }, setMaxSize: function (w, h) {
            this.sizeRange.x[1] = w;
            this.sizeRange.y[1] = h;
            return this;
        }, height: function () {
            return $(this.divMain).height();
        }, width: function () {
            return $(this.divMain).width();
        }, setId: function (id) {
            this.id = id;
            return this;
        }, getId: function () {
            return this.id;
        }, saveAppearance: function () {
            var self = $(this.divMain);
            var pos = self.position();
            return {x: self.css("left"), y: self.css("top"), w: self.width(), h: self.height()};
        }, restoreAppearance: function (ap) {
            if (!ap)return this;
            var self = $(this.divMain);
            self.css({"left": ap.x, "top": ap.y}).width(ap.w).height(ap.h);
            return this;
        }, destroy: function () {
            this.fireEvent(TWE("WINDOW_DESTROY"), this);
            $(this.divMain).remove().empty();
        }, removeEventListener: function (etype, handler) {
            var ls = this.eventListeners[etype];
            if (!ls)return;
            for (var i = ls.length - 1; i >= 0; i -= 1) {
                if (ls[i] == handler)ls.splice(i, 1);
            }
            return this;
        }, addTab: function (title, id, onActivate, context, data, closeable) {
            if (this.tabIds[id]) {
                throw'added tab with that id (' + id + ') already';
            }
            this.tabIds[id] = {f: onActivate, c: context, d: data, id: id};
            $('div.tw2gui_window_notabs', this.divMain).removeClass('tw2gui_window_notabs');
            $(this.divMain).removeClass('tw2gui_window_notabs');
            $('div.tw2gui_window_tabbar_tabs', this.divMain).append($("<div class='tw2gui_window_tab _tab_id_" + id + "' />").append('<div class="loader"></div>', "<div class='tw2gui_window_tab_text'>" + title + "</div><div class=" + (closeable ? "'tw2gui_window_tab_terminator_close'" : "'tw2gui_window_tab_terminator'") + "></div>").data("tab_id", id));
            $('div._tab_id_' + id, this.divMain).on('click', {
                win: this,
                tabid: id,
                f: onActivate,
                c: context,
                d: data
            }, this.handler.onClickTab)
            if (closeable) {
                var that = this;
                $('div._tab_id_' + id + ' > .tw2gui_window_tab_terminator_close').click(function () {
                    that.closeTab(id);
                });
            }
            if (!this.currentActiveTabId) {
                this.activateTab(id, false);
            }
            return this.doLayout();
        }, renameTab: function (tabId, newTitle) {
            if (!this.tabIds[tabId])throw'tabId does not exist';
            this.$('._tab_id_' + tabId + ' .tw2gui_window_tab_text').html(newTitle);
        }, switchTab: function (tabId) {
            this.activateTab(tabId);
            var self = this;
            this.$('div.tw2gui_window_content_pane > *').each(function (i, e) {
                self.removeClass($(e).attr('class'));
                if ($(e).hasClass(tabId)) {
                    $(e).children().fadeIn();
                    $(e).show();
                    self.addClass(tabId);
                } else {
                    $(e).children().fadeOut();
                    $(e).hide();
                }
                self.fireEvent(TWE("WINDOW_TAB_SWITCHED"), {'DOM': this, 'tabId': tabId});
            });
        }, hideTab: function (tabId) {
            this.$('._tab_id_' + tabId).hide();
        }, showTab: function (tabId) {
            this.$('._tab_id_' + tabId).show();
        }, closeTab: function (id) {
            if (!this.tabIds[id])return;
            var oldTab = this.tabIds[id];
            delete(this.tabIds[id]);
            var oldTabDiv = $('div._tab_id_' + id, this.divMain);
            if (!oldTabDiv.next().length && !oldTabDiv.prev().length) {
                this.destroy();
            } else {
                var leftTab = oldTabDiv.next().length == 0 ? oldTabDiv.prev() : oldTabDiv.next();
                if (this.currentActiveTabId == id)
                    this.activateTab($(leftTab).data('tab_id'), true);
                this.doLayout();
            }
            oldTabDiv.remove();
            this.fireEvent(TWE("TAB_CLOSED"), id);
        }, fireActivateTab: function (id) {
            var inf = this.tabIds[id]
            if (!inf || !inf.f)return false;
            inf.f.apply(inf.c, [this, id, inf.d]);
        }, activateTab: function (id, mkEvent) {
            if (!this.tabIds[id])throw"that tab does not exist";
            $('div.tw2gui_window_tab', this.divMain).removeClass('tw2gui_window_tab_active');
            $('div._tab_id_' + id, this.divMain).addClass('tw2gui_window_tab_active');
            $(this.divMain).addClass('active_tab_id_' + id);
            if (this.currentActiveTabId && this.currentActiveTabId != id)$(this.divMain).removeClass('active_tab_id_' + this.currentActiveTabId);
            this.currentActiveTabId = id;
            if (mkEvent)this.fireActivateTab(id);
            EventHandler.signal("WINDOW_TAB_OPENED", [id]);
            return this;
        }, handler: {
            onResizeStart: function (event) {
                this.win.bringToTop()
            }, onResizing: function (e, css) {
                $.triggerResizeEvent();
                css.width = css.width & (~1);
                css.height = css.height & (~1);
                this.win.doLayout();
                this.win.fireEvent(TWE("WINDOW_ONRESIZE"), this.win);
            }, onResizeStop: function (e) {
                this.win.doLayout();
                this.win.fireEvent(TWE("WINDOW_RESIZED"), this.win);
            }, onDragStart: function (event) {
                this.win.bringToTop();
                var shad = $('div.tw2gui_window_shadow_box', this.win.divMain);
                this.winwidth = shad.outerWidth() + shad.position().left;
                this.browserwidth = $(window).width();
            }, onDrag: function (e, css) {
                css.left = Math.min(this.browserwidth - this.winwidth + 610, Math.max(-610, css.left));
                css.top = Math.max(0, css.top);
            }, onDragStop: function (e, css) {
            }, onWindowMouseEnter: function (event) {
                var win = event.data.win;
                if (win == currentHighlight)return;
                if (currentHighlight)currentHighlight.visualBlur();
                currentHighlight = win.visualFocus();
            }, onWindowMouseDown: function (event) {
                event.data.win.bringToTop()
            }, onClickTabCtrlLeft: function (e) {
                e.data.win.tabScroll(-1);
            }, onClickTabCtrlRight: function (e) {
                e.data.win.tabScroll(1);
            }, onClickTabCtrlSelect: function (e) {
                e.data.win.tabSelect();
            }, onClickTab: function (e) {
                e.data.win.fireActivateTab(e.data.tabid);
                e.data.win.fireEvent(TWE('WINDOW_TAB_CLICK'), {window: e.data.win, tabid: e.data.tabid});
                return false;
            }, onClick: function (e) {
                e.data.win.fireEvent(TWE("WINDOW_CLICK"), {window: e.data.win});
            }, windowFireEvent: function (e) {
                e.data.win.fireEvent(e.data.type, e.data.win);
            }
        }, fireEvent: function (etype, edata) {
            TWE(etype);
            if (!this.eventListeners)return;
            var ls = this.eventListeners[etype];
            if (!ls)return this;
            if (!edata)edata = {};
            var i;
            for (i = ls.length - 1; i >= 0; i -= 1) {
                var listener = ls[i];
                listener.f.apply(listener.c, [etype, edata, listener.d]);
            }
            return this;
        }, visualBlur: function () {
            return this;
        }, visualFocus: function () {
            return this;
        }, setMiniTitle: function (t) {
            this.miniTitle = t;
            this.fireEvent(TWE("WINDOW_MINI_TITLE_CHANGED"), this);
            return this;
        }, getMiniTitle: function () {
            return this.miniTitle || "?";
        }, setTitle: function (title) {
            if (!title) {
                $(this.divMain).addClass("empty_title");
            } else {
                this.titler.setText(title);
                $(this.divMain).removeClass("empty_title");
            }
            return this;
        }, setSplitWindow: function (on) {
            if (on)$(this.divMain).addClass("splitwindow"); else $(this.divMain).removeClass("splitwindow");
            return this;
        }, setResizeable: function (on) {
            $('div.tw2gui_window_sizer', this.divMain).css("display", on ? "block" : "none");
            return this;
        }, getContentPane: function () {
            return $('div.tw2gui_window_content_pane', this.divMain)[0];
        }, appendToContentPane: function () {
            var self = $('div.tw2gui_window_content_pane', this.divMain);
            self.append.apply(self, arguments);
            return this;
        }, clearContentPane: function () {
            $('div.tw2gui_window_content_pane', this.divMain).empty();
            return this;
        }, getWindowPane: function () {
            return $('div.tw2gui_window_pane', this.divMain)[0]
        }, appendToWindowPane: function (x) {
            $('div.tw2gui_window_pane', this.divMain).append(x);
            return this;
        }, clearWindowPane: function (x) {
            $('div.tw2gui_window_pane', this.divMain).empty();
            return this;
        }, setSize: function (w, h) {
            $(this.divMain).width(w & (~1)).height(h & (~1));
            this.doLayout();
            return this;
        }, center: function (x, y) {
            $(this.divMain).center(x, y);
            return this;
        }, bringToTop: function () {
            $(this.divMain).bringToTop();
            EventHandler.signal("window_focus_changed", [this]);
            this.fireEvent(TWE("WINDOW_FOCUS"), this.win);
            return this;
        }, doLayout: function () {
            if ($(this.divMain).hasClass('tw2gui_window_notabs'))return;
            var tw = 0;
            var barw = $('div.tw2gui_window_tabbar', this.divMain).width();
            var tabbar = $('div.tw2gui_window_tabbar_tabs', this.divMain);
            var xoff = tabbar.position().left;
            var hidden = [];
            var thres = -5 - xoff;
            $('div.tw2gui_window_tab', this.divMain).each(function (i, e) {
                tw += $(e).outerWidth(true);
                if (tw - thres > barw)hidden.push(e);
            });
            if (xoff < 5 && tw + xoff < barw + 5)tabbar.css('left', Math.min(5, barw - tw));
            var control = $('div.tw2gui_window_tab_control', this.divMain);
            if ((barw > tw - thres || tw == 0) && xoff >= 5) {
                if (this._showtabcontrol) {
                    this._showtabcontrol = false;
                    control.animate({'top': -control.height() + "px"}, {duration: 100, easing: "swing"})
                }
            } else {
                if (!this._showtabcontrol) {
                    this._showtabcontrol = true;
                    control.animate({'top': '0px'}, {duration: 100, easing: "swing"})
                }
            }
            return this;
        }, tabScroll: function (dir) {
            if (dir * dir != 1)return this;
            var tabs = $('div.tw2gui_window_tabbar_tabs', this.divMain);
            tabs.clearQueue();
            var xoff = tabs.position().left;
            if ((dir < 0 && xoff >= 5))return this;
            var tw = 0;
            var barw = $('div.tw2gui_window_tabbar', this.divMain).width();
            var thres = 15 - xoff;
            var scrollto = 0;
            $('div.tw2gui_window_tab', this.divMain).each(function (i, e) {
                if (scrollto)return;
                var ew = $(e).outerWidth(true);
                if (dir > 0 && tw + xoff - 25 > barw)scrollto = tw;
                tw += ew;
                if (dir < 0 && tw >= -xoff)scrollto = -(tw - ew) + 15;
            });
            if (dir > 0 && !scrollto)scrollto = tw;
            if (!scrollto)return this;
            if (dir > 0) {
                tabs.animate({left: -(scrollto - barw) + "px"});
            } else {
                tabs.animate({left: (scrollto) + "px"});
            }
            return this;
        }, tabSelect: function () {
            return this;
        }, setModal: function () {
            $(this.divMain).append($("<div class='tw2gui_modal' />").append("<img src='https://westrus.innogamescdn.com/images/curtain_bg.png' style='width:100%;height:100%;opacity:0.7;'/>"));
        }
    });
    $(window).on('dblclick', function () {
        return false
    });
    west.define('west.gui.Window.extension.box', west.gui.Component, {
        init: function (win, wrapperPos) {
            this.divMain = $("<div class='tw2gui_window_extension_box'/>");
            this.btn = $("<div title='<b>" + "Закрыть/Открыть".escapeHTML()
                + "</b>' class='tw2gui_window_extension_box_btn'/>");
            this.pseudobtn = $("<div style='position:absolute;right:0;width:20px;height:20px;z-index:11;cursor:pointer;'/>");
            this.wrapper = $("<div class='tw2gui_window_extension_box_wrap'/>");
            this.wrapperPos = wrapperPos || 25;
            if (wrapperPos && wrapperPos < 25)
                this.wrapperPos = 25;
            var scroll = new west.gui.Scrollpane();
            scroll.appendContent("<div class='tw2gui_window_extension_box_content'/>");
            this.wrapper.append("<div class='tw2gui_window_extension_box_head'/>", scroll.getMainDiv());
            var that = this;
            var clk = function () {
                that.setVisible(!that.visible);
            };
            this.btn.click(clk);
            this.pseudobtn.click(clk);
            this.divMain.append(this.btn, this.wrapper.append(this.pseudobtn));
            $(win.getMainDiv()).prepend(this.divMain);
            this.visible = true;
            return this;
        }, setVisible: function (state) {
            if (this.visible == state)return false;
            this.btn.css("background-position", state ? "-17px 0" : "0 0");
            var btnCss = {left: state ? 264 : this.wrapperPos - 21};
            var wrapperCss = {left: state ? 0 : -(this.wrapper.outerWidth() - this.wrapperPos)};
            if (Config.get("gui.main.animations")) {
                this.btn.stop().animate(btnCss);
                this.wrapper.stop().animate(wrapperCss);
            } else {
                this.btn.css(btnCss);
                this.wrapper.css(wrapperCss);
            }
            this.visible = state;
            return this;
        }, setHead: function (data) {
            $("div.tw2gui_window_extension_box_head", this.divMain).html(data);
            return this;
        }, setContent: function (data) {
            $("div.tw2gui_window_extension_box_content", this.divMain).html(data);
            return this;
        }
    });
    west.define('west.gui.Plusminusfield', west.gui.Component, {
        init: function (id, start_value, min_value, max_value, extra_points, callbackPlus, callbackMinus) {
            this.divMain = $('<div class="tw2gui_plusminus" id="' + id + '"></div>');
            this.current_value = start_value;
            this.max_value = parseInt(max_value);
            this.min_value = min_value;
            this.extra = extra_points;
            this.revision = 0;
            this.disabledPlus = false;
            this.disabledMinus = false;
            this.id = id;
            this.data = {};
            this.divMain.guiElement = this;
            var that = this;
            var minus = $('<span class="butMinus"></span>').click({obj: this}, function (ev) {
                if (callbackMinus(ev)) {
                    that.toggleMinus();
                    that.togglePlus();
                }
            });
            var plus = $('<span class="butPlus"></span>').click({obj: this}, function (ev) {
                if (callbackPlus(ev)) {
                    that.toggleMinus();
                    that.togglePlus();
                }
            });
            $(this.divMain).append(minus, $('<span unselectable="on" class="displayValue unselectable">' + this.current_value + '</span>'), $('<span unselectable="on" class="displayValueBonus' + (this.extra > 0 ? ' text_green' : '') + ' unselectable">' + parseInt(this.current_value + this.extra) + '</span>').hide(), plus);
            this.toggleMinus();
            this.togglePlus();
        }, setWidth: function (w) {
            $('span.displayValue, span.displayValueBonus', this.divMain).css('width', w - 24 + 'px');
            return this;
        }, setValue: function (v) {
            this.revision += (v - this.current_value);
            this.current_value = v;
            return this;
        }, getValue: function () {
            return this.current_value;
        }, getStartValue: function () {
            return this.current_value - this.revision;
        }, setData: function (dataObj) {
            this.data = dataObj;
            return this;
        }, update: function (start, min, max, extra) {
            this.setValue(start);
            this.max_value = parseInt(max);
            this.min_value = min;
            this.extra = extra;
            return this;
        }, setMin: function (new_min) {
            if (new_min !== this.min_value && new_min <= this.max_value) {
                this.min_value = new_min;
            }
            return this;
        }, getMin: function () {
            return this.min_value;
        }, setMax: function (new_max) {
            if (new_max && new_max !== this.max_value && new_max >= this.min_value) {
                this.max_value = new_max;
            }
            return this;
        }, getMax: function () {
            return this.max_value;
        }, togglePlus: function () {
            if (this.max_value == this.current_value) {
                $('span.butPlus', this.divMain).css('opacity', 0.3);
            }
            else {
                $('span.butPlus', this.divMain).css('opacity', 1);
            }
            return this;
        }, toggleMinus: function () {
            if (this.min_value == this.current_value) {
                $('span.butMinus', this.divMain).css('opacity', 0.3);
            }
            else {
                $('span.butMinus', this.divMain).css('opacity', 1);
            }
            return this;
        }
    });
    west.define('west.gui.Dialog', west.gui.Component, {
        init: function (title, msg, icon) {
            this.divMain = $("<div class='tw2gui_dialog'>"
                + "<div class='tp_front'>"
                + "<div class='tw2gui_bg_tl'/>"
                + "<div class='tw2gui_bg_tr'/>"
                + "<div class='tw2gui_bg_bl'/>"
                + "<div class='tw2gui_bg_br'/>"
                + "</div>"
                + "<div class='tw2gui_inner_window_title'>"
                + "<div class='tw2gui_inner_window_title_left'/>"
                + "<div class='tw2gui_inner_window_title_right'/>"
                + "</div>"
                + "<div class='tw2gui_dialog_content'>"
                + "<div class='tw2gui_dialog_text'/>"
                + "<div style='clear: both;'/>"
                + "</div>"
                + "<div/>");
            this.modalframe = null;
            this.text = null;
            this.title = new west.gui.Textart("Сообщение", "", 32, "bold 20pt Times New Roman").appendTo(this.$(".tw2gui_inner_window_title"));
            this.framefix = $("<div class='tw2gui_dialog_framefix' />").append(this.divMain);
            if (undefined !== title)this.setTitle(title);
            if (undefined !== msg)this.setText(msg);
            if (undefined !== icon)this.setIcon(icon);
        }, after: function (el) {
            el.after(this.divMain);
            return this;
        }, setX: function (x) {
            this.divMain.css('left', x);
            return this;
        }, setY: function (y) {
            this.divMain.css('top', y);
            return this;
        }, setPosition: function (x, y) {
            this.divMain.css({'left': x, 'top': y});
            return this;
        }, setWidth: function (width) {
            this.$(".tw2gui_dialog_content").css("width", width);
            return this;
        }, setHeight: function (height) {
            this.$(".tw2gui_dialog_content").css("height", height);
            return this;
        }, setDimension: function (width, height) {
            this.$(".tw2gui_dialog_content").css({"width": width, "height": height});
            return this;
        }, setCharacter: function (name) {
            this.divMain.append('<div class="tw2gui_dialog_character character_' + name + '"></div>');
            return this;
        }, removeCharacter: function () {
            this.$(".tw2gui_dialog_character").remove();
            return this;
        }, getId: function () {
            return this.divMain.attr('id');
        }, setId: function (id) {
            this.divMain.attr('id', id);
            return this;
        }, getTitle: function () {
            return this.title.getText();
        }, setTitle: function (title) {
            this.title.setText(title);
            return this;
        }, getText: function () {
            return this.text;
        }, setText: function (msg) {
            var elMsg = undefined, e = this.$(".tw2gui_dialog_text");
            try {
                elMsg = $(msg);
                if (0 != elMsg.length)
                    e.css("float", "none").html(elMsg);
            } catch (er) {
            }
            if (undefined === elMsg || 0 == elMsg.length)
                e.text(msg);
            this.text = msg;
            return this;
        }, setIcon: function (id) {
            this.$(".tw2gui_dialog_icon").remove();
            this.$(".tw2gui_dialog_text").css({
                "float": "none",
                "margin-left": 75
            }).before("<div class='tw2gui_dialog_icon system_icon_" + id + "'/>");
            return this;
        }, addButton: function (text, callback, context) {
            var e = this.$(".tw2gui_dialog_actions");
            if (0 === e.length) {
                e = $("<div class='tw2gui_dialog_actions'/>");
                this.$(".tw2gui_dialog_content").after(e);
            }
            if (text instanceof west.gui.Button) {
                text.appendTo(e);
                return this;
            }
            switch (text) {
                case"no":
                    text = "Нет";
                    break;
                case"yes":
                    text = "Да";
                    break;
                case"ok":
                    text = "ОК";
                    break;
                case"change":
                    text = "Изменить";
                    break;
                case"submit":
                    text = "Подтвердить";
                    break;
                case"cancel":
                    text = "Отмена";
                    break;
            }
            var btn = new west.gui.Button(text, function () {
                if (!callback || false != callback.call(context, this, btn)) {
                    this.hide();
                }
            }, this).appendTo(e);
            return this;
        }, setModal: function (state, outsideClickCancel, bgopts) {
            if (null !== this.modalframe && false == state) {
                this.modalframe.remove();
                this.modalframe = null;
                this.setBlockGame(false);
                return this;
            }
            bgopts = true === bgopts ? {
                bg: "https://westrus.innogamescdn.com/images/useful/opacity03.png",
                opacity: 1.0
            } : $.extend({bg: "https://westrus.innogamescdn.com/images/transparent.png", opacity: 1.0}, bgopts);
            var zindex = this.divMain.css("z-index");
            zindex = zindex < 1 ? 1 : zindex;
            this.divMain.css("z-index", zindex + 1);
            this.modalframe = $("<a class='tw2gui_dialog_iecockblocker' style='position: relative; z-index: " + zindex + ";'>"
                + "<img src='" + bgopts.bg + "' style='width:100%;height:100%;opacity:" + bgopts.opacity + ";'/>"
                + "</a>");
            this.framefix.append(this.modalframe);
            var that = this;
            if (outsideClickCancel) {
                this.modalframe.mousedown(function () {
                    if ('function' === typeof(outsideClickCancel)) {
                        outsideClickCancel();
                    }
                    that.hide();
                });
            } else this.modalframe.css("cursor", "default");
            return this;
        }, setDraggable: function (draggable) {
            if (draggable) {
                this.draggable = draggable;
                this.divMain.jqDrag('.tw2gui_inner_window_title', {
                    onStart: this.handler.onDragStart,
                    onStop: this.handler.onDragStop,
                    onDrag: this.handler.onDrag,
                    dialog: this
                });
            } else if (false === draggable) {
                this.draggable = draggable;
                $(this.divMain).jqDragOff('.tw2gui_inner_window_title');
            }
            return this;
        }, setBlockGame: function (bool) {
            this.getFramefix().toggleClass('no_block', !bool);
            return this;
        }, handler: {
            onDragStart: function (event) {
                this.dialwidth = this.dialog.divMain.outerWidth();
                this.browserwidth = $(window).width();
            }, onDrag: function (e, css) {
                css.left = Math.min(this.browserwidth - this.dialwidth + 610, Math.max(-610, css.left));
                css.top = Math.max(0, css.top);
            }, onDragStop: function (e, css) {
            }
        }, getFramefix: function () {
            return this.framefix;
        }, hide: function () {
            this.framefix.remove();
            return this;
        }, getMainDiv: function () {
            return this.divMain;
        }, show: function () {
            this.framefix.appendTo(document.body);
            if (0 == this.divMain.position().left && 0 == this.divMain.position().top) {
                this.divMain.css({
                    "top": "50%",
                    "left": "50%",
                    "margin-top": "-" + (this.divMain.height() / 2) + "px",
                    "margin-left": "-" + (this.divMain.width() / 2) + "px"
                });
            } else {
                var f = this.framefix, m = this.divMain;
                this.divMain.css({
                    "left": Math.max(0, Math.min(m.position().left, f.width() - m.width())),
                    "top": Math.max(0, Math.min(m.position().top, f.height() - m.height()))
                });
            }
            return this;
        }
    });
    west.gui.Dialog.SYS_WARNING = "warning";
    west.gui.Dialog.SYS_USERERROR = "usererror";
    west.gui.Dialog.SYS_OK = "ok";
    west.gui.Dialog.SYS_QUESTION = "question";
    west.define('west.gui.TextInputDialog', west.gui.Dialog, {
        init: function (title, msg, placeholder, icon) {
            this.placeholder = placeholder || '';
            west.gui.Dialog.prototype.init.call(this, title, msg, icon);
        }, setText: function (text) {
            var textfield = new west.gui.Textfield().setPlaceholder(this.placeholder);
            west.gui.Dialog.prototype.setText.call(this, '<div class="fbar-add-dialog">' +
                text + '<br />' +
                jq2Html(textfield.getMainDiv()) + '</div>');
            textfield.getMainDiv().remove();
            return this;
        }, setPlaceholder: function (placeholder) {
            this.placeholder = placeholder;
            return this;
        }, addButton: function (text, callback, context) {
            return west.gui.Dialog.prototype.addButton.call(this, text, function (btn) {
                return callback ? callback.call(context, $('input', this.getMainDiv()).val(), this, btn) : undefined;
            }, this);
        }, show: function () {
            west.gui.Dialog.prototype.show.call(this);
            $('input', this.getMainDiv()).focus().keypress(function (e) {
                if (e.which == 13) {
                    $('div.tw2gui_button', this.getMainDiv()).first().click();
                    e.preventDefault();
                    return false;
                }
            }.bind(this));
            return this;
        }
    });
    west.define('west.gui.AmountSpecifier', west.gui.Component, {
        init: function (max) {
            this.max = max;
            this.current = 1;
            this.divMain = $(''
                + '<div>'
                + '<input class="item_popup_input" type="text" value="' + this.current + '" />'
                + '<span class="item_count_scrolls">'
                + '<img class="raise" src="https://westrus.innogamescdn.com/images/scrollbar/scroll_up.png" alt="' + 'Выше' + '">'
                + '<img class="lower" src="https://westrus.innogamescdn.com/images/scrollbar/scroll_down.png" alt="' + 'Ниже' + '">'
                + '</span>'
                + '<span class="item_popup_max_count">(' + this.max + ')</span>'
                + '</div>');
            this.$('.raise').on('click', this.raise.bind(this));
            this.$('.lower').on('click', this.lower.bind(this));
            this.$('.item_popup_max_count').on('click', this.setCount.bind(this));
        }, getCurrent: function () {
            this.current = parseInt(this.$('.item_popup_input').val());
            return this.current;
        }, setCount: function () {
            this.getCurrent();
            this.$('.item_popup_input').val(this.max);
        }, lower: function () {
            this.getCurrent();
            if (this.current > 1)this.current--;
            this.$('.item_popup_input').val(this.current);
        }, raise: function () {
            this.getCurrent();
            if (this.current < this.max)this.current++;
            this.$('.item_popup_input').val(this.current);
        }
    });
})(jQuery);

window.tw2widget = window.tw2widget || {};
(function ($) {
    var tw2widget = window.tw2widget;
    west.define('tw2widget.Widget', west.gui.Component, {
        init: function (ext) {
            this.callParent(ext);
        }, toString: function () {
            return $("<div/>").append(this.divMain.clone()).html();
        }
    });
    west.define('tw2widget.achievement', tw2widget.Widget, {
        init: function (title, id, belongsto, isown) {
            this.divMain = $('<div id="achievement_' + id + '" class="achievement">'
                + '<div class="achievement_bg_top"/>'
                + '<div class="achievement_title"/>'
                + '<div class="achievement_icon_frame"/>'
                + '<div class="achievement_shield">'
                + '<div class="achievement_shield_bgr"/>'
                + '<div class="achievement_points"/>'
                + '<div class="achievement_achieved_date"/>'
                + '</div>'
                + '<div class="achievement_wrapper">'
                + '<div class="achievement_content">'
                + '<div class="achievement_description"/>'
                + '<div class="achievement_expand_wrap">'
                + '<div class="achievement_expand_icon" title="' + "Больше" + '"/>'
                + '<div class="achievement_reward_hint">0</div>'
                + '<div style="clear: both;" />'
                + '</div>'
                + '</div>'
                + '<div class="achievement_meta">'
                + '<div class="achievement_subs" />'
                + '<div class="achievement_conditions" />'
                + '<div class="achievement_rewards" />'
                + '</div>'
                + '</div>'
                + '<div class="achievement_bg_bottom"/>'
                + '</div>');
            this.titleMaxLength = 30;
            this.id = id;
            this.isown = isown;
            this.belongsto = belongsto;
            this.setTitle(title);
        }, setTitle: function (title) {
            this.title = title;
            if (title.length > this.titleMaxLength)title = title.substr(0, this.titleMaxLength) + "...";
            var el = this.$('div.achievement_title');
            el.empty().append($('<a name="#a' + this.id + '" href="#a' + this.id + '">' + title + '</a>'));
            el.attr('title', '<b>' + this.title + '</b>');
            return this;
        }, getTitle: function () {
            return this.title;
        }, setIcon: function (ico) {
            this.icon = ico;
            this.$('div.achievement_icon_frame').empty().append('<div class="achievement_shield_bgr"/>', $('<img src="' + ico + '" alt="" width="55px" height="53px" />'));
            return this;
        }, getIcon: function () {
            return undefined == this.icon || null == this.icon ? '/https://westrus.innogamescdn.com/images/achievements/unkown.png' : this.icon;
        }, setPoints: function (points) {
            if (points >= 10000)return this;
            if (points <= 0)points = "-"
            this.$('div.achievement_shield > div.achievement_points').text(points);
            return this;
        }, getPoints: function () {
            var val = this.$('div.achievement_shield > div.achievement_points').text();
            if ("-" == val)val = 0;
            return val;
        }, setAchievedDate: function (date, in_slots) {
            this.$('div.achievement_shield > div.achievement_achieved_date').text(date);
            if (date == '') {
                this.divMain.prepend('<div class="achievement_unachieved" />');
            } else {
                $('.achievement_unachieved', this.divMain).remove();
                this.addCheckbox(this.id, in_slots);
            }
            return this;
        }, getAchievedDate: function () {
            return this.$('div.achievement_shield > div.achievement_achieved_date').text();
        }, setDescription: function (desc) {
            this.$('div.achievement_description').text(desc);
            return this;
        }, getDescription: function () {
            return this.$('.achievement_description').text();
        }, addRequirement: function (req) {
            this.enableExpandButton();
            this.$('div.achievement_meta').append($(req));
            return this;
        }, setMetaVisible: function (toggle) {
            var meta = this.$('.achievement_meta');
            var btn = this.$('.achievement_content .achievement_expand_icon');
            if (this.isMetaVisible() && !toggle) {
                meta.slideUp(function () {
                    meta.css('display', 'none');
                });
                btn.removeClass('expanded');
            } else if (!this.isMetaVisible() && toggle) {
                meta.slideDown(function () {
                    meta.css('display', 'block');
                });
                btn.addClass('expanded');
            }
            return this;
        }, isMetaVisible: function () {
            return 'block' == this.$('div.achievement_meta').css('display');
        }, enableExpandButton: function () {
            if (this._expanded)return this;
            var btn = this.$('div.achievement_content div.achievement_expand_icon');
            if ('inline-block' == btn.css('display'))
                return this;
            var that = this;
            var onClick = function () {
                that.setMetaVisible(!that.isMetaVisible());
            };
            this.divMain.click(onClick);
            btn.css('display', 'inline-block');
            this._expanded = true;
            return this;
        }, addMetaContent: function (data) {
            if (data.match('^js:')) {
                var parts = data.split(":");
                var func = eval(parts[1]);
                if (func instanceof west.gui.Progressbar) {
                    data = $('<div id="achievement_progress" style="padding: 3px 12px 0;"/>');
                    func.appendTo(data);
                    data.insertAfter(this.$('div.achievement_content'));
                    if (parts[4])func.setValueTime();
                    if (parts[5] && this.getAchievedDate())parts[2] = parts[3];
                    func.setValue(parts[2]).setMaxValue(parts[3]);
                } else {
                    data = func;
                    this.$('div.achievement_meta').append(data);
                    this.enableExpandButton();
                }
            }
            else {
                var eld = $('<ul class="achieve_list">' + data + '</ul>');
                if (eld && eld.hasClass("forward_achv") && this.belongsto) {
                    var that = this;
                    $("li", eld).each(function (kk, vv) {
                        var e = $(vv);
                        e.css("cursor", "pointer");
                        e.one('click', function () {
                            that.belongsto.forwardTo(e.attr("achv-id"));
                        });
                    });
                }
                this.$('div.achievement_meta .achievement_conditions').append(eld);
                this.enableExpandButton();
            }
            return this;
        }, addSubAchievement: function (achv) {
            if (!(achv instanceof tw2widget.achievement))return;
            this.enableExpandButton();
            this.$('div.achievement_meta > .achievement_subs').append(achv.asSub(this));
            return this;
        }, asSub: function (parentachv) {
            var el = $("<div class='achievement_sub'>"
                + '<img src="' + this.getIcon() + '" style="cursor:pointer;" alt="" width="35px" height="33px" title="' + this.getTitle() + '" />'
                + "</div>")
            if (undefined != this.id) {
                var that = this;
                el.one('click', function () {
                    el.css("cursor", "default");
                    el.css("opacity", "0.7");
                    that.appendAfter(parentachv, true);
                });
            }
            return $("<li/>").append(el);
        }, after: function (el) {
            el.after(this.divMain);
            return this;
        }, appendAfter: function (parentachv, reload) {
            if (null == parentachv)return this;
            if (undefined != reload && true == reload)
                this.after(parentachv.getMainDiv()); else
                alert("If you read that, please report it!");
            return this;
        }, addReward: function (data) {
            this.$('.achievement_rewards').show();
            this.enableExpandButton();
            var hint = this.$(".achievement_reward_hint"), val = parseInt(hint.text()) + 1;
            hint.text(val).attr('title', s(ngettext('%1 вознаграждение', new Array('%1 вознаграждение', '%1 вознаграждения', '%1 вознаграждений'), val), val)).show();
            var rewardObj = tw2widget.reward.QuestRewardFactory.build(data.val);
            if (null != rewardObj) {
                this.$('.achievement_rewards').append($("<div class='achievement_reward' />").append(rewardObj.getMainDiv(), "<div class='achievement_reward_icon' />"));
            }
            return this;
        }, addCheckbox: function (id, is_checked) {
            if (!this.isown)return this;
            var checkBox = new west.gui.Checkbox().setSelected(is_checked).setValue(id).setCallback(addAchievement2RewardBox).getMainDiv();
            var checkboxPane = $('<span class="cb2showachievements"  title="' + 'Разместить это достижение в профиле персонажа? (максимум 4 достижения)' + '"/>').append(checkBox);
            $('div.achievement_bg_top', this.divMain).append(checkboxPane);
            return this;
        }, addTrackingCheckbox: function (id, is_checked) {
            if (!this.isown)return this;
            var checkBox = new west.gui.Checkbox().setSelected(is_checked).setValue(id).setCallback(function () {
                Character.trackAchievement(this.id + '');
            }.bind(this)).getMainDiv();
            var checkboxPane = $('<span class="cb2showachievements"  style="z-index:3" title="' + 'Следить!' + '"/>').append(checkBox);
            this.divMain.append(checkboxPane);
            return this;
        }, iAchieved: function () {
            this.getMainDiv().append($("<div class='i_achieved' title='" + "Ты уже достиг этого" + "'/>"));
            return this;
        }
    });
    tw2widget.achievement.create = function (v, belongsto, isown) {
        var achv = new tw2widget.achievement(v.title, v.id, belongsto, isown).setPoints(v.points).setAchievedDate(v.achieved, v.isInSlots).setDescription(v.desc).setIcon(v.icon);
        if (v.trackable)achv.addTrackingCheckbox();
        $.each(v.subs, function (kk, vv) {
            vv.isInSlots = $.inObject(vv.id, Character.achievementSlots);
            achv.addSubAchievement(tw2widget.achievement.create(vv, belongsto, isown));
        });
        $.each(v.meta, function (kk, vv) {
            if (typeof vv == 'object') {
                $.each(vv, function (kkk, vvv) {
                    achv.addMetaContent(vvv);
                });
            } else {
                achv.addMetaContent(vv);
            }
        });
        $.each(v.rewards, function (kk, vv) {
            achv.addReward(vv);
        });
        return achv;
    };
    var addAchievement2RewardBox = function () {
        var del = true;
        if (this.isSelected()) {
            if (!$.inObject(null, Character.achievementSlots)) {
                this.reset();
                return new UserMessage('Ты уже выбрал максимальное количество достижений, которые будут отражены в твоём профиле.').show();
            }
            del = false;
        }
        var that = this;
        Ajax.remoteCall('achievement', 'update_achievement_slot', {
            achieveId: this.getValue(),
            del: del
        }, function (json) {
            if (!json.error) {
                EventHandler.signal("achievement_slot_changed", [json.slot, json.achievement]);
                del == false ? Character.achievementSlots = $.insertValue2Object(that.getValue(), Character.achievementSlots) : Character.achievementSlots = $.removeFromObject(that.getValue(), Character.achievementSlots);
                return new UserMessage(json.msg, UserMessage.TYPE_SUCCESS).show();
            } else {
                that.reset();
                return new UserMessage(json.msg).show();
            }
        });
    };
    west.define('tw2widget.Item', tw2widget.Widget, {
        showpopup: true, showusable: true, showlocator: false, init: function (obj, mainClasses, settings) {
            this.obj = obj;
            this.tooltip = null;
            this.setOpts(settings);
            if (mainClasses)this.addClass(mainClasses);
        }, setOpt: function (opt, state) {
            this[opt] = state;
            return this;
        }, setOpts: function (opts) {
            for (var i in opts) {
                this.setOpt(i, opts[i]);
            }
            return this;
        }, setShowpopup: function (state) {
            return this.setOpt('showpopup', state);
        }, setShowbuffs: function (state) {
            return this.setOpt('showbuffs', state);
        }, setShowcompare: function (state) {
            return this.setOpt('showcompare', state);
        }, setShowalreadyown: function (state) {
            return this.setOpt('showalreadyown', state);
        }, setShowSetBoni: function (state) {
            return this.setOpt('showsetboni', state);
        }, setCharacter: function (character) {
            return this.setOpt('character', character);
        }, setShowSellPrice: function (state) {
            return this.setOpt('showSellPrice', state);
        }, setShowUsable: function (state) {
            return this.setOpt('showusable', state);
        }, setShowLocator: function (state) {
            return this.setOpt('showlocator', state);
        }, $: function (css) {
            return $(css, this.getMainDiv());
        }, addClass: function (cls) {
            if (this.divMain)
                this.getMainDiv().addClass(cls); else {
                if (!this._classes)this._classes = [];
                this._classes.push(cls);
            }
            return this;
        }, appendTo: function (el) {
            el.append(this.getMainDiv());
            return this;
        }, getId: function () {
            return this.obj.getId();
        }, getItemLevel: function () {
            return this.obj.getItemLevel();
        }, getCount: function () {
            return this.count;
        }, getName: function () {
            return this.obj.name;
        }, getBuyPrice: function () {
            return this.traderCharge != undefined ? this.obj.price * this.traderCharge : this.obj.price;
        }, getSellPrice: function () {
            return this.obj.sell_price;
        }, getType: function () {
            return this.obj.type;
        }, getMapQuicklink: function () {
            return MinimapWindow.getQuicklink(this.obj.getId(), 'inventory_changed');
        }, getMainDiv: function () {
            if (!this.divMain)this.createItemElement();
            return this.divMain;
        }, isUsable: function () {
            return this.obj.usetype && this.obj.usetype != 'none';
        }, isUpgradeable: function () {
            return this.obj.isUpgradeable();
        }, isUpgraded: function () {
            return !!this.getItemLevel();
        }, createItemElement: function () {
            var imgPath = to_cdn(this.obj.image);
            this.divMain = $('<div class="item ' + (this._classes ? this._classes.join(' ') : '') + '">' + '<img class="tw_item" src="' + imgPath + '" alt="" />' + '<span class="count"><p/></span>' + '<span class="count-required"><p/></span>' +
                (this.showlocator ? '<span class="locator">' + this.getMapQuicklink() + '</span>' : '') +
                (this.isUsable() && this.showusable ? '<span class="usable">' + jq2Html(new west.gui.Icon('consumable', 'Используемые').getMainDiv()) + '</span>' : '') +
                (this.isUpgraded() ? '<span class="item_level' + (this.isUpgradeable() ? '' : ' fake') + '">' + this.getItemLevel() + '</span>' : '') + '</div>');
            this.getImgEl().data('itemId', this.getId());
            this.setCount();
            this.initDisplay();
            this.setTooltip();
        }, setCount: function (count) {
            count = count || (0 === count ? 0 : this.count);
            if (undefined == count)return this;
            if (this.divMain) {
                var el;
                el = this.$('.count');
                el.css('display', 'block');
                $('p', el).text(count);
            }
            this.count = count;
            return this;
        }, setRequired: function (available, required, percentOnly) {
            available = available || this.available || 0;
            required = required || this.required || 0;
            if (required === 0)return this;
            if (this.divMain) {
                var el = this.$('.count-required');
                el.css({'display': 'block', 'opacity': 1});
                if (available >= required) {
                    el.removeClass('missing').addClass('enough');
                } else {
                    el.removeClass('enough').addClass('missing');
                }
                el.attr('title', available + ' / ' + required);
                if (this.percentOnly || percentOnly) {
                    $('p', el).text(Math.min(100, parseInt(available / required * 100)) + ' %');
                } else {
                    $('p', el).text(available + ' / ' + required);
                }
            }
            this.available = available;
            this.required = required;
            return this;
        }, initDisplay: function () {
            this.divMain.addClass('item_bgr');
        }, setTooltip: function () {
            if (!this.showpopup)return this;
            this.tooltip = this.tooltip || new ItemPopup(this.obj, {
                    show_buffs: this.showbuffs,
                    show_compare: this.showcompare,
                    show_alreadyown: this.showalreadyown,
                    traderCharge: this.traderCharge,
                    show_setboni: this.showsetboni,
                    character: this.character,
                    show_sell_price: this.showSellPrice === false ? false : true,
                    show_lifetime: this.lifetime,
                    show_cooldown: this.cooldown
                });
            this.divMain.addMousePopup(this.tooltip.popup);
        }, setCharge: function (charge) {
            this.traderCharge = charge;
            return this;
        }, getImgEl: function () {
            return this.$('.tw_item');
        }, getItemBaseId: function () {
            return this.obj.getItemBaseId();
        }
    });
    west.define('tw2widget.InventoryItem', tw2widget.Item, {
        init: function (obj) {
            this.callParent(obj, null, {showpopup: true, showbuffs: true, showcompare: true, showsetboni: true});
        }, setLifetime: function (lifetime, refreshTooltip) {
            this.lifetime = lifetime;
            if (refreshTooltip) {
                this.tooltip = null;
                this.setTooltip();
            }
            return this;
        }, setCooldown: function (cooldown) {
            this.cooldown = cooldown;
            return this;
        }, showCooldown: function () {
            var itemCooldown = Bag.itemCooldown[this.getId()], globalCooldown = this.obj.has_cooldown ? Character.cooldown : 0, cooldown = Math.max(itemCooldown || 0, globalCooldown || 0);
            if (!cooldown || cooldown * 1000 < new ServerDate().getTime()) {
                if (this.elCooldown) {
                    BuffList.clearCooldownTimer(this.getId());
                    this.elCooldown.remove();
                    this.elCooldown = null;
                }
                return;
            }
            if (!this.elCooldown) {
                this.elCooldown = $('<span class="cooldown"><p/></span>');
                this.getMainDiv().append(this.elCooldown);
            }
            this.elCooldown.css('display', 'block');
            if (undefined !== this.getId()) {
                BuffList.cooldowns[this.obj.item_id] = {time: cooldown * 1000};
                BuffList.setCooldownTimer(this.getId());
            }
        }, initDisplay: function () {
            this.getImgEl().addClass('item_inventory_img');
            this.addClass('item_inventory');
            if (!this.obj.sellable) {
                this.addClass('not_sellable');
            }
            if (!this.obj.wearable()) {
                this.addClass('not_wearable');
            }
            if (!this.obj.isUpgradeable()) {
                this.addClass('not_upgradeable');
            }
            this.showCooldown();
        }, setInvId: function (id) {
            this.inv_id = id;
            return this;
        }, getInvId: function () {
            return this.inv_id;
        }
    });
    west.define('tw2widget.WearItem', tw2widget.Item, {
        init: function (obj) {
            this.callParent(obj, null, {showpopup: true, showbuffs: true, showsetboni: true});
        }, initDisplay: function () {
            this.getImgEl().attr('src', to_cdn(this.obj.wear_image));
            this.addClass('item_wear');
        }
    });
    west.define('tw2widget.TraderItem', tw2widget.Item, {
        init: function (obj) {
            this.callParent(obj, null, {showpopup: true, showbuffs: true, showcompare: false, showalreadyown: true});
        }, initDisplay: function () {
            this.addClass('item_trader_mini');
            this.getImgEl().addClass("item_trader_img drag");
        }
    });
    west.define('tw2widget.ItemTraderItem', tw2widget.Item, {
        init: function (obj) {
            this.callParent(obj, null, {showpopup: true, showbuffs: false, showcompare: false, showalreadyown: true});
        }, initDisplay: function () {
            this.addClass('item_trader');
            this.getImgEl().addClass('item_trader_img drag');
        }
    });
    west.define('tw2widget.UpgradeItem', tw2widget.Item, {
        init: function (obj) {
            this.callParent(obj, null, {showpopup: false});
        }, initDisplay: function () {
            this.addClass('upgrade_item_preview');
        }
    });
    west.define('tw2widget.UpgradeItemSlot', tw2widget.Item, {
        init: function (obj) {
            this.callParent(obj, null, {showpopup: false});
        }, initDisplay: function () {
            this.addClass('upgrade_item_slot');
        }
    });
    west.define('tw2widget.CraftingItem', tw2widget.Item, {
        init: function (obj) {
            this.callParent(obj, null, {showpopup: true, showbuffs: false});
        }, initDisplay: function () {
            this.addClass('item_crafting');
            this.setRequired();
        }
    });
    west.define('tw2widget.TableRowItem', tw2widget.Item, {
        init: function (obj, opts) {
            opts = opts || {};
            opts.showpopup = true;
            opts.showbuffs = false;
            opts.showusable = false;
            this.callParent(obj, 'item_tablerow', opts);
        }
    });
    west.define('tw2widget.FortItem', tw2widget.Item, {
        init: function (obj) {
            this.callParent(obj, null, {showpopup: true, showbuffs: false});
        }, initDisplay: function () {
            this.setRequired();
            this.addClass('item_fort');
        }
    });
    west.define('tw2widget.FairProgressItem', tw2widget.Item, {
        init: function (obj, opts) {
            opts.showpopup = true;
            opts.showbuffs = true;
            opts.showusable = false;
            this.callParent(obj, null, opts);
        }, initDisplay: function () {
            this.setRequired();
            this.addClass('item_fair_progress');
            $('.count-required', this.getMainDiv()).append(MinimapWindow.getQuicklink(this.obj.item_id, 'inventory_changed'));
        }
    });
    west.define('tw2widget.JobItem', tw2widget.Item, {
        init: function (obj) {
            this.callParent(obj, 'item_job', {
                showpopup: true,
                showbuffs: true,
                showcompare: false,
                showalreadyown: true
            });
        }
    });
    west.define('tw2widget.JobsYieldItem', tw2widget.Item, {
        init: function (obj, found) {
            this.callParent(obj, null, {showpopup: true, showbuffs: false});
            this.found = found;
        }, initDisplay: function () {
            this.getMainDiv().append($('<div class="item_jobsyield_found">' + this.found + '&nbsp;%</div>')).addClass('item_jobsyield');
        }
    });
    west.define('tw2widget.jobsearchbar', tw2widget.Widget, {
        init: function (callback, timeout) {
            this.callback = callback;
            this.timeout = timeout || 400;
            this.searchInProgress = false;
            this.input = null;
            this.scrollpane = null;
            this.scrollpane_pos = 8;
            this.value = {value: 0, label: ''};
            this.autofill = true;
            this.input = new west.gui.Textfield().maxlength(12).setClass4Input('tw2gui_jobsearch_string').setPlaceholder('Что показать?').setWidth(165);
            this.divMain = $('<div class="tw2gui_jobsearchbar">'
                + '<div class="tw2gui_jobsearch_showall" />'
                + '<div class="tw2gui_jobsearchbar_results" />'
                + '</div>').prepend(this.input.getMainDiv()).keyup(this.keyHandler.bind(this));
        }, clearSearchtermButtonClicked: function (ev) {
            this.setValue();
        }, keyHandler: function (ev) {
            var keyCode = ev.keyCode ? ev.keyCode : ev.which;
            if (keyCode == 38 || keyCode == 40) {
                var focused = $('div.tw2gui_jobsearchbar_results:visible > p.focused', this.divMain);
                var focused2 = $('div.tw2gui_jobsearchbar_allresults:visible p.focused', this.divMain);
                var allRes = $('div.tw2gui_jobsearchbar_allresults:visible', this.divMain).length;
                if (keyCode == 38) {
                    if (!focused.length && !allRes)
                        $('div.tw2gui_jobsearchbar_results:visible > p:last', this.divMain).addClass('focused'); else if (!focused2.length && allRes)
                        $('div.tw2gui_jobsearchbar_allresults:visible p:last', this.divMain).addClass('focused'); else {
                        $('div.tw2gui_jobsearchbar_results:visible > p.focused', this.divMain).prev().addClass('focused');
                        $('div.tw2gui_jobsearchbar_allresults:visible p.focused', this.divMain).prev().addClass('focused');
                        focused.removeClass('focused');
                        focused2.removeClass('focused');
                    }
                }
                else {
                    if (!focused.length && !allRes)
                        $('div.tw2gui_jobsearchbar_results:visible > p:first', this.divMain).addClass('focused'); else if (!focused2.length && allRes)
                        $('div.tw2gui_jobsearchbar_allresults:visible p:first', this.divMain).addClass('focused'); else {
                        $('div.tw2gui_jobsearchbar_results:visible > p.focused', this.divMain).next().addClass('focused');
                        $('div.tw2gui_jobsearchbar_allresults:visible p.focused', this.divMain).next().addClass('focused');
                        focused.removeClass('focused');
                        focused2.removeClass('focused');
                    }
                }
                if (!$('div.tw2gui_jobsearchbar_' + (allRes ? 'allresults' : 'results >') + ' p.focused', this.divMain).length) {
                    $('div.tw2gui_jobsearchbar_' + (allRes ? 'allresults' : 'results >') + ' p' + (keyCode == 38 ? ':last' : ':first'), this.divMain).addClass('focused');
                    if (this.scrollpane) {
                        this.scrollpane['scrollTo' + (keyCode == 38 ? 'End' : 'Top')]();
                    }
                }
                if (allRes) {
                    var allresults = $('div.tw2gui_jobsearchbar_allresults', that.divMain);
                    if (keyCode == 38 && ($('p.focused', allresults).offset().top < parseInt($('div.tw2gui_scrollpane', allresults).offset().top + 20))) {
                        this.scrollpane.scrollBy(0, -8);
                    }
                    if (keyCode == 40 && ($('p.focused', allresults).offset().top > parseInt($('div.tw2gui_scrollpane', allresults).height() +
                            $('div.tw2gui_scrollpane', allresults).offset().top - 30))) {
                        this.scrollpane.scrollBy(0, 8);
                    }
                }
            }
            else if (keyCode == 13) {
                this.resultChosen(ev);
            }
            else if (keyCode == 8 || keyCode == 46) {
                if ($('input.tw2gui_jobsearch_string', this.divMain).val().length > 2)
                    this.searchHandler(); else
                    $('div.tw2gui_jobsearchbar_results:visible', this.divMain).hide();
            }
            else {
                this.searchHandler(ev);
            }
        }, searchHandler: function (ev) {
            if (!JobsModel.Jobs.length)
                return false;
            var searchStr = $('input.tw2gui_jobsearch_string', this.divMain).val();
            if (searchStr.length < 3)
                return false;
            if (this.searchInProgress)
                window.clearTimeout(this.searchInProgress);
            this.searchInProgress = window.setTimeout(function () {
                $('div.tw2gui_jobsearchbar_allresults', this.divMain).hide();
                $('div.tw2gui_jobsearchbar_results', this.divMain).empty().show();
                this.searchPattern(searchStr);
                $('div.tw2gui_jobsearchbar_results:visible > p:first', this.divMain).addClass('focused');
                if ($('div.tw2gui_jobsearchbar_results p', this.divMain).length == 1 && this.autofill)
                    $('div.tw2gui_jobsearchbar_results p.focused', this.divMain).click(); else
                    $('input.tw2gui_jobsearch_string', this.divMain).focus();
            }.bind(this), this.timeout);
            return true;
        }, createJobFoundRow: function (jobObj) {
            return '<p title="' + Map.PopupHandler.getJobPopup(JobList.getJobById(jobObj.id)).escapeHTML() + '" data-job_id="' + jobObj.id + '" data-job_name="' + jobObj.name + '">' + jobObj.name + '</p>';
        }, searchPattern: function (pattern) {
            var found = JobsModel.searchJobsByPattern(pattern), results = '';
            for (var i = 0, len = found.length; i < len; ++i)
                results += this.createJobFoundRow(found[i]);
            $('div.tw2gui_jobsearchbar_results', this.divMain).html(results).off('click').click(this.callback.bind(this));
            return this;
        }, hijackSearchHandler: function () {
            $('input.tw2gui_jobsearch_string', this.divMain).val('');
            $('div.tw2gui_jobsearchbar_results:visible > p:first', this.divMain).addClass('focused');
            if ($('div.tw2gui_jobsearchbar_results p', this.divMain).length == 1)
                $('div.tw2gui_jobsearchbar_results p.focused', this.divMain).click(); else
                $('input.tw2gui_jobsearch_string', this.divMain).focus();
            return this;
        }, initAllJobsResult: function () {
            var xhtml = '', jobs = JobList.getSortedJobs('name', null, 'asc');
            for (var i = 0, len = jobs.length; i < len; ++i)
                xhtml += this.createJobFoundRow(jobs[i]);
            this.scrollpane.appendContent(xhtml);
            $('div.tw2gui_jobsearchbar_allresults', this.divMain).html(this.scrollpane.getMainDiv()).off('click').click(this.callback.bind(this));
            return this;
        }, showAllJobs: function () {
            var jobbox = $('div.tw2gui_jobsearchbar_allresults', this.divMain);
            if (jobbox.is(':empty'))this.initAllJobsResult();
            return this;
        }, setClearTermButton: function () {
            this.divMain.prepend($('<div class="tw2gui_jobsearchbar_clearbutton" />').off('click').click(this.clearSearchtermButtonClicked.bind(this)));
            return this;
        }, resultChosen: function () {
            $('div.tw2gui_jobsearchbar_results:visible p.focused', this.divMain).click();
            $('div.tw2gui_jobsearchbar_allresults:visible p.focused', this.divMain).click();
            return this;
        }, setAllJobsButton: function () {
            var jobbox = $('div.tw2gui_jobsearchbar_allresults', this.divMain);
            this.scrollpane = new west.gui.Scrollpane();
            if (!jobbox.length) {
                $('<div class="tw2gui_jobsearchbar_allresults"></div>').appendTo(this.divMain);
            }
            $('div.tw2gui_jobsearch_showall', this.divMain).css('display', 'block').click(function (ev) {
                if ($('div.tw2gui_jobsearchbar_allresults:visible', this.divMain).length) {
                    $('div.tw2gui_jobsearchbar_allresults p.focused', this.divMain).removeClass('focused');
                    $('div.tw2gui_jobsearchbar_allresults:visible', this.divMain).hide();
                    $('input.tw2gui_jobsearch_string', this.divMain).val('').off('focus');
                } else {
                    $('input.tw2gui_jobsearch_string', this.divMain).val('').focus();
                    $('div.tw2gui_jobsearchbar_results', this.divMain).empty().hide();
                    this.showAllJobs();
                    $('div.tw2gui_jobsearchbar_allresults', this.divMain).show();
                    $('div.tw2gui_jobsearchbar_allresults p:first', this.divMain).addClass('focused');
                }
            }.bind(this));
            return this;
        }, setValue: function (val, label) {
            this.value = {value: val || 0, label: label || ''};
            $('input.tw2gui_jobsearch_string', this.divMain).val(this.value.label);
            return this;
        }, hideResults: function () {
            $('div.tw2gui_jobsearchbar_results', this.divMain).empty().hide();
            $('div.tw2gui_jobsearchbar_allresults', this.divMain).hide();
        }, setWidth: function (w) {
            this.divMain.css('width', w + 'px');
            return this;
        }, setAutofillModus: function (status) {
            this.autofill = status;
            return this;
        }
    });
    west.define('tw2widget.jobstars', tw2widget.Widget, {
        init: function (stage, stars) {
            var starImgs = '';
            for (var i = 0, len = 5; i < len; ++i) {
                starImgs += '<div class="jobstar' + (stars > i ? ' ' + stage + 'star' : ' emptystar') + '" data-starindex="' + (i + 1) + '" />'
            }
            this.divMain = '<div class="tw2gui_jobstars">' + starImgs + '</div>';
        }
    });
    west.namespace('tw2widget.reward.QuestRewardFactory', {
        build: function (meta) {
            widget = null;
            switch (meta.css) {
                case'reward_attribute':
                    widget = new tw2widget.reward.AttributeReward(meta.attribute, meta.text);
                    break;
                case'reward_bond':
                    widget = new tw2widget.reward.BondReward(meta.text);
                    break;
                case'reward_energy':
                    widget = new tw2widget.reward.EnergyReward(meta.text);
                    break;
                case'reward_exp':
                    widget = new tw2widget.reward.ExpReward(meta.text);
                    break;
                case'reward_item':
                    widget = new tw2widget.reward.ItemReward(meta.text);
                    break;
                case'reward_dollar':
                    widget = new tw2widget.reward.DollarReward(meta.text);
                    break;
                case'reward_pabonus':
                    widget = new tw2widget.reward.PremiumReward(meta.bonus, meta.bonus_days);
                    break;
                case'reward_reskill':
                    widget = new tw2widget.reward.ReskillReward(meta.text);
                    break;
                case'reward_skill':
                    widget = new tw2widget.reward.SkillReward(meta.skill, meta.text);
                    break;
                case'reward_skillpoint':
                    widget = new tw2widget.reward.SkillPointReward(meta.text);
                    break;
                case'reward_hidden':
                    widget = new tw2widget.reward.Hidden();
                    break;
                case'reward_title':
                    widget = new tw2widget.reward.TitleReward(meta.val);
                    break;
                case'reward_veteran_points':
                    widget = new tw2widget.reward.VeteranReward(meta.text);
                    break;
                case'reward_duellevel_sacrifice':
                    widget = new tw2widget.reward.SacrificeDuelLevelReward(meta.text);
                    break;
                case'reward_Hearts':
                    widget = new tw2widget.reward.BaseReward(ngettext('Сердце', new Array('Сердце', 'Сердца', 'Сердец'), meta.text), meta.text, 'Hearts');
                    break;
                case'reward_DayOfDead':
                    widget = new tw2widget.reward.BaseReward(ngettext('Бархатец', new Array('Бархатец', 'Бархатца', 'Бархатцев'), meta.text), meta.text, 'DayOfDead');
                    break;
            }
            return widget;
        }
    });
    west.define('tw2widget.reward.RewardDialog', tw2widget.Widget, {
        init: function (title, subtitle, onFinish) {
            this.divMain = $('<div class="game-reward-dialog">'
                + '<div class="dialog-title" />'
                + '<div class="dialog-subtitle" />'
                + '<div class="dialog-rewards" />'
                + '<div class="dialog-button" />'
                + '</div>');
            this.onFinish = onFinish;
            this.setTitle(title || "Успех").setSubtitle(subtitle || "Вознаграждение");
        }, setTitle: function (title) {
            $('.dialog-title', this.divMain).text(title);
            return this;
        }, setSubtitle: function (subtitle) {
            $('.dialog-subtitle', this.divMain).text(subtitle);
            return this;
        }, addReward: function (reward) {
            if (reward instanceof tw2widget.reward.BaseReward)
                reward = reward.getMainDiv();
            $('.dialog-rewards', this.divMain).append(reward);
            return this;
        }, setContent: function (content) {
            $(".dialog-rewards", this.divMain).empty().append(content);
            return this;
        }, show: function () {
            var self = this;
            $('.dialog-button', this.divMain).empty().append($('<div class="quest_reward_button normal" />').mouseover(function () {
                $(this).addClass('hover');
            }).mouseout(function () {
                $(this).removeClass('hover');
            }).click(function () {
                self.hide();
                self.onFinish && self.onFinish();
            }));
            $(document.body).append(this.divMain);
            $(this.divMain).fadeIn(300);
            return this;
        }, hide: function () {
            this.divMain.fadeOut(200, function () {
                $(this).remove();
            });
            return this;
        }
    });
    west.define('tw2widget.reward.BaseReward', tw2widget.Widget, {
        text: null, value: null, gfxClass: null, init: function (text, value, gfxClass) {
            this.text = text;
            this.value = value;
            this.gfxClass = gfxClass;
            this.divMain = $('<div class="game-reward ' + gfxClass + '" title="' + text.escapeHTML() + '">'
                + '<span class="count"><p>' + value + '</p></span>'
                + '<div class="reward-border" />'
                + '</div>');
        }, setValue: function (value) {
            this.$('.count p').text(value);
            this.value = value;
            return this;
        }, setText: function (text) {
            this.divMain.attr('title', text.escapeHTML());
            this.text = text;
            return this;
        }
    });
    west.define('tw2widget.reward.AttributeReward', tw2widget.reward.BaseReward, {
        attribute: null, init: function (attribute, value) {
            this.attribute = attribute;
            var translation = CharacterSkills.keyNames[attribute], title = s(ngettext("%1 очко к характеристике «%2»", new Array("%1 очко к характеристике «%2»", "%1 очка к характеристике «%2»", "%1 очков к характеристике «%2»"), value), value, translation);
            this.callParent(title, value, 'reward_skill');
            this.divMain.prepend('<div class="imgclip" style="background-image: '
                + 'url(https://westrus.innogamescdn.com/images/window/skills/circle_' + attribute + '.png)" />');
        }
    });
    west.define('tw2widget.reward.AvatarpartReward', tw2widget.reward.BaseReward, {
        init: function () {
            this.callParent('Детали портрета твоего персонажа.', '-', 'reward_avatarpart');
        }
    });
    west.define('tw2widget.reward.BondReward', tw2widget.reward.BaseReward, {
        init: function (value) {
            this.callParent(ngettext('Облигация', new Array('Облигация', 'Облигации', 'Облигаций'), value), value, 'reward_bond');
        }
    });
    west.define('tw2widget.reward.CustomReward', tw2widget.reward.BaseReward, {
        init: function (desc) {
            this.callParent(desc, "Особое", 'reward_custom');
        }
    });
    west.define('tw2widget.reward.EnergyReward', tw2widget.reward.BaseReward, {
        init: function (value) {
            this.callParent('Энергия', value, 'reward_energy');
        }
    });
    west.define('tw2widget.reward.ExpReward', tw2widget.reward.BaseReward, {
        init: function (value) {
            this.callParent("Опыт", value, 'reward_exp');
        }
    });
    west.define('tw2widget.reward.ItemReward', tw2widget.reward.BaseReward, {
        init: function (itemId) {
            var obj = ItemManager.get(itemId), item = new tw2widget.InventoryItem(obj);
            this.divMain = item.getMainDiv();
            this.divMain.attr('title', item.tooltip.popup.text);
        }
    });
    west.define('tw2widget.reward.DollarReward', tw2widget.reward.BaseReward, {
        init: function (value) {
            this.callParent("Доллары", value, 'reward_dollar');
        }
    });
    west.define('tw2widget.reward.PremiumReward', tw2widget.reward.BaseReward, {
        init: function (bonus, value) {
            var translation = bonus;
            this.callParent(s(ngettext('%1 день премиума «%2»', new Array('%1 день премиума «%2»', '%1 дня премиума «%2»', '%1 дней премиума «%2»'), value), value, translation), s(ngettext('%1 день', new Array('%1 день', '%1 дня', '%1 дней'), value), value), 'reward_pabonus');
        }
    });
    west.define('tw2widget.reward.ReskillReward', tw2widget.reward.BaseReward, {
        init: function (skills) {
            var translations = [];
            for (var i = 0; i < skills.length; i++) {
                translations.push(CharacterSkills.keyNames[skills[i]]);
            }
            this.callParent(s('Ты можешь перераспределить очки следующих навыков: %1.', translations.join(', ')), '-', 'reward_reskill');
        }
    });
    west.define('tw2widget.reward.SkillReward', tw2widget.reward.BaseReward, {
        skill: null, init: function (skill, value) {
            this.skill = skill;
            var translation = CharacterSkills.keyNames[skill], title = s(ngettext("%1 очко навыка «%2»", new Array("%1 очко навыка «%2»", "%1 очка навыка «%2»", "%1 очков навыка «%2»"), value), value, translation);
            this.callParent(title, value, 'reward_skill');
            this.divMain.prepend('<div class="imgclip" style="background-image: '
                + 'url(https://westrus.innogamescdn.com/images/window/skills/skillicon_' + skill + '.png)" />');
        }
    });
    west.define('tw2widget.reward.SkillPointReward', tw2widget.reward.BaseReward, {
        init: function (points) {
            this.callParent(ngettext("Очко навыка", new Array("Очко навыка", "Очка навыка", "Очков навыка"), points), points, 'reward_skillpoint');
        }
    });
    west.define('tw2widget.reward.TitleReward', tw2widget.reward.BaseReward, {
        init: function (name) {
            this.callParent(s('Вознаграждение: Прозвище %1', name), 'Прозвище', 'reward_title');
        }
    });
    west.define('tw2widget.reward.Hidden', tw2widget.reward.BaseReward, {
        init: function () {
            this.divMain = $("<div class='item quest_item' />").append($("<img src='https://westrus.innogamescdn.com/images/items/unknown.png' width='60' alt='" + "Тайна" + "' />"));
        }
    });
    west.define('tw2widget.reward.NuggetReward', tw2widget.reward.BaseReward, {
        init: function (amount) {
            this.callParent('Самородки', amount, 'reward_nuggets');
        }
    });
    west.define('tw2widget.reward.VeteranReward', tw2widget.reward.BaseReward, {
        init: function (value) {
            this.callParent("Очки славы", value, 'reward_veteran');
            return this;
        }
    });
    west.define('tw2widget.reward.SacrificeDuelLevelReward', tw2widget.reward.BaseReward, {
        init: function (value) {
            this.callParent('Жертвовать дуэльным уровнем', value, 'reward_duellevel_sacrifice');
        }
    });
    west.define('tw2widget.gui.CircleProgressbar', tw2widget.Widget, {
        MAX_DOTS: 7, icon: null, curr: null, max: null, currDots: 0, init: function (icon, curr, max) {
            this.icon = icon;
            this.curr = curr;
            this.max = max;
            this.divMain = $('<div class="tw2gui_progresscircle cprog_' + this.icon + '"></div>');
            this.calcDots();
        }, calcDots: function () {
            if (this.curr > this.max)this.curr = this.max;
            var dot = this.max / this.MAX_DOTS;
            this.currDots = parseInt(this.curr / dot);
            var dotImgs = '';
            for (var i = 0, len = this.currDots; i <= len; ++i)
                dotImgs += '<img class="tw2gui_cprog_dot' + (i + 1) + '" src="https://westrus.innogamescdn.com/images/tw2gui/circleprogress/dot' + (i + 1) + '.png" />';
            $(this.divMain).append(dotImgs);
        }, setCurr: function (curr) {
            this.curr = curr;
            return this;
        }, setMax: function (max) {
            this.max = max;
            return this;
        }, setTitle: function (title) {
            $(this.divMain).attr('title', title);
            return this;
        }
    });
    west.define('tw2widget.gui.TrafficProgressbar', tw2widget.Widget, {
        MAX_DOTS: 4, icon: null, curr: null, currDots: 0, init: function (icon, curr, max) {
            this.icon = icon;
            this.curr = curr;
            this.max = max;
            this.divMain = $('<div class="tw2gui_progresstraffic tprog_' + this.icon + '"></div>');
            this.calcDots();
        }, calcDots: function () {
            var dot = this.max / this.MAX_DOTS;
            this.currDots = Math.ceil(this.curr / dot);
            var dotImgs = '';
            if (this.curr) {
                for (var i = 1, len = this.currDots; i <= len; ++i)
                    dotImgs += '<img class="tw2gui_tprog_dot' + i + '" src="https://westrus.innogamescdn.com/images/tw2gui/trafficprogress/dot1.png" />';
            }
            $(this.divMain).append(dotImgs);
        }, setCurr: function (curr) {
            this.curr = curr;
            return this;
        }, setTitle: function (title) {
            $(this.divMain).attr('title', title);
            return this;
        }
    });
    west.define('tw2widget.gametip', tw2widget.Widget, {
        init: function (text, cls) {
            this.divMain = $("<div class='tw2gui_gametip " + cls + "'/>").append($("<div class='tw2gui_gametipbgr'/>").append('<div class="gametip-closebutton inlineblock" />' + "<div class='tw2gui_bg_tl'/>", "<div class='tw2gui_bg_tr'/>", "<div class='tw2gui_bg_bl'/>", "<div class='tw2gui_bg_br'/>", $('<div class="gametip-content"></div>').append(text)));
            $('div.gametip-closebutton', this.divMain).on('click', function () {
                $(this).parent().parent().addClass('hide');
            }).addMousePopup('Ок!');
        }
    });
    west.define('tw2widget.currency', null, {
        init: function (nuggets, bonds) {
            this.divMain = $(''
                + '<div class="tw2widget currency">'
                + '<div class="nuggets"></div>'
                + '<div class="bonds"></div>'
                + '</div>');
            this.update(nuggets, bonds);
        }, update: function (nuggets, bonds) {
            $('.nuggets', this.divMain).text(s('Самородки: %1', format_money(nuggets)));
            $('.bonds', this.divMain).text(s('Облигации: %1', format_money(bonds)));
        }, $: function (css) {
            return $(css, this.divMain);
        }, getMainDiv: function () {
            return this.divMain;
        }, appendTo: function (el) {
            $(el).append(this.divMain);
            return this;
        }, toString: function () {
            return $("<div/>").append(this.divMain.clone()).html();
        }
    });
    west.define('tw2widget.gui.bulletPager', tw2widget.Widget, {
        curr: null,
        min: 2,
        max: null,
        skin: 'brown_red',
        numbers: false,
        paginator: null,
        context: null,
        loop: false,
        init: function (curr, max, callback, context, options) {
            this.curr = curr;
            this.max = max;
            this.callback = callback;
            this.context = context;
            options = options || {};
            if (options.skin) {
                this.skin = options.skin;
            }
            if (options.loop) {
                this.loop = options.loop;
            }
            if (undefined !== options.numbers) {
                this.numbers = !!options.numbers;
            }
            this.divMain = $('<div class="tw2gui_bullet_pager skin_' + this.skin + '"></div>');
            this.renderDots();
            this.addEvents();
            return this;
        },
        renderDots: function () {
            var i = 0;
            this.divMain.empty();
            if (this.max >= this.min) {
                for (i; i < this.max; i++) {
                    this.divMain.append('<div class="bullet" data-id="' + parseInt(i + 1, 10) + '">' + (this.numbers ? '<span class="number">' + parseInt(i + 1, 10) + '</span>' : '') + '</div>');
                }
            }
            this.divMain.children().eq(this.curr - 1).addClass('active');
            this.signal('render', {visible: this.max >= this.min});
        },
        addEvents: function () {
            this.removeEvents();
            var that = this;
            this.divMain.on('click.bulletPager', '.bullet', function () {
                that.setCurrent($(this).data('id'));
            });
        },
        removeEvents: function () {
            this.divMain.off('.bulletPager');
        },
        next: function () {
            if (this.curr < this.max) {
                this.setCurrent(this.curr + 1);
            } else if (this.loop) {
                this.setCurrent(1);
            }
            return this;
        },
        prev: function () {
            if (this.curr > 1) {
                this.setCurrent(this.curr - 1);
            } else if (this.loop) {
                this.setCurrent(this.max);
            }
            return this;
        },
        setCurrent: function (curr) {
            if (!curr || this.curr === curr || curr > this.max) {
                return this;
            }
            var direction = this.curr === 0 ? false : (this.curr > curr ? 'prev' : 'next');
            this.curr = curr;
            this.divMain.children().filter('.active').removeClass('active').end().eq(curr - 1).addClass('active');
            if (this.callback && "function" === typeof this.callback) {
                this.callback.call(this.context, this.curr, this.max, direction);
            }
            return this;
        },
        getCurrent: function () {
            return this.curr;
        },
        setMax: function (max) {
            if (max && this.max !== max) {
                this.max = max;
                this.renderDots();
            }
            return this;
        },
        getMax: function () {
            return this.max;
        },
        setMin: function (min) {
            if (min && this.min !== min) {
                this.min = min;
                this.renderDots();
            }
            return this;
        },
        getMin: function () {
            return this.min;
        },
        setLoop: function (bool) {
            this.loop = bool;
            return this;
        },
        update: function (curr, max) {
            this.curr = 0;
            this.setMax(max).setCurrent(curr);
            return this;
        },
        changeSkin: function (skin) {
            if (skin) {
                this.divMain.removeClass('skin_' + this.skin);
                this.skin = skin;
                this.divMain.addClass('skin_' + this.skin);
                this.signal('change_skin', {'skin': skin});
            }
            return this;
        },
        changeNumbers: function (bool) {
            this.numbers = !!bool;
            this.signal('change_numbers', {'numbers': bool});
            this.renderDots();
            return this;
        },
        signal: function (event, data) {
            this.divMain.trigger('bPager:' + event, data);
        }
    });
    west.define('tw2widget.gui.carousel', tw2widget.Widget, {
        delay: 3000,
        timer: null,
        show_paginator: true,
        paginator_position: 'inside',
        paginator_skin: 'carousel',
        context: null,
        paginator: null,
        items: null,
        skin: null,
        loop: true,
        rotate: false,
        init: function (items, options) {
            if ($.isArray(items)) {
                this.items = items;
            } else if (items instanceof jQuery) {
                this.items = items.children();
            }
            options = options || {};
            if ('undefined' !== typeof options.paginator_position) {
                this.paginator_position = options.paginator_position;
            }
            if ('undefined' !== typeof options.show_paginator) {
                this.show_paginator = options.show_paginator;
            }
            if ('undefined' !== typeof options.paginator_skin) {
                this.paginator_skin = options.paginator_skin;
            }
            if ('number' === typeof options.delay) {
                this.delay = options.delay;
            }
            if (options.skin) {
                this.skin = options.skin;
            }
            if ('undefined' !== typeof options.loop) {
                this.loop = options.loop;
            }
            if ('undefined' !== typeof options.rotate) {
                this.rotate = options.rotate;
            }
            this.divMain = $('<div class="tw2gui_carousel skin_' + this.skin + ' paginator_' + this.paginator_position + '"></div>');
            this.items_list = $('<ul class="tw2gui_carousel_elements"></ul>').appendTo(this.divMain);
            var that = this, count = this.items.length, $root = this.items_list;
            this.paginator = new tw2widget.gui.bulletPager(1, count, this._displayElement, this, {
                'skin': this.paginator_skin,
                'loop': this.loop
            });
            $.each(this.items, function (i, item) {
                $root.append(that._wrapItem(item));
            });
            $root.children().first().addClass('active');
            this.showPaginator(this.show_paginator);
            this._addEvents();
            return this;
        },
        _wrapItem: function (item) {
            return $('<li class="tw2gui_carousel_element"></li>').append(item);
        },
        _addEvents: function () {
            var that = this, $root = this.divMain;
            $root.on({'mouseenter': that.stop.bind(this), 'mouseleave': that.start.bind(this)});
            return this;
        },
        _displayElement: function (el_index) {
            if (Config.get("gui.animations")) {
                $('.tw2gui_carousel_element', this.divMain).filter('.active').removeClass('active').addClass('prev').delay(550).queue(function () {
                    $(this).removeClass('prev').dequeue();
                }).end().eq(el_index - 1).addClass('next').delay(10).queue(function () {
                    $(this).removeClass('next').addClass('active').dequeue();
                });
            } else {
                $('.tw2gui_carousel_element', this.divMain).filter('.active').removeClass('active').end().eq(el_index - 1).addClass('active');
            }
            this._signal('show', {index: el_index});
        },
        start: function () {
            var interval = this.delay, rotate = this.rotate;
            if (rotate) {
                this.timer = window.setInterval(this._handleTimer.bind(this), interval);
            }
            return this;
        },
        stop: function () {
            if (this.timer) {
                window.clearInterval(this.timer);
                this.timer = null;
            }
            return this;
        },
        _handleTimer: function () {
            this.next();
        },
        add: function (item, silent) {
            this.items.push(item);
            this.items_list.append(item);
            if (!silent) {
                this._signal('add', {item: item});
            }
            return this;
        },
        next: function () {
            this.paginator.next();
            return this;
        },
        prev: function () {
            this.paginator.prev();
            return this;
        },
        show: function (position) {
            this.paginator.setCurrent(position);
            return this;
        },
        changeSkin: function (skin) {
            if (skin) {
                this.divMain.removeClass('skin_' + this.skin);
                this.skin = skin;
                this.divMain.addClass('skin_' + this.skin);
                this._signal('change_skin', {'skin': skin});
            }
            return this;
        },
        showPaginator: function (bool) {
            this.show_paginator = !!bool;
            if (this.show_paginator) {
                this.divMain.append(this.paginator.getMainDiv());
            } else {
                this.paginator.getMainDiv().detach();
            }
            return this;
        },
        setPaginatorPosition: function (position) {
            if (position) {
                this.divMain.removeClass('paginator_' + this.paginator_position);
                this.paginator_position = position;
                this.divMain.addClass('paginator_' + this.paginator_position);
                this._signal('change_paginator_position', {'position': position});
            }
        },
        _signal: function (event, data) {
            this.divMain.trigger('carousel:' + event, data);
        }
    });
    west.define('tw2widget.gui.progressbar_stageable', tw2widget.Widget, {
        domSkel: '<div class="tw2gui_progressbar progressbar_stageable">'
        + '<div class="progressbar">'
        + '<div class="progress"></div>'
        + '</div>'
        + '<div class="stages"></div>'
        + '<div class="description"></div>'
        + '</div>',
        stageSkel: '<div class="stage">'
        + '<div class="progress"></div>'
        + '<div class="description"></div>'
        + '</div>',
        stages: [],
        $stages: null,
        value: null,
        displayed_value: 0,
        max: null,
        skin: 'default',
        animate: true,
        animation_delay: 1000,
        animation_delay_step: 500,
        timeouts: [],
        direction: 'ltr',
        init: function (stages, value, max, options) {
            options = options || {};
            this.divMain = $(this.domSkel);
            this.$stages = $('.stages', this.divMain);
            this.stages = [];
            this.max = max;
            this._addEvents();
            this.setAnimate(options.animate);
            this.setDirection(options.direction);
            this.changeSkin(options.skin);
            this.addStages(stages);
            if (undefined !== value) {
                this.setValue(value);
            }
            return this;
        },
        setValue: function (value) {
            if (value !== this.value) {
                var old_value = this.value;
                this.value = value;
                this._progress();
                this._signal('value:change', value, old_value);
            }
            return this;
        },
        setMax: function (max) {
            if (max !== this.max) {
                var old_max = this.max;
                this.max = max;
                this._signal('max:change', max, old_max);
            }
            return this;
        },
        setAnimate: function (bool) {
            if (undefined !== bool) {
                this.animate = !!bool;
            }
            this.divMain.toggleClass('is_animated', this.animate);
            return this;
        },
        addStages: function (stages) {
            if (!$.isArray(stages)) {
                return this;
            }
            var i = 0, l = stages.length, tmp_val;
            tmp_val = this.value;
            this.setValue(0);
            this._signal('stages:change');
            this.$stages.empty();
            this.stages = stages.sort(function (a, b) {
                return a.value - b.value;
            });
            for (i; i < l; i++) {
                this._addStage(stages[i]);
            }
            this.setValue(tmp_val);
            return this;
        },
        _addStage: function (stage_data) {
            var $stage = $(this.stageSkel), value = this.value, max = this.max;
            if (undefined === stage_data.value) {
                return this;
            }
            if (stage_data.description) {
                $('.description', $stage).html(stage_data.description);
            }
            if (stage_data.popup) {
                $stage.addMousePopup(stage_data.popup.locked ? stage_data.popup.locked : stage_data.popup);
            }
            stage_data.$el = $stage;
            this._calculateStagePosition(stage_data);
            if (value) {
                this._unlockStage(stage_data);
            }
            this.$stages.append($stage);
        },
        _addEvents: function () {
            var that = this, $root = this.getMainDiv();
            return this;
        },
        _calculateStagePosition: function (stage_data) {
            var max = this.max, $el = stage_data.$el, direction = this.direction !== 'ltr' ? 'right' : 'left';
            if (max) {
                $el.removeClass('unpositioned').css(direction, this._getProgressValue(stage_data.value) + '%');
            } else {
                $el.addClass('unpositioned');
            }
        },
        _progress: function () {
            var displayed_value = this.displayed_value, value = this.value, stages, i;
            if (value === displayed_value) {
                return this;
            }
            stages = this._findStagesBetween(displayed_value, value);
            if (stages.length) {
                if (value > displayed_value) {
                    this._animateInSteps(stages, value);
                } else {
                    if (this.timeouts) {
                        i = this.timeouts.length;
                        while (i--) {
                            window.clearTimeout(this.timeouts[i]);
                        }
                    }
                    i = stages.length;
                    while (i--) {
                        if (stages[i].value !== value) {
                            this._lockStage(stages[i], true);
                        }
                    }
                    this._setProgressbar(this._getProgressValue(value));
                }
            } else {
                this._setProgressbar(this._getProgressValue(value));
            }
            this.displayed_value = value;
        },
        _getProgressValue: function (value) {
            return Math.round(value / this.max * 100);
        },
        _setProgressbar: function (value) {
            $('.progressbar > .progress', this.getMainDiv()).css({'width': value + '%'});
        },
        _unlockStage: function (stage_data) {
            stage_data.$el.addClass('reached');
            if (stage_data.popup.unlocked) {
                stage_data.$el.addMousePopup(stage_data.popup.unlocked);
            }
            this._signal('stage:change', ['unlocked', stage_data]);
        },
        _lockStage: function (stage_data) {
            stage_data.$el.removeClass('reached');
            this._signal('stage:change', ['locked', stage_data]);
        },
        _animateInSteps: function (steps, to) {
            var that = this, timeouts = this.timeouts, step, tick = function () {
                timeouts.length = 0;
                step = steps.shift();
                that._setProgressbar(that._getProgressValue(step.value));
                timeouts.push(window.setTimeout(function () {
                    timeouts.shift();
                    that._unlockStage(step);
                }, that.animation_delay));
                if (steps.length) {
                    timeouts.push(window.setTimeout(tick, that.animation_delay + that.animation_delay_step));
                } else if (step.value < to) {
                    timeouts.push(window.setTimeout(function () {
                        timeouts.shift();
                        that._setProgressbar(that._getProgressValue(to));
                    }, that.animation_delay + that.animation_delay_step));
                }
            }, i, l;
            if (this.animate) {
                tick();
            } else {
                i = 0, l = steps.length;
                for (i; i < l; i++) {
                    this._unlockStage(steps[i]);
                }
                this._setProgressbar(this._getProgressValue(to));
            }
        },
        _findStagesBetween: function (from, to) {
            if (from > to) {
                from = to + (to = from, 0);
            }
            var stages = this.stages, i = 0, l = stages.length, subset = [];
            for (i; i < l; i++) {
                if (stages[i].value < from) {
                    continue;
                }
                if (stages[i].value > to) {
                    break;
                }
                subset.push(stages[i]);
            }
            return subset;
        },
        changeSkin: function (skin) {
            if (skin) {
                this.divMain.removeClass('skin_' + this.skin);
                this.skin = skin;
                this.divMain.addClass('skin_' + this.skin);
                this._signal('change_skin', {'skin': skin});
            } else if (this.skin) {
                this.divMain.addClass('skin_' + this.skin);
            }
            return this;
        },
        setDirection: function (direction) {
            if (direction) {
                this.divMain.removeClass('direction_' + this.direction);
                this.direction = direction;
                this.divMain.addClass('direction_' + this.direction);
                this._signal('change_direction', {'skin': direction});
            } else if (this.direction) {
                this.divMain.addClass('direction_' + this.direction);
            }
            return this;
        },
        _signal: function (event, data) {
            this.divMain.trigger('stageable_progressbar:' + event, data);
        }
    });
    west.define('tw2widget.gui.CircleProgressbarCss', tw2widget.Widget, {
        style: null,
        value: null,
        max: null,
        torus: false,
        empty: false,
        size: 60,
        background_colour: 'transparent',
        progress_colour: '#97a71d',
        init: function (value, max) {
            this.value = value;
            this.max = max;
            this.id = 'radial_r_' + Math.floor(Math.random() * 100000);
            this.divMain = $(''
                + '<div class="tw2gui_progressbar_circular" id="' + this.id + '">'
                + ' <div class="circle">'
                + '  <div class="mask full">'
                + '   <div class="fill"></div>'
                + '  </div>'
                + '  <div class="mask half">'
                + '   <div class="fill"></div>'
                + '   <div class="fill fix"></div>'
                + '  </div>'
                + '  <div class="shadow"></div>'
                + ' </div>'
                + ' <div class="inset"></div>'
                + '</div>');
            this.style = document.createElement("style");
            this.style.appendChild(document.createTextNode(""));
            this.divMain[0].appendChild(this.style);
            this.setStyles();
        },
        setStyles: function () {
            this.clearStylesheet();
            this.calculateProgress();
            if (this.size) {
                this.addToStylesheet({selector: '#' + this.id, rules: 'font-size: ' + this.size + 'px'});
            }
        },
        calculateProgress: function () {
            this.setProgress(Math.round(180 * (this.value / this.max) * 1000) / 1000);
        },
        setProgress: function (degrees) {
            var rules = [{
                selector: '#' + this.id + ' .circle .mask.full, #' + this.id + ' .circle .fill',
                rules: s(' -webkit-transform: rotate(%1deg);'
                    + ' -ms-transform: rotate(%1deg);'
                    + ' transform: rotate(%1deg);', degrees)
            }, {
                selector: '#' + this.id + ' .circle .fill.fix', rules: s(' -webkit-transform: rotate(%1deg);'
                    + ' -ms-transform: rotate(%1deg);'
                    + ' transform: rotate(%1deg);', degrees * 2)
            }], i = rules.length;
            while (i--) {
                this.addToStylesheet(rules[i]);
            }
        },
        addToStylesheet: function (opt) {
            var stylesheet = this.style.sheet, i;
            if (stylesheet) {
                i = stylesheet.cssRules.length;
                if (stylesheet.insertRule) {
                    stylesheet.insertRule(opt.selector + "{" + opt.rules + "}", i);
                } else {
                    stylesheet.addRule(opt.selector, opt.rules, i);
                }
            }
        },
        removeFromStylesheet: function (index) {
            var stylesheet = this.style.sheet;
            if (stylesheet) {
                if (stylesheet.insertRule) {
                    stylesheet.deleteRule(index);
                } else {
                    stylesheet.removeRule(index);
                }
            }
        },
        clearStylesheet: function () {
            var stylesheet = this.style.sheet, i;
            if (stylesheet) {
                i = stylesheet.cssRules.length;
                while (i--) {
                    this.removeFromStylesheet(i);
                }
            }
        },
        setCurr: function (value) {
            this.value = value;
            this.setStyles();
            return this;
        },
        setMax: function (max) {
            this.max = max;
            this.setStyles();
            return this;
        },
        setTorus: function (bool) {
            this.torus = bool;
            this.getMainDiv().toggleClass('torus', bool);
            return this;
        },
        setEmpty: function (bool) {
            this.empty = bool;
            this.getMainDiv().toggleClass('doughnut', bool);
            return this;
        },
        setSize: function (size) {
            size = parseInt(size, 10);
            if (isNaN(size)) {
                return this;
            }
            this.size = size;
            this.setStyles();
            return this;
        },
        setProgressColor: function () {
        }
    });
})(jQuery);

west.define('west.gui.FancyBanner', west.gui.Component, {
    init: function (subtitle, title, cls, onFinish) {
        cls = cls || '';
        this.divMain = $(''
            + '<div class="fancybanner ' + cls + '" >'
            + "<div class='bgr'>"
            + "<div class='bgr-left' />"
            + "<div class='bgr-mid' />"
            + "<div class='bgr-right' />"
            + "</div>"
            + "<div class='content'>"
            + "<div class='title' />"
            + "<div class='subtitle' />"
            + "</div>"
            + '<div class="button" />'
            + "</div>");
        this.divMain.guiElement = this;
        this.title = $('.title', this.divMain).text(title);
        this.subtitle = $('.subtitle', this.divMain).text(subtitle);
        this.onFinish = onFinish;
        this.animate = true;
    }, setContent: function (subtitle, title) {
        if (this.subtitle.text() == subtitle && this.title.text() == title)
            return this;
        if (title && this.title.text() != title) {
            this.title.fadeOut(250).text(title).fadeIn(250);
        }
        this.subtitle.fadeOut(250).text(subtitle).fadeIn(250);
        return this;
    }, show: function () {
        if (!this.divMain.is(':hidden'))return this;
        var that = this;
        if ('undefined' !== typeof this.onFinish) {
            $('.button', this.getMainDiv()).empty().append($('<div class="quest_reward_button normal" />').mouseover(function () {
                $(this).addClass('hover');
            }).mouseout(function () {
                $(this).removeClass('hover');
            }).click(function () {
                that.hide();
                that.onFinish && that.onFinish.call(that);
            }));
        }
        if (this.animate) {
            this.divMain.fadeIn(150);
            $(".bgr", this.divMain).animate({width: '100%'}, 500);
        } else {
            this.divMain.show();
        }
        return this;
    }, hide: function (waitfor) {
        if (this.timeout)window.clearTimeout(this.timeout);
        if (this.divMain.is(':hidden'))return this;
        if (waitfor) {
            this.timeout = window.setTimeout(this.hide.bind(this), waitfor);
            return this;
        }
        if (this.animate) {
            this.divMain.fadeOut(150);
            $(".bgr", this.divMain).animate({width: '0%'}, 500);
        } else {
            this.divMain.hide();
        }
        return this;
    }, setOnFinish: function (new_function) {
        var tmp;
        this.onFinish = new_function;
        if (!this.divMain.is(':hidden')) {
            tmp = !!this.animate;
            this.setAnimate(false).hide().show().setAnimate(tmp);
        }
        return this;
    }, setAnimate: function (bool) {
        this.animate = !!bool;
        return this;
    }, remove: function () {
        this.divMain.remove()
    }
});

var Suggestion = {
    titleName: null,
    windowName: null,
    extendedName: null,
    suggestionPopup: null,
    refresh: false,
    extendedNameID: false,
    popupName: 'suggestion_popup',
    affected_player_id: null,
    showPopup: function (windowName, extendedName, extendedNameID) {
        this.titleName = 'Жалоба';
        this.windowName = windowName;
        this.extendedName = extendedName;
        this.extendedNameID = extendedNameID;
        if (windowName != 'tel_messages' && windowName != 'player_profile' && windowName != 'chat' && windowName != 'mpi') {
            return;
        }
        this.setUpXhtml();
        this.showUpPopup();
    },
    cancel: function () {
        $('#' + this.popupName).hide();
    },
    submit: function () {
        var desc = $('#iss_desc').val();
        var affected = $('#affected_player_name').html();
        if (desc.length < 20) {
            new UserMessage("Обоснование не может быть короче 20 символов", UserMessage.TYPE_ERROR).show();
            return;
        } else if (desc.length > 400) {
            new UserMessage("Описание не может быть длиннее 400 символов", UserMessage.TYPE_ERROR).show();
            return;
        }
        $('#sugg_content').hide();
        $('#thr').show();
        var data = {
            window_name: this.windowName,
            extended_name: this.extendedName,
            suggest_type: 0,
            suggest_desc: desc,
            affected_player_name: affected,
            affected_player_id: this.affected_player_id
        };
        if ('chat' == this.windowName) {
            this.handleChatRequest(data.affected_player_id, data.suggest_desc);
        } else if ('mpi' == this.windowName) {
            this.handleMpiRequest(data.affected_player_id, data.suggest_desc);
        } else {
            var that = this;
            Ajax.remoteCall('suggestion', 'submit_suggestion', data, function (json) {
                that.handleDisplay(json.error);
            });
        }
        this.refresh = true;
    },
    handleChatRequest: function (affectedPlayerId, description) {
        if (undefined == affectedPlayerId || !this.suggestionPopup)return;
        Chat.Request.AffrontUser(affectedPlayerId, description);
    },
    handleMpiRequest: function (entityId, description) {
        if (undefined == entityId || !this.suggestionPopup)return;
        var that = this;
        EventHandler.signal('mpi_affront', [entityId, description, function (error) {
            that.handleDisplay(error);
        }]);
    },
    handleChatResponse: function (data) {
        var msg = data.payload;
        var error = "";
        switch (msg) {
            case"selfaffront":
                error = "Ты можешь жаловаться только на других игроков.";
                break;
            case"unknownuser":
                error = "А о ком речь, собственно?";
                break;
            case"affectedoffline":
                error = "Игрок не в сети.";
                break;
            case"nomessages":
                error = "Но этот игрок ещё ничего не написал!";
                break;
            case"alreadyaffronted":
                error = (Character.charSex == 'female') ? "Ты уже жаловалась на этого игрока!" : "Ты уже жаловался на этого игрока!";
                break;
            case"failed":
                error = "Произошла ошибка.";
                break;
        }
        this.handleDisplay(error);
    },
    handleDisplay: function (error) {
        if (undefined == error || error == "") {
            this.displaySuccess();
        } else {
            this.displayError(error);
        }
    },
    displayError: function (error) {
        if (undefined === error || !this.suggestionPopup)return false;
        $('#sugg_content').show();
        $('#thr').hide();
        new UserMessage(error, UserMessage.TYPE_ERROR).show();
        return true;
    },
    displaySuccess: function () {
        if (!this.suggestionPopup)return false;
        var finishText = '<strong>' + 'Донос передан в компетентные органы.' + '</strong>';
        $('#sugg_content').show();
        $('#sugg_content').empty();
        var closeButton = new west.gui.Button("Закрыть", function () {
            Suggestion.cancel();
        });
        $('#sugg_content').append($('<div style="padding-left: 10px; padding-right: 10px; padding-top: 0px; padding-bottom: 2px;" />').append('<table width="350px"><tr><td width="44px"><img src="https://westrus.innogamescdn.com/images/icons/affront_circle.png" alt="" /></td>' + '<td style="float: left; text-align: left; margin-top: 10px;"><strong style="font-size: 18px;">' + this.titleName + '</strong><br /></td>' + '</tr></table><br /><div style="width: 100%; text-align: center;">' + finishText + '</div><br />', closeButton.getMainDiv()));
        return true;
    },
    ignore_player: function (player_id) {
        var npId = this.affected_player_id ? this.affected_player_id : player_id;
        Ajax.remoteCall('suggestion', 'ignore_player', {player_id: npId}, function (json) {
            if (json.error) {
                new UserMessage(json.error, UserMessage.TYPE_ERROR).show();
            } else {
                new UserMessage(s('Ты заблокировал игрока %1.', json.player_name), UserMessage.TYPE_SUCCESS).show();
            }
        });
    },
    setUpXhtml: function () {
        var xHtml = null;
        var buttons = null;
        var header = null;
        var layout = null;
        buttons = '<div id="buttons" style="margin-left: -3px; margin-top: 3px; margin-bottom: -4px;"><table><tr>';
        buttons += '<td><div id="suggestion_submit"></div></td>';
        buttons += '<td><div id="suggestion_cancel"></div></td>';
        buttons += '<td><div id="suggestion_ignore"></div></td>';
        buttons += '</tr></table></div>';
        header = '<div id="suggestion_header"><table width="350px"><tr>';
        header += '<td width="44px"><img src="https://westrus.innogamescdn.com/images/icons/affront_circle.png" alt="" /></td>';
        header += '<td style="float: left; text-align: left; margin-top: 10px;"><strong style="font-size: 18px;">' + this.titleName + '</strong><br /></td>';
        header += '</tr></table></div>';
        layout = '<div id="sugg_send" style="padding-left: 10px; padding-right: 10px; padding-top: 2px; padding-bottom: 2px;">';
        layout += '<div>';
        layout += '<span id="suggestion_affected"></span><br />';
        layout += '<span id="suggestion_description"></span>';
        layout += '</div>';
        layout += '<div id="issue_desc"></div>';
        layout += buttons;
        layout += '</div>';
        var layoutTitle = header;
        var layoutDescription = layout;
        xHtml = '<div style="background: url(https://westrus.innogamescdn.com/images/messagebox/messagebox_bg.png);">';
        xHtml += '<div id="bg_head" style="background: url(https://westrus.innogamescdn.com/images/messagebox/messagebox_bordertop.png); width: 100%; height: 10px;"><div style="position: absolute; float:left;"><div style="background: url(https://westrus.innogamescdn.com/images/messagebox/messagebox_cornerstop.png); height: 10px; width: 30px;"></div></div><div style="position: relative; float: right;"><a href="javascript:Suggestion.cancel();"><img src="https://westrus.innogamescdn.com/images/close2.png" alt=""></a></div></div>';
        xHtml += '<div>';
        xHtml += '<div style="background: url(https://westrus.innogamescdn.com/images/messagebox/messagebox_bordervertical.png); height: 100%;">';
        xHtml += '<div id="thr" style="text-align: center; display: none;"></div>';
        xHtml += '<div id="sugg_content" style="padding: 6px;"><div id="title">' + layoutTitle + '</div><div>' + layoutDescription + '</div></div>';
        xHtml += '</div></div>';
        xHtml += '<div style="background: url(https://westrus.innogamescdn.com/images/messagebox/messagebox_bordervertical.png); float: right; width: 20px; height: 100%;"></div>';
        xHtml += '<div id="bg_foot" style="background: url(https://westrus.innogamescdn.com/images/messagebox/messagebox_borderbottom.png); width: 100%; height: 10px;"><div style="position:absolute; float: left;"><div style="background: url(https://westrus.innogamescdn.com/images/messagebox/messagebox_cornersbottom.png); height: 10px; width: 30px;"></div></div><div style="position: relative; float: right;"><div style="background: url(https://westrus.innogamescdn.com/images/messagebox/messagebox_right_corner.png); height: 10px; width: 93px;"></div></div></div>';
        xHtml += '</div>';
        this.suggestionPopup = xHtml;
        return true;
    },
    setUpPopupData: function () {
        if (!$(this.popupName)) {
            return false;
        }
        var that = this;
        Ajax.remoteCall('suggestion', 'ajax_get_data', {
            window_name: this.windowName,
            extended_name: this.extendedName,
            extended_nameID: this.extendedNameID
        }, function (json) {
            if (json.error) {
                $('#' + that.popupName).hide();
                that.refresh = true;
                new UserMessage(json.error, UserMessage.TYPE_ERROR).show();
                return;
            }
            var submitButton = new west.gui.Button("OK", function () {
                Suggestion.submit();
            });
            var cancelButton = new west.gui.Button("Отмена", function () {
                Suggestion.cancel();
            });
            var ignoreButton = new west.gui.Button("Игнорировать игрока", function () {
                Suggestion.ignore_player(json.post.player_id);
            });
            $('#suggestion_submit').empty().append(submitButton.getMainDiv());
            $('#suggestion_cancel').empty().append(cancelButton.getMainDiv());
            $('#suggestion_ignore').empty();
            if (!json.post.disable_ignore) {
                $('#suggestion_ignore').append(ignoreButton.getMainDiv());
            }
            $('#suggestion_affected').html('<strong>' + 'На игрока:' + '</strong> <span id="affected_player_name"></span>');
            $('#issue_desc').html('<br /><span style="font-weight: bold; vertical-align: top;">' + 'Обоснование:' + '</span><br /><span style="font-size: 10px;">' + '(не меньше 20 знаков)' + '</span><br /><textarea id="iss_desc" class="suggestion_input_box suggestion_textarea"></textarea>');
            $('#affected_player_name').html(json.post.player_name);
            that.affected_player_id = json.post.player_id;
            $('#suggestion_description').html('<br />' + json.information);
        });
        this.refresh = true;
        return true;
    },
    showUpPopup: function () {
        if (this.refresh && $('#' + this.popupName)) {
            this.refresh = false;
            $('#' + this.popupName).remove();
        }
        var suggestionPopup = $('<div id="suggestion_popup" style="width: 350px; background: url(https://westrus.innogamescdn.com/images/messagebox/messagebox_bg.png);" />');
        suggestionPopup.html(this.suggestionPopup);
        $('#popup-container').append(suggestionPopup);
        this.setUpPopupData();
        var el = $('#' + this.popupName);
        el.show();
        var popupWidth = el.width();
        el.css({left: "50%", "margin-left": "-" + (popupWidth / 2) + "px", top: 100});
    }
};

window.wman = (function () {
    var wman = {};
    var _windows = {}, _cycle = [], _cycleFocus = [], _cycleid = 0, _resized_enabled = false;
    wman.minimizedIds = {};
    wman.lastIndex = 100;
    var _reopenHandlers = [], _reloadHandlers = [];
    var _offsetStep = 20, _offsetValue = 0;
    var dispatchEvent = function (type, win, uid) {
        switch (type) {
            case"WINDOW_OPENED":
                WestUi.WindowBar.onWindowOpen(uid, win);
                break;
            case"WINDOW_DESTROY":
                WestUi.WindowBar.onWindowDestroy(uid);
                break;
            case"WINDOW_REOPEN":
                WestUi.WindowBar.onWindowReopen(uid, win);
                break;
            case"WINDOW_MINIMIZE":
                WestUi.WindowBar.onWindowMinimize(uid, win);
                break;
            case"WINDOW_FOCUS":
                WestUi.WindowBar.onWindowFocus(uid, win);
                break;
        }
    };
    var uidcnt = 0;
    var eventHandler = {
        onWindowCloseAllOpen: function (e) {
            var uid;
            for (uid in _windows) {
                if (!_windows.hasOwnProperty(uid))continue;
                if (!_windows[uid].dontCloseAll && !wman.minimizedIds[uid]) {
                    _windows[uid].destroy();
                    EventHandler.signal("window_closed_" + uid, [uid]);
                    EventHandler.signal("WINDOW_CLOSED", [uid]);
                    dispatchEvent("WINDOW_CLOSED", uid);
                }
            }
            _offsetValue = 0;
        }, onWindowCloseAll: function (e) {
            var uid;
            for (uid in _windows) {
                if (!_windows.hasOwnProperty(uid))continue;
                if (!_windows[uid].dontCloseAll) {
                    _windows[uid].destroy();
                    EventHandler.signal("window_closed_" + uid, [uid]);
                    EventHandler.signal("WINDOW_CLOSED", [uid]);
                    dispatchEvent("WINDOW_CLOSED", uid);
                }
            }
            _offsetValue = 0;
        }, onWindowClose: function (e, win, uid) {
            if (!Config.get("gui.main.animations")) {
                win.destroy();
            } else {
                $(win.getMainDiv()).slideUp(function () {
                    win.destroy();
                });
            }
            if ($.isEmptyObject(_windows))
                _offsetValue = 0;
            EventHandler.signal("window_closed_" + uid, [uid]);
            EventHandler.signal("WINDOW_CLOSED", [uid]);
            dispatchEvent("WINDOW_CLOSED", uid);
        }, onWindowDestroy: function (e, win, uid) {
            delete _windows[uid];
            var idx = jQuery.inArray(uid, _cycle), idxf = jQuery.inArray(uid, _cycleFocus);
            if (-1 != idx)_cycle.splice(idx, 1);
            if (-1 != idxf) {
                _cycleFocus.splice(idxf, 1);
                wman.focusFirstUnclosed();
            }
            if (wman.minimizedIds[uid])
                delete wman.minimizedIds[uid];
            dispatchEvent(e, win, uid);
        }, onWindowMinimize: function (e, win, uid) {
            wman.minimize(uid);
        }, onWindowReload: function (e, win, uid, callback) {
            wman.reload(uid, $(win.getMainDiv()).attr("class"), callback);
        }, onWindowFocus: function (e, win, uid) {
            _cycleid = jQuery.inArray(uid, _cycle);
            var tmp = _cycleFocus.splice(jQuery.inArray(uid, _cycleFocus), 1);
            _cycleFocus.push(tmp[0])
            dispatchEvent(e, win, uid);
        }
    };
    wman.toggleOpen = function (uid, title, windowclass, notanimated, noDrag) {
        if (uid === undefined)uid = "__" + (++uidcnt);
        if (wman.isWindowCreated(uid)) {
            if (wman.isMinimized(uid)) {
                wman.reopen(uid);
                return {status: 'reopen', win: wman.getById(uid)};
            } else {
                if (!wman.isFocused(uid)) {
                    wman.getById(uid).bringToTop();
                    return {status: 'focus', win: wman.getById(uid)};
                } else {
                    wman.minimize(uid);
                    return {status: 'minimize', win: wman.getById(uid)};
                }
            }
        } else {
            return {status: 'open', win: wman.open(uid, title, windowclass, notanimated, noDrag)};
        }
    };
    wman.open = function (uid, title, windowclass, notanimated, noDrag, minimize_if_open) {
        if (uid === undefined)uid = "__" + (++uidcnt);
        var win = wman.getById(uid);
        var ap, destr = !!win;
        if (destr) {
            if (minimize_if_open && !wman.isMinimized(uid)) {
                wman.minimize(uid);
                return {status: 'minimize', wnd: win};
            } else {
                ap = win.saveAppearance();
                win.destroy();
            }
        }
        if (!_resized_enabled) {
            EventHandler.listen('window_resized', function () {
                wman.repositionWindows();
            });
            _resized_enabled = true;
        }
        _windows[uid] = win = new west.gui.Window(title, uid + " " + (windowclass || ""), (noDrag || false)).restoreAppearance(ap).setId(uid).addEventListener(TWE('WINDOW_DESTROY'), eventHandler.onWindowDestroy, this, uid).addEventListener(TWE('WINDOW_MINIMIZE'), eventHandler.onWindowMinimize, this, uid).addEventListener(TWE('WINDOW_CLOSE'), eventHandler.onWindowClose, this, uid).addEventListener(TWE('WINDOW_RELOAD'), eventHandler.onWindowReload, this, uid).addEventListener(TWE('WINDOW_CLOSEALL_OPEN'), eventHandler.onWindowCloseAllOpen, this, uid).addEventListener(TWE('WINDOW_CLOSEALL'), eventHandler.onWindowCloseAll, this, uid).addEventListener(TWE('WINDOW_FOCUS'), eventHandler.onWindowFocus, this, uid);
        if (!destr)wman.align(win);
        if (!ap && !notanimated && Config.get("gui.main.animations"))
            $(win.getMainDiv()).hide().fadeIn();
        EventHandler.signal("window_opened_" + uid, [uid]);
        EventHandler.signal("WINDOW_OPENED", [uid]);
        dispatchEvent("WINDOW_OPENED", win, uid);
        _cycle.push(uid);
        _cycleFocus.push(uid);
        eventHandler.onWindowFocus(TWE('WINDOW_FOCUS'), win, uid);
        return win;
    };
    wman.align = function (wnd) {
        if (!Config.get("window.offset"))return;
        wnd.center();
        var e = $(wnd.getMainDiv()), pos = e.position(), tmp = pos;
        pos.left += _offsetValue + _offsetStep;
        pos.top += _offsetValue + _offsetStep;
        e.css(pos);
        if (!e.inside($(window), -20)) {
            e.css(tmp);
            _offsetValue = 0;
        } else {
            _offsetValue += _offsetStep;
        }
    };
    wman.addEventListener = function (type, handler, context) {
        return this;
    };
    wman.removeEventListener = function (type, handler) {
        return this;
    };
    wman.getById = function (uid) {
        return _windows[uid];
    };
    wman.isWindowCreated = function (uid) {
        return !!_windows[uid];
    };
    wman.registerReopenHandler = function (regex, handler) {
        _reopenHandlers.push({matcher: regex, handler: handler});
        return wman;
    };
    wman.registerReloadHandler = function (regex, handler) {
        _reloadHandlers.push({matcher: regex, handler: handler});
        return wman;
    };
    wman.reopen = function (uid, winclass, callback) {
        var window = this.getById(uid), i;
        window.bringToTop();
        if (!Config.get("gui.main.animations"))
            $('.tw2gui_window.' + uid).show(); else
            $('.tw2gui_window.' + uid).fadeIn(500);
        i = _reopenHandlers.length;
        while (i--) {
            var entry = _reopenHandlers[i];
            if ((!entry.matcher || new RegExp(entry.matcher).test(uid)) && entry.handler(uid, winclass || "")) {
                break;
            }
        }
        delete wman.minimizedIds[uid];
        EventHandler.signal("window_reopen_" + uid, [uid]);
        dispatchEvent("WINDOW_REOPEN", window, uid);
        if (callback)
            callback.call();
    };
    wman.reopenAll = function () {
        for (var uid in _windows) {
            wman.reopen(uid);
        }
    };
    wman.reload = function (uid, winclass, callback) {
        for (var i = 0; i < _reloadHandlers.length; i += 1) {
            var entry = _reloadHandlers[i];
            if ((!entry.matcher || new RegExp(entry.matcher).test(uid)) && entry.handler(uid, winclass || ""))
                break;
        }
        if (callback)
            callback.call();
    };
    wman.repositionWindows = function () {
        var wnd = $(window), old = wnd.data("old_size");
        if (old) {
            var fw = wnd.width() / old.width, fh = wnd.height() / old.height;
            var wl = old.width / 2, wt = old.height / 2, margin = 30, mid = {
                x0: (wl / 2) - margin,
                x1: (wl * 2) + margin,
                y0: (wt / 2) - margin,
                y1: (wt / 2) + margin
            };
            $.each(_windows, function (id, win) {
                var e = $(win.getMainDiv()), off = e.offset(), w = e.width(), h = e.height(), r = old.width - (off.left + w), b = old.height - (off.top + h), mx = off.left + w / 2, my = off.top + h / 2;
                if (mx >= mid.x0 && my <= mid.x1)
                    off.left = (off.left + (w / 2)) * fw - (w / 2); else if (off.left < r)
                    off.left = off.left * fw; else
                    off.left = (off.left + w) * fw - w;
                if (mx >= mid.y0 && my < mid.y1)
                    off.top = (off.top + (h / 2)) * fh - (h / 2); else if (off.top < b)
                    off.top = off.top * fh; else
                    off.top = (off.top + h) * fh - h;
                off.left = Math.min(wnd.width() - w, Math.max(0, off.left));
                off.top = Math.min(wnd.height() - h, Math.max(0, off.top));
                e.offset(off);
            });
        } else {
            $.each(_windows, function (id, win) {
                win.center();
            });
        }
    };
    wman.close = function (uid) {
        var win = _windows[uid];
        if (win) {
            eventHandler.onWindowClose(null, win, uid);
        }
    };
    wman.closeAll = function () {
        eventHandler.onWindowCloseAll(null);
    };
    wman.isFocused = function (uid) {
        return uid === _cycle[_cycleid];
    };
    wman.isMinimized = function (uid) {
        return wman.minimizedIds[uid];
    };
    wman.minimize = function (uid, skip_refocus) {
        var win = _windows[uid];
        if (!win || $(win.getMainDiv()).hasClass('dontminimize') || wman.isMinimized(uid))return;
        if (!Config.get("gui.main.animations"))$(win.getMainDiv()).hide(); else $(win.getMainDiv()).fadeOut(400);
        wman.minimizedIds[uid] = win;
        EventHandler.signal("window_minimize_" + uid, [uid]);
        dispatchEvent("WINDOW_MINIMIZE", win, uid);
        if (!skip_refocus) {
            wman.focusFirstUnclosed();
        }
    };
    wman.minimizeAll = function (except) {
        for (var uid in _windows) {
            if ($.inArray(uid, except) === -1)
                wman.minimize(uid, true);
        }
    };
    wman.nextWindow = function () {
        if (0 == _cycle.length)return;
        var uid = _cycle[++_cycleid];
        if (undefined == uid) {
            _cycleid = -1;
            return wman.nextWindow();
        }
        wman.reopen(uid);
    };
    wman.prevWindow = function () {
        if (0 == _cycle.length)return;
        var uid = _cycle[--_cycleid];
        if (undefined == uid) {
            _cycleid = _cycle.length;
            return wman.prevWindow();
        }
        wman.reopen(uid);
    };
    wman.focusFirstUnclosed = function () {
        var i = _cycleFocus.length, uid;
        while (i--) {
            uid = _cycleFocus[i];
            if (!wman.isMinimized(uid) && 'questtracker' !== uid) {
                wman.reopen(uid);
                break;
            }
        }
    };
    return wman;
})();

var ItemManager = (function () {
    var items = {}, items_data = {}, data_loaded = false, factory, init, get, load, doRequest, resetMemo, isLoaded, calculateItemLevelBonus, itemIdToBaseItemId;
    resetMemo = function () {
        west.common.forEach(items, function (item_group) {
            west.common.forEach(item_group, function (item) {
                item.clearCache();
            });
        });
    };
    doRequest = function (callback) {
        var dataObj = {identifier: 'item', method: 'all', packet: {}}, onResponse = function (resp) {
            if (resp.error) {
                return new UserMessage(resp.error, UserMessage.TYPE_ERROR).show();
            }
            load(resp);
            if (callback && 'function' === typeof callback) {
                callback();
            }
        };
        Ajax.gameServiceRequest('storage', '', JSON.stringify(dataObj), onResponse);
    };
    isLoaded = function () {
        return !!data_loaded;
    };
    init = function () {
        factory = new west.item.Factory;
        var after_load = function () {
            EventHandler.signal('itemmanager_loaded', null, true);
            EventHandler.listen('character_level_up', resetMemo);
        };
        doRequest(after_load);
        return this;
    };
    load = function (data) {
        var i = data.length, item;
        while (i--) {
            item = data[i];
            item.item_base_id = item.item_id ? parseInt(item.item_id.toString().slice(0, -3), 10) : 0;
            delete item.item_id;
            items_data[item.item_base_id.toString()] = item;
        }
        items = {};
        data_loaded = true;
        return this;
    };
    get = function (id, nothrow) {
        var item = undefined;
        if ('undefined' === typeof id) {
            return item;
        } else if (parseInt(id) === 0) {
            id = '0000';
        } else if (id < 1000 || id > 2147483647) {
            if (nothrow) {
                return undefined;
            }
            throw new RangeError('Wrong item_id. Min value: 1000, max value 2147483647. Are you trying to access "old" item ids?');
        }
        id = id.toString();
        var base_id = id.slice(0, -3), base_data = items_data[base_id], lvl = parseInt(id.slice(-3), 10).toString();
        if (Game.ui.itemUpgrade && lvl > Game.ui.itemUpgrade.max_level) {
            lvl = Game.ui.itemUpgrade.max_level;
            id = (base_id * 1000 + lvl).toString();
        }
        if (base_data) {
            items[base_id] = items[base_id] || {};
            item = items[base_id][lvl] = items[base_id][lvl] || factory.create(base_data, id);
        }
        return item;
    };
    getAll = function () {
        var result = {};
        for (var k in items_data) {
            result[k] = this.get(k * 1000);
        }
        return result;
    };
    validateBackend = function () {
        var everything = {};
        var allItems = ItemManager.getAll();
        for (var k in allItems) {
            var maxLevel = allItems[k].upgradeable ? 3 : 0;
            for (var lv = 0; lv <= maxLevel; lv++) {
                var itemId = k * 1000 + lv;
                everything[itemId] = ItemManager.get(itemId).exportBoni();
            }
        }
        console.log("Starting request... This may take a while.");
        Ajax.remoteCall('inventory', 'validate_itemstats', {
            data: JSON.stringify(everything),
            level: Character.level
        }, function (data) {
            if (!data.error) {
                new UserMessage('State is consistent.').show();
            } else {
                new MessageError('Inconsistent state! See log.').show();
                window._itemConsistency = data.differences;
                console.log(data.differences);
                console.log('State also stored in window._itemConsistency');
            }
        });
    };
    getByBaseId = function (base_id, level) {
        level = ('000' + (level || 0).toString()).slice(-3);
        return get(base_id.toString() + level);
    };
    calculateItemLevelBonus = function (level, value) {
        var ret;
        if (!level || !value) {
            return 0;
        }
        if (value < 1) {
            ret = Math.round(Math.max(1, value * 1000 * level)) / 10000;
        } else {
            ret = Math.round(Math.max(1, value * 0.1 * level));
        }
        return ret;
    };
    itemIdToBaseItemId = function (id) {
        return id ? parseInt(id.toString().slice(0, -3), 10) : 0;
    };
    return {
        'init': init,
        'get': get,
        'getAll': getAll,
        'getByBaseId': getByBaseId,
        'load': load,
        'isLoaded': isLoaded,
        'calculateItemLevelBonus': calculateItemLevelBonus,
        'itemIdToBaseItemId': itemIdToBaseItemId,
        'validateBackend': validateBackend
    };
})();

west.namespace('west.storage.ItemSetManager', {
    _initialized: false, _setArray: [], _setList: {}, init: function () {
        if (this.isLoaded()) {
            return;
        }
        var that = this;
        Ajax.gameServiceRequest('storage', '', '{"identifier": "itemset"}', function (data) {
            var set, i;
            for (i = 0; i < data.length; i++) {
                set = new west.item.ItemSet(data[i]);
                that._setArray.push(set);
                that._setList[set.key] = set;
            }
            that._initialized = true;
            EventHandler.signal('itemsetmanager_loaded', null, true);
        });
    }, isLoaded: function () {
        return this._initialized;
    }, getAll: function (asList) {
        return asList ? this._setList : this._setArray;
    }, get: function (setId) {
        return this._setList[setId];
    }
});

west.define('west.storage.FriendsBar', null, {
    searchType_: null,
    searchTerm_: null,
    result_: null,
    currentPage_: 1,
    resultsPerPage_: null,
    onPageSwitched_: null,
    onTypeChanged_: null,
    cacheTTL_: 1000 * 60 * 5,
    sortPrecedence_: null,
    sortTypes_: {
        online: function (a, b) {
            var clientA = Chat.Resource.Manager.getClient('client_' + a.player_id), clientB = Chat.Resource.Manager.getClient('client_' + b.player_id), offlineState = Chat.Resource.Client.STATUS_UNKNOWN, stateA = clientA ? clientA.statusId : offlineState, stateB = clientB ? clientB.statusId : offlineState;
            return stateB - stateA;
        }, experience: function (a, b) {
            return b.experience - a.experience;
        }
    },
    filterCache_: null,
    activeFilters_: null,
    filterTypes_: {
        name: function (player) {
            var term = this.activeFilters_['name'];
            return player.name.toLowerCase().containsString(term.toLowerCase());
        }
    },
    eventActivations: null,
    onEventsActivation_: null,
    init: function (searchType, onPageSwitched, onTypeChanged, onEventsActivation, searchTerm) {
        this.result_ = {};
        this.sortPrecedence_ = ['online', 'experience'];
        this.activeFilters_ = {};
        this.eventActivations = {};
        this.onPageSwitched_ = onPageSwitched;
        this.onTypeChanged_ = onTypeChanged;
        this.onEventsActivation_ = onEventsActivation;
        this.setSearchType(searchType, searchTerm);
    },
    hasNext: function () {
        return this.hasPage(this.currentPage_ + 1);
    },
    hasPrev: function () {
        return this.hasPage(this.currentPage_ - 1);
    },
    hasPage: function (page) {
        return page >= 1 && page <= this.getMaxPages();
    },
    next: function () {
        this.getPage(this.currentPage_ + 1);
    },
    prev: function () {
        this.getPage(this.currentPage_ - 1);
    },
    getPage: function (page) {
        var oldPage = this.currentPage_, hasPage = this.hasPage(page);
        if (this.isCached(page) && hasPage) {
            this.currentPage_ = page;
            this.onPageSwitched_(this.getCurrentPlayers(), page, oldPage);
        } else if (hasPage) {
            this.load_(function () {
                if (this.hasPage(page))this.currentPage_ = page;
                this.onPageSwitched_(this.getCurrentPlayers(), this.currentPage_, oldPage);
            }.bind(this));
        }
    },
    getCurrentPage: function () {
        return this.currentPage_;
    },
    getMaxPages: function () {
        if (!this.result_)return 0;
        return Math.ceil(this.getAllPlayers().length / this.resultsPerPage_);
    },
    getCurrentPlayers: function () {
        var players = [], offset;
        if (this.hasPage(this.currentPage_)) {
            players = this.slicePlayers_(this.getAllPlayers());
        }
        return players;
    },
    getAllPlayers: function () {
        var r, players, len;
        if (this.filterCache_)return this.filterCache_;
        players = this.result_.players;
        len = players.length;
        r = [];
        while (len--) {
            if (this.applyFilters_(players[len]))r.unshift(players[len]);
        }
        return this.filterCache_ = r;
    },
    isCached: function () {
        var res = this.result_;
        return res.players !== undefined && res.time > new Date().getTime() - this.cacheTTL_;
    },
    getPageByPlayer: function (playerId) {
        var players = this.getAllPlayers(), len = players.length;
        while (len--) {
            if (players[len].player_id == playerId) {
                return Math.ceil((len + 1) / this.resultsPerPage_);
            }
        }
        return null;
    },
    setSearchType: function (type, searchTerm) {
        this.searchType_ = type;
        this.searchTerm_ = searchTerm;
        this.filterCache_ = null;
        this.activeFilters_ = {};
        this.clearCache();
        this.load_(function (changed) {
            var page = this.getPageByPlayer(Character.playerId);
            this.currentPage_ = page !== null ? page : 1;
            this.onTypeChanged_(this.getCurrentPlayers());
        }.bind(this));
    },
    clearCache: function (page) {
        this.result_ = {};
    },
    getPlayer: function (playerId) {
        var players = this.getCurrentPlayers(), i;
        for (i = 0, len = players.length; i < len; i++) {
            if (playerId == players[i].player_id)return players[i];
        }
        return null;
    },
    getType: function () {
        return this.searchType_;
    },
    getTerm: function () {
        return this.searchTerm_;
    },
    refreshSort: function () {
        var currentOrder, selectedPlayers;
        currentOrder = $.map(this.getCurrentPlayers(), function (player) {
            return player.player_id;
        });
        this.filterCache_ = null;
        this.sort_(this.result_.players);
        selectedPlayers = this.getCurrentPlayers();
        for (i = 0; i < currentOrder.length; i++) {
            if (!selectedPlayers[i] || currentOrder[i] != selectedPlayers[i].player_id) {
                return true;
            }
        }
        return false;
    },
    hasPlayer: function (playerId) {
        var players = this.getAllPlayers() || [], i;
        for (i = 0; i < players.length; i++) {
            if (players[i].player_id == playerId)return true;
        }
        return false;
    },
    setResultsPerPage: function (num) {
        this.resultsPerPage_ = num;
    },
    setFilter: function (filter, value) {
        if (!this.filterTypes_[filter])return false;
        if (null === value) {
            delete this.activeFilters_[filter];
        } else {
            this.activeFilters_[filter] = value;
        }
        this.currentPage_ = 1;
        this.filterCache_ = null;
        this.onTypeChanged_(this.getCurrentPlayers());
        return true;
    },
    hasActiveFilter: function (filter) {
        return filter ? undefined !== this.activeFilters_[filter] : !!objectLength(this.activeFilters_);
    },
    activateEvent: function (eventName, friendId) {
        Ajax.remoteCall('friendsbar', 'event', {player_id: friendId, event: eventName}, function (response) {
            if (response.error)return MessageError(response.msg).show();
            MessageSuccess(response.msg).show();
            this.setEventActivation_(eventName, friendId, response.activationTime);
        }.bind(this));
    },
    getEventActivation: function (eventName, friendId) {
        var activations = this.eventActivations;
        activations[friendId];
        return ((!activations[friendId] || !activations[friendId][eventName]) ? 0 : activations[friendId][eventName]);
    },
    setEventActivation_: function (eventName, friendId, activationTime) {
        var activations = this.eventActivations;
        activations[friendId] = activations[friendId] || {};
        activations[friendId][eventName] = activationTime;
        this.searchEventActivations();
    },
    setEventActivations_: function (activations_array) {
        var activations = this.eventActivations, a_l = activations_array.length, activation;
        while (a_l--) {
            activation = activations_array[a_l];
            activations[activation.friend_id] = activations[activation.friend_id] || {};
            activations[activation.friend_id][activation.event_name] = activation.activation_time;
        }
    },
    searchEventActivations: function () {
        var that = this, event_activations = this.eventActivations, events_running = {}, event_running_name, ev, eventName, players = this.getCurrentPlayers(), p_l = players.length, player, activations_to_show = {};
        for (eventName in Game.sesData) {
            if (!Game.sesData.hasOwnProperty(eventName)) {
                continue;
            }
            ev = Game.sesData[eventName];
            if (!ev.friendsbar || (buildTimestamp(ev.meta.end, true) <= new ServerDate().getTime())) {
                continue;
            }
            events_running[eventName] = parseInt(ev.friendsbar.cooldown, 10);
        }
        while (p_l--) {
            player = players[p_l];
            if (player.player_id == Character.playerId) {
                continue;
            }
            activations_to_show[player.player_id] = [];
            if (event_activations[player.player_id]) {
                for (event_running_name in events_running) {
                    if (!events_running.hasOwnProperty(event_running_name)) {
                        continue
                    }
                    if (event_activations[player.player_id][event_running_name]) {
                        if ((event_activations[player.player_id][event_running_name] + events_running[event_running_name] - new ServerDate().getTime() / 1000) > 0) {
                            continue;
                        }
                    }
                    activations_to_show[player.player_id].push(event_running_name);
                }
            } else {
                for (event_running_name in events_running) {
                    if (!events_running.hasOwnProperty(event_running_name)) {
                        continue
                    }
                    activations_to_show[player.player_id].push(event_running_name);
                }
            }
            if (!activations_to_show[player.player_id].length) {
                delete activations_to_show[player.player_id];
            }
        }
        this.onEventsActivation_(activations_to_show, events_running);
    },
    clearEventActivationsTimers: function () {
        var et = this.eventActivationsTimers, e_l = et.length;
        while (e_l--) {
            if (et[e_l].timeOut) {
                clearTimer(et[e_l].timeOut);
            }
        }
    },
    slicePlayers_: function (players) {
        var offset = (this.currentPage_ - 1) * this.resultsPerPage_;
        return players.slice(offset, offset + this.resultsPerPage_);
    },
    refresh: function () {
        this.load_(function (changed) {
            if (!changed) {
                this.searchEventActivations();
                return;
            }
            this.onTypeChanged_(this.getCurrentPlayers());
        }.bind(this));
    },
    load_: function (callback) {
        Ajax.remoteCallMode('friendsbar', 'search', {
            search_type: this.searchType_,
            search_term: this.searchTerm_
        }, function (response) {
            if (response.error) {
                return new UserMessage(response.msg).show();
            }
            this.sort_(response.players);
            var changed = this.dataChanged_(response);
            this.cacheResult_(response);
            if (response.eventActivations) {
                this.setEventActivations_(response.eventActivations);
            }
            callback(changed);
        }.bind(this));
    },
    sort_: function (players) {
        players.sort(function (a, b) {
            var equal = true, max = this.sortPrecedence_.length, typeId = 0, res;
            while (equal && typeId < max) {
                res = this.sortTypes_[this.sortPrecedence_[typeId++]](a, b);
                equal = res === 0;
            }
            return res;
        }.bind(this));
    },
    applyFilters_: function (player) {
        for (var filter in this.activeFilters_) {
            if (!this.filterTypes_[filter].call(this, player)) {
                return false;
            }
        }
        return true;
    },
    dataChanged_: function (result) {
        var changed = true, i, len, oldPlayers, newPlayers, offset;
        if (this.result_.players) {
            oldPlayers = this.getCurrentPlayers();
            newPlayers = this.slicePlayers_(result.players);
            changed = oldPlayers.length !== newPlayers.length;
            if (!changed) {
                for (i = 0, len = oldPlayers.length; i < len; i++) {
                    if (!this.comparePlayer_(oldPlayers[i], newPlayers[i])) {
                        changed = true;
                        break;
                    }
                }
            }
        }
        return changed;
    },
    cacheResult_: function (result) {
        this.result_ = {time: new Date().getTime(), players: $.map(result.players, this.normalizeAvatars_)};
    },
    comparePlayer_: function (p1, p2) {
        var equal = true;
        for (var prop in p1) {
            if (prop == 'avatar')continue;
            equal = p1[prop] === p2[prop];
            if (!equal)break;
        }
        return equal;
    },
    normalizeAvatars_: function (player) {
        var avatar = {}, match, key;
        if (player.avatar_cfg_background) {
            for (var i in player) {
                match = i.match(/avatar_cfg_(\w+)/);
                if (match) {
                    switch (match[1]) {
                        case'cloth':
                            avatar['clothing'] = player[i];
                            break;
                        case'hat':
                            avatar['hatsa'] = player[i];
                            if (player[i]) {
                                avatar['hatsb'] = player[i].replace('_a', '_b').replace('hatsa/', 'hatsb/');
                            } else {
                                avatar['hatsb'] = null;
                            }
                            break;
                        case'beard1':
                            avatar['beards1'] = player[i];
                            break;
                        case'beard2':
                            avatar['beards2'] = player[i];
                            break;
                        default:
                            avatar[match[1]] = player[i];
                            break;
                    }
                    delete player[i];
                }
            }
        }
        player.avatar = avatar;
        return player;
    }
});
;
(function () {
    $.fn.jqDrag = function (h, ops) {
        return i(this, h, ops, 'd');
    };
    $.fn.jqDragOff = function (h) {
        return i(this, h);
    };
    $.fn.jqResize = function (h, ops) {
        return i(this, h, ops, 'r');
    };
    $.jqDnR = {
        dnr: {}, e: 0, drag: function (v) {
            var css = M.k == 'd' ? {
                left: Math.max(M.rangex[0], Math.min(M.rangex[1], M.X + v.pageX - M.pX)),
                top: Math.max(M.rangey[0], Math.min(M.rangey[1], M.Y + v.pageY - M.pY))
            } : {
                width: Math.min(M.rangex[1], Math.max(v.pageX - M.pX + M.W, M.rangex[0])),
                height: Math.min(M.rangey[1], Math.max(v.pageY - M.pY + M.H, M.rangey[0]))
            };
            if (M.ops.onDrag && M.ops.onDrag.apply(M.ops, [v, css]) === false)return false;
            E.css(css);
            return false;
        }, stop: function (v) {
            if (M.ops.onStop)M.ops.onStop.apply(M.ops, [v]);
            $(document).off('mousemove', J.drag).off('mouseup', J.stop);
        }, mousedown: function (v) {
            var d = v.data, p = {};
            E = d.e;
            if (E.css('position') != 'relative') {
                try {
                    E.position(p);
                } catch (e) {
                }
            }
            if (d.ops.onStart)d.ops.onStart.apply(d.ops, [v]);
            M = {
                X: p.left || f('left') || 0,
                Y: p.top || f('top') || 0,
                W: f('width') || E[0].scrollWidth || 0,
                H: f('height') || E[0].scrollHeight || 0,
                pX: v.pageX,
                pY: v.pageY,
                k: d.k,
                ops: d.ops,
                rangex: d.ops.rangex || [0, 0xffff],
                rangey: d.ops.rangey || [0, 0xffff]
            };
            $(document).mousemove($.jqDnR.drag).mouseup($.jqDnR.stop);
            return false;
        }
    };
    var J = $.jqDnR, M = J.dnr, E = J.e, i = function (e, h, ops, k) {
        return e.each(function () {
            h = (h) ? $(h, e) : e;
            h.on('mousedown.jqDnR', {e: e, k: k, ops: ops || {}}, $.jqDnR.mousedown).addClass('draggable');
        });
    }, j = function (e, h) {
        return e.each(function () {
            h = (h) ? $(h, e) : e;
            h.off('mousedown.jqDnR', $.jqDnR.mousedown).removeClass('draggable');
        });
    }, f = function (k) {
        return parseInt(E.css(k)) || false;
    };
    $.effects = $.effects || {};
    var classAnimationActions = ['add', 'remove', 'toggle'], shorthandStyles = {
        border: 1,
        borderBottom: 1,
        borderColor: 1,
        borderLeft: 1,
        borderRight: 1,
        borderTop: 1,
        borderWidth: 1,
        margin: 1,
        padding: 1
    };

    function getElementStyles() {
        var style = document.defaultView ? document.defaultView.getComputedStyle(this, null) : this.currentStyle, newStyle = {}, key, camelCase;
        if (style && style.length && style[0] && style[style[0]]) {
            var len = style.length;
            while (len--) {
                key = style[len];
                if (typeof style[key] == 'string') {
                    camelCase = key.replace(/\-(\w)/g, function (all, letter) {
                        return letter.toUpperCase();
                    });
                    newStyle[camelCase] = style[key];
                }
            }
        } else {
            for (key in style) {
                if (typeof style[key] === 'string') {
                    newStyle[key] = style[key];
                }
            }
        }
        return newStyle;
    }

    function filterStyles(styles) {
        var name, value;
        for (name in styles) {
            value = styles[name];
            if (value == null || $.isFunction(value) || name in shorthandStyles || (/scrollbar/).test(name) || (!(/color/i).test(name) && isNaN(parseFloat(value)))) {
                delete styles[name];
            }
        }
        return styles;
    }

    function styleDifference(oldStyle, newStyle) {
        var diff = {_: 0}, name;
        for (name in newStyle) {
            if (oldStyle[name] != newStyle[name]) {
                diff[name] = newStyle[name];
            }
        }
        return diff;
    }

    $.effects.animateClass = function (value, duration, easing, callback) {
        if ($.isFunction(easing)) {
            callback = easing;
            easing = null;
        }
        return this.queue('fx', function () {
            var that = $(this), originalStyleAttr = that.attr('style') || ' ', originalStyle = filterStyles(getElementStyles.call(this)), newStyle, className = that.attr('className');
            $.each(classAnimationActions, function (i, action) {
                if (value[action]) {
                    that[action + 'Class'](value[action]);
                }
            });
            newStyle = filterStyles(getElementStyles.call(this));
            that.attr('className', className);
            that.animate(styleDifference(originalStyle, newStyle), duration, easing, function () {
                $.each(classAnimationActions, function (i, action) {
                    if (value[action]) {
                        that[action + 'Class'](value[action]);
                    }
                });
                if (typeof that.attr('style') == 'object') {
                    that.attr('style').cssText = '';
                    that.attr('style').cssText = originalStyleAttr;
                } else {
                    that.attr('style', originalStyleAttr);
                }
                if (callback) {
                    callback.apply(this, arguments);
                }
            });
            var queue = $.queue(this), anim = queue.splice(queue.length - 1, 1)[0];
            queue.splice(1, 0, anim);
            $.dequeue(this);
        });
    };
    $.fn.extend({
        _addClass: $.fn.addClass, addClass: function (classNames, speed, easing, callback) {
            return speed ? $.effects.animateClass.apply(this, [{add: classNames}, speed, easing, callback]) : this._addClass(classNames);
        }, _removeClass: $.fn.removeClass, removeClass: function (classNames, speed, easing, callback) {
            return speed ? $.effects.animateClass.apply(this, [{remove: classNames}, speed, easing, callback]) : this._removeClass(classNames);
        }, _toggleClass: $.fn.toggleClass, toggleClass: function (classNames, force, speed, easing, callback) {
            if (typeof force == "boolean" || force === undefined) {
                if (!speed) {
                    return this._toggleClass(classNames, force);
                } else {
                    return $.effects.animateClass.apply(this, [(force ? {add: classNames} : {remove: classNames}), speed, easing, callback]);
                }
            } else {
                return $.effects.animateClass.apply(this, [{toggle: classNames}, force, speed, easing]);
            }
        }, switchClass: function (remove, add, speed, easing, callback) {
            return $.effects.animateClass.apply(this, [{add: add, remove: remove}, speed, easing, callback]);
        }, jq2Html: function () {
            if (!$(this))return this;
            return $('<span/>').append(this).html();
        }
    });
})();
;
(function ($) {
    jQuery.fn.draggable = function (options) {
        options = jQuery.extend({distance: 0, draggingClass: "dnd_dragging"}, options);
        var offset, margins, startPos, downEvt, helper, passedDistance, dropTargets, currentDropTarget, draggable, tmpOpts = [];
        jQuery(this).on("mousedown.draggable", function (e) {
            if (jQuery(this).hasClass(options.draggingClass) || (helper && passedDistance) || e.metaKey || e.shiftKey || e.ctrlKey)return;
            draggable = jQuery(this);
            margins = {
                left: (parseInt(draggable.css("marginLeft"), 10) || 0),
                top: (parseInt(draggable.css("marginTop"), 10) || 0)
            };
            offset = draggable.offset();
            offset = {top: e.pageY - offset.top + margins.top, left: e.pageX - offset.left + margins.left};
            if (jQuery.isFunction(options.helper)) {
                helper = options.helper.call(draggable, function (option, value) {
                    options[option] = value;
                    tmpOpts.push(option);
                });
                if (!helper)throw("DOM node not returned from helper function");
            }
            else helper = draggable.clone();
            helper.addClass(options.draggingClass).css({position: "absolute"});
            startPos = {top: e.pageY - offset.top + "px", left: e.pageX - offset.left + "px"};
            jQuery(document).on("mousemove.draggable", drag).on("mouseup.draggable", dragup);
            dropTargets = [];
            var targets = jQuery.dd.targets.join(",");
            if (targets.length > 0) {
                jQuery(targets).each(function (i) {
                    var self = jQuery(this);
                    var opts = self.data("drop_options");
                    if (opts.accept) {
                        var accept = opts.accept.split(" ");
                        var allow = false;
                        $.each(accept, function (k, v) {
                            if (draggable.is(v))allow = true;
                        });
                        if (!allow)return;
                    }
                    var o = self.offset();
                    dropTargets.push({
                        x: o.left,
                        y: o.top,
                        width: self.outerWidth(),
                        height: self.outerHeight(),
                        el: self,
                        index: i,
                        options: opts
                    });
                });
            }
            downEvt = e;
            e.preventDefault();
        });
        function drag(e) {
            if (!passedDistance) {
                if (Math.max(Math.abs(downEvt.pageX - e.pageX), Math.abs(downEvt.pageY - e.pageY)) >= options.distance) {
                    passedDistance = true;
                    if (options.cursorAt) {
                        if (options.cursorAt.top)offset.top = options.cursorAt.top + margins.top;
                        if (options.cursorAt.left)offset.left = options.cursorAt.left + margins.left;
                    }
                    helper.appendTo("body");
                }
                else return;
                if (options.dragStartNotifier) {
                    options.dragStartNotifier.apply(this, [draggable, helper]);
                }
            }
            helper.css({top: e.pageY - offset.top + "px", left: e.pageX - offset.left + "px"});
        }

        function dragup(e) {
            jQuery(document).off("mousemove.draggable", drag).off("mouseup.draggable", dragup);
            currentDropTarget = getDropTarget(e);
            if (currentDropTarget) {
                helper.remove();
                currentDropTarget.el.removeClass(currentDropTarget.options.hoverClass);
                if (jQuery.isFunction(currentDropTarget.options.drop)) {
                    currentDropTarget.options.drop.call(currentDropTarget.el, {
                        helper: helper,
                        draggable: draggable,
                        position: {x: e.pageX, y: e.pageY}
                    });
                }
                cleanUpVars();
            }
            else {
                helper.animate(startPos, function () {
                    jQuery(this).remove();
                });
                cleanUpVars();
            }
            if (options.dragEndNotifier)
                options.dragEndNotifier.apply(this, [draggable, helper]);
        }

        function cleanUpVars() {
            jQuery.each(tmpOpts, function () {
                delete options[this];
            });
            tmpOpts = [];
            offset = margins = startPos = downEvt = helper = passedDistance = dropTargets = currentDropTarget = draggable = null;
        }

        function getDropTarget(e) {
            var topLayer = 0;
            var currentDropTarget = false;
            jQuery.each(dropTargets, function (ix, target) {
                var unknownLayer = target.el.closest('.tw2gui_window').css('z-index');
                if (e.pageX > target.x && e.pageX < target.x + target.width && (e.pageY > target.y && e.pageY < target.y + target.height)) {
                    if (topLayer < unknownLayer) {
                        topLayer = unknownLayer;
                        currentDropTarget = target;
                    }
                }
            });
            if (currentDropTarget) {
                $('.tw2gui_window').each(function (ix, window) {
                    window = $(window);
                    var target = {
                        x: window.offset().left,
                        y: window.offset().top,
                        width: window.outerWidth(),
                        height: window.outerHeight(),
                        layer: window.css('z-index')
                    };
                    if (e.pageX > target.x && e.pageX < target.x + target.width && (e.pageY > target.y && e.pageY < target.y + target.height)) {
                        if (topLayer < target.layer) {
                            topLayer = 0;
                            currentDropTarget = false;
                            return false;
                        }
                    }
                });
            }
            return currentDropTarget;
        }

        if (jQuery.browser.msie) {
            jQuery(this).attr('unselectable', 'on');
        }
        return this;
    };
    jQuery.fn.droppable = function (options) {
        options = jQuery.extend({hoverClass: 'draghovered'}, options);
        var self = jQuery(this);
        self.data("drop_options", options);
        jQuery.dd.targets.push(this.selector);
        return this;
    };
    jQuery.dd = {targets: []};
    $.fn.setDraggable = function (startNotifier, endNotifier) {
        $(this).addClass('dnd_draggable');
        $(this).draggable
        ({
            helper: function () {
                $('.dnd_dropzone').removeClass('dnd_dropped');
                $('.dnd_draggable').removeClass('dnd_dragElem');
                $(this).addClass('dnd_dragElem');
                return $(this).clone();
            }, dragStartNotifier: startNotifier, dragEndNotifier: endNotifier, distance: 10
        });
        return $(this);
    }
    $.fn.asDropzone = function (acceptSelector, destroyDragElem, callbackFunc) {
        $(this).addClass('dnd_dropzone');
        $(this).droppable
        ({
            accept: acceptSelector || '*', drop: function () {
                $(this).addClass('dnd_dropped');
                if (destroyDragElem) {
                    $(this).append($('.dnd_dragElem'));
                    $('.dnd_dragging').remove();
                }
                callbackFunc.call(this, $('.dnd_dragElem'));
                $(this).data('dnd_droppedObj', $('.dnd_dragElem').removeClass('dnd_dragElem'));
                $('.dnd_dragElem').removeClass('dnd_dragElem');
            }
        });
    }
})(jQuery);
;
(function () {
    $.fn.wheel = function (fn) {
        return this[fn ? "bind" : "trigger"]("wheel", fn);
    };
    $.event.special.wheel = {
        setup: function () {
            $.event.add(this, wheelEvents, wheelHandler, {});
        }, teardown: function () {
            $.event.remove(this, wheelEvents, wheelHandler);
        }
    };
    var wheelEvents = !$.browser.mozilla ? "mousewheel" : "DOMMouseScroll" + ($.browser.version < "1.9" ? " mousemove" : "");

    function wheelHandler(event) {
        switch (event.type) {
            case"mousemove":
                return $.extend(event.data, {
                    clientX: event.clientX,
                    clientY: event.clientY,
                    pageX: event.pageX,
                    pageY: event.pageY
                });
            case"DOMMouseScroll":
                $.extend(event, event.data);
                event.delta = -event.detail / 3;
                break;
            case"mousewheel":
                event.delta = event.wheelDelta / 120;
                if ($.browser.opera && $.browser.version < 9.2)event.delta *= -1;
                break;
        }
        event.type = "wheel";
        return $.event.handle.call(this, event, event.delta);
    };
})();
;
(function ($) {
    var types = ['DOMMouseScroll', 'mousewheel'];
    if ($.event.fixHooks) {
        for (var i = types.length; i;) {
            $.event.fixHooks[types[--i]] = $.event.mouseHooks;
        }
    }
    $.event.special.mousewheel = {
        setup: function () {
            if (this.addEventListener) {
                for (var i = types.length; i;) {
                    this.addEventListener(types[--i], handler, false);
                }
            } else {
                this.onmousewheel = handler;
            }
        }, teardown: function () {
            if (this.removeEventListener) {
                for (var i = types.length; i;) {
                    this.removeEventListener(types[--i], handler, false);
                }
            } else {
                this.onmousewheel = null;
            }
        }
    };
    $.fn.extend({
        mousewheel: function (fn) {
            return fn ? this.on("mousewheel", fn) : this.trigger("mousewheel");
        }, unmousewheel: function (fn) {
            return this.off("mousewheel", fn);
        }
    });
    function handler(event) {
        var orgEvent = event || window.event, args = [].slice.call(arguments, 1), delta = 0, returnValue = true, deltaX = 0, deltaY = 0;
        event = $.event.fix(orgEvent);
        event.type = "mousewheel";
        if (orgEvent.wheelDelta) {
            delta = orgEvent.wheelDelta / 120;
        }
        if (orgEvent.detail) {
            delta = -orgEvent.detail / 3;
        }
        deltaY = delta;
        if (orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
            deltaY = 0;
            deltaX = -1 * delta;
        }
        if (orgEvent.wheelDeltaY !== undefined) {
            deltaY = orgEvent.wheelDeltaY / 120;
        }
        if (orgEvent.wheelDeltaX !== undefined) {
            deltaX = -1 * orgEvent.wheelDeltaX / 120;
        }
        args.unshift(event, delta, deltaX, deltaY);
        return ($.event.dispatch || $.event.handle).apply(this, args);
    }
})(jQuery);

(function ($, window, undefined) {
    '$:nomunge';
    var elems = $([]), jq_resize = $.resize = $.extend($.resize, {}), timeout_id, str_setTimeout = 'setTimeout', str_resize = 'resize', str_data = str_resize + '-special-event', str_delay = 'delay', str_throttle = 'throttleWindow';
    jq_resize[str_delay] = 250;
    jq_resize[str_throttle] = false;
    $.event.special[str_resize] = {
        setup: function () {
            if (!jq_resize[str_throttle] && this[str_setTimeout]) {
                return false;
            }
            var elem = $(this);
            elems = elems.add(elem);
            $.data(this, str_data, {w: elem.width(), h: elem.height()});
            if (elems.length === 1) {
                loopy();
            }
        }, teardown: function () {
            if (!jq_resize[str_throttle] && this[str_setTimeout]) {
                return false;
            }
            var elem = $(this);
            elems = elems.not(elem);
            elem.removeData(str_data);
            if (!elems.length) {
                clearTimeout(timeout_id);
            }
        }, add: function (handleObj) {
            if (!jq_resize[str_throttle] && this[str_setTimeout]) {
                return false;
            }
            var old_handler;

            function new_handler(e, w, h) {
                var elem = $(this), data = $.data(this, str_data);
                data.w = w !== undefined ? w : elem.width();
                data.h = h !== undefined ? h : elem.height();
                old_handler.apply(this, arguments);
            };
            if ($.isFunction(handleObj)) {
                old_handler = handleObj;
                return new_handler;
            } else {
                old_handler = handleObj.handler;
                handleObj.handler = new_handler;
            }
        }
    };
    function loopy() {
        timeout_id = window[str_setTimeout](function () {
            $.triggerResizeEvent();
            loopy();
        }, jq_resize[str_delay]);
    };
    $.triggerResizeEvent = function () {
        elems.each(function () {
            var elem = $(this), width = elem.width(), height = elem.height(), data = $.data(this, str_data);
            if (width !== data.w || height !== data.h) {
                elem.trigger(str_resize, [data.w = width, data.h = height]);
            }
        });
    };
})(jQuery, this);

(function ($, undefined) {
    (function () {
        var baseEasings = {};
        $.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (i, name) {
            baseEasings[name] = function (p) {
                return Math.pow(p, i + 2);
            };
        });
        $.extend(baseEasings, {
            Sine: function (p) {
                return 1 - Math.cos(p * Math.PI / 2);
            }, Circ: function (p) {
                return 1 - Math.sqrt(1 - p * p);
            }, Elastic: function (p) {
                return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);
            }, Back: function (p) {
                return p * p * (3 * p - 2);
            }, Bounce: function (p) {
                var pow2, bounce = 4;
                while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {
                }
                return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);
            }
        });
        $.each(baseEasings, function (name, easeIn) {
            $.easing["easeIn" + name] = easeIn;
            $.easing["easeOut" + name] = function (p) {
                return 1 - easeIn(1 - p);
            };
            $.easing["easeInOut" + name] = function (p) {
                return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;
            };
        });
    })();
})(jQuery);

$(function ($) {
    'use strict';
    var class_name = 'west.game.base_class', class_parent = null, class_object = {
        _created_at: null, init: function () {
            this._created_at = Date.now();
            return this;
        }, _getClass: function (name, path, path_limit) {
            var closest = west.getClosestTree(path), return_class, check, namespace;
            while (closest.length && undefined === return_class) {
                namespace = closest.pop();
                return_class = namespace ? namespace[name] : undefined;
            }
            if (path_limit && return_class) {
                if ("function" === typeof return_class && return_class.prototype) {
                    check = return_class.prototype._class_path || return_class.prototype._namespace || '';
                } else if ($.isPlainObject(return_class)) {
                    check = return_class._class_path || return_class._namespace || '';
                }
                if (!~check.search(path_limit)) {
                    return_class = undefined;
                }
            }
            return return_class;
        }, _setProperties: function (property_name, data_collection) {
            var data_id;
            for (data_id in data_collection) {
                if (data_collection.hasOwnProperty(data_id)) {
                    this._setProperty(property_name, data_id, data_collection[data_id]);
                }
            }
            return this;
        }, _extendProperties: function (property_name, data) {
            var properties = this._getProperties(property_name);
            $.extend(properties, data);
            return this;
        }, _getProperties: function (property_name) {
            this['_' + property_name] = this['_' + property_name] || {};
            return this['_' + property_name];
        }, _hasProperties: function (property_name) {
            var properties = this._getProperties(property_name);
            return !$.isEmptyObject(properties);
        }, _removeProperties: function (property_name, properties_collection) {
            var p_l = properties_collection.length;
            while (p_l--) {
                this._removeProperty(property_name, properties_collection[p_l]);
            }
            return this;
        }, _setProperty: function (property_name, id, data) {
            if (!id) {
                return this;
            }
            var tmp = {};
            if ('object' === typeof id && id instanceof west.game.base_class) {
                data = id;
                id = 'main';
            }
            if ('main' === id) {
                this[property_name] = data;
            }
            tmp[id] = data;
            this._extendProperties(property_name, tmp);
            return this;
        }, _getProperty: function (property_name, id) {
            id = id || 'main';
            var properties = this._getProperties(property_name);
            return properties[id];
        }, _hasProperty: function (property_name, id) {
            id = id || 'main';
            var properties = this._getProperties(property_name);
            return !!properties[id];
        }, _removeProperty: function (property_name, id) {
            id = id || 'main';
            var properties = this._getProperties(property_name), property;
            if ('string' === typeof id) {
                delete properties[id];
            } else if (id instanceof west.game.base_class) {
                for (property in properties) {
                    if (properties.hasOwnProperty(property) && id === properties[property]) {
                        delete properties[property];
                        id = property;
                        break;
                    }
                }
            }
            if ('main' === id) {
                delete this[property_name];
            }
            return this;
        }, _destroyProperty: function (property_name, id, options) {
            if (this._hasProperty(property_name, id)) {
                this._getProperty(property_name, id).destroy(options);
                this._removeProperty(property_name, id);
            }
            return this;
        }
    };
    west.define(class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game', class_parent = 'west.game.base_class', class_object = {
        _class_path: class_path, callParent: 'Just do it.', init: function (options) {
            this.callParent.call(this, arguments);
            options = options || {};
            if (window.west.debug.mvc) {
                var d_o = $.extend({}, options);
            }
            if (options.controller) {
                this._setProperty('controller', options.controller);
                delete options.controller;
            }
            if (options.controllers) {
                this._setProperties('controller', options.controllers);
                delete options.controllers;
            }
            this._data = {};
            this._l10n = {};
            if (options.data) {
                this.data = $.extend({}, this.data, options.data);
                delete options.data;
            }
            if (options.l10n) {
                this.l10n = $.extend({}, this.l10n, options.l10n);
                delete options.l10n;
            }
            if (window.west.debug.mvc) {
                var controller = this.getController();
                console.log(controller ? (controller.id || controller._class_id) : this._class_path, 'M:[', 'init', '] o:', d_o);
                if (!$.isEmptyObject(options)) {
                    console.warn('Unused init options noticed!', options);
                }
            }
            this.data = this.parseInitData(this.data);
            this.loadInitData();
            this.parseData();
        }, setL10n: function (data) {
            $.extend(true, this._l10n, data);
        }, getL10n: function (key) {
            if (key) {
                return this._l10n[key];
            } else {
                return this._l10n;
            }
        }, setData: function (key, value, force_overwrite) {
            if ("string" === typeof key) {
                if (force_overwrite) {
                    this._data[key] = value;
                } else {
                    if ($.isPlainObject(value)) {
                        this._data[key] = this._data[key] || {};
                        $.extend(this._data[key], value);
                    } else if ($.isArray(value)) {
                        this._data[key] = this._data[key] || [];
                        $.merge(this._data[key], value);
                    } else {
                        this._data[key] = value;
                    }
                }
            } else if ($.isPlainObject(value)) {
                $.extend(this._data, value);
            } else if ($.isPlainObject(key)) {
                $.extend(this._data, key);
            }
            return this;
        }, getData: function (key) {
            if (key) {
                return this._data[key];
            } else {
                return this._data;
            }
        }, parseInitData: function (data) {
            return data;
        }, parseData: function () {
            return this;
        }, loadInitData: function () {
            this.setL10n($.extend(true, {}, this.l10n));
            delete this.l10n;
            this.setData($.extend(true, {}, this.data));
            delete this.data;
            return this;
        }, pushIfUnique: function (array, item) {
            if (!~array.indexOf(item)) {
                array.push(item);
            }
            return this;
        }, unshiftIfUnique: function (array, item) {
            if (!~array.indexOf(item)) {
                array.unshift(item);
            }
            return this;
        }, removeFromArray: function (array, item) {
            var position = array.indexOf(item);
            if (!!~position) {
                array.splice(position, 1);
            }
            return this;
        }, toggleInArray: function (array, item) {
            var position = array.indexOf(item);
            if (!~position) {
                array.push(item);
            } else {
                array.splice(position, 1);
            }
            return this;
        }, hasControllers: function () {
            return this._hasProperties('controller');
        }, setController: function (controller_id, controller_class) {
            return this._setProperty('controller', controller_id, controller_class);
        }, getController: function (controller_id) {
            return this._getProperty('controller', controller_id);
        }, hasController: function (controller_id) {
            return this._hasProperty('controller', controller_id);
        }, removeController: function (controller_id) {
            return this._removeProperty('controller', controller_id);
        }, removeControllers: function (controllers_collection) {
            return this._removeProperties('controller', controllers_collection);
        }, destroyData: function () {
            if (!this.hasControllers()) {
                delete this._data;
                delete this._l10n;
            }
        }, destroy: function (options) {
            options = options || {};
            if (window.west.debug.mvc) {
                var controller = this.getController();
                console.warn(controller ? (controller.id || controller._class_id) : this._class_path, 'M:[', 'destroy', '] o:', options);
            }
            if ('undefined' === typeof options.destroyData || false !== options.destroyData) {
                this.destroyData();
            }
            this._removeProperty('controller');
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game', class_parent = 'west.game.base_class', class_object = {
        _class_path: class_path, callParent: 'Say you miss them.', init: function (options) {
            this.callParent.call(this, arguments);
            options = options || {};
            if (window.west.debug.mvc) {
                var d_o = $.extend({}, options);
            }
            if (options.controller) {
                this._setProperty('controller', options.controller);
                delete options.controller;
            } else if (options.root) {
                this.setRoot(options.root);
                delete options.root;
            }
            if (options.model) {
                this._setProperty('model', options.model);
                delete options.model;
            }
            if (options.factory) {
                this._setProperty('factory', options.factory);
                delete options.factory;
            }
            if (window.west.debug.mvc) {
                var controller = this.getController();
                console.log(controller ? (controller.id || controller._class_id) : this._class_path, 'V:[', 'init', '] o:', d_o);
                if (!$.isEmptyObject(options)) {
                    console.warn('Unused init options noticed!', options);
                }
            }
            return this;
        }, getController: function () {
            return this._getProperty('controller');
        }, getModel: function () {
            return this._getProperty('model');
        }, getFactory: function () {
            return this._getProperty('factory');
        }, getRoot: function () {
            var controller = this.getController();
            return controller ? controller.getRoot() : (this._DOM ? this._DOM : window);
        }, setRoot: function (new_root) {
            var controller = this.getController();
            controller ? controller.setRoot(new_root) : (this._DOM = new_root);
            return this;
        }, hasRoot: function () {
            var controller = this.getController();
            return controller ? controller.hasRoot() : (window !== this.getRoot());
        }, clearRoot: function () {
            var controller = this.getController();
            controller ? controller.clearRoot() : this.setRoot(window);
            return this;
        }, destroy: function (options) {
            options = options || {};
            if (window.west.debug.mvc) {
                var controller = this.getController();
                console.warn(controller ? (controller.id || controller._class_id) : this._class_path, 'V:[', 'destroy', '] o:', options);
            }
            delete this._DOM;
            this._removeProperty('controller')._removeProperty('model')._removeProperty('factory');
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'factory', class_path = 'west.game', class_parent = 'west.game.base_class', class_object = {
        _class_path: class_path, callParent: '.', init: function (options) {
            this.callParent.call(this, arguments);
            options = options || {};
            if (window.west.debug.mvc) {
                var d_o = $.extend({}, options);
            }
            if (options.controller) {
                this._setProperty('controller', options.controller);
                delete options.controller;
            }
            if (options.model) {
                this._setProperty('model', options.model);
                delete options.model;
            }
            if (window.west.debug.mvc) {
                var controller = this.getController();
                console.log(controller ? (controller.id || controller._class_id) : this._class_path, 'F:[', 'init', '] o:', d_o);
                if (!$.isEmptyObject(options)) {
                    console.warn('Unused init options noticed!', options);
                }
            }
            return this;
        }, getController: function () {
            return this._getProperty('controller');
        }, getModel: function () {
            return this._getProperty('model');
        }, destroy: function (options) {
            options = options | {};
            if (window.west.debug.mvc) {
                var controller = this.getController();
                console.warn(controller ? (controller.id || controller._class_id) : this._class_path, 'F:[', 'destroy', '] o:', options);
            }
            this._removeProperty('controller')._removeProperty('model');
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game', class_parent = 'west.game.base_class', class_object = {
        callParent: 'Say you\'re doing fine',
        _class_id: 'game',
        _namespace: 'west.game',
        _class_path: class_path,
        _DOM: window,
        _getDefaultClass: function (class_name) {
            if (this._class_path) {
                return this._getClass(class_name, this._class_path, this._namespace);
            }
            return undefined;
        },
        _getOrInitClass: function (class_wannabe, options, type) {
            if ('string' === typeof class_wannabe) {
                class_wannabe = west.get(class_wannabe);
            }
            if ('function' === typeof class_wannabe) {
                class_wannabe = new class_wannabe(options);
            }
            return class_wannabe;
        },
        init: function (options) {
            this.callParent.call(this, arguments);
            this.id = this.id || this._class_id;
            var model, view, factory;
            if (window.west.debug.mvc) {
                console.log(this.id, 'C:[', 'init', ']');
            }
            options = $.extend({}, options);
            if (options.class_path) {
                this._class_path = options.class_path;
                delete options.class_path;
            }
            if (options.root) {
                this.setRoot(options.root);
                delete options.root;
            }
            if (options.models) {
                if (options.models.main) {
                    options.model = options.models.main;
                    delete options.models.main;
                }
                this.setModels(options.models);
            }
            if (options.model) {
                model = options.model;
                delete options.model;
            } else {
                model = this._getDefaultClass('model');
            }
            if (options.factory) {
                factory = options.factory;
                delete options.factory;
            } else {
                factory = this._getDefaultClass('factory');
            }
            if (options.view) {
                view = options.view;
                delete options.view;
            } else {
                view = this._getDefaultClass('view');
            }
            if (model) {
                this.setModel(this._getOrInitClass(model, $.extend({}, options, {controller: this}), 'model'));
                delete options.data;
                delete options.l10n;
            }
            if (factory) {
                this.setFactory(this._getOrInitClass(factory, $.extend({}, options, {
                    controller: this,
                    model: this.getModel()
                }), 'factory'));
            }
            if (view) {
                this.setView(this._getOrInitClass(view, $.extend({}, options, {
                    controller: this,
                    model: this.getModel(),
                    factory: this.getFactory()
                }), 'view'));
            }
            return this;
        },
        getNamespace: function () {
            return this._namespace;
        },
        clearNamespace: function () {
            this._namespace = null;
            return this;
        },
        getController: function (id) {
            return this._getProperty('controller', id);
        },
        setController: function (id, class_object) {
            return this._setProperty('controller', id, class_object);
        },
        setControllers: function (class_collection) {
            return this._setProperties('controller', class_collection);
        },
        getModel: function (id) {
            return this._getProperty('model', id);
        },
        setModel: function (id, class_object) {
            return this._setProperty('model', id, class_object);
        },
        setModels: function (class_collection) {
            return this._setProperties('model', class_collection);
        },
        getFactory: function (id) {
            return this._getProperty('factory', id);
        },
        setFactory: function (id, class_object) {
            return this._setProperty('factory', id, class_object);
        },
        getView: function (id) {
            return this._getProperty('view', id);
        },
        setView: function (id, class_object) {
            return this._setProperty('view', id, class_object);
        },
        setRoot: function (new_root) {
            this._DOM = new_root;
            return this;
        },
        getRoot: function () {
            return this._DOM;
        },
        clearRoot: function () {
            delete this._DOM;
            this.setRoot(window);
            return this;
        },
        hasRoot: function () {
            return window !== this.getRoot();
        },
        destroy: function (options) {
            options = options || {};
            if (window.west.debug.mvc) {
                console.warn(this.id || this._class_id, 'C:[', 'destroy', '] o:', options);
            }
            var destroy_options = $.extend({}, options, {controller: this});
            this._destroyProperty('view', 'main', destroy_options)._destroyProperty('factory', 'main', destroy_options)._destroyProperty('model', 'main', destroy_options);
            this.clearRoot();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.window', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        getEventController: function (event_id) {
            return this.getController().getEventController(event_id);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.window', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, addWindowStructure: function () {
            var $root = this.getRoot();
            $root.addClass('window_container');
            return this;
        }, renderContent: function () {
            return this;
        }, addWindowClass: function (class_name) {
            if (this.hasRoot()) {
                this.getRoot().addClass(class_name);
            }
            return this;
        }, removeWindowClass: function (class_name) {
            if (this.hasRoot()) {
                this.getRoot().removeClass(class_name);
            }
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'factory', class_path = 'west.game.window', class_parent = 'west.game.factory', class_object = {_class_path: class_path};
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.window', class_parent = 'west.game.controller', class_object = {
        _class_id: 'window',
        _namespace: 'west.game.window',
        _class_path: class_path,
        _window: null,
        _window_id: null,
        _window_class: null,
        init: function (options) {
            options = options || {};
            if (options.window_id) {
                this.setWindowId(options.window_id);
                delete options.window_id;
            }
            this.id = this.id || this._window_id;
            if (options.event_controller) {
                this._setProperty('event', 'main', options.event_controller);
                delete options.event_controller;
            }
            if (options.tabs) {
                this.setTabs(options.tabs);
                delete options.tabs;
            }
            this.callParent.apply(this, arguments);
            return this;
        },
        setWindowId: function (window_id) {
            this._window_id = window_id;
            return this;
        },
        getWindowId: function () {
            return this._window_id;
        },
        hasWindowId: function () {
            return !!this.getWindowId();
        },
        getWindowClass: function () {
            return this._window_class || '';
        },
        prepareWindow: function () {
            var window_id = this.getWindowId(), window_class = this.getWindowClass();
            if (!this.hasWindowId()) {
                if (this.hasWindow()) {
                    window_id = this.getWindow().getId();
                    this.setWindowId(window_id);
                    if (window.west.debug.mvc) {
                        console.warn(this.id, 'C:', 'No window ID defined! Retrieved one from Window object:', window_id);
                    }
                } else {
                    window_id = this.id + '_r_' + Math.floor(Math.random() * 100000);
                    this.setWindowId(window_id);
                    if (window.west.debug.mvc) {
                        console.warn(this.id, 'C:', 'No window ID defined! Generated random:', window_id);
                    }
                }
            }
            if (!this.hasWindow()) {
                this.setWindow(wman.open(window_id, null, window_class, true)).setEventListeners();
            } else {
                if (wman.isMinimized(window_id)) {
                    wman.reopen(window_id);
                } else if (!wman.isFocused(window_id)) {
                    wman.getById(window_id).bringToTop();
                }
            }
            return this;
        },
        setWindow: function (new_window) {
            var that = this, window_id = this.getWindowId(), view = this.getView(), tabs_length = 0;
            if (new_window instanceof west.gui.Window) {
                this._window = new_window;
                if (window_id) {
                    new_window.removeEventListener(TWE("WINDOW_DESTROY"), this.windowDestroy);
                    new_window.addEventListener(TWE("WINDOW_DESTROY"), this.windowDestroy, this);
                    wman.registerReloadHandler(new RegExp('^' + window_id), function () {
                        that.reLoad();
                        return true;
                    });
                    wman.registerReopenHandler(new RegExp('^' + window_id), function () {
                        that.reOpen();
                        return true;
                    });
                    this.setRoot($(new_window.getContentPane()));
                    if (view) {
                        view.addWindowStructure().renderContent();
                    }
                    if (this.hasTabs()) {
                        $.each(this.getTabs(), function (tab_id, tab_controller) {
                            new_window.addTab(tab_controller.getModel().getTabName(), tab_id, tab_controller.show, tab_controller);
                            tab_controller.prepareTab();
                            tabs_length += 1
                        });
                        if (tabs_length < 2) {
                            new_window.addClass('tw2gui_window_notabs');
                            $('.tw2gui_inner_window_title', new_window.getMainDiv()).addClass('tw2gui_window_notabs');
                        }
                    }
                }
            }
            return this;
        },
        getWindow: function () {
            return this._window;
        },
        hasWindow: function () {
            return !!this.getWindow();
        },
        clearWindow: function () {
            this._window = null;
            this.clearRoot();
            return this;
        },
        getEventController: function (event_id) {
            return this._getProperty('event', event_id);
        },
        setTabs: function (tabs_collection) {
            this._setProperties('tab', tabs_collection);
            return this;
        },
        getTabs: function () {
            return this._getProperties('tab');
        },
        hasTabs: function () {
            return this._hasProperties('tab');
        },
        setTab: function (tab_controller) {
            var tab_id = tab_controller.getTabId();
            this._setProperty('tab', tab_id, tab_controller);
            return this;
        },
        getTab: function (tab_id) {
            return this._getProperty('tab', tab_id);
        },
        removeTab: function (tab_id) {
            if ($.isPlainObject(tab_id)) {
                tab_id = tab_id.getTabId();
            }
            this._removeProperty('tab', tab_id);
            return this;
        },
        showTab: function (tab_id, options) {
            if (!this.hasWindow() || !this.hasTabs()) {
                return this;
            }
            var wnd = this.getWindow();
            tab_id = tab_id || wnd.currentActiveTabId;
            this.getTab(tab_id).show(options);
            return this;
        },
        setEventListeners: function () {
            this.removeEventListeners();
            return this;
        },
        removeEventListeners: function () {
            return this;
        },
        open: function (options) {
            options = $.extend({}, options);
            var tab;
            this.prepareWindow();
            if (this.hasTabs()) {
                tab = options.showTab;
                delete options.showTab;
                this.showTab(tab, options);
            }
            return this;
        },
        reOpen: function () {
            return this;
        },
        reLoad: function () {
            if (this.hasTabs()) {
                $.each(this.getTabs(), function (tab_id, tab_controller) {
                    tab_controller.reLoad();
                });
            }
            return this;
        },
        toggleOpen: function (options) {
            var wnd = wman.toggleOpen(this.getWindowId(), null, this.getWindowClass(), true);
            if (wnd && 'open' === wnd.status) {
                this.setWindow(wnd.win).setEventListeners();
                this.open(options);
            }
            return this;
        },
        close: function () {
            var window_id = this.getWindowId();
            if (window_id) {
                wman.close(window_id);
            }
            return this;
        },
        windowDestroy: function () {
            if ('function' === typeof this.removeEventListeners) {
                this.removeEventListeners();
            }
            this.clearWindow();
            if (this.hasTabs()) {
                $.each(this.getTabs(), function (tab_id, tab) {
                    tab.windowDestroy();
                });
            }
        },
        destroy: function (options) {
            this.close().windowDestroy();
            this._removeProperty('event', 'main');
            if (this.hasTabs()) {
                $.each(this.getTabs(), function (tab_id, tab) {
                    tab.destroy();
                });
            }
            this.callParent.apply(this, arguments);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.window.tab', class_parent = 'west.game.window.model', class_object = {
        _class_path: class_path,
        getTabName: function () {
            return this.getL10n('window').tab_name;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.window.tab', class_parent = 'west.game.window.view', class_object = {
        _class_path: class_path, addTabStructure: function () {
            var controller = this.getController(), $root = controller.getWindowRoot(), tab_id = controller.getTabId(), tab_class = controller.getTabClass(), $tab_container;
            $tab_container = $('.window_tab_container.' + tab_id, $root);
            if (!$tab_container.length) {
                $tab_container = $('<div class="window_tab_container ' + tab_id + ' ' + tab_class + '"></div>').appendTo($root);
            }
            return this;
        }, getTab: function (tab_id) {
            var controller = this.getController(), $root = controller.getWindowRoot(), tab_id = tab_id || controller.getTabId();
            return $('.window_tab_container.' + tab_id, $root);
        }, showTab: function () {
            var $root = this.getRoot();
            if ($root.hasClass('window_tab_container')) {
                $root.addClass('active').siblings('.window_tab_container').removeClass('active');
            }
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.window.tab', class_parent = 'west.game.window.controller', class_object = {
        _class_id: null,
        _namespace: 'west.game.window.tab',
        _class_path: class_path,
        _tab_id: null,
        _tab_class: null,
        init: function (options) {
            options = options || {};
            if (options.tab_id) {
                this.setTabId(options.tab_id);
                delete options.tab_id;
            }
            this.id = this.id || this._tab_id;
            if (options.window_controller) {
                this._setProperty('controller', 'window', options.window_controller);
                delete options.window_controller;
            }
            this.callParent.apply(this, arguments);
            return this;
        },
        setTabId: function (window_id) {
            this._tab_id = window_id;
            return this;
        },
        getTabId: function () {
            return this._tab_id;
        },
        hasTabId: function () {
            return !!this.getTabId();
        },
        getTabClass: function () {
            return this._tab_class || '';
        },
        getWindowController: function () {
            return this._getProperty('controller', 'window');
        },
        getWindowRoot: function () {
            var window_controller = this.getWindowController();
            return window_controller ? window_controller.getRoot() : window;
        },
        setWindow: function (new_window) {
            var view = this.getView();
            if (new_window instanceof west.gui.Window && this.hasTabId()) {
                if (view) {
                    view.addTabStructure();
                    this.setRoot(view.getTab());
                    view.renderContent();
                } else {
                    this.setRoot(this.getWindowRoot());
                }
            }
            this.callParent.apply(this, arguments);
            return this;
        },
        prepareTab: function () {
            var window_controller = this.getWindowController();
            if (!window_controller) {
                return this;
            }
            this.setWindow(window_controller.getWindow()).setEventListeners();
            return this;
        },
        reLoad: function () {
        },
        show: function () {
            this.getView().showTab();
            this.getWindow().activateTab(this.getTabId());
            return this;
        },
        tabDestroy: function () {
        },
        destroy: function () {
            this._getProperty('controller', 'window').removeTab(this);
            this._removeProperty('controller', 'window');
            this.callParent.apply(this, arguments);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.event', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        data: {
            id: null,
            name: null,
            type: null,
            event_started: false,
            ses_meta: {start: null, end: null},
            premium_ratio: 0,
            counter: {'instance': null, 'counter_update_event': null, 'value': 0},
            currency_id: null,
            friendsbar: {},
            ui_notification: {priority: 11},
            rewards: {},
            windows: {}
        },
        parseData: function () {
            var data = this.getData();
            if (data.event_id) {
                this.setId(data.event_id);
                delete data.event_id;
            }
            if (data.event_name) {
                this.setName(data.event_name);
                delete data.event_name;
            }
            if (data.event_type) {
                this.setType(data.event_type);
                delete data.event_type;
            }
            if (data.meta) {
                this.setMetaData(data.meta);
                delete data.meta;
            }
            if (data.counter) {
                this.setCounterData(data.counter);
                if (this.hasCounterData()) {
                    this.setCurrencyId(this.getId().toLowerCase());
                }
            }
            if (data.premium) {
                this.setPremiumRatio(data.premium);
                delete data.premium;
            }
            if (data.map) {
                this.setMapData(data.map);
            }
            return this.callParent.apply(this, arguments);
        },
        setId: function (ses_id) {
            this.setData('id', ses_id);
            return this;
        },
        getId: function () {
            return this.getData('id');
        },
        setName: function (ses_name) {
            this.setData('name', ses_name);
            return this;
        },
        getName: function () {
            return this.getData('name');
        },
        setType: function (type) {
            this.setData('type', type);
            return this;
        },
        getType: function () {
            return this.getData('type');
        },
        setEventStarted: function (bool) {
            this.setData('event_started', bool, true);
        },
        getEventStarted: function () {
            return this.getData('event_started');
        },
        hasEventStarted: function () {
            return !!this.getEventStarted();
        },
        setPremiumRatio: function (new_ratio) {
            this.setData('premium_ratio', new_ratio, true);
            return this;
        },
        getPremiumRatio: function () {
            return this.getData('premium_ratio');
        },
        setCounterData: function (data) {
            if (!data) {
                return this;
            }
            data = $.extend({}, data);
            if (data.key) {
                data['counter_update_event'] = data.key;
                delete data.key;
            }
            this.setData('counter', data);
            return this;
        },
        hasCounterData: function () {
            return !!this.getCounterUpdateEventName();
        },
        setCounterUpdateEventName: function (event_name) {
            var data = this.getData('counter');
            data['counter_update_event'] = event_name;
            return this;
        },
        getCounterUpdateEventName: function () {
            return this.getData('counter')['counter_update_event'];
        },
        setCounter: function (new_counter) {
            var data = this.getData('counter');
            data['instance'] = new_counter;
            return this;
        },
        getCounter: function () {
            return this.getData('counter')['instance'];
        },
        removeCounter: function () {
            this.setCounter(null);
            return this;
        },
        setCounterValue: function (new_value) {
            var data = this.getData('counter');
            data['value'] = new_value;
            return this;
        },
        getCounterValue: function () {
            return this.getData('counter')['value'];
        },
        setCounterMouseover: function (new_value) {
            var data = this.getData('counter');
            data['mouseover'] = new_value;
            return this;
        },
        getCounterMouseover: function () {
            return this.getData('counter')['mouseover'];
        },
        getCounterHelpMouseover: function () {
            return '';
        },
        getCounterHelpClickHandler: function () {
            return false;
        },
        getCounterLogClickHandler: function () {
            return false;
        },
        hasCurrency: function () {
            return !!this.getCurrencyId();
        },
        getCurrencyData: function () {
            return {id: this.getCurrencyId(), name: this.getCurrencyName()};
        },
        setCurrencyId: function (new_id) {
            this.setData('currency_id', new_id, true);
            return this;
        },
        getCurrencyId: function () {
            return this.getData('currency_id');
        },
        setCurrencyName: function (new_name) {
            this.setL10n({'currency': {'name': new_name}});
            return this;
        },
        getCurrencyName: function () {
            var l10n = this.getL10n('currency');
            return (l10n && l10n.name) ? l10n.name : 'UNDEFINED SES currency name';
        },
        setMetaData: function (data) {
            if (!data) {
                return this;
            }
            data = $.extend({}, data);
            if (data.start) {
                data.start = buildDateObject(data.start, true);
            }
            if (data.end) {
                data.end = buildDateObject(data.end, true);
            }
            if (data.start > data.end) {
                data.end.setFullYear(data.end.getFullYear() + 1);
            }
            this.setData('ses_meta', data);
            return this;
        },
        getStartDate: function () {
            var date = this.getData('ses_meta')['start'];
            return date;
        },
        getEndDate: function () {
            var date = this.getData('ses_meta')['end'];
            return date;
        },
        setFriendsbarData: function (friendsbar_data) {
            this.setData('friendsbar', friendsbar_data);
            return this;
        },
        getFriendsbarData: function () {
            return this.getData('friendsbar');
        },
        hasFriendsbarData: function () {
            return !$.isEmpytyObject(this.getFriendsbarData());
        },
        setMapData: function (data) {
            if (!data) {
                return this;
            }
            data = $.extend({}, data);
            if (data.start) {
                data.start = buildDateObject(data.start, true);
            }
            if (data.end) {
                data.end = buildDateObject(data.end, true);
            }
            if (data.start > data.end) {
                data.end.setFullYear(data.end.getFullYear() + 1);
            }
            if (data.regex && 'string' === typeof data.regex) {
                data.regex = new RegExp(data.regex, 'i');
            }
            this.setData('map', data, true);
            return this;
        },
        hasMapData: function () {
            return !$.isEmptyObject(this.getData('map'));
        },
        getMapData: function () {
            return this.getData('map');
        },
        getMapUpdateEventName: function () {
            return this.getMapData()['map_reload_event'];
        },
        getCachedNow: function () {
            return this.getData('now_date_cached');
        },
        setCachedNow: function (new_date) {
            this.setData('now_date_cached', new_date, true);
            return this;
        },
        getNow: function (cache_offset) {
            var date = new ServerDate().date, cached_date, diff;
            if (cache_offset) {
                cached_date = this.getCachedNow();
                if (!cached_date) {
                    date.setSeconds(date.getSeconds() + cache_offset);
                    this.setCachedNow(date);
                } else {
                    diff = (cached_date - date) / 1000;
                    if (diff < 0 || diff > cache_offset) {
                        date.setSeconds(date.getSeconds() + cache_offset);
                        this.setCachedNow(date);
                    } else {
                        date = cached_date;
                    }
                }
            }
            return date;
        },
        setRewards: function (rewards_data) {
            rewards_data = $.extend(true, {}, rewards_data);
            this.setData('rewards', rewards_data, true);
            return this;
        },
        getRewards: function () {
            return this.getData('rewards');
        },
        setUiNotificationData: function (data) {
            if (!data) {
                return this;
            }
            data = $.extend({}, data);
            this.setData('ui_notification', data);
            return this;
        },
        getUiNotificationData: function () {
            return this.getData('ui_notification');
        },
        hasUiNotification: function () {
            return false;
        },
        setUiNotification: function (new_notification) {
            this.getUiNotificationData()['instance'] = new_notification;
            return this;
        },
        getUiNotification: function () {
            return this.getUiNotificationData()['instance'];
        },
        clearUiNotification: function () {
            this.setUiNotification(null);
            return this;
        },
        setUiNotificationPriority: function (new_priority) {
            this.getUiNotificationData()['priority'] = new_priority;
            return this;
        },
        getUiNotificationPriority: function () {
            return this.getUiNotificationData()['priority'];
        },
        getUiNotificationMouseover: function () {
            return false;
        },
        getWindows: function () {
            return this.getData('windows');
        },
        setWindow: function (window_id, window_controller) {
            var windows = this.getWindows();
            windows[window_id] = window_controller;
            return this;
        },
        getWindow: function (window_id) {
            return this.getWindows()[window_id];
        },
        hasWindow: function (window_id) {
            return !!this.getWindow(window_id);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.event', class_parent = 'west.game.controller', class_object = {
        _class_id: 'event', _namespace: 'west.game.event', _class_path: class_path, isStarted: function () {
            return this.getModel().hasEventStarted();
        }, start: function () {
            var model = this.getModel();
            if (model.hasEventStarted()) {
                return this;
            }
            this.setWindows();
            if (model.hasMapData()) {
                this.addMapModifications();
            }
            if (model.hasUiNotification()) {
                this.addUiNotification();
            }
            if (model.hasCounterData()) {
                this.addCounter();
            }
            model.setEventStarted(true);
            return this;
        }, stop: function () {
            this.removeMapModifications().destroyCounter().removeUiNotification().destroyWindows();
            this.getModel().setEventStarted(false);
            return this;
        }, getState: function () {
            var model = this.getModel(), now = new Date(), start = model.getStartDate(), end = model.getEndDate();
            if (!end || end > now) {
                if (!start || start < now) {
                    return 'running';
                } else {
                    return 'schedule';
                }
            }
            return false;
        }, setWindows: function () {
            return this;
        }, destroyWindows: function () {
            var windows = this.getModel().getWindows();
            $.each(windows, function (window_id, window_controller) {
                window_controller.close();
            });
            return this;
        }, addCounter: function () {
            var model = this.getModel(), event_id = model.getId(), event_name = model.getCounterUpdateEventName(), counter;
            counter = new west.ui.topBar.customUnitCounter.controller({
                event_name: event_name,
                unit_name: event_id,
                icon_name: event_id.toLowerCase(),
                mouseover: model.getCounterMouseover(),
                value: model.getCounterValue(),
                help_mouseover: model.getCounterHelpMouseover(),
                help_click_handler: model.getCounterHelpClickHandler(),
                log_click_handler: model.getCounterLogClickHandler()
            });
            counter.addCounter();
            model.setCounter(counter);
            this.addEventListener(event_name, model.setCounterValue, model);
            return this;
        }, destroyCounter: function () {
            var model = this.getModel(), counter = model.getCounter(), event_name = model.getCounterUpdateEventName();
            if (counter) {
                counter.removeCounter();
                model.removeCounter();
            }
            this.removeEventListener(event_name, model.setCounterValue, model);
            return this;
        }, getFriendsbarData: function () {
            return this.getModel().getFriendsbarData();
        }, addMapModifications: function () {
            var model = this.getModel(), event_name = model.getMapUpdateEventName(), map_data = model.getMapData(), now = model.getNow();
            if (!map_data.end || map_data.end > now) {
                if (map_data.start && map_data.start > now) {
                    this.addTimer(map_data.start, this.reloadMap, this);
                } else {
                    this.reloadMap();
                }
                if (event_name) {
                    this.addEventListener(event_name, this.reloadMap, this);
                }
                if (map_data.end) {
                    this.addTimer(map_data.end, this.removeMapModifications, this);
                }
            }
            return this;
        }, removeMapModifications: function () {
            var model = this.getModel(), event_name;
            if (!model.hasMapData()) {
                return this;
            }
            event_name = model.getMapUpdateEventName();
            this.reloadMap();
            if (event_name) {
                this.removeEventListener(event_name, this.reloadMap, this);
            }
            return this;
        }, reloadMap: function () {
            if (!Map.initialized) {
                return this;
            }
            Map.Helper.imgPath.clearCache();
            Map.refresh();
            return this;
        }, modifiesMap: function () {
            return this.getModel().hasMapData();
        }, modifyMapPath: function (path, on_game_load) {
            var model = this.getModel(), map_data = model.getMapData(), now = model.getNow(on_game_load ? 10 : false);
            if ((map_data.start && now < map_data.start) || (map_data.end && now > map_data.end) || (map_data.regex && !map_data.regex.test(path))) {
                return false;
            }
            return map_data.path + '/' + path;
        }, addUiNotification: function () {
            var that = this, model = this.getModel(), event_id = model.getId(), priority = model.getUiNotificationPriority(), notification = new OnGoingEntry;
            notification.init(false, this.handleUiNotificationClick.bind(this), priority);
            notification.setImageClass('sesEvent ses' + event_id);
            if (model.getUiNotificationMouseover()) {
                notification.setTooltip(model.getUiNotificationMouseover());
            }
            notification.highlightBorder();
            model.setUiNotification(notification);
            WestUi.NotiBar.add(notification);
            return this;
        }, removeUiNotification: function () {
            var model = this.getModel(), notification = model.getUiNotification();
            if (notification) {
                WestUi.NotiBar.remove(notification);
                model.clearUiNotification();
            }
            return this;
        }, handleUiNotificationClick: function () {
            return false;
        }, addEventListener: function (event_id, callback, context) {
            if (!event_id) {
                return this;
            }
            this.removeEventListener(event_id, callback, context);
            EventHandler.listen(event_id, callback, context);
            return this;
        }, removeEventListener: function (event_id, callback, context) {
            if (!event_id) {
                return this;
            }
            EventHandler.unlisten(event_id, callback, context);
            return this;
        }, addTimer: function (date, callback, context) {
            return this;
        }, hasCurrency: function () {
            return this.getModel().hasCurrency();
        }, getCurrency: function () {
            return this.getModel().getCurrencyData();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.ui.bottomBar', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        data: {ui_ready: false, name: null, started: false},
        setName: function (ses_name) {
            this.setData('name', ses_name);
            return this;
        },
        getName: function () {
            return this.getData('name');
        },
        setStarted: function (bool) {
            this.setData('started', bool, true);
            return this;
        },
        getStarted: function () {
            return this.getData('started');
        },
        hasStarted: function () {
            return !!this.getStarted();
        },
        setUiReady: function (state) {
            this.setData('ui_ready', !!state, true);
            return this;
        },
        isUiReady: function () {
            return !!this.getData('ui_ready');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.ui.bottomBar', class_parent = 'west.game.controller', class_object = {
        _class_id: 'bottomBar', _namespace: 'west.game.ui.bottomBar', _class_path: class_path, start: function () {
            var model = this.getModel();
            if (model.hasStarted()) {
                return this;
            }
            this.lookForUi();
            model.setStarted(true);
            return this;
        }, stop: function () {
            this.getModel().setStarted(false);
            return this;
        }, lookForUi: function () {
            var that = this, model = this.getModel(), ui_ready = !!WestUi.BottomBar.loaded;
            model.setUiReady(ui_ready);
            if (ui_ready) {
                this.handleUiReady();
            } else {
                EventHandler.listen('ui_bottomBar_loaded', function () {
                    model.setUiReady(true);
                    that.handleUiReady();
                    return EventHandler.ONE_TIME_EVENT;
                });
            }
        }, handleUiReady: function () {
            return this;
        }, addEventListener: function (event_id, callback, context) {
            if (!event_id) {
                return this;
            }
            this.removeEventListener(event_id, callback, context);
            EventHandler.listen(event_id, callback, context);
            return this;
        }, removeEventListener: function (event_id, callback, context) {
            if (!event_id) {
                return this;
            }
            EventHandler.unlisten(event_id, callback, context);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.ui.bottomBar.shop', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, setSaleLabel: function (bool) {
            var l10n = this.getModel().getL10n(), ribbon = $('#ui_bottombar .button.shop .dock-highlight');
            if (bool) {
                ribbon.addClass('active').addMousePopup(l10n.mouseover);
                this.setButtonHighlight();
            } else {
                ribbon.removeClass('active').removeMousePopup();
                this.removeButtonHighlight();
            }
            return this;
        }, addSaleLabel: function () {
            this.setSaleLabel(true);
            return this;
        }, removeSaleLabel: function () {
            this.setSaleLabel(false);
            return this;
        }, setButtonHighlight: function () {
            var button = $('#ui_bottombar .button.shop'), specials = this.getModel().hasSpecialSales();
            this.removeButtonHighlight();
            if (specials) {
                button.addClass('ongoing_sale highlight').one('click.ongoing_sale', this.getController().handleTimer.bind(this.getController())).append('<div class="highlight"></div>');
                this.getController().setTimer();
            }
        }, removeButtonHighlight: function () {
            var button = $('#ui_bottombar .button.shop');
            button.removeClass('ongoing_sale highlight').off('ongoing_sale');
            this.getController().handleTimer();
            return this;
        }, removeHighlightAnimation: function () {
            $('#ui_bottombar .button.shop').removeClass('highlight').find('.highlight').remove();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.ui.bottomBar.shop', class_parent = 'west.game.ui.bottomBar.model', class_object = {
        _class_path: class_path,
        l10n: {'mouseover': s('Эй, слушай, %1 у нас сегодня акция!', '<br />')},
        parseInitData: function (data) {
            if (data.saleLabel) {
                data.threshold = data.saleLabel.threshold;
                data.sales = ((!data.saleLabel.sales || Array.isArray(data.saleLabel.sales)) ? {} : data.saleLabel.sales);
                delete data.saleLabel;
            }
            return this.callParent.call(this, data);
        },
        setThreshold: function (new_threshold) {
            this.setData('threshold', parseInt(new_threshold), true);
            return this;
        },
        getThreshold: function () {
            return this.getData('threshold');
        },
        hasThreshold: function () {
            return !!this.getData('threshold');
        },
        setSales: function (new_sales) {
            this.setData('sales', new_sales, true);
            return this;
        },
        getSales: function () {
            var sales = this.getData('sales');
            if (!sales) {
                sales = {};
                this.setSales(sales);
            }
            return sales;
        },
        hasSales: function () {
            var sales = this.getSales();
            return !$.isEmptyObject(sales);
        },
        hasSpecialSales: function () {
            var sales = this.getSales(), result;
            result = west.common.some(sales, function (type, id) {
                return type !== "automatic";
            });
            return result;
        },
        addSaleItem: function (item_id, sale_type) {
            var sales = this.getSales();
            sales[item_id] = sale_type;
            return this;
        },
        removeSaleItem: function (item_id) {
            var sales = this.getSales();
            delete sales[item_id];
            return this;
        },
        getTimeout: function () {
            return 20000;
        },
        setTimer: function (timer) {
            this.setData('timer', timer, true);
            return this;
        },
        getTimer: function () {
            return this.getData('timer');
        },
        getUiNotificationPriority: function () {
            return 11;
        },
        setUiNotification: function (notification) {
            this.setData('ui_notification', notification, true);
            return this;
        },
        getUiNotification: function () {
            return this.getData('ui_notification');
        },
        clearUiNotification: function () {
            this.setUiNotification(null);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.ui.bottomBar.shop', class_parent = 'west.game.ui.bottomBar.controller', class_object = {
        _class_id: 'bottomBar_shop', _namespace: 'west.game.ui.bottomBar', _class_path: class_path, start: function () {
            this.callParent.apply(this, arguments);
            var model = this.getModel();
            if (model.hasThreshold()) {
                this.setSaleListeners().lookForSale();
            }
            return this;
        }, stop: function () {
            this.callParent.apply(this, arguments);
            this.removeSaleListeners().removeSaleLabel();
            return this;
        }, handleUiReady: function () {
            this.lookForSale();
            return this;
        }, setSaleListeners: function () {
            this.addEventListener('pshop_item_changed', this.handleItemModify, this).addEventListener('pshop_item_removed', this.handleItemRemove, this);
            return this;
        }, removeSaleListeners: function () {
            this.removeEventListener('pshop_item_changed', this.handleItemModify, this).removeEventListener('pshop_item_removed', this.handleItemRemove, this);
            this.getView().removeSaleLabel();
            return this;
        }, handleItemModify: function (item) {
            var model = this.getModel(), treshold = model.getThreshold();
            if (parseInt(item.reduced_value) >= treshold) {
                model.addSaleItem(item.item_id, item.offer_type);
            } else {
                model.removeSaleItem(item.item_id);
            }
            this.lookForSale();
            return this;
        }, handleItemRemove: function (item) {
            this.getModel().removeSaleItem(item.item_id);
            this.lookForSale();
            return this;
        }, lookForSale: function () {
            var model = this.getModel(), view = this.getView();
            if (!model.isUiReady()) {
                return this;
            }
            if (model.hasSales()) {
                view.addSaleLabel();
                this.addUiNotification();
            } else {
                view.removeSaleLabel();
                this.removeUiNotification();
            }
            return this;
        }, setTimer: function () {
            var model = this.getModel(), view = this.getView(), timeout = model.getTimeout(), timer;
            timer = window.setTimeout(this.handleTimer.bind(this), timeout);
            model.setTimer(timer);
            return this;
        }, handleTimer: function () {
            var model = this.getModel();
            window.clearTimeout(model.getTimer());
            model.setTimer(null);
            this.getView().removeHighlightAnimation();
            return this;
        }, addUiNotification: function () {
            this.removeUiNotification();
            var that = this, model = this.getModel(), l10n = model.getL10n(), priority = model.getUiNotificationPriority(), notification = new OnGoingEntry;
            notification.init(false, this.handleUiNotificationClick.bind(this), priority);
            notification.setImageClass('shop_sale' + (model.hasSpecialSales() ? ' highlight' : ''));
            notification.setTooltip(l10n.mouseover);
            notification.highlightBorder();
            model.setUiNotification(notification);
            WestUi.NotiBar.add(notification);
            return this;
        }, removeUiNotification: function () {
            var model = this.getModel(), notification = model.getUiNotification();
            if (notification) {
                WestUi.NotiBar.remove(notification);
                model.clearUiNotification();
            }
            return this;
        }, handleUiNotificationClick: function () {
            var model = this.getModel(), notification = model.getUiNotification();
            west.window.shop.open('notibar' + (model.hasSpecialSales() ? '_specialSale' : '') + (notification.clicked ? '' : '_blinking'));
            return false;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_path = 'west.game.help.popup', class_parent = 'west.game';
    var controller = {
        _class_path: class_path, _namespace: class_path, _class_id: 'game.help.popup', init: function () {
            this.callParent.apply(this, arguments);
            return this;
        }, prepareInterface: function () {
            var model = this.getModel(), l10n = model.getL10n(), view = this.getView(), popup = new west.gui.Dialog(l10n.title), $root = view.createStructure();
            popup.addButton(l10n.buttons.exit, this.handleCloseButtonClick.bind(this)).setModal(true, this.handleCurtainClick.bind(this), true).setText($root);
            this.setRoot($root);
            model.setPopup(popup);
            return this;
        }, prepareFakeUi: function () {
            var model = this.getModel(), view = this.getView(), fake_ui = model.getFakeUi(), popup = model.getPopup(), $fake_ui = [];
            if (fake_ui.sidebar) {
                $fake_ui.push(view.createFakeBar(fake_ui.sidebar));
            }
            if (fake_ui.counter) {
                $fake_ui.push(view.createFakeCounter(fake_ui.counter));
            }
            popup.getFramefix().append($('<div class="fake_ui"></div>').append($fake_ui));
        }, showHelp: function () {
            this.open();
        }, open: function () {
            var model = this.getModel(), view = this.getView();
            this.prepareInterface().addEventListeners();
            if (model.hasFakeUi()) {
                this.prepareFakeUi();
                view.hideRealUi();
            }
            model.getPopup().show();
            return this;
        }, handleCloseButtonClick: function () {
            this.close();
            return false;
        }, handleCurtainClick: function () {
            this.close();
            return false;
        }, close: function () {
            var model = this.getModel(), view = this.getView();
            model.getPopup().hide();
            model.removePopup();
            if (model.hasFakeUi()) {
                view.showRealUi();
            }
            return false;
        }, addEventListeners: function () {
            this.removeEventListeners();
            this.getRoot().on('mouseenter.help', '.instruction', this.handleInstructionHover.bind(this)).on('mouseleave.help', '.instruction', this.handleInstructionBlur.bind(this));
            return this;
        }, removeEventListeners: function () {
            this.getRoot().off('.help');
            return this;
        }, handleInstructionHover: function (e) {
            var model = this.getModel(), view = this.getView(), $el = $(e.currentTarget), id = $el.data('id'), data = model.getInstructionData(id);
            if (data) {
                view.highlightFakeUi(data.highlight);
            }
        }, handleInstructionBlur: function (e) {
            var $el = $(e.currentTarget), id = $el.data('id');
            this.getView().unhighlightFakeUi();
        }
    }, model = {
        _class_path: class_path,
        data: {popup: null, class_names: '', fake_ui: null, instructions: []},
        l10n: {title: 'Помощь', buttons: {exit: "Выйти"}},
        getId: function () {
            return this.getData('id');
        },
        getFakeUi: function () {
            return this.getData('fake_ui');
        },
        hasFakeUi: function () {
            return !!this.getFakeUi();
        },
        setPopup: function (popup) {
            this.setData('popup', popup, true);
            return this;
        },
        getPopup: function () {
            return this.getData('popup');
        },
        removePopup: function () {
            this.setPopup(null);
            return this;
        },
        getClassNames: function () {
            return this.getData('class_names');
        },
        getInstructions: function () {
            return this.getData('instructions');
        },
        getInstructionData: function (id) {
            var data = this.getData('instructions_data') || {};
            return data[id] || {};
        }
    }, view = {
        _class_path: class_path, createStructure: function () {
            var model = this.getModel(), summary = model.getL10n('summary'), instructions = model.getInstructions() || [], $root = $('<div class="help_popup"></div>'), i = 0, l = instructions.length;
            $root.addClass(model.getClassNames());
            for (i; i < l; i++) {
                $root.append(this.createInstruction(instructions[i]));
            }
            if (summary) {
                $root.append($('<div class="footer' + (summary.length < 69 ? ' overlap' : '') + '">' + summary + '</div>'));
            }
            return $root;
        }, createInstruction: function (id) {
            var model = this.getModel(), data = model.getInstructionData(id), l10n = model.getL10n('instructions')[id], $instruction = $('<div class="'
                + 'instruction '
                + id
                + (data.class_name ? ' ' + data.class_name : '')
                + (data.type ? ' ' + data.type : '')
                + '" data-id="' + id + '">'
                + '<div class="description">'
                + (l10n.description ? l10n.description : '')
                + '</div>'
                + '<div class="image"></div>'
                + '</div>');
            if (l10n.mouseover) {
                $instruction.addMousePopup(l10n.mouseover);
            }
            return $instruction;
        }, createFakeBar: function (bar_elements) {
            var $bar_content = $('<div class="ui_ongoing_content"></div>'), i = 0, l = bar_elements.length;
            for (i; i < l; i++) {
                $bar_content.append($('.ui_ongoing .image.' + bar_elements[i], '#ui_notibar').closest('.ongoing_entry').clone().removeAttr('style'));
            }
            $('.border', $bar_content).removeAttr('style').addClass('highlight');
            return $('<div class="ui_ongoing fake_ui_ongoing"></div>').append($('<div class="tw2gui_arrow_up_bottom inactive"></div>'), $bar_content, $('<div class="tw2gui_arrow_down_bottom inactive"></div>'));
        }, createFakeCounter: function (id) {
            return $('.custom_unit_counter.' + id).clone().addClass('fake_counter');
        }, hideRealUi: function () {
            $('#ui_notibar').addClass('hide');
        }, showRealUi: function () {
            $('#ui_notibar').removeClass('hide');
        }, highlightFakeUi: function (type) {
            var fake_ui = $('.fake_ui'), zindex = $('.tw2gui_dialog_iecockblocker').css('z-index') + 1, $fake_ui_el;
            switch (type) {
                case'bar':
                    $fake_ui_el = $('.ui_ongoing', fake_ui);
                    break;
                case'counter':
                    $fake_ui_el = $('.fake_counter', fake_ui);
                    break;
                case'ses':
                    $fake_ui_el = $('.sesEvent', fake_ui).closest('.ongoing_entry');
                    break;
                default:
                    return;
                    break;
            }
            this.unhighlightFakeUi();
            $fake_ui_el.addClass('show').css('z-index', zindex);
        }, unhighlightFakeUi: function () {
            $('.fake_ui .show').removeClass('show').removeAttr('style');
        }
    };
    west.define(class_path + '.model', class_parent + '.model', model);
    west.define(class_path + '.view', class_parent + '.view', view);
    west.define(class_path + '.controller', class_parent + '.controller', controller);
});

$(function ($) {
    'use strict';
    var class_name = 'west.game.shop.controller', class_parent = 'west.game.controller', class_object = {
        init: function (options) {
            if (options.window_controller) {
                this.setController('window', options.window_controller);
                delete options.window_controller;
            }
            if (options.controllers) {
                this.setControllers(options.controllers);
                delete options.controllers;
            }
            this.callParent.apply(this, arguments);
            return this;
        }, hasControllers: function () {
            return this._hasProperties('controller');
        }, hasController: function (controller_id) {
            return this._hasProperty('controller', controller_id);
        }, removeController: function (controller_id) {
            return this._removeProperty('controller', controller_id);
        }, removeControllers: function (controllers_collection) {
            return this._removeProperties('controller', controllers_collection);
        }, destroyController: function (controller_id, options) {
            return this._destroyProperty('controller', controller_id, options);
        }, destroyControllers: function (controllers_collection) {
            west.common.forEach(controllers_collection, function (options, id) {
                this.destroyController(id, options);
            }, this);
            return this;
        }, render: function () {
        }, destroy: function (options) {
            options = options || {};
            if (options.controllers) {
                this.removeControllers(options.controllers);
            }
            if (options.controller) {
                this.removeController(options.controller);
            }
            this.callParent.apply(this, arguments);
        }
    };
    west.define(class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.offer', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        data: {
            id: null,
            name: null,
            description: null,
            start: null,
            end: null,
            search_query: null,
            show_category: null,
            items: [],
            has_items_defined: false,
            content_background: null,
            banner: {},
            url_prefix: 'https://westrus.innogamescdn.com/images/window/shop/offers/',
            rendered_type: null,
            min_display_time: 5000
        },
        l10n: {
            popups: {}, texts: {}, 'end': function (date) {
                return '<div class="promo_end">' + s('Скидка заканчивается %1', '<strong>' + date.toDateTimeString()) + '</strong></div>';
            }, 'sold_out': 'Продано'
        },
        init: function (options) {
            if (options && options.models) {
                this._setProperties('model', options.models);
                delete options.models;
            }
            this.callParent.apply(this, arguments);
            return this;
        },
        parseInitData: function (data) {
            if (data.background) {
                data.content_background = data.background;
                delete data.background;
            }
            if (data.items && data.items.length || data.search_query) {
                data.has_items_defined = true;
            }
            return this.callParent.call(this, data);
        },
        parseData: function () {
            var data = this.getData(), window_model = this._getProperty('model', 'window');
            if (data.start) {
                data.start = buildDateObject(data.start);
            }
            if (data.end) {
                data.end = buildDateObject(data.end);
            }
            if (this.hasItems()) {
                var items_models = this.getItems(), i_m_l = items_models.length, i = 0, items = [], item;
                for (i; i < i_m_l; i++) {
                    item = window_model.getItem(items_models[i]);
                    if (item) {
                        items.push(item);
                        item.addOfferModel(this);
                    }
                }
                this.setItems(items);
            }
            return this;
        },
        isActive: function () {
            var end = this.getEndDate();
            return end ? new ServerDate().date < end : true;
        },
        getId: function () {
            return this.getData('id');
        },
        getName: function () {
            return this.getData('name');
        },
        getStartDate: function () {
            return this.getData('start');
        },
        getEndDate: function () {
            return this.getData('end');
        },
        hasEndDate: function () {
            return !!this.getEndDate();
        },
        getDescription: function () {
            return this.getData('description');
        },
        getSearchQuery: function () {
            return this.getData('search_query');
        },
        hasSearchQuery: function () {
            return !!this.getSearchQuery();
        },
        hasItemsDefined: function () {
            return this.getData('has_items_defined');
        },
        hasItems: function () {
            var items = this.getData('items');
            return !!(items && items.length);
        },
        getItems: function () {
            if (this.hasItems()) {
                return this.getData('items');
            } else if (this.hasSearchQuery()) {
                return this._getProperty('model', 'window').getItemsBySearchQuery(this.getSearchQuery());
            }
        },
        setItems: function (new_items) {
            this.setData('items', new_items, true);
            return this;
        },
        addItem: function (new_item) {
            var items = this.getItems();
            this.pushIfUnique(items, new_item);
            new_item.addOfferModel(this);
            return this;
        },
        removeItem: function (item) {
            var items = this.getItems();
            this.removeFromArray(items, item);
            item.removeOfferModel(this.getId());
            return this;
        },
        getContentBackground: function () {
            return this.getData('content_background');
        },
        getUrlPrefix: function () {
            return this.getData('url_prefix');
        },
        getBannerData: function () {
            return this.getData('banner');
        },
        getBannerSide: function () {
            return this.getBannerData()['side'];
        },
        getBannerBottom: function () {
            return this.getBannerData()['bottom'];
        },
        getBannerBottomSmall: function () {
            return this.getBannerData()['bottom_small'];
        },
        getBanner: function (type) {
            if ('side' !== type && WestUi.resolutionChange.current) {
                type = type + 'Small';
            }
            return this['getBanner' + type] ? this['getBanner' + type]() : '';
        },
        setRenderType: function (type) {
            this.setData('rendered_type', type);
            return this;
        },
        getRenderType: function () {
            return this.getData('rendered_type');
        },
        hasType: function (offer_type) {
            return !!this.getBanner(offer_type);
        },
        getSubcategories: function () {
            return [];
        },
        getMinDisplayTime: function () {
            return this.getData('min_display_time');
        },
        getCategoryHighlight: function () {
            return this.getData('show_category');
        },
        hasCategoryHighlight: function () {
            return !!this.getCategoryHighlight();
        },
        destroy: function (options) {
            options = options || {};
            options['destroyData'] = false;
            this.setRenderType(null);
            this.callParent.call(this, options);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.offer', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, buildStructure: function () {
            var $el = $('<div class="offer_' + this.getModel().getId() + ' offer"></div>').append($('<div class="image"></div>'));
            return $el;
        }, getImage: function (url) {
            var model = this.getModel(), prefix = model.getUrlPrefix();
            return $('<img src="' + prefix + url + '" />');
        }, render: function () {
            var that = this, model = this.getModel(), $offer;
            if (this.hasRoot()) {
                this.update();
                return this.getRoot();
            }
            $offer = this.buildStructure();
            this.addImage($offer).addMouseOver($offer);
            $offer.toggleClass('disabled', !(model.hasItemsDefined() || model.hasCategoryHighlight()));
            if (model.getEndDate()) {
                this.addEndDate($offer);
            }
            return $offer;
        }, update: function () {
            var model = this.getModel();
            if (!this.hasRoot()) {
                return this;
            }
            this.getRoot().toggleClass('disabled', !(model.hasItemsDefined() || model.hasCategoryHighlight()));
            if (model.getEndDate()) {
                this.updateEndDate();
            }
            return this;
        }, addImage: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), type = model.getRenderType(), url = model.getBanner(type), image;
            if (url) {
                image = this.getImage(url);
                $('.image', $root).append(image);
                image.one('looffer', function () {
                    $root.width(this.width);
                });
            }
            return this;
        }, addEndDate: function ($root) {
            $root = $root || this.getRoot();
            $root.append('<div class="end_date"><span class="value"></span></div>');
            this.updateEndDate($root);
            return this;
        }, updateEndDate: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), now = new ServerDate().date, date = model.getEndDate();
            if (date > now) {
                $('.end_date .value', $root).text(Math.floor((date - now) / 1000).formatDurationBuffWay());
            } else {
                this.removeEndDate().showSoldOut();
            }
            return this;
        }, removeEndDate: function () {
            $('.end_date', this.getRoot()).remove();
            return this;
        }, showSoldOut: function () {
            var $root = this.getRoot();
            if (!$('.sold_out', $root).length) {
                $root.append($('<div class="sold_out">' + this.getModel().getL10n().sold_out + '</div>'));
            }
            this.getRoot().addClass('disabled');
            return this;
        }, addMouseOver: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), mouse_popup = model.getDescription(), l10n = model.getL10n('end'), end_date = model.getEndDate();
            if (end_date) {
                mouse_popup = {teaser: mouse_popup, content: l10n(end_date)};
            }
            $root.addMousePopup(mouse_popup);
            return this;
        }, remove: function () {
            if (!this.hasRoot()) {
                return this;
            }
            return this;
        }, destroy: function () {
            if (this.hasRoot()) {
                this.getRoot().remove();
            }
            this.callParent.apply(this, arguments);
            return this;
        }, getTimeLeftFromTimestamp: function (timestamp) {
            var now = Math.floor(new Date().getTime() / 1000), diff = timestamp - now;
            return diff.getTime2EndString();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.shop.offer', class_parent = 'west.game.shop.controller', class_object = {
        _class_id: 'Shop offer', _class_path: class_path, _namespace: 'west.game.shop.offer', init: function () {
            this.callParent.apply(this, arguments);
            this.getModel().setController(this);
        }, render: function (offer_type) {
            var model = this.getModel(), view = this.getView(), $offer;
            if (model.hasType(offer_type)) {
                if (this.hasRoot()) {
                    $offer = this.getRoot();
                    this.update();
                } else {
                    model.setRenderType(offer_type);
                    $offer = view.render();
                    this.setRoot($offer).setEventListeners();
                }
            }
            return $offer;
        }, update: function () {
            var view = this.getView();
            view.update();
            return this;
        }, needsUpdate: function () {
            var model = this.getModel();
            return model.hasEndDate();
        }, setEventListeners: function () {
            if (!this.hasRoot()) {
                return this;
            }
            this.removeEventListeners();
            var $root = this.getRoot();
            $root.on('click.offer', this._handleShowContentAction.bind(this));
            return this;
        }, removeEventListeners: function () {
            if (!this.hasRoot()) {
                return this;
            }
            this.getRoot().off('.offer');
            return this;
        }, _handleShowContentAction: function (e) {
            var offer_id = this.getModel().getId();
            if (this.hasController('window')) {
                this.getController('window').showPromotion(offer_id);
            }
            return this;
        }, display: function () {
            this.update();
            return this;
        }, hide: function () {
            return this;
        }, remove: function () {
            this.getView().remove();
            return this;
        }, destroy: function () {
            this.removeEventListeners();
            this.removeController('window');
            this.callParent.apply(this, arguments);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.offers', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        data: {
            class_name: null,
            include_default: false,
            offers: [],
            type: 'bottom',
            rotate_blocked: false,
            ticker: null,
            min_rotate_interval: 3000,
            next_rotate_interval: null,
            carousel: null,
            animation: 'vertical',
            carousel_options: {rotate: false, skin: 'footer', paginator_skin: 'sales'}
        },
        l10n: {},
        getSubclassName: function () {
            return this.getData('class_name');
        },
        parseData: function () {
            if ('side' === this.getType().toLowerCase()) {
                this.setAnimation('fade');
            }
        },
        setCarouselOptions: function (options) {
            this.setData('carousel_options', options, true);
            return this;
        },
        getCarouselOptions: function () {
            return this.getData('carousel_options');
        },
        getDataModel: function () {
            return this.getController().getModel('window');
        },
        setOffers: function (offers) {
            this.setData('offers', offers, true);
        },
        getOffers: function () {
            var offers = this.getData('offers');
            if (!offers.length) {
                this.parseOffers();
                offers = this.getData('offers');
            }
            return offers;
        },
        includesDefaults: function () {
            return !!this.getData('include_default');
        },
        parseOffers: function () {
            var factory = this.getController().getFactory(), class_name = this.getSubclassName(), offers_models = this.getDataModel().getActiveOffers(this.includesDefaults()), offers = [];
            west.common.forEach(offers_models, function (offer) {
                offers.push(factory.createOffer(offer, class_name));
            });
            this.setOffers(offers);
            return this;
        },
        destroyOffers: function () {
            var offers = this.getOffers(), i = offers.length;
            while (i--) {
                offers[i].destroy();
            }
            return this;
        },
        setCarousel: function (new_carousel) {
            this.setData('carousel', new_carousel, true);
            return this;
        },
        getCarousel: function () {
            return this.getData('carousel');
        },
        hasCarousel: function () {
            return !!this.getCarousel();
        },
        getType: function () {
            return this.getData('type');
        },
        setAnimation: function (animation) {
            this.setData('animation', animation);
            return this;
        },
        getAnimation: function () {
            return this.getData('animation');
        },
        getMinRotateInterval: function () {
            return this.getData('min_rotate_interval');
        },
        setNextTickDelay: function (delay) {
            this.setData('next_tick_delay', delay, true);
            return this;
        },
        getNextTickDelay: function () {
            return this.getData('next_tick_delay');
        },
        setNextTick: function (timestamp) {
            var delay = Math.max(this.getMinRotateInterval(), this.getNextTickDelay(), 0);
            this.setNextTickTimestamp(Math.floor(timestamp + delay));
            return this;
        },
        setNextTickTimestamp: function (new_timestamp) {
            this.setData('next_tick_timestamp', new_timestamp);
            return this;
        },
        getNextTickTimestamp: function (timestamp) {
            return this.getData('next_tick_timestamp');
        },
        clearNextTick: function () {
            this.setNextTickTimestamp(null);
            return this;
        },
        getNextTick: function (timestamp) {
            var next = this.getNextTickTimestamp();
            if (!next) {
                this.setNextTick(timestamp);
                next = this.getNextTickTimestamp();
            }
            return next;
        },
        setBlocked: function (bool) {
            this.setData('rotate_blocked', bool);
            return this;
        },
        isBlocked: function () {
            return this.getData('rotate_blocked');
        },
        setTicker: function (ticker) {
            this.setData('ticker', ticker, true);
            return this;
        },
        getTicker: function () {
            return this.getData('ticker');
        },
        clearTicker: function () {
            this.setTicker(null);
            return this;
        },
        hasTicker: function () {
            return !!this.getTicker();
        },
        destroy: function () {
            this.destroyOffers();
            this.callParent.apply(this, arguments);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.offers', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, init: function () {
            this.callParent.apply(this, arguments);
            this.addStructure();
            return this;
        }, addStructure: function () {
            if (!this.hasRoot()) {
                return this;
            }
            var $root = this.getRoot(), model = this.getModel();
            $root.empty().append($('<div class="offers_wrapper offers_' + model.getType().toLowerCase() + '"></div>'));
            return this;
        }, getOffers: function () {
            return $('.offers_wrapper', this.getRoot());
        }, addOffers: function ($offers) {
            this.getOffers().empty().append($offers);
            return this;
        }, destroy: function () {
            if (this.hasRoot()) {
                this.getRoot().empty();
            }
            this.callParent.apply(this, arguments);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'factory', class_path = 'west.game.shop.offers', class_parent = 'west.game.factory', class_object = {
        _class_path: class_path, createOffer: function (model, class_name) {
            var namespace = 'west.game.shop.offer', offer_id = model.getId(), window_controller = this.getController().getController('window'), window_model = this.getController().getModel('window'), Offer = this._getClass('controller', namespace + '.' + offer_id + (class_name ? '.' + class_name : ''), namespace), offer;
            if (Offer) {
                offer = new Offer({
                    models: {main: model, window: window_model},
                    controllers: {window: window_controller}
                });
            }
            return offer;
        }, createOfferModel: function (data, type) {
            var namespace = 'west.game.shop.offer', Offer = this._getClass('model', namespace + (type ? '.' + type : ''), namespace), offer;
            if (Offer) {
                offer = new Offer(data);
            }
            return offer;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.offers', class_parent = 'west.game.shop.controller', class_object = {
            _class_id: 'Shop offers controller', _namespace: class_path, _class_path: class_path, init: function () {
                this.callParent.apply(this, arguments);
                this.render();
            }, setInitEventListeners: function () {
            }, removeInitEventListeners: function () {
            }, setEventListeners: function () {
                this.removeEventListeners();
                this.getRoot().on({
                    'mouseenter.offers': this._blockOfferChange.bind(this),
                    'mouseleave.offers': this._unblockOfferChange.bind(this)
                });
                if (this.getModel().getCarousel()) {
                    this.getModel().getCarousel().getMainDiv().on('carousel:show', this._handleOfferShow.bind(this));
                }
                return this;
            }, removeEventListeners: function () {
                this.getRoot().off('.offers');
                return this;
            }, render: function () {
                if (!this.hasRoot()) {
                    return this;
                }
                var model = this.getModel(), view = this.getView(), offers = model.getOffers(), offer_type = model.getType(), $offers = [], ticks = false, carousel;
                var i = 0, l = offers.length, $offer;
                for (i; i < l; i++) {
                    $offer = offers[i].render(offer_type);
                    if ($offer) {
                        $offers.push($offer);
                        if (offers[i].needsUpdate()) {
                            ticks = true;
                        }
                    }
                }
                if ($offers.length && $offers.length > 1) {
                    ticks = true;
                    carousel = new tw2widget.gui.carousel($offers, model.getCarouselOptions());
                    model.setCarousel(carousel);
                    view.addOffers(carousel.getMainDiv().addClass('shop_offers offers ' + model.getAnimation()));
                } else {
                    view.addOffers($offers);
                }
                this.setEventListeners();
                if (ticks) {
                    this.setNextTick(offers[0].getModel().getMinDisplayTime());
                }
                return this;
            }, reRender: function () {
                this._clearTicker();
                this.getModel().destroyOffers().parseOffers();
                this.getView().addStructure();
                this.render();
                return this;
            }, tick: function () {
                this.getModel().setTicker(window.requestAnimationFrame(this._handleTicker.bind(this)));
                return this;
            }, setNextTick: function (delay) {
                this.getModel().clearNextTick().setNextTickDelay(delay);
                this.tick();
                return this;
            }, _handleTicker: function (timestamp) {
                var model = this.getModel();
                if (!model || !model.hasTicker()) {
                    return;
                }
                if (timestamp > model.getNextTick(timestamp)) {
                    this._handleTick();
                    return this;
                }
                this.tick();
            }, _handleTick: function () {
                var model = this.getModel(), offer;
                if (model.hasCarousel()) {
                    this.nextOffer();
                } else {
                    offer = model.getOffers()[0];
                    if (offer) {
                        offer.display();
                    }
                    if (offer.needsUpdate()) {
                        this.setNextTick(offer.getModel().getMinDisplayTime());
                    }
                }
                return this;
            }, _clearTicker: function () {
                var model = this.getModel();
                window.cancelAnimationFrame(model.getTicker());
                model.clearNextTick().clearTicker();
                return this;
            }, _blockOfferChange: function () {
                this.getModel().setBlocked(true);
                this._clearTicker();
                return this;
            }, _unblockOfferChange: function () {
                this.getModel().setBlocked(false);
                this.tick();
                return this;
            }, _handleOfferShow: function (e, data) {
                var model = this.getModel(), offer_index = data.index - 1, offer = model.getOffers()[offer_index];
                if (!offer) {
                    return this;
                }
                offer.display();
                this.setNextTick(offer.getModel().getMinDisplayTime());
                return this;
            }, nextOffer: function () {
                if (this.getModel().hasCarousel()) {
                    this.getModel().getCarousel().next();
                }
                return this;
            }, prevOffer: function () {
                if (this.getModel().hasCarousel()) {
                    this.getModel().getCarousel().prev();
                }
                return this;
            }, stopRender: function () {
                this._clearTicker();
                this.clearRoot();
                return this;
            }, destroy: function () {
                this._clearTicker();
                this.removeControllers(['window', 'content']);
                this.callParent.apply(this, arguments);
                return this;
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.offer.rotating_item', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        data: {
            'id': 'rotating_item',
            'type': 'rotating_item',
            'item': null,
            'background': null,
            'description': '',
            'url_prefix': 'https://westrus.innogamescdn.com/images/window/shop/offers/',
            min_display_time: 5000
        },
        parseData: function () {
            var item = this.getItem();
            if (item) {
                this.setId('rotating_item.' + item.getId());
                item.addOfferModel(this);
            }
        },
        setId: function (id) {
            this.setData('id', id);
            return this;
        },
        getId: function () {
            return this.getData('id');
        },
        getType: function () {
            return this.getData('type');
        },
        getName: function () {
            return this.getItem().getName();
        },
        getTeaser: function () {
            return this.getItem().getTeaser() || '';
        },
        getDescription: function () {
            return this.getData('description');
        },
        getItem: function () {
            return this.getData('item');
        },
        getUrlPrefix: function () {
            return this.getData('url_prefix') + 'rotating_item/';
        },
        getBackground: function (type) {
            var bg = this.getData('background');
            if (!bg) {
                switch (type) {
                    case'event':
                        bg = 'event';
                        break;
                    case'limited_count':
                        bg = 'limited_amount';
                        break;
                    case'limited_time':
                        bg = 'limited_time';
                        break;
                    case'discount':
                        bg = 'sale';
                        break;
                    case'hot':
                    default:
                        bg = 'default';
                        break;
                }
                bg += '.jpg';
            }
            return bg;
        },
        getMinDisplayTime: function () {
            return this.getData('min_display_time');
        },
        destroy: function (options) {
            options = options || {};
            options['destroyData'] = false;
            this.getItem().removeOfferModel(this);
            this.callParent.call(this, options);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.offer.rotating_item', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, buildStructure: function () {
            var $el = $('<div class="offer_' + this.getModel().getType() + ' offer"></div>').append('<div class="name"></div>', '<div class="image"></div>', '<div class="details"></div>');
            return $el;
        }, getImage: function (url) {
            var model = this.getModel(), prefix = model.getUrlPrefix();
            return $('<img src="' + prefix + url + '" />');
        }, getIcon: function (type) {
            return $('<div class="icon ' + type + '"></div>');
        }, render: function () {
            var that = this, model = this.getModel(), item = model.getItem(), $offer;
            if (this.hasRoot()) {
                this.update();
                return this.getRoot();
            }
            $offer = this.buildStructure();
            this.addName($offer).addItem($offer).addPrice($offer).addDescription($offer).addMouseOver($offer);
            if (item.hasCountLimit()) {
                this.addCountLimit($offer);
            } else if (item.hasTimeLimit()) {
                this.addTimeLimit($offer);
            } else if (item.hasDiscount()) {
                this.addDiscount($offer);
            } else if (item.isForcedHot()) {
                this.addForceHot($offer);
            } else {
                this.addBackgroundImage($offer);
            }
            return $offer;
        }, update: function () {
            var model = this.getModel(), item = model.getItem();
            if (!this.hasRoot()) {
                return this;
            }
            if (item.hasCountLimit()) {
                this.updateCountLimit();
            } else if (item.hasTimeLimit()) {
                this.updateTimeLimit();
            }
            return this;
        }, addBackgroundImage: function ($root, type) {
            $root = $root || this.getRoot();
            var model = this.getModel(), url = model.getBackground(type), image;
            if (url) {
                image = this.getImage(url);
                $('.image', $root).append(image);
            }
            return this;
        }, addItem: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), item = model.getItem();
            $('.image', $root).append(new tw2widget.Item(item.getItemData()).setShowalreadyown(true).getMainDiv().addClass('item_nobg'));
            return this;
        }, addName: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel();
            $('.name', $root).text(model.getName());
            return this;
        }, addDescription: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel();
            $('.details', $root).append('<span class="teaser">' + model.getTeaser() + '</span>');
            return this;
        }, showSoldOut: function () {
            var $root = this.getRoot();
            if (!$('.sold_out', $root).length) {
                $root.append($('<div class="sold_out">' + this.getModel().getL10n().sold_out + '</div>'));
            }
            this.getRoot().addClass('disabled');
            return this;
        }, addPrice: function ($root) {
            $root = $root || this.getRoot();
            var that = this, model = this.getModel(), window_model = this.getController().getModel('window'), currencies = window_model.getCurrencies(), sort_function = window_model.getSortCurrenciesFunction(), item = model.getItem(), item_class = [], prices, parseCurrencyData = function (data) {
                var item_pricing = [], currency_names, currency_name;
                $.each(data, function (currency_id, price_value) {
                    currency_names = [];
                    if (1 === currency_id.length) {
                        currency_name = currencies[currency_id];
                        currency_names.push(currency_name);
                        item_class.push(currency_name);
                    } else {
                        $.each(currency_id.split('_'), function (j, currency_id) {
                            currency_name = currencies[currency_id];
                            currency_names.push(currency_name);
                            item_class.push(currency_name);
                        });
                    }
                    item_pricing.push({'name': currency_names, value: price_value});
                });
                return item_pricing;
            };
            prices = parseCurrencyData(item.getUniquePrices()).sort(sort_function).map(this.createPrice);
            $('.details', $root).append($('<div class="button"></div>').append(prices));
            if (item.hasDiscount()) {
                prices = parseCurrencyData(item.getUniquePrices(true)).sort(sort_function).map(this.createPrice);
                $('.details', $root).append($('<div class="old_price"></div>').append(prices));
            }
            return this;
        }, createPrice: function (price_obj) {
            return $('<span class="tw-currency curr-' + price_obj.name.join('-') + '"></span><span class="price price_value">' + round_number(price_obj.value, 6) + '</span>');
        }, addForceHot: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), item = model.getItem(), desc = item.getL10n().texts.popular;
            this.addBackgroundImage($root, 'hot');
            $root.append(this.getIcon('hot'), $('<div class="additional">' + desc + '</div>')).addClass('hot');
        }, addCountLimit: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), item = model.getItem(), desc = item.getL10n().texts.limited_count(item.getCountLimit());
            this.addBackgroundImage($root, 'limited_count');
            $root.append(this.getIcon('limited_count'), $('<div class="additional">' + desc + '</div>')).addClass('limited_count');
        }, updateCountLimit: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), item = model.getItem();
            $('.additional .value', $root).text(item.getCountLimit());
            return this;
        }, addTimeLimit: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), item = model.getItem(), desc = item.getL10n().texts.limited_time(this.getTimeLeftFromTimestamp(item.getTimeLimit()));
            this.addBackgroundImage($root, 'limited_time');
            $root.append(this.getIcon('limited_time'), $('<div class="additional">' + desc + '</div>')).addClass('limited_time');
        }, updateTimeLimit: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), item = model.getItem();
            $('.additional .value', $root).text(this.getTimeLeftFromTimestamp(item.getTimeLimit()));
            return this;
        }, addDiscount: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), item = model.getItem(), desc = item.getL10n().texts.discount(item.getDiscount());
            this.addBackgroundImage($root, 'discount');
            $root.append(this.getIcon('discount'), $('<div class="additional">' + desc + '</div>')).addClass('discount');
        }, addIcon: function ($root) {
            $root = $root || this.getRoot();
            var item = this.getModel().getItem(), icon, mouseover;
            if (item.isForcedHot()) {
                icon = 'hot';
                mouseover = new Date(item.getTimeLimit() * 1000).toDateTimeString();
            } else if (item.hasCountLimit()) {
                icon = 'limited_count';
                mouseover = item.getL10n('texts').limited_count(item.getCountLimit());
            } else if (item.hasTimeLimit()) {
                icon = 'limited_time';
                mouseover = new Date(item.getTimeLimit() * 1000).toDateTimeString();
            } else if (item.hasDiscount()) {
                icon = 'discount';
                mouseover = item.getL10n('mouseovers').icons.discount(new Date(item.getDiscountTimestamp() * 1000).toDateTimeString());
            }
            if (icon) {
                $root.append($('<div class="icon ' + icon + '"></div>').addMousePopup(mouseover));
            }
            return this;
        }, addMouseOver: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), mouse_popup = model.getDescription(), l10n = model.getL10n('end');
            $root.addMousePopup(mouse_popup);
            return this;
        }, remove: function () {
            if (!this.hasRoot()) {
                return this;
            }
            return this;
        }, destroy: function () {
            if (this.hasRoot()) {
                this.getRoot().remove();
            }
            this.callParent.apply(this, arguments);
            return this;
        }, getTimeLeftFromTimestamp: function (timestamp) {
            var now = Math.floor(new Date().getTime() / 1000), diff = timestamp - now;
            return diff.getTime2EndString();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.shop.offer.rotating_item', class_parent = 'west.game.shop.controller', class_object = {
        _class_id: 'Shop offer', _class_path: class_path, init: function () {
            this.callParent.apply(this, arguments);
            this.getModel().setController(this);
        }, render: function () {
            var view = this.getView(), $offer;
            if (this.hasRoot()) {
                $offer = this.getRoot();
                this.update();
            } else {
                $offer = view.render();
                this.setRoot($offer).setEventListeners();
            }
            return $offer;
        }, update: function () {
            var view = this.getView();
            view.update();
            return this;
        }, needsUpdate: function () {
            var model = this.getModel(), item = model.getItem();
            return item.hasCountLimit() || item.hasTimeLimit();
        }, setEventListeners: function () {
            if (!this.hasRoot()) {
                return this;
            }
            this.removeEventListeners();
            var $root = this.getRoot();
            $root.on('click.offer', this._handleShowContentAction.bind(this));
            return this;
        }, removeEventListeners: function () {
            if (!this.hasRoot()) {
                return this;
            }
            this.getRoot().off('.offer');
            return this;
        }, _handleShowContentAction: function (e) {
            var item_id = this.getModel().getItem().getId();
            if (this.hasController('window')) {
                this.getController('window').buyItem(item_id, {track: {source: this.getModel().getType()}});
            }
            return this;
        }, display: function () {
            this.update();
            return this;
        }, hide: function () {
            return this;
        }, remove: function () {
            this.getView().remove();
            return this;
        }, destroy: function () {
            this.removeEventListeners();
            this.removeControllers(['window']);
            this.callParent.apply(this, arguments);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.offers.rotating_items', class_parent = 'west.game.shop.offers.model', class_object = {
        _class_path: class_path,
        data: {
            class_name: 'rotating_items',
            offers: [],
            type: 'fade',
            rotate_blocked: false,
            ticker: null,
            min_rotate_interval: 3000,
            next_rotate_interval: null,
            carousel: null,
            animation: 'horizontal',
            carousel_options: {
                rotate: false,
                paginator_position: 'outside',
                skin: 'rotating_items',
                paginator_skin: 'sales'
            }
        },
        l10n: {},
        parseOffers: function () {
            var factory = this.getController().getFactory(), promoted_items = this.getDataModel().getPromotedItems(), offers;
            offers = promoted_items.sort(function (a, b) {
                return b.getPromotingOrder() - a.getPromotingOrder();
            }).map(function (item) {
                return factory.createOffer(factory.createOfferModel({data: {item: item}}, 'rotating_item'));
            });
            this.setOffers(offers);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.offers.rotating_items', class_parent = 'west.game.shop.offers.controller', class_object = {
            _class_id: 'Hot category offers controller',
            _class_path: class_path
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.item', class_parent = 'west.game.model', class_object = {
        _class_path: class_path, _namespace: class_path, l10n: {
            texts: {
                limited_time: function (time) {
                    return s('В продаже %1', '<span class="value">' + time + '</span>');
                }, limited_count: function (amount) {
                    return s('В продаже ещё только %1 шт.', '<span class="value">' + amount + '</span>');
                }, discount: function (amount) {
                    return s('Сегодня %1% скидки!', '<span class="value">' + amount + '</span>');
                }, 'popular': 'Желанный предмет', 'sold_out': 'Продано', 'valid_for': function (time) {
                    return s('Предложение действительно %1', time);
                }
            }, mouseovers: {
                icons: {
                    limited_time: function (date) {
                        return s('Конец: %1', date);
                    }, discount: function (date) {
                        return s('Скидка заканчивается %1', date);
                    }
                }
            }
        }, init: function (options) {
            if (options && options.data) {
                $.extend(options.data, {item_data: ItemManager.get(options.data.item_id)});
            }
            if (options && options.models) {
                this._setProperties('model', options.models);
                delete options.models;
            }
            this.callParent.apply(this, arguments);
            return this;
        }, parseInitData: function (data) {
            if (data.item_id && 'string' !== typeof data.item_id) {
                data.item_id = data.item_id.toString();
            }
            if (data.limited_count) {
                data.limited_count_flag = true;
            }
            if (data.in_rotating_banner) {
                data.is_promoted = data.in_rotating_banner;
                delete data.in_rotating_banner;
            }
            return data;
        }, updateData: function (new_data) {
            this.setData(this.parseInitData(new_data));
            if (this.hasController()) {
                this.getController().update();
            }
            return this;
        }, getId: function () {
            return this.getData('item_id');
        }, getType: function () {
            return 'item';
        }, getItemData: function () {
            return this.getData('item_data');
        }, setViewUpdate: function (bool) {
            this.setData('needs_update', bool, true);
            return this;
        }, needsViewUpdate: function () {
            return !!this.getData('needs_update');
        }, isSoldOut: function () {
            if (this.hasTimeLimit()) {
                return this.getTimeLimit() < (new ServerDate().getTime() / 1000);
            }
            if (this.hasCountLimit()) {
                return 0 === this.getCountLimit();
            }
            return false;
        }, isForcedHot: function () {
            return !!this.getData('forced_hot');
        }, isRecommended: function () {
            return !!this.getData('isrecommended');
        }, isWeekItem: function () {
            return !!this.getData('isweekitem');
        }, isOneTimer: function () {
            return !!this.getData('isonetimer');
        }, getCurrency: function () {
            return this.getData('currency');
        }, getDiscount: function () {
            return this.getData('reduced_value');
        }, setDiscount: function (new_value) {
            this.setData('reduced_value', new_value);
            return this;
        }, getDiscountTimestamp: function () {
            return this.getData('reduced_time');
        }, setDiscountTimestamp: function (new_value) {
            this.setData('reduced_time', new_value);
            return this;
        }, clearDiscount: function () {
            this.setDiscount(0).setDiscountTimestamp(0);
            return this;
        }, hasDiscount: function () {
            var timestamp = this.getDiscountTimestamp(), value = this.getDiscount();
            if (timestamp) {
                if (timestamp > Math.floor(new ServerDate().getTime() / 1000)) {
                    return true;
                } else {
                    this.clearDiscount();
                }
            }
            return false;
        }, getTimeLimit: function () {
            return this.getData('limited_time');
        }, hasTimeLimit: function () {
            return !!this.getData('limited_time');
        }, getCountLimit: function () {
            return this.getData('limited_count');
        }, hasCountLimit: function () {
            return this.getData('limited_count_flag');
        }, getOfferId: function () {
            return this.getData('promo');
        }, isInOffer: function () {
            return !!this.getOfferId();
        }, getTeaser: function () {
            return this.getData('teaser');
        }, setPromoted: function (bool) {
            this.setData('is_promoted', bool);
            return this;
        }, isPromoted: function () {
            return !!this.getData('is_promoted');
        }, getPromotingOrder: function () {
            return this.getData('rotating_banner_order');
        }, getCategory: function () {
            return this.getData('tab');
        }, getSubcategory: function () {
            return this.getItemData().type;
        }, belongsToSubcategory: function (subcategories) {
            if ('string' === typeof subcategories) {
                subcategories = [subcategories];
            }
            return !!~subcategories.indexOf(this.getSubcategory());
        }, getName: function () {
            return this.getItemData().name;
        }, getLevel: function () {
            return this.getItemData().level || false;
        }, getSetId: function () {
            return this.getItemData().set;
        }, isSetItem: function () {
            return !!this.getSetId();
        }, getSetName: function () {
            var set_data = west.storage.ItemSetManager.get(this.getSetId());
            return set_data ? set_data.name : undefined;
        }, belongsToSet: function (sets) {
            if ('string' === typeof sets) {
                sets = [sets];
            }
            if (this.isSetItem()) {
                return !!~sets.indexOf(this.getSetId()) || new RegExp(sets.join('|'), 'i').test(this.getSetName());
            } else {
                return false;
            }
        }, getBonus: function () {
            return this.getItemData().bonus;
        }, hasBonus: function () {
            return !!this.getBonus();
        }, getProfession: function () {
            return this.getItemData().profession;
        }, bought: function () {
            return this;
        }, getCurrenciesNames: function () {
            var currencies_by_name = this._getProperty('model', 'window').getCurrenciesByName(), currency = this.getCurrency(), currencies = [];
            west.common.forEach(currencies_by_name, function (id, name) {
                if (currency & id) {
                    currencies.push(name);
                }
            });
            return currencies;
        }, getCurrencyById: function (currency_id) {
            if (!this._hasProperty('model', 'window')) {
                return undefined;
            }
            return this._getProperty('model', 'window').getCurrency(currency_id);
        }, bellongsToCurrency: function (currencies) {
            var currencies_by_name = this._getProperty('model', 'window').getCurrenciesByName(), currency = this.getCurrency(), i = currencies.length;
            while (i--) {
                if (currency & currencies_by_name[currencies[i]]) {
                    return true;
                }
            }
            return false;
        }, shouldRushFor: function (name, value) {
            var controller = this.getController(), rush = controller.getSettings('rush'), now = Math.floor(new Date().getTime() / 1000), result = false;
            switch (name) {
                case'limited_count':
                    result = value <= parseInt(rush[name]);
                    break;
                default:
                    result = (value - now) <= parseInt(rush[name]);
                    break;
            }
            return result;
        }, getPriceForCurrency: function (currency_id, no_discount) {
            var now = Math.floor(new ServerDate().getTime() / 1000);
            var currency_name = this.getCurrencyById(currency_id), price = this.getData('price_' + currency_name);
            if (undefined === currency_name) {
                return undefined;
            }
            if (this.hasDiscount()) {
                if (!no_discount) {
                    price = Math.round(price * ((100 - this.getDiscount()) / 100));
                }
            }
            return price;
        }, getUniquePrices: function (no_discount) {
            var currency = this.getCurrency(), item_prices = {}, p_1, p_2, p_4;
            switch (currency) {
                case 0:
                case 3:
                    item_prices = {'1_2': this.getPriceForCurrency(1, no_discount)};
                    break;
                case 5:
                    p_1 = this.getPriceForCurrency(1, no_discount);
                    p_4 = this.getPriceForCurrency(4, no_discount);
                    if (p_1 === p_4) {
                        item_prices = {'1_4': p_1};
                    } else {
                        item_prices = {'1': p_1, '4': p_4};
                    }
                    break;
                case 6:
                    p_2 = this.getPriceForCurrency(2, no_discount);
                    p_4 = this.getPriceForCurrency(4, no_discount);
                    if (p_2 === p_4) {
                        item_prices = {'2_4': p_2};
                    } else {
                        item_prices = {'2': p_2, '4': p_4};
                    }
                    break;
                case 7:
                    p_1 = this.getPriceForCurrency(1, no_discount);
                    p_2 = this.getPriceForCurrency(2, no_discount);
                    p_4 = this.getPriceForCurrency(4, no_discount);
                    if (p_1 === p_2 === p_4) {
                        item_prices = {'1_2_4': p_1};
                    } else if (p_1 === p_2) {
                        item_prices = {'1_2': p_1, '4': p_4};
                    } else if (p_1 === p_4) {
                        item_prices = {'1_4': p_1, '2': p_2};
                    } else if (p_2 === p_4) {
                        item_prices = {'2_4': p_2, '1': p_1};
                    } else {
                        item_prices = {'1': p_1, '2': p_2, '4': p_4};
                    }
                    break;
                default:
                    item_prices[currency] = this.getPriceForCurrency(currency, no_discount);
                    break;
            }
            return item_prices;
        }, addCategoryModel: function (category) {
            var categories = this._getProperty('model', 'categories');
            if (!categories) {
                categories = {};
                this._setProperty('model', 'categories', categories);
            }
            categories[category.getId()] = category;
            return this;
        }, removeCategoryModel: function (category) {
            if ('string' !== typeof category) {
                category = category.getId();
            }
            var models = this._getProperty('model', 'categories') || {};
            delete models[category];
            return this;
        }, addOfferModel: function (offer) {
            var offers = this._getProperty('model', 'offers');
            if (!offers) {
                offers = {};
                this._setProperty('model', 'offers', offers);
            }
            offers[offer.getId()] = offer;
            return this;
        }, removeOfferModel: function (offer) {
            if ('string' !== typeof offer) {
                offer = offer.getId();
            }
            var models = this._getProperty('model', 'offers') || {};
            delete models[offer];
            return this;
        }, getWindowModel: function () {
            return this._getProperty('model', 'window') || {};
        }, soldOut: function () {
            if (this.hasController()) {
                this.getController().remove();
            }
            this.destroy({destroy_model: true});
            return this;
        }, destroy: function (options) {
            options = options || {};
            var category_id, models, offer_id, offers;
            if (options.destroy_model) {
                models = this._getProperty('model', 'categories');
                for (category_id in models) {
                    models[category_id].removeItem(this);
                }
                offers = this._getProperty('model', 'offers');
                for (offer_id in offers) {
                    offers[offer_id].removeItem(this);
                }
                this.getWindowModel().removeItem(this);
                this._removeProperties('model', ['window', 'categories']);
            } else {
                options['destroyData'] = false;
            }
            this.callParent.call(this, options);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.item', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, biuldItemStructure: function () {
            var $el = $('<li class="shop_item"></li>').append($('<div class="frame"></div>'), $('<div class="icons"></div>'), $('<div class="title"></div>'), $('<div class="image"></div>'), $('<div class="descriptions"></div>'), $('<div class="button"></div>'));
            return $el;
        }, getImage: function (no_bg) {
            var model = this.getModel(), item_data = model.getItemData();
            return new tw2widget.Item(item_data).setShowalreadyown(true).getMainDiv().toggleClass('item_nobg', no_bg);
        }, loadImage: function () {
            if (this.image_loaded || !this.hasRoot()) {
                return this;
            }
            this.updateImage();
            this.getRoot().addClass('loaded');
            this.image_loaded = true;
            return this;
        }, updateImage: function () {
            if (this.hasRoot()) {
                var $root = this.getRoot();
                $('.image', $root).empty().append(this.getImage());
            }
            return this;
        }, render: function () {
            var that = this, model = this.getModel(), $item;
            if (this.hasRoot()) {
                this.update();
                return this.getRoot();
            }
            $item = this.biuldItemStructure();
            $('.title', $item).append(model.getName());
            this.addDescription($item).addPrice($item);
            if (model.isForcedHot()) {
                this.addForceHot($item);
            }
            if (model.hasCountLimit()) {
                this.addCountLimit($item);
            }
            if (model.hasTimeLimit()) {
                this.addTimeLimit($item);
            }
            if (model.hasDiscount()) {
                this.addDiscount($item);
            }
            window.setTimeout(function () {
                that.loadImage($item);
                $item.addClass('loaded');
            }, 100);
            model.setViewUpdate($('.description', $item).length > 1);
            return $item;
        }, update: function () {
            var model = this.getModel();
            if (!this.hasRoot()) {
                return this;
            }
            this.updatePrice();
            if (model.hasCountLimit()) {
                this.updateCountLimit();
            } else {
                this.removeCountLimit();
            }
            if (model.hasTimeLimit()) {
                this.updateTimeLimit();
            } else {
                this.removeTimeLimit();
            }
            if (model.hasDiscount()) {
                this.updateDiscount();
            } else {
                this.removeDiscount();
            }
            this.cycleDescriptions();
            return this;
        }, remove: function () {
            if (!this.hasRoot()) {
                return this;
            }
            this.removePrice().clearDescriptions().addSoldOut();
            return this;
        }, createPrice: function (price_obj) {
            return $('<span class="tw-currency curr-' + price_obj.name.join('-') + '"></span><span class="price price_value">' + round_number(price_obj.value, 6) + '</span>');
        }, createIcon: function (class_name, mouseover) {
            var $el = $('<div class="icon ' + class_name + '"></div>');
            if (mouseover) {
                $el.addMousePopup(mouseover);
            }
            return $el;
        }, createDescription: function (class_name, description, mouseover) {
            var $el = $('<div class="description ' + class_name + '">' + description + '</div>');
            if (mouseover) {
                $el.addMousePopup(mouseover);
            }
            return $el;
        }, clearDescriptions: function ($root) {
            $root = $root || this.getRoot();
            $('.description', $root).empty();
            return this;
        }, addDescription: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), teaser = model.getTeaser();
            if (teaser) {
                $('.descriptions', $root).append(this.createDescription('teaser active', teaser));
            }
            $root.addClass('cat_' + model.getCategory());
            return this;
        }, addForceHot: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n();
            $root.addClass('hot');
            $('.descriptions', $root).append(this.createDescription('hot', l10n.texts.popular));
            return this;
        }, addSoldOut: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n();
            $root.addClass('removed');
            $('.descriptions', $root).append(this.createDescription('sold_out active', l10n.texts.sold_out));
        }, addTimeLimit: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n(), timestamp;
            timestamp = model.getTimeLimit();
            $root.addClass('limited_time');
            $('.icons', $root).append(this.createIcon('limited_time', new Date(timestamp * 1000).toDateTimeString()));
            $('.descriptions', $root).append(this.createDescription('limited_time', l10n.texts.limited_time(this.getTimeLeftFromTimestamp(timestamp))));
            return this;
        }, removeTimeLimit: function ($root) {
            $root = $root || this.getRoot();
            $root.removeClass('limited_time');
            $('.limited_time', $root).remove();
            return this;
        }, updateTimeLimit: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), timestamp = model.getTimeLimit();
            $('.icon.limited_time', $root).addMousePopup(new Date(timestamp * 1000).toDateTimeString());
            $('.description.limited_time .value', $root).text(this.getTimeLeftFromTimestamp(timestamp));
            return this;
        }, addCountLimit: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n(), count_limit;
            count_limit = model.getCountLimit();
            $root.addClass('limited_count');
            $('.icons', $root).append(this.createIcon('limited_count', l10n.texts.limited_count(count_limit)));
            $('.descriptions', $root).append(this.createDescription('limited_count', l10n.texts.limited_count(count_limit)));
            return this;
        }, removeCountLimit: function ($root) {
            $root = $root || this.getRoot();
            $root.removeClass('limited_count');
            $('.limited_count', $root).remove();
            return this;
        }, updateCountLimit: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n(), count_limit = model.getCountLimit();
            $('.icon.limited_count', $root).addMousePopup(l10n.texts.limited_count(count_limit));
            $('.description.limited_count .value', $root).text(count_limit);
            return this;
        }, addDiscount: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n(), discount_ratio, timestamp;
            var discount_ratio = model.getDiscount(), timestamp = model.getDiscountTimestamp();
            $root.addClass('discount');
            $('.icons', $root).append(this.createIcon('discount', l10n.mouseovers.icons.discount(new Date(timestamp * 1000).toDateTimeString())));
            $('.descriptions', $root).append(this.createDescription('discount', l10n.texts.discount(discount_ratio)));
            return this;
        }, removeDiscount: function ($root) {
            $root = $root || this.getRoot();
            $root.removeClass('discount');
            $('.discount', $root).remove();
            return this;
        }, updateDiscount: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n(), discount_ratio = model.getDiscount(), timestamp = model.getDiscountTimestamp();
            $('.icon.discount', $root).addMousePopup(l10n.mouseovers.icons.discount(new Date(timestamp * 1000).toDateTimeString()));
            $('.description.discount .value', $root).text(discount_ratio);
            return this;
        }, addPrice: function ($root) {
            $root = $root || this.getRoot();
            var that = this, model = this.getModel(), window_model = model._getProperty('model', 'window'), currencies = window_model.getCurrencies(), sort_function = window_model.getSortCurrenciesFunction(), item_class = [], item_pricing_data = model.getUniquePrices(), currency_names, currency_name, item_pricing = [], prices = [];
            $.each(item_pricing_data, function (currency_id, price_value) {
                currency_names = [];
                if (1 === currency_id.length) {
                    currency_name = currencies[currency_id];
                    currency_names.push(currency_name);
                    item_class.push(currency_name);
                } else {
                    $.each(currency_id.split('_'), function (j, currency_id) {
                        currency_name = currencies[currency_id];
                        currency_names.push(currency_name);
                        item_class.push(currency_name);
                    });
                }
                item_pricing.push({'name': currency_names, value: price_value});
            });
            item_pricing.sort(sort_function);
            $.each(item_pricing, function (i, price_obj) {
                prices.push(that.createPrice(price_obj));
            });
            $('.button', $root).append(prices);
            return this;
        }, updatePrice: function ($root) {
            $root = $root || this.getRoot();
            this.removePrice($root).addPrice();
            return this;
        }, removePrice: function ($root) {
            $root = $root || this.getRoot();
            $('.button', $root).empty();
            return this;
        }, cycleDescriptions: function ($root) {
            $root = $root || this.getRoot();
            var descriptions = $('.description', $root), active_index;
            if (descriptions.length > 1) {
                active_index = descriptions.index(descriptions.filter('.active').removeClass('active')) || 0;
                descriptions.eq(active_index + 1 === descriptions.length ? 0 : active_index + 1).addClass('active');
            } else {
                descriptions.addClass('active');
            }
            return this;
        }, destroy: function () {
            if (this.hasRoot()) {
                this.getRoot().remove();
            }
            this.callParent.apply(this, arguments);
            return this;
        }, getTimeLeftFromTimestamp: function (timestamp, long_desc) {
            var now = Math.floor(new Date().getTime() / 1000), diff = timestamp - now;
            return diff.getTime2EndString(long_desc);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.shop.item', class_parent = 'west.game.shop.controller', class_object = {
        _class_id: 'Shop item', _class_path: class_path, _namespace: 'west.game.shop.item', init: function () {
            this.callParent.apply(this, arguments);
            this.getModel().setController(this);
        }, render: function () {
            var view = this.getView(), $item;
            if (this.hasRoot()) {
                $item = this.getRoot();
                this.update().setEventListeners();
            } else {
                $item = view.render();
                this.setRoot($item).setEventListeners();
            }
            return $item;
        }, reRender: function () {
            if (this.hasRoot()) {
                this.getView().updateImage();
            }
            this.render();
            return this;
        }, update: function () {
            var model = this.getModel(), view = this.getView();
            if (model.isSoldOut()) {
                view.remove();
                model.setViewUpdate(false);
            } else {
                view.update();
            }
            return this;
        }, needsUpdate: function () {
            return this.getModel().needsViewUpdate();
        }, setEventListeners: function () {
            if (!this.hasRoot()) {
                return this;
            }
            this.removeEventListeners();
            var that = this, $root = this.getRoot();
            $root.on('click.item', '.button', this.handleBuyAction.bind(this)).on('click.item', '.image', this.handleBuyAction.bind(this));
            EventHandler.listen('bag_updated_' + this.getModel().getId(), this.reRender, this);
            return this;
        }, removeEventListeners: function () {
            if (!this.hasRoot()) {
                return this;
            }
            this.getRoot().off('.item');
            EventHandler.unlisten('bag_updated_' + this.getModel().getId(), this.reRender, this);
            return this;
        }, handleBuyAction: function (e, options) {
            var item_id, content_model;
            if (this.hasController('window')) {
                item_id = this.getModel().getId();
                content_model = this.getController('content').getModel();
                this.getController('window').buyItem(item_id, $.extend({}, options, {track: content_model.getTrackingData()}));
            }
            return this;
        }, belongsToSubcategory: function (subcategories) {
            return this.getModel().belongsToSubcategory(subcategories);
        }, remove: function () {
            this.removeEventListeners();
            this.getView().remove();
            return this;
        }, destroy: function () {
            this.removeEventListeners();
            this.removeControllers(['window', 'content']);
            this.callParent.apply(this, arguments);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.category', class_parent = 'west.game.model', class_object = {
        _class_path: class_path, data: {name: null, items: [], subcategories: []}, l10n: {}, getId: function () {
            return this.getName();
        }, getName: function () {
            return this.getData('name');
        }, setName: function (new_name) {
            this.setData('name', new_name);
            return this;
        }, getSubcategories: function () {
            return this.getData('subcategories');
        }, setSubcategories: function (new_subcategories) {
            if (!$.isArray(new_subcategories)) {
                return this;
            }
            this.setData('subcategories', new_subcategories, true);
            return this;
        }, addSubcategory: function (new_subcategory) {
            var subcategories = this.getSubcategories();
            this.pushIfUnique(subcategories, new_subcategory);
            return this;
        }, indexSubcategories: function () {
            var items = this.getItems(), i_l = this.getItemsCount(), subcategories = [];
            while (i_l--) {
                this.pushIfUnique(subcategories, items[i_l].getSubcategory());
            }
            this.setSubcategories(subcategories);
            return this;
        }, getItems: function () {
            return this.getData('items');
        }, setItems: function (new_items) {
            if (!$.isArray(new_items)) {
                return this;
            }
            this.setData('items', new_items, true);
            this.indexSubcategories();
            return this;
        }, getItemsCount: function () {
            return this.getItems().length;
        }, addItem: function (new_item) {
            var items = this.getItems();
            this.pushIfUnique(items, new_item);
            this.addSubcategory(new_item.getSubcategory());
            new_item.addCategoryModel(this);
            return this;
        }, removeItem: function (item) {
            var items = this.getItems();
            this.removeFromArray(items, item);
            this.indexSubcategories();
            item.removeCategoryModel(this.getId());
            return this;
        }, clearItems: function () {
            var category_id = this.getId(), items = this.getItems(), i_l = items.length;
            while (i_l--) {
                items[i_l].removeCategoryModel(category_id);
            }
            this.setItems([]);
            return this;
        }, destroy: function () {
            var category_id = this.getId(), items = this.getItems(), i_l = items.length;
            while (i_l--) {
                items[i_l].removeCategoryModel(category_id);
            }
            this.callParent.apply(this, arguments);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.content', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        data: {current_subcategories: [], timer: null, timer_interval: 3000},
        l10n: {},
        parseInitData: function (data) {
            return this.callParent.call(this, data);
        },
        parseData: function () {
            return this;
        },
        setTimer: function (timer) {
            this.setData('timer', timer, true);
        },
        getTimer: function () {
            return this.getData('timer');
        },
        getTimerInterval: function () {
            return this.getData('timer_interval');
        },
        getType: function () {
            return this.getData('type');
        },
        getId: function () {
            return this.getData('id');
        },
        getSubclassName: function () {
            var type = this.getType(), id = this.getId();
            return ('category' === type ? id : type + '.' + id);
        },
        setDataModel: function (new_model) {
            this.setData('data_model', new_model, true);
            return this;
        },
        getDataModel: function () {
            return this.getData('data_model');
        },
        getContentClassName: function () {
            return ' cat_' + this.getDataModel().getName();
        },
        getTrackingData: function () {
            var data = {'source': 'cat_' + this.getDataModel().getName()};
            if (this.getCurrentSubcategories().length) {
                data.subcategories = this.getCurrentSubcategories();
            }
            return data;
        },
        getSubcategories: function () {
            return this.getDataModel().getSubcategories();
        },
        setCurrentSubcategories: function (new_subcategories) {
            this.setData('current_subcategories', new_subcategories, true);
            return this;
        },
        getCurrentSubcategories: function () {
            return this.getData('current_subcategories');
        },
        clearCurrentSubcategories: function () {
            this.setCurrentSubcategories([]);
            return this;
        },
        toggleCurrentSubcategory: function (subcategory_id) {
            var subcategories = this.getCurrentSubcategories();
            this.toggleInArray(subcategories, subcategory_id);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.content', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, init: function () {
            this.callParent.apply(this, arguments);
            this.addStructure();
            return this;
        }, addStructure: function () {
            if (!this.hasRoot()) {
                return this;
            }
            var $root = this.getRoot(), model = this.getModel(), content_class = model.getContentClassName();
            $root.empty().append($('<div class="category_deco' + (content_class ? content_class : '') + '"></div>').append($('<div class="subcategories_wrapper"></div>'), $('<div class="items_wrapper"></div>')));
            return this;
        }, getSubcategories: function () {
            return $('.subcategories_wrapper', this.getRoot());
        }, getItems: function () {
            return $('.items_wrapper', this.getRoot());
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.content', class_parent = 'west.game.shop.controller', class_object = {
            _class_id: 'shop_content', _namespace: class_path, _class_path: class_path, init: function () {
                this.callParent.apply(this, arguments);
                this._initSubcontrollers();
                this.render().setTimer();
            }, _initSubcontrollers: function () {
                this._initSubcategories()._initItems();
                return this;
            }, _initSubcategories: function () {
                var model = this.getModel(), view = this.getView(), class_name = model.getSubclassName(), window_controller = this.getController('window');
                this.setController('subcategories', this._getOrInitClass(this._getClass('controller', 'west.game.shop.subcategories.' + class_name, 'west.game.shop.subcategories'), {
                    controllers: {
                        window: window_controller,
                        content: this
                    }, root: view.getSubcategories(), data: {data_model: model.getDataModel()}
                }));
                return this;
            }, _initItems: function () {
                var model = this.getModel(), view = this.getView(), class_name = model.getSubclassName(), window_controller = this.getController('window');
                this.setController('items', this._getOrInitClass(this._getClass('controller', 'west.game.shop.items.' + class_name, 'west.game.shop.items'), {
                    controllers: {
                        window: window_controller,
                        content: this
                    }, root: view.getItems(), data: {data_model: model.getDataModel(), class_name: class_name}
                }));
                return this;
            }, render: function () {
                return this;
            }, reRender: function () {
                this.getController('subcategories').reRender();
                this.getController('items').reRender();
                return this;
            }, toggleSubcategory: function (subcategory_id) {
                var model = this.getModel(), subcategories_length = model.getSubcategories().length, current_subcategories;
                model.toggleCurrentSubcategory(subcategory_id);
                current_subcategories = model.getCurrentSubcategories();
                if (current_subcategories.length === subcategories_length) {
                    model.clearCurrentSubcategories();
                    current_subcategories = [];
                }
                this.getController('subcategories').highlight(current_subcategories);
                this.getController('items').showSubcategories(current_subcategories);
                return this;
            }, setTimer: function () {
                var model = this.getModel(), interval = model.getTimerInterval(), timer = window.setInterval(this.handleTimer.bind(this), interval);
                model.setTimer(timer);
                return this;
            }, handleTimer: function () {
                var subcategories = this.getController('subcategories'), items = this.getController('items');
                if (subcategories && 'function' === typeof subcategories.update) {
                    subcategories.update();
                }
                if (items && 'function' === typeof items.update) {
                    items.update();
                }
            }, destroy: function () {
                window.clearInterval(this.getModel().getTimer());
                if (this.hasRoot()) {
                    this.getRoot().empty();
                }
                this.destroyControllers({'subcategories': null, 'items': null});
                this.removeController('window');
                return this.callParent.apply(this, arguments);
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.items', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        data: {
            max_items: null,
            max_items_per_row: 4,
            max_rows_per_page: 2,
            mouse_wheel_delay: 200,
            mouse_wheel_timestamp: null,
            paginator: null,
            items: [],
            update_queue: []
        },
        l10n: {},
        parseData: function () {
            var class_name = this.getSubclassName(), items_models = this.getData('data_model').getItems(), i_m_l = items_models.length, i = 0, items = [], item;
            for (i; i < i_m_l; i++) {
                item = items_models[i];
                items.push(this.createItem(item, class_name));
            }
            this.setItems(items);
            return this;
        },
        getSubclassName: function () {
            return this.getData('class_name');
        },
        createItem: function (model) {
            var namespace = 'west.game.shop.item', class_name = this.getSubclassName(), window_controller = this.getController().getController('window'), content_controller = this.getController().getController('content'), Item = this._getClass('controller', namespace + (class_name ? '.' + class_name : ''), namespace), item;
            if (Item) {
                item = new Item({model: model, controllers: {window: window_controller, content: content_controller}});
            }
            return item;
        },
        getMaxItemsPerRow: function () {
            return this.getData('max_items_per_row');
        },
        getMaxRows: function () {
            return this.getData('max_rows_per_page');
        },
        getMaxItems: function () {
            return this.getData('max_items');
        },
        getMouseWheelDelay: function () {
            return this.getData('mouse_wheel_delay');
        },
        setPaginator: function (new_paginator) {
            this.setData('paginator', new_paginator);
        },
        getPaginator: function () {
            return this.getData('paginator');
        },
        getWheelDelay: function () {
            return this.getData('mouse_wheel_delay');
        },
        setNextMouseWheel: function (new_timestamp) {
            return this.setData('mouse_wheel_timestamp', new_timestamp);
        },
        getNextMouseWheel: function () {
            return this.getData('mouse_wheel_timestamp');
        },
        setItems: function (items) {
            this.setData('items', items, true);
            return this;
        },
        getItems: function () {
            return this.getData('items');
        },
        getUpdate: function () {
            return this.getData('update_queue');
        },
        addToUpdate: function (item) {
            var update_queue = this.getUpdate();
            this.pushIfUnique(update_queue, item);
        },
        removeFromUpdate: function (item) {
            var update_queue = this.getUpdate();
            this.removeFromArray(update_queue, item);
            return this;
        },
        clearUpdate: function () {
            this.setData('update_queue', [], true);
            return this;
        },
        destroyItems: function () {
            var items = this.getItems(), i = items.length;
            while (i--) {
                items[i].destroy();
            }
            return this;
        },
        destroy: function () {
            this.destroyItems();
            this.callParent.apply(this, arguments);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.items', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, init: function () {
            this.callParent.apply(this, arguments);
            this.addStructure();
            return this;
        }, addStructure: function () {
            if (!this.hasRoot()) {
                return this;
            }
            var $root = this.getRoot();
            $root.append($('<div class="item_wrapper"><ul class="shop_items"></ul></div>'), $('<div class="paginator"></div>'));
            return this;
        }, addPaginator: function ($paginator) {
            this.removePaginator();
            $paginator = $paginator || this.getModel().getPaginator().getMainDiv();
            $('.paginator', this.getRoot()).append($paginator, $('<div class="page_switch prev left"></div>'), $('<div class="page_switch next right"></div>'));
            return this;
        }, removePaginator: function () {
            this.getModel().getPaginator().getMainDiv().detach();
            $('.paginator', this.getRoot()).empty();
            return this;
        }, getItems: function () {
            return $('.shop_items', this.getRoot());
        }, addItems: function ($items) {
            this.getItems().empty().append($items);
            return this;
        }, splitIntoPages: function (items) {
            var controller = this.getController(), model = this.getModel(), count = items.length, max_per_row = model.getMaxItemsPerRow(), max_rows = model.getMaxRows(), max_per_page = max_per_row * max_rows, pages_count = Math.ceil(count / max_per_page), page, result = [];
            if (0 === count) {
                controller.setPaginator(1);
                return [];
            }
            for (var i = 0; i < pages_count; i++) {
                page = items.slice(max_per_page * i, max_per_page * (i + 1));
                if (page[max_per_row]) {
                    page[max_per_row].addClass('clear');
                }
                result.push($('<li class="page_wrapper"></li>').append($('<ul></ul>').append(page)));
            }
            controller.setPaginator(pages_count);
            this.setItemsContainerSize(pages_count);
            return result;
        }, setItemsContainerSize: function (pages_count, options) {
            options = options || {};
            var $root = this.getRoot(), $items_container = this.getItems(), item_element_width, items_list_width;
            if (0 === pages_count) {
                return this;
            }
            item_element_width = $('.item_wrapper', $root).outerWidth(), items_list_width = item_element_width * pages_count;
            $items_container.css({width: items_list_width});
            return this;
        }, showPage: function (page_no, page_max, direction) {
            var root = this.getRoot(), $items = $('.shop_items', root), $page_switch = $('.page_switch', root), items_wrapper_width = $items.parent().width(), translation = (page_no - 1) * items_wrapper_width;
            $items.css({'margin-left': -translation});
            $(root).addClass('scroll_animation').delay(300).queue(function () {
                $(this).removeClass('scroll_animation').dequeue();
            });
            $page_switch.filter('.' + direction).addClass('active').delay(300).queue(function () {
                $(this).removeClass('active').dequeue();
            });
            $page_switch.filter('.prev').toggleClass('inactive', 1 === page_no);
            $page_switch.filter('.next').toggleClass('inactive', page_max === page_no);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.items', class_parent = 'west.game.shop.controller', class_object = {
            _class_id: 'Shop items_controller',
            _namespace: class_path,
            _class_path: class_path,
            init: function (options) {
                this.callParent.apply(this, arguments);
                var model = this.getModel();
                var paginator = new tw2widget.gui.bulletPager(1, 1, this.getView().showPage, this.getView(), {
                    numbers: true,
                    skin: 'numbers_small'
                });
                model.setPaginator(paginator);
                this.setEventListeners().render();
                return this;
            },
            update: function () {
                var queue = this.getModel().getUpdate(), q_l = queue.length, model = this.getModel();
                while (q_l--) {
                    queue[q_l].update();
                    if (!queue[q_l].needsUpdate()) {
                        model.removeFromUpdate(queue[q_l]);
                    }
                }
                return this;
            },
            setInitEventListeners: function () {
            },
            removeInitEventListeners: function () {
            },
            setEventListeners: function () {
                this.removeEventListeners();
                var $root = this.getRoot(), model = this.getModel(), view = this.getView();
                $root.on('mousewheel.shop', this.handleMouseWheel.bind(this)).on('click.shop', '.page_switch', this.switchPageByButton.bind(this));
                model.getPaginator().getMainDiv().on('bPager:render', function (e, options) {
                    if (options.visible) {
                        view.addPaginator();
                    } else {
                        view.removePaginator();
                    }
                });
                return this;
            },
            removeEventListeners: function () {
                this.getRoot().off('.shop');
                this.getModel().getPaginator().getMainDiv().off('bPager:render');
                return this;
            },
            handleMouseWheel: function (e, delta) {
                e.preventDefault();
                var model = this.getModel(), wheel_delay = model.getWheelDelay(), next_mousewheel = model.getNextMouseWheel(), date_now = new Date().getTime(), direction = delta > 0 ? 'prev' : 'next';
                if (date_now > next_mousewheel) {
                    model.setNextMouseWheel(date_now + wheel_delay);
                    this.setPage(direction);
                }
                return false;
            },
            render: function () {
                var model = this.getModel(), view = this.getView(), items = model.getItems(), $items = [], max_items = model.getMaxItems(), count_limit = (max_items && max_items <= items.length ? max_items : items.length);
                var i = 0, item;
                for (i; i < count_limit; i++) {
                    item = items[i];
                    $items.push(item.render().removeClass('clear'));
                    if (item.needsUpdate()) {
                        model.addToUpdate(item);
                    }
                }
                view.addItems(view.splitIntoPages($items));
                return this;
            },
            reRender: function () {
                this.getModel().destroyItems().clearUpdate().parseData();
                this.render();
                return this;
            },
            setPage: function (page) {
                if ("number" === typeof(page)) {
                    this.showPageByNumber(page);
                } else {
                    this.showPageByDirection(page);
                }
                return this;
            },
            switchPageByButton: function (e) {
                this.showPageByDirection($(e.currentTarget).hasClass('next') ? 'next' : 'prev');
                return this;
            },
            showPageByDirection: function (direction) {
                var paginator = this.getModel().getPaginator();
                if ('next' === direction) {
                    paginator.next();
                } else {
                    paginator.prev();
                }
                return this;
            },
            showPageByNumber: function (page_no) {
                var paginator = this.getModel().getPaginator();
                if (page_no > paginator.setMax()) {
                    return this;
                }
                paginator.setCurrent(page_no);
                return this;
            },
            setPaginator: function (pages_count, stay_on_page) {
                var paginator = this.getModel().getPaginator(), current_page = 1;
                if (true === stay_on_page) {
                    current_page = paginator.getCurrent() <= pages_count ? paginator.getCurrent() : 1;
                }
                paginator.update(current_page, pages_count);
                return this;
            },
            showSubcategories: function (subcategories) {
                if (!$.isArray(subcategories) || !subcategories.length) {
                    return this.render();
                }
                var model = this.getModel(), view = this.getView(), items = model.getItems(), i = 0, i_l = items.length, $items = [], item;
                for (i; i < i_l; i++) {
                    item = items[i];
                    if (item.belongsToSubcategory(subcategories)) {
                        $items.push(item.render().removeClass('clear'));
                    }
                }
                view.addItems(view.splitIntoPages($items));
                return this;
            },
            destroy: function () {
                this.removeControllers(['window', 'content']);
                return this.callParent.apply(this, arguments);
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.tabs', class_parent = 'west.game.model', class_object = {
        _class_path: class_path, data: {highlights: ''}, parseData: function () {
            var l10n = this.getL10n();
            l10n.mouseovers = l10n.mouseovers || {};
            l10n.mouseovers.categories = this.getDataModel().getL10n('mouseovers').categories;
            return this;
        }, getDataModel: function () {
            return this.getData('data_model');
        }, setCategories: function (new_categories) {
            this.setData('categories', new_categories, true);
            return this;
        }, getCategoriesIds: function () {
            return this.getDataModel().getCategoriesIds();
        }, getTabsOrder: function () {
            return this.getDataModel().getTabsOrder();
        }, getTabsIds: function () {
            var categories = this.getCategoriesIds().slice(0), tabsOrder = this.getTabsOrder(), tabs_ids = [];
            tabsOrder.forEach(function (id) {
                var i = categories.indexOf(id);
                if (!!~i) {
                    tabs_ids.push(categories[i]);
                    categories.splice(i, 1);
                }
            });
            if (categories.length) {
                tabs_ids = tabs_ids.concat(categories);
            }
            return tabs_ids;
        }, setHighlights: function (new_highlights) {
            this.setData('highlights', new_highlights, true);
            return this;
        }, getHighlights: function () {
            return this.getData('highlights');
        }, setTabOrder: function (new_order) {
            this.setData('tab_order', new_order, true);
            return this;
        }, getTabOrder: function () {
            return this.getData('tab_order');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.tabs', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, createElement: function (category_id) {
            var model = this.getModel(), l10n = model.getL10n('mouseovers'), $tab;
            $tab = $('<li class="shop_category cat_' + category_id + '" data-category_id="' + category_id + '"><div class="icon"></div><div class="overlay"></div></li>').addMousePopup(l10n.categories[category_id]);
            return $tab;
        }, render: function (categories) {
            if ('string' === typeof categories) {
                categories = [categories];
            }
            this.removeCategories().addCategories(categories);
            return this;
        }, removeCategories: function () {
            var $root = this.getRoot();
            $root.empty();
            return this;
        }, addCategories: function (categories) {
            var that = this, $root = this.getRoot(), $categories = [];
            $.each(categories, function (i, category) {
                $categories.push(that.createElement(category));
            });
            $root.append($categories);
            return this;
        }, removeCategory: function (category_id) {
            var $root = this.getRoot();
            $('.cat_' + category_id, $root).remove();
            return this;
        }, addCategory: function (category_id) {
            var $root = this.getRoot(), $category;
            if ($root.children('.cat_' + category_id)[0]) {
                return this;
            }
            $category = this.createElement(category_id);
            $root.append($category);
            return this;
        }, highlight: function (categories) {
            if ('string' === typeof categories) {
                categories = [categories];
            }
            this.removeHighlights().addHighlights(categories);
            return this;
        }, removeHighlights: function () {
            var root = this.getRoot();
            $('.active', root).removeClass('active');
            return this;
        }, addHighlights: function (categories) {
            var $root = this.getRoot(), categories_classes = categories.join(', .cat_');
            $('.cat_' + categories_classes, $root).addClass('active');
            return this;
        }, removeHighlight: function (category_id) {
            var $root = this.getRoot();
            $('.cat_' + category_id, $root).removeClass('active');
            return this;
        }, addHighlight: function (category_id) {
            var $root = this.getRoot();
            $('.cat_' + category_id, $root).addClass('active');
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.tabs', class_parent = 'west.game.shop.controller', class_object = {
            _class_id: 'shop_tabs', _namespace: class_path, _class_path: class_path, render: function () {
                if (!this.hasRoot()) {
                    return this;
                }
                var model = this.getModel(), view = this.getView();
                this.setEventListeners();
                view.render(model.getTabsIds()).highlight(model.getHighlights());
                return this;
            }, reRender: function () {
                return this.render();
            }, highlight: function (categories) {
                var model = this.getModel(), view = this.getView();
                if (false === categories) {
                    view.removeHighlights();
                    return this;
                } else if (!categories) {
                    categories = model.getHighlights();
                } else {
                    model.setHighlights(categories);
                }
                view.highlight(categories);
                return this;
            }, handleCategoryChange: function (el) {
                var window_controller = this.getController('window'), $el = $(el), category_id = $el.data('category_id');
                window_controller.showCategory(category_id);
                return this;
            }, setEventListeners: function () {
                if (!this.hasRoot()) {
                    return this;
                }
                this.removeEventListeners();
                var that = this, $root = this.getRoot();
                $root.on('click.category', '.shop_category', function () {
                    that.handleCategoryChange.call(that, this);
                });
                return this;
            }, removeEventListeners: function () {
                if (this.hasRoot()) {
                    this.getRoot().off('.category');
                }
                return this;
            }, stopRender: function () {
                if (this.hasRoot()) {
                    this.getRoot().empty();
                    this.removeEventListeners().clearRoot();
                }
                return this;
            }, destroy: function () {
                this.removeEventListeners();
                this.removeController('window');
                this.callParent.apply(this, arguments);
                return this;
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.search', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        data: {
            'open': false,
            'live_search': true,
            'live_search_timeout_id': null,
            'items': [],
            'search_field': null,
            'search_tags': {},
            'quote_marks': '"'
        },
        l10n: {mouseovers: {open: 'Поиск предметов', close: 'Закрыть закладку поиска'}},
        setOpen: function (bool) {
            this.setData('open', bool, true);
            return this;
        },
        isOpen: function () {
            return this.getData('open');
        },
        hasLiveSearch: function () {
            return this.getData('live_search');
        },
        setLiveSearchTimeout: function (timeout_id) {
            this.setData('live_search_timeout_id', timeout_id, true);
            return this;
        },
        getLiveSearchTimeout: function () {
            return this.getData('live_search_timeout_id');
        },
        hasLiveSearchTimeout: function () {
            return !!this.getLiveSearchTimeout();
        },
        setSearchField: function (new_field) {
            this.setData('search_field', new_field, true);
            return this;
        },
        getSearchField: function () {
            return this.getData('search_field');
        },
        getQuoteMarks: function () {
            return this.getData('quote_marks');
        },
        setSearchQuery: function (search_query) {
            this.setData('search_query', search_query, true);
            return this;
        },
        getSearchQuery: function () {
            return this.getData('search_query');
        },
        setSearchTags: function (new_tags) {
            this.setData('search_tags', new_tags, true);
            return this;
        },
        getSearchTags: function () {
            return this.getData('search_tags');
        },
        setSearchString: function (new_string) {
            this.setData('search_string', new_string, true);
            return this;
        },
        getSearchString: function () {
            return this.getData('search_string');
        },
        getDataModel: function () {
            return this.getData('data_model');
        },
        getAllItems: function (items_ids) {
            var items = this.getDataModel().getItems(items_ids), ret, id;
            if ($.isPlainObject(items)) {
                ret = [];
                for (id in items) {
                    if (items.hasOwnProperty(id)) {
                        ret.push(items[id]);
                    }
                }
            } else {
                ret = items;
            }
            return ret;
        },
        setItems: function (items) {
            this.setData('items', items, true);
            return this;
        },
        getItems: function () {
            return this.getData('items');
        },
        clearItems: function () {
            this.setItems([]);
            return this;
        },
        getSubcategories: function () {
            return [];
        },
        destroy: function () {
            this.clearItems();
            this.callParent.apply(this, arguments);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.search', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, addStructure: function () {
            if (!this.hasRoot()) {
                return this;
            }
            var $root = this.getRoot().empty();
            $root.append($('<div class="shop_search"></div>').append($('<div class="search_field"></div>')), $('<div class="search_curtain"></div>'));
            return this;
        }, getSearchWrapper: function () {
            return $('.shop_search', this.getRoot());
        }, getSearchButton: function () {
            return $('.search_button', this.getRoot());
        }, getSearchField: function () {
            return $('.search_field', this.getRoot());
        }, render: function () {
            var $root = this.getRoot();
            this.addStructure().addSearchButton().addSearchField();
        }, toggle: function (bool) {
            var l10n = this.getModel().getL10n('mouseovers');
            this.getRoot().toggleClass('expand', bool);
            this.getSearchButton().addMousePopup(l10n[bool ? 'close' : 'open']);
            return this;
        }, hide: function () {
            this.toggle(false);
            return this;
        }, show: function () {
            this.toggle(true);
            return this;
        }, addSearchButton: function () {
            var controller = this.getController();
            this.getSearchWrapper().append($('<div class="search_button"></div>'), $('<div class="search_close_icon"></div>'));
            return this;
        }, addSearchField: function () {
            var controller = this.getController(), model = this.getModel(), search_field = new west.gui.Textfield().setWidth(150).setPlaceholder('Search').addListener(controller.search, controller);
            if (model.hasLiveSearch()) {
                search_field.addKeyUpListener(controller.keyUp, controller);
            }
            model.setSearchField(search_field);
            this.getSearchField().append(search_field.getMainDiv());
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.search', class_parent = 'west.game.shop.controller', class_object = {
            _class_id: 'search_input',
            _namespace: class_path,
            _class_path: class_path,
            _window_class: 'has_search_bar',
            _getWindowClass: function () {
                return this._window_class;
            },
            addEventListeners: function () {
                this.removeEventListeners();
                this.getRoot().on('click.search', '.search_button', this.handleSearchButton.bind(this)).on('click.search', '.search_curtain', this.handleSearchButton.bind(this));
                return this;
            },
            removeEventListeners: function () {
                this.getRoot().off('.search');
                return this;
            },
            hide: function () {
                this.getView().hide();
                this.getController('window').getView().removeWindowClass(this._getWindowClass());
                this.getController('window').getController('tabs').highlight();
                this.getModel().setOpen(false);
                this.getModel().getSearchField().setValue('');
                return this;
            },
            show: function (focus) {
                this.getView().show();
                this.getController('window').getView().addWindowClass(this._getWindowClass());
                this.getController('window').getController('tabs').highlight(false);
                this.getModel().setOpen(true);
                if (undefined === focus || focus) {
                    this.getModel().getSearchField().focus();
                }
                return this;
            },
            toggle: function () {
                if (this.getModel().isOpen()) {
                    this.hide();
                    this.getController('window').showCategory();
                } else {
                    this.show();
                }
                return this;
            },
            render: function () {
                if (!this.hasRoot()) {
                    return this;
                }
                this.addEventListeners();
                this.getView().render();
                return this;
            },
            handleSearchButton: function () {
                this.toggle();
                return false;
            },
            keyUp: function (e) {
                var model = this.getModel();
                if (model.hasLiveSearchTimeout()) {
                    clearTimeout(model.getLiveSearchTimeout());
                }
                model.setLiveSearchTimeout(setTimeout(this.search.bind(this), 250));
            },
            search: function (search_query) {
                var model = this.getModel(), search_field = model.getSearchField();
                this.show();
                if (search_query || search_field.getValue()) {
                    search_query = search_query || search_field.getValue();
                    if (search_query !== search_field.getValue()) {
                        search_field.setValue(search_query);
                    }
                    model.setSearchQuery(search_query);
                    model.setSearchString(search_query);
                    this.parseQuery(search_query);
                    var items = this.simpleSearch(this.detailedSearch(this.exclude()));
                    model.setItems(items);
                } else {
                    model.clearItems();
                }
                this.getController('window').showSearch();
                return this;
            },
            getItemsByQuery: function (search_query) {
                this.show(false);
                this.getModel().getSearchField().setValue(search_query);
                var query = this.parseQuery(search_query, true);
                return this.simpleSearch(this.detailedSearch(this.exclude(null, query[0]), query[0]), query[1]);
            },
            parseQuery: function (search_query, silent) {
                var model = this.getModel();
                search_query = search_query || model.getSearchString();
                var
                    quote = this.getModel().getQuoteMarks(), regex = new RegExp('(\\w+)\:\\s?((?:(?:[' + quote + '][^' + quote + ']+[' + quote + '])|\\w+)(?:\\s?\\,\\s?(?:(?:[' + quote + '][^' + quote + ']+[' + quote + '])|\\w+))*)', 'gi'), regex_fix = new RegExp('[' + quote + ']([^' + quote + ']+)[' + quote + ']|(\\w+)', 'ig'), regex_result, options = {}, leftover = search_query;
                while ((regex_result = regex.exec(search_query)) !== null) {
                    options[regex_result[1]] = regex_result[2].match(regex_fix);
                    leftover = leftover.replace(regex_result[0], '');
                }
                leftover.replace(/^\s+|\s+$/g, '');
                if (!silent) {
                    model.setSearchTags(options).setSearchString(leftover);
                }
                return [options, leftover];
            },
            simpleSearch: function (items, search_query) {
                var model = this.getModel();
                items = items || model.getAllItems();
                search_query = search_query || model.getSearchString() || '';
                var regex = new RegExp(search_query, 'i'), check = function (item) {
                    return regex.test(item.getName()) || regex.test(item.getSetName()) || regex.test(item.getLevel()) || regex.test(item.getProfession()) || (item.hasBonus() && Bag.searchAttrib(item.getBonus(), regex));
                }, i = 0, i_l = items.length, result = [];
                if (search_query.length) {
                    $.each(items, function (i, item) {
                        if (check(item)) {
                            result.push(item);
                        }
                    });
                } else {
                    result = items;
                }
                return result;
            },
            detailedSearch: function (items, options) {
                var model = this.getModel();
                options = options || model.getSearchTags() || {};
                items = items || model.getAllItems(options.id);
                delete options.id;
                var result = [], i = 0, i_l = items.length, item;
                if ($.isEmptyObject(options)) {
                    result = items;
                } else {
                    $.each(items, function (i, item) {
                        if (options.currency && item.bellongsToCurrency(options.currency)) {
                            result.push(item);
                            return true;
                        }
                        if (options.subcategory && item.belongsToSubcategory(options.subcategory)) {
                            result.push(item);
                            return true;
                        }
                        if (options.set && item.belongsToSet(options.set)) {
                            result.push(item);
                            return true;
                        }
                        if (options.level && item.getLevel() && !!~options.level.indexOf(item.getLevel().toString())) {
                            result.push(item);
                            return true;
                        }
                    });
                }
                return result;
            },
            exclude: function (items, options) {
                var model = this.getModel();
                options = options || model.getSearchTags() || {};
                items = items || model.getAllItems(options.id);
                delete options.id;
                var result = [];
                $.each(items, function (i, item) {
                    if ('longtimer' !== item.getType()) {
                        result.push(item);
                    }
                });
                return result;
            },
            stopRender: function () {
                if (this.hasRoot()) {
                    this.getRoot().empty();
                    this.removeEventListeners().clearRoot();
                }
                return this;
            },
            destroy: function () {
                this.removeEventListeners();
                this.removeController('window');
                this.callParent.apply(this, arguments);
                return this;
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.subcategories', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        data: {},
        l10n: {},
        getSubcategories: function () {
            return this.getData('data_model').getSubcategories();
        },
        getSubcategoryName: function (subcategory_id) {
            return Inventory.categoryDesc[subcategory_id] || subcategory_id;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.subcategories', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, _namespace: 'west.game.shop.subcategories', init: function () {
            this.callParent.apply(this, arguments);
            this.addStructure();
        }, addStructure: function () {
            if (!this.hasRoot()) {
                return this;
            }
            var $root = this.getRoot();
            $root.empty().append($('<ul class="subcategories"></ul>'));
            return this;
        }, getSubcategories: function () {
            return $('.subcategories', this.getRoot());
        }, render: function (subcategories) {
            var that = this, $subcategories = [], $subcategories_el = this.getSubcategories();
            if (!$subcategories_el.length) {
                this.addStructure();
                $subcategories_el = this.getSubcategories();
            }
            $.each(subcategories, function (i, subcategory_id) {
                $subcategories.push(that.createSubcategory(subcategory_id));
            });
            $subcategories_el.empty().append($subcategories);
            return this;
        }, createSubcategory: function (subcategory_id) {
            var name = this.getModel().getSubcategoryName(subcategory_id), $el = $('<li class="subcategory subcategory_' + subcategory_id + '" data-subcategory_id="' + subcategory_id + '">' + name + '</li>');
            return $el;
        }, highlight: function (subcategories) {
            if ('string' === typeof subcategories) {
                subcategories = [subcategories];
            }
            this.removeHighlights().addHighlights(subcategories);
            return this;
        }, removeHighlights: function () {
            var root = this.getRoot();
            $('.active', root).removeClass('active');
            return this;
        }, addHighlights: function (categories) {
            var $root = this.getRoot(), categories_classes = categories.join(', .subcategory_');
            $('.subcategory_' + categories_classes, $root).addClass('active');
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.subcategories', class_parent = 'west.game.shop.controller', class_object = {
            _class_id: 'shop_subcategories', _namespace: class_path, _class_path: class_path, init: function () {
                this.callParent.apply(this, arguments);
                this.setEventListeners();
                this.render();
                return this;
            }, render: function () {
                var subcategories = this.getModel().getSubcategories() || [], view = this.getView();
                if (subcategories.length && subcategories.length > 1) {
                    view.render(subcategories);
                }
                return this;
            }, reRender: function () {
                return this.render();
            }, handleSubcategoryToggle: function (el) {
                var content_controller = this.getController('content'), $el = $(el), subcategory_id = $el.data('subcategory_id');
                content_controller.toggleSubcategory(subcategory_id);
                return this;
            }, highlight: function (subcategories) {
                this.getView().highlight(subcategories);
                return this;
            }, setEventListeners: function () {
                if (!this.hasRoot()) {
                    return this;
                }
                this.removeEventListeners();
                var that = this, $root = this.getRoot();
                $root.on('click.subcategories', '.subcategory', function () {
                    that.handleSubcategoryToggle.call(that, this);
                });
                return this;
            }, removeEventListeners: function () {
                this.getRoot().off('.subcategories');
            }, destroy: function () {
                this.removeEventListeners();
                this.removeControllers(['window', 'content']);
                this.callParent.apply(this, arguments);
                return this;
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.footer', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        l10n: {
            buttons: {'buy_gold': 'Покупка золотых самородков', 'sell': 'Продать'},
            popups: {
                sell: {
                    mouseovers: {'price': 'Продажа', 'more': 'Выше', 'less': 'Ниже', 'total': 'Сумма'},
                    message: {'single': 'Точно хочешь продать?', 'multiple': 'Сколько ты хочешь продать?'},
                    'max': 'макс:'
                }
            },
            mouseovers: {
                buttons: {
                    'sell': 'Открой багаж, чтобы продать предметы',
                    'buy_gold': '<b>' + s('Раздобудь больше золотых самородков. %1 Благодаря им, ты можешь получить различные бонусы в игре, например, купить предметы в магазине Ю.П., активировать премиум опции и многое другое.', '</b><br/>')
                }
            }
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.footer', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, init: function () {
            this.callParent.apply(this, arguments);
            this.addStructure();
            return this;
        }, addStructure: function () {
            if (!this.hasRoot()) {
                return this;
            }
            var $root = this.getRoot();
            if ($('.sell_button', $root).length) {
                return this;
            }
            $root.append($('<div class="footer_offer"></div>'), $('<div class="sell_button"></div>'));
            return this;
        }, getSellButton: function () {
            return $('.sell_button', this.getRoot());
        }, getOffers: function () {
            return $('.footer_offer', this.getRoot());
        }, render: function () {
            this.addSellButton();
            return this;
        }, addSellButton: function () {
            var l10n = this.getModel().getL10n(), controller = this.getController();
            this.getSellButton().append(new west.gui.Button(l10n.buttons.sell, controller.handleSellButton, controller).addClass('sell_items').getMainDiv()).addMousePopup(l10n.mouseovers.buttons.sell_us);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.footer', class_parent = 'west.game.shop.controller', class_object = {
            _class_id: 'shop_footer', _namespace: class_path, _class_path: class_path, init: function () {
                this.callParent.apply(this, arguments);
                this._initOffers();
                return this;
            }, _initOffers: function () {
                var view = this.getView(), class_name = 'footer', Offers = this._getClass('controller', 'west.game.shop.offers.' + class_name, 'west.game.shop.offers'), window_controller = this.getController('window');
                if (!this.hasController('offers')) {
                    this.setController('offers', new Offers({
                        controllers: {window: window_controller, content: this},
                        models: {window: window_controller.getModel()},
                        data: {class_name: class_name, type: 'Bottom'}
                    }));
                }
                return this;
            }, render: function () {
                if (!this.hasRoot()) {
                    return this;
                }
                this.getView().render();
                if (this.hasController('offers')) {
                    this.getController('offers').reRender();
                }
                return this;
            }, reRender: function () {
                if (this.hasController('offers')) {
                    this.getController('offers').reRender();
                }
                return this;
            }, setRoot: function () {
                this.callParent.apply(this, arguments);
                var view = this.getView();
                view.addStructure();
                this.getController('offers').setRoot(view.getOffers());
                return this;
            }, handleSellButton: function () {
                this.getController('window').openSellInventory();
                return false;
            }, stopRender: function () {
                if (this.hasRoot()) {
                    this.getController('offers').stopRender();
                    this.getRoot().empty();
                    this.clearRoot();
                }
                return this;
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.offer.veteran', class_parent = 'west.game.shop.offer.model', class_object = {
        _class_path: class_path,
        data: {
            id: 'veteran',
            name: 'veteran',
            description: "КТО ХРАБРО ВРАГА БЬЁТ,<br />О ТОМ СЛАВА НЕ УМРЁТ!",
            start: null,
            end: null,
            search_query: null,
            show_category: 'veteran',
            items: [],
            has_items_defined: false,
            content_background: "veteran/background.png",
            banner: {bottom: 'veteran/banner_bottom.jpg', bottom_small: 'veteran/banner_bottom_small.jpg'},
            url_prefix: 'https://westrus.innogamescdn.com/images/window/shop/offers/',
            rendered_type: null,
            min_display_time: 5000
        },
        l10n: {popups: {}, texts: {}},
        isActive: function () {
            return Game.mpi && Game.mpi.enabled;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.offer.veteran', class_parent = 'west.game.shop.offer.view', class_object = {
        _class_path: class_path, buildStructure: function () {
            var $el = this.callParent.apply(this, arguments);
            $el.append('<div class="veteran_points"><span class="value"></span></div>');
            return $el;
        }, getPointsCount: function () {
            return $('.value', this.getRoot());
        }, addPointsCount: function () {
            if (!this.hasRoot()) {
                return this;
            }
            var model = this.getModel(), l10n = model.getL10n();
            this.getPointsCount().text(0);
            this.updatePointsCount();
            return this;
        }, removePointsCount: function () {
            this.getPointsCount().empty();
            return this;
        }, updatePointsCount: function () {
            var $el = this.getPointsCount(), points = Character.getVeteranPoints();
            if (parseInt($el.text(), 10) !== points) {
                west.common.countTo($el, points);
            }
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.shop.offer.veteran', class_parent = 'west.game.shop.offer.controller', class_object = {
        _class_id: 'Shop Veteran offer',
        _class_path: class_path,
        init: function () {
            this.callParent.apply(this, arguments);
            this.addEventListeners();
            return this;
        },
        addEventListeners: function () {
            this.removeEventListeners();
            var view = this.getView();
            EventHandler.listen('veteran_points_changed', view.updatePointsCount, view);
        },
        removeEventListeners: function () {
            var view = this.getView();
            EventHandler.unlisten('veteran_points_changed', view.updatePointsCount, view);
        },
        render: function () {
            var $offer = this.callParent.apply(this, arguments);
            var view = this.getView();
            view.addPointsCount();
            return $offer;
        },
        destroy: function () {
            this.removeEventListeners();
            this.callParent.apply(this, arguments);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.category.hot', class_parent = 'west.game.shop.category.model', class_object = {
        _class_path: class_path,
        getSubcategories: function () {
            return [];
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.items.hot', class_parent = 'west.game.shop.items.model', class_object = {
        _class_path: class_path,
        data: {
            timer: null,
            timer_interval: 5000,
            max_items: 6,
            max_items_per_row: 6,
            max_rows_per_page: 1,
            mouse_wheel_delay: 200,
            mouse_wheel_timestamp: null,
            paginator: null,
            items: [],
            update_queue: []
        },
        l10n: {}
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.items.hot', class_parent = 'west.game.shop.items.controller', class_object = {
            _class_id: 'Shop HOT items_controller',
            _class_path: class_path
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.content.hot', class_parent = 'west.game.shop.content.view', class_object = {
        _class_path: class_path, addStructure: function () {
            this.callParent.apply(this, arguments);
            if (!this.hasRoot()) {
                return this;
            }
            var $root = this.getRoot();
            $('.category_deco', $root).prepend('<div class="rotating_items"></div>').addClass('with_rotating_items');
            return this;
        }, getOffers: function () {
            return $('.rotating_items', this.getRoot());
        }, removeOffers: function () {
            this.getOffers().empty();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.content.hot', class_parent = 'west.game.shop.content.controller', class_object = {
            _class_id: 'Shop HOT content', _class_path: class_path, _initSubcontrollers: function () {
                this.callParent.apply(this, arguments);
                this._initOffers();
                return this;
            }, _initOffers: function () {
                var model = this.getModel(), view = this.getView(), Offers = this._getClass('controller', 'west.game.shop.offers.rotating_items', 'west.game.shop.offers'), window_controller = this.getController('window');
                this.setController('offers', new
                    Offers({
                    controllers: {window: window_controller, content: this},
                    models: {window: window_controller.getModel()},
                    root: view.getOffers()
                }));
                return this;
            }, destroy: function () {
                this.destroyController('offers', {controllers: ['window', 'content']});
                return this.callParent.apply(this, arguments);
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.item.equip', class_parent = 'west.game.shop.item.model', class_object = {
        _class_path: class_path,
        getSubcategory: function () {
            return this.getData('subcategory');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.item.useables', class_parent = 'west.game.shop.item.model', class_object = {
        _class_path: class_path,
        getSubcategory: function () {
            return this.getData('subcategory');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.item.trader', class_parent = 'west.game.shop.item.model', class_object = {
        _class_path: class_path,
        data: {isonetimer: true},
        updateData: function (new_data) {
            this.setData(new_data);
            return this;
        },
        isOneTimer: function () {
            return true;
        },
        bought: function () {
            this.soldOut();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.category.trader', class_parent = 'west.game.shop.category.model', class_object = {
        _class_path: class_path,
        setSubcategories: function () {
            return this;
        },
        indexSubcategories: function () {
            return this;
        },
        addSubcategory: function () {
            return this;
        },
        setRefreshTimeout: function (refresh_timeout) {
            this.setData('refresh_timeout', refresh_timeout, true);
            return this;
        },
        getRefreshTimeout: function () {
            return this.getData('refresh_timeout');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.content.trader', class_parent = 'west.game.shop.content.model', class_object = {
        _class_path: class_path,
        l10n: {
            popups: {
                trader_refresh: {
                    'title': 'Коммивояжёр готовит новый товар.',
                    'message': 'Точно сменить ассортимент?'
                }
            }, texts: {
                'valid_for': function (time) {
                    return s('Предложение действительно %1', '<span class="value">' + time + '</span>');
                }
            }, buttons: {'refresh_items': 'Сменить товар'}
        },
        getRefreshTimeout: function () {
            return this.getDataModel().getRefreshTimeout();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.content.trader', class_parent = 'west.game.shop.content.view', class_object = {
        _class_path: class_path, addStructure: function () {
            this.callParent.apply(this, arguments);
            if (!this.hasRoot()) {
                return this;
            }
            var $root = this.getRoot();
            $('.category_deco', $root).prepend($('<div class="trader_refresh_button"></div>')).append($('<div class="trader_refresh_timer"></div>'));
            return this;
        }, getRefreshTimer: function () {
            return $('.trader_refresh_timer', this.getRoot());
        }, getRefreshButton: function () {
            return $('.trader_refresh_button', this.getRoot());
        }, addRefreshTimer: function () {
            var model = this.getModel(), l10n = model.getL10n(), now = Math.floor(new Date().getTime() / 1000), timestamp = model.getRefreshTimeout() - now;
            this.getRefreshTimer().append(l10n.texts.valid_for(timestamp.getTime2EndString()));
            return this;
        }, removeRefreshTimer: function () {
            this.getRefreshTimer().empty();
            return this;
        }, updateRefreshTimer: function () {
            var model = this.getModel(), now = Math.floor(new ServerDate().getTime() / 1000), timestamp = model.getRefreshTimeout() - now;
            $('.value', this.getRefreshTimer()).text(timestamp.getTime2EndString());
            return this;
        }, addRefreshButton: function () {
            var controller = this.getController(), l10n = this.getModel().getL10n();
            this.getRefreshButton().append(new west.gui.Button('<img src="https://westrus.innogamescdn.com/images/window/trader/nugget.png" alt="" />' + l10n.buttons.refresh_items, controller.handleRefreshButton.bind(controller)).getMainDiv());
            return this;
        }, removeRefreshButton: function () {
            this.getRefreshButton().empty();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.content.trader', class_parent = 'west.game.shop.content.controller', class_object = {
            _class_id: 'Shop longtimer content',
            _class_path: class_path,
            _initSubcontrollers: function () {
                this._initItems();
                return this;
            },
            render: function () {
                this.callParent.apply(this, arguments);
                this.handleView();
                var view = this.getView();
                view.addRefreshTimer().addRefreshButton();
                return this;
            },
            reRender: function () {
                this.getController('items').reRender();
                this.getView().updateRefreshTimer();
                return this;
            },
            handleRefreshButton: function () {
                var l10n = this.getModel().getL10n(), window_controller = this.getController('window');
                Premium.confirmUse('itemtraderrefill', l10n.popups.trader_refresh.title, l10n.popups.trader_refresh.message, Premium.price["itemtraderrefill"], null, function (data) {
                    if (!data.error) {
                        window_controller.getDynamicData();
                    }
                });
            },
            handleView: function () {
                Ajax.remoteCall('shop_trader', 'mtrader_view', {});
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.item.longtimer', class_parent = 'west.game.shop.item.model', class_object = {
        _class_path: class_path,
        data: {item_data: {type: 'longtimer'}},
        l10n: {
            'mouseover': {
                'extend': {
                    on: function (period) {
                        return s('Продлевать автоматически каждые %1 дней', period);
                    }, off: 'Выключить автопродление'
                }
            },
            texts: {
                buy: function (duration) {
                    return s('Купить на %1 дней', '<span class="value">' + (duration ? duration : '??') + '</span>');
                }, extend: function (duration) {
                    return s('Продлить на %1 дней', '<span class="value">' + (duration ? duration : '??') + '</span>');
                }, auto_extend: function (time) {
                    return s('Будет продлён через %1', '<span class="value">' + (time ? time : '??') + '</span>');
                }, expire: function (time) {
                    return s('Истечёт через %1', '<span class="value">' + (time ? time : '??') + '</span>');
                }
            },
            popup: {
                buy: {
                    title: {buy: 'Купить временный премиум', extend: 'Продлить временный премиум'},
                    texts: {
                        extended: function (name, date) {
                            return s('%1 будет продлён до %2', '<span class="strong">' + name + '</span>', '<span class="strong">' + date + '</span>');
                        }, activated: function (name, date) {
                            return s('%1 будет активирован до %2', '<span class="strong">' + name + '</span>', '<span class="strong">' + date + '</span>');
                        }, duration_changed: function (duration_old, duration_new) {
                            return s('Твой период автоматического продления %1 поменяется с %2 на %3 дней', '<br />', duration_old, '<span class="strong">' + duration_new + '</span>');
                        }
                    }
                }
            }
        },
        updateData: function (new_data) {
            this.setData(new_data);
            if (this.hasController()) {
                this.getController().reRender();
            }
            return this;
        },
        getId: function () {
            return this.getData('id');
        },
        getType: function () {
            return 'longtimer';
        },
        getName: function () {
            return this.getData('name') || this.getId();
        },
        getCurrency: function () {
            return 2;
        },
        getDescription: function () {
            return this.getData('description') || '';
        },
        setExpiration: function (new_timestamp) {
            this.setData('expiration', new_timestamp);
            return this;
        },
        getExpiration: function () {
            return this.getData('expiration');
        },
        getTimeLimit: function () {
            return this.getExpiration();
        },
        isBought: function () {
            var expire = this.getExpiration(), now = new ServerDate().getTime();
            return now < expire * 1000;
        },
        isBoughtFor: function (period) {
            return this.getRenewalDuration() === period;
        },
        getDurationsCost: function () {
            return this.getData('period_cost');
        },
        getDurationCost: function (period_id) {
            var periods = this.getDurationsCost();
            return periods[period_id];
        },
        getDurations: function () {
            var p_c = this.getDurationsCost(), periods = [];
            $.each(p_c, function (period_id, period_price) {
                periods.push(period_id);
            });
            return periods;
        },
        setRenewal: function (bool) {
            this.setData('renewal', bool);
            return this;
        },
        hasRenewal: function () {
            return this.getData('renewal');
        },
        toggleRenewal: function () {
            this.setRenewal(!this.hasRenewal());
            return this;
        },
        getRenewalDuration: function () {
            return this.getData('renewal_period');
        },
        setCurrentDuration: function (new_period) {
            this.setData('current_period', new_period, true);
            return this;
        },
        getCurrentDuration: function () {
            return this.getData('current_period');
        },
        getItemImage: function () {
            return 'noimg';
        },
        getPriceForPeriod: function (period) {
            period = period || this.getCurrentDuration();
            return this.getDurationCost(period);
        },
        getPriceForCurrency: function () {
            return this.getPriceForPeriod();
        },
        bought: function (data) {
            this.updateData({
                'expiration': data.timestamp,
                'renewal': true,
                'renewal_period': data.renewal_period || this.getCurrentDuration()
            });
            return false;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.item.longtimer', class_parent = 'west.game.shop.item.view', class_object = {
        _class_path: class_path, biuldItemStructure: function () {
            var $el = $('<li class="shop_item cat_longtimer"></li>').append($('<div class="frame"></div>'), $('<div class="icons"></div>'), $('<div class="title"></div>'), $('<div class="image"></div>'), $('<div class="descriptions"></div>'), $('<div class="button"></div>'));
            return $el;
        }, getImage: function () {
            var model = this.getModel(), id = model.getId(), duration = model.getCurrentDuration() || 14, description = model.getDescription() || '';
            return $('<div class="item item_nobg"><img src="https://westrus.innogamescdn.com/images/items/yield/' + duration + 'days_' + id + '_bonus.png" /></div>').addMousePopup(description);
        }, loadImage: function ($root) {
            $root = $root || this.getRoot();
            $('.image', $root).empty().append(this.getImage());
            return this;
        }, render: function (duration) {
            var that = this, model = this.getModel(), $item;
            if (this.hasRoot()) {
                this.reRender(duration);
                return this.getRoot();
            }
            $item = this.biuldItemStructure();
            $('.title', $item).append(model.getName());
            this.addBuyDescription($item).addTimeLimit($item).addPrice($item);
            if (model.isBought()) {
                this.setExpiryDescription($item);
                this.markAsBought($item);
            }
            window.setTimeout(function () {
                that.loadImage($item);
                $('.title', $item).addClass('sticky');
            }, 100);
            model.setViewUpdate($('.description', $item).length > 1);
            return $item;
        }, reRender: function (duration) {
            var model = this.getModel();
            duration = duration || model.getCurrentDuration();
            var animation = Config.get("gui.animations"), $root = this.getRoot(), reRender;
            reRender = function () {
                this.loadImage();
                if (model.isBought()) {
                    this.setExpiryDescription().markAsBought().updateTimeLimit();
                    if (model.isBoughtFor(duration)) {
                        this.addAutoExtend().markAsCurrent();
                    } else {
                        this.removeAutoExtend().unmarkAsCurrent();
                    }
                } else {
                    this.removeAutoExtend().unmarkAsBought();
                }
                this.showPrice(duration).updateBuyDescription(duration);
                this.update();
                $root.addClass('loaded');
            };
            $root.removeClass('loaded');
            if (animation) {
                window.setTimeout(reRender.bind(this), 200);
            } else {
                reRender.apply(this);
            }
            return this;
        }, update: function (duration) {
            var model = this.getModel();
            duration = duration || model.getCurrentDuration();
            if (!this.hasRoot()) {
                return this;
            }
            this.updateExpiryDescription().cycleDescriptions();
            return this;
        }, createPrice: function (value) {
            return $('<span class="tw-currency curr-nugget"></span><span class="price price_value">' + round_number(value, 6) + '</span>');
        }, markAsBought: function ($root) {
            $root = $root || this.getRoot();
            $root.addClass('owned');
            return this;
        }, unmarkAsBought: function () {
            this.getRoot().removeClass('owned');
            return this;
        }, markAsCurrent: function () {
            this.getRoot().removeClass('inactive');
            return this;
        }, unmarkAsCurrent: function () {
            this.getRoot().addClass('inactive');
            return this;
        }, addAutoExtend: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n();
            if (!$root || !$root.length) {
                return this;
            }
            if (!$('.icons .auto_extend', $root).length) {
                $('.icons', $root).prepend(this.createIcon('auto_extend', l10n.mouseover.extend.on(14)));
            }
            if (model.hasRenewal()) {
                this.enableAutoExtend($root);
            } else {
                this.disableAutoExtend($root);
            }
            return this;
        }, removeAutoExtend: function ($root) {
            $root = $root || this.getRoot();
            $root.removeClass('auto_extend');
            $('.icons .auto_extend', $root).remove();
            return this;
        }, enableAutoExtend: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n();
            if ($root.hasClass('auto_extend')) {
                return this;
            }
            $root.addClass('auto_extend');
            $('.icons .auto_extend', $root).append($('<div class="enabled"></div>')).addMousePopup(l10n.mouseover.extend.off);
            return this;
        }, disableAutoExtend: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n(), duration = model.getCurrentDuration();
            $root.removeClass('auto_extend');
            $('.icons .auto_extend', $root).empty().addMousePopup(l10n.mouseover.extend.on(duration));
            return this;
        }, addPrice: function ($root) {
            var prices = this.getPrices();
            $('.button', $root).empty().append(prices);
            return this;
        }, showPrice: function (duration) {
            var prices = this.getPrices(duration);
            $('.button', this.getRoot()).empty().append(prices);
            return this;
        }, getPrices: function (duration) {
            var model = this.getModel(), prices = [], durations;
            if (duration) {
                prices.push(this.createPrice(model.getDurationCost(duration)));
            } else {
                durations = model.getDurations().sort(function (a, b) {
                    return parseInt(a) - parseInt(b);
                });
                prices.push(this.createPrice(model.getDurationCost(durations.shift())));
                prices.push(' - ');
                prices.push(this.createPrice(model.getDurationCost(durations.pop())));
            }
            return prices;
        }, addTimeLimit: function ($item) {
            var model = this.getModel(), l10n = model.getL10n(), limit = model.getTimeLimit(), now = Math.floor(new ServerDate().getTime() / 1000);
            $item = $item || this.getRoot();
            if (!limit || !$item || !$item.length || limit < now) {
                return this;
            }
            $item.addClass('limited_time');
            $('.icons', $item).append(this.createIcon('limited_time', new Date(limit * 1000).toDateTimeString()));
            return this;
        }, removeTimeLimit: function () {
            var $root = this.getRoot();
            $root.removeClass('limited_time');
            $('.limited_time', $root).remove();
            return this;
        }, updateTimeLimit: function ($root) {
            $root = $root || this.getRoot();
            var limit = this.getModel().getTimeLimit();
            $('.icon.limited_time', $root).addMousePopup(new Date(limit * 1000).toDateTimeString());
        }, setExpiryDescription: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n(), limit = model.getTimeLimit(), now = Math.floor(new ServerDate().getTime() / 1000), description;
            if (!limit || limit < now) {
                return this;
            }
            description = model.hasRenewal() ? l10n.texts.auto_extend(this.getTimeLeftFromTimestamp(limit, false)) : l10n.texts.expire(this.getTimeLeftFromTimestamp(limit, false));
            $('.expire_or_extend', $root).remove();
            $('.descriptions', $root).append(this.createDescription('expire_or_extend', description));
            return this;
        }, updateExpiryDescription: function ($root) {
            $root = $root || this.getRoot();
            var limit = this.getModel().getTimeLimit();
            $('.expire_or_extend .value', $root).text(this.getTimeLeftFromTimestamp(limit, false));
            return this;
        }, addBuyDescription: function ($root) {
            $root = $root || this.getRoot();
            var model = this.getModel(), l10n = model.getL10n('texts'), duration = this.getModel().getCurrentDuration(), description = model.isBought() ? l10n.extend(duration) : l10n.buy(duration);
            $('.descriptions', $root).append(this.createDescription('buy', description));
            return this;
        }, updateBuyDescription: function (duration) {
            duration = duration || this.getModel().getCurrentDuration();
            $('.description.buy .value', this.getRoot()).text(duration);
            return this;
        }, removeBuyDescription: function () {
            $('.description.buy', this.getRoot()).remove();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.shop.item.longtimer', class_parent = 'west.game.shop.item.controller', class_object = {
        _class_id: 'Shop longtimer item', _class_path: class_path, belongsToSubcategory: function () {
            return true;
        }, render: function (duration) {
            var view = this.getView(), $item;
            if (this.hasRoot()) {
                $item = this.getRoot();
                this.renderFor(duration);
            } else {
                $item = view.render(duration);
                this.setRoot($item).setEventListeners();
            }
            return $item;
        }, reRender: function () {
            this.renderFor(this.getModel().getCurrentDuration());
            return this;
        }, renderFor: function (duration) {
            this.getModel().setCurrentDuration(duration);
            this.getView().reRender(duration);
            return this;
        }, update: function (duration) {
            var view = this.getView();
            view.update(duration);
            return this;
        }, setEventListeners: function () {
            this.callParent.apply(this, arguments);
            var that = this;
            if (!this.hasRoot()) {
                return this;
            }
            this.getRoot().on('click.item', '.icon.auto_extend', function () {
                that.handleExtendToggle.call(that);
            });
            return this;
        }, handleBuyAction: function () {
            var model = this.getModel(), l10n = model.getL10n().popup.buy, bought = model.isBought(), renewal_duration = model.getRenewalDuration(), new_renewal = model.getCurrentDuration(), date = (bought ? new Date(model.getExpiration() * 1000) : new ServerDate().date), title, message;
            title = bought ? l10n.title.extend : l10n.title.buy;
            date.setDate(date.getDate() + new_renewal);
            message = '<p>' + (bought ? l10n.texts.extended(model.getName(), date.toDateString()) : l10n.texts.activated(model.getName(), date.toDateString())) + '</p>';
            if (bought && renewal_duration !== new_renewal) {
                message += '<p>' + l10n.texts.duration_changed(renewal_duration, new_renewal) + '</p>';
            }
            this.callParent.call(this, null, {title: title, message: message});
            return this;
        }, handleExtendToggle: function () {
            var model = this.getModel(), view = this.getView(), options = {};
            options[model.getId()] = !model.hasRenewal();
            Ajax.remoteCall('shop_trader', 'set_renewal', options, function (response) {
                if (!response.error) {
                    model.toggleRenewal();
                    view.reRender();
                }
            });
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.item.longtimer.vip', class_parent = 'west.game.shop.item.longtimer.model', class_object = {
        _class_path: class_path, bought: function (data) {
            var models_to_update = this.getWindowModel().getItems(["automation", "greenhorn", "money", "regen", "character"]), i = models_to_update.length, model;
            while (i--) {
                model = models_to_update[i];
                model.bought(data.others[model.getId()]);
            }
            this.callParent.apply(this, arguments);
            return false;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.shop.item.longtimer.vip', class_parent = 'west.game.shop.item.longtimer.controller', class_object = {
        _class_id: 'Shop vip longtimer item',
        _class_path: class_path
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.category.longtimer', class_parent = 'west.game.shop.category.model', class_object = {
        _class_path: class_path, getSubcategories: function () {
            var subcategories = this.getData('subcategories');
            if (!subcategories.length) {
                this.indexSubcategories();
                subcategories = this.getData('subcategories');
            }
            return subcategories;
        }, addSubcategory: function () {
            return this;
        }, indexSubcategories: function () {
            var items = this.getItems(), item = items[0], subcategories = item ? item.getDurations() : [];
            this.setSubcategories(subcategories);
            return this;
        }, getActiveItems: function () {
            var items = this.getItems(), i_l = items.length, now = new ServerDate().getTime() / 1000, active = [];
            while (i_l--) {
                if (now < items[i_l].getExpiration()) {
                    active.push(items[i_l]);
                }
            }
            active.sort(function (a, b) {
                return a.getExpiration() - b.getExpiration();
            });
            return active;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.items.longtimer', class_parent = 'west.game.shop.items.controller', class_object = {
            _class_id: 'Shop Lobgtimer items_controller',
            _class_path: class_path,
            showSubcategories: function (subcategory) {
                if ($.isArray(subcategory)) {
                    subcategory = subcategory[0];
                }
                var model = this.getModel(), items = model.getItems();
                $.each(items, function (item_id, item) {
                    item.renderFor(subcategory);
                });
                return this;
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.content.longtimer', class_parent = 'west.game.shop.content.model', class_object = {
        _class_path: class_path, getDefaultSubcategory: function () {
            return 14;
        }, toggleCurrentSubcategory: function (subcategory_id) {
            var subcategories = this.getCurrentSubcategories();
            if (subcategory_id === subcategories[0]) {
                subcategories = [this.getDefaultSubcategory()];
            } else {
                subcategories = [subcategory_id];
            }
            this.setCurrentSubcategories(subcategories);
            return this;
        }, getTrackingData: function () {
            var data = {'source': 'cat_longtimers', 'duration': this.getCurrentSubcategories()[0]};
            return data;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.content.longtimer', class_parent = 'west.game.shop.content.controller', class_object = {
            _class_id: 'Shop longtimer content', _class_path: class_path, init: function () {
                this.callParent.apply(this, arguments);
                this.showDefaultTab();
                return this;
            }, toggleSubcategory: function (subcategory_id) {
                var model = this.getModel(), current_subcategories;
                model.toggleCurrentSubcategory(subcategory_id);
                current_subcategories = model.getCurrentSubcategories();
                this.getController('subcategories').highlight(current_subcategories);
                this.getController('items').showSubcategories(current_subcategories);
                return this;
            }, showDefaultTab: function () {
                var model = this.getModel(), default_subcategory = model.getDefaultSubcategory(), active_items = model.getDataModel().getActiveItems(), a_i_l = active_items.length, now = new ServerDate() / 1000, subcategory = default_subcategory, i = 1, first_expiration, renewal_duration;
                if (a_i_l) {
                    first_expiration = active_items[0].getExpiration();
                    renewal_duration = active_items[0].getRenewalDuration();
                    if (true || (first_expiration - now) < (3 * 24 * 60 * 60)) {
                        first_expiration = first_expiration + (24 * 60 * 60);
                        for (i; i < a_i_l; i++) {
                            if ((active_items[i].getExpiration() < first_expiration) && active_items[i].getRenewalDuration() > renewal_duration) {
                                renewal_duration = active_items[i].getRenewalDuration();
                            }
                        }
                        subcategory = renewal_duration;
                    }
                }
                this.toggleSubcategory(subcategory);
                return this;
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.content.search', class_parent = 'west.game.shop.content.model', class_object = {
        _class_path: class_path,
        getType: function () {
            return this.getData('type');
        },
        getId: function () {
            return this.getType();
        },
        getSubclassName: function () {
            var type = this.getType(), id = this.getId();
            return ('category' === type ? id : type + '.' + id);
        },
        getContentClassName: function () {
            return ' cat_' + this.getType();
        },
        getTrackingData: function () {
            var data = {'source': this.getType(), 'search_string': this.getDataModel().getSearchQuery()};
            return data;
        },
        getSubcategories: function () {
            return [];
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.content.search', class_parent = 'west.game.shop.content.controller', class_object = {
            _class_id: 'Shop Search content',
            _class_path: class_path,
            init: function () {
                this.callParent.apply(this, arguments);
                return this;
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.content.promotion', class_parent = 'west.game.shop.content.view', class_object = {
        _class_path: class_path, addStructure: function () {
            this.callParent.apply(this, arguments);
            var offer_model = this.getModel().getDataModel(), prefix = offer_model.getUrlPrefix(), background = offer_model.getContentBackground(), $root;
            if (!this.hasRoot() || !background) {
                return this;
            }
            $root = this.getRoot();
            $('.category_deco', $root).css({background: 'url("' + prefix + background + '") no-repeat 50% 50%'});
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.content.promotion', class_parent = 'west.game.shop.content.controller', class_object = {
            _class_id: 'Shop promotion content',
            _class_path: class_path
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.content.veteran', class_parent = 'west.game.shop.content.model', class_object = {
        _class_path: class_path,
        l10n: {
            texts: {
                'veteran_points': function (count) {
                    return s('Очки славы: %1', '<span class="value">' + count + '</span>');
                }
            }
        },
        getRefreshTimeout: function () {
            return this.getDataModel().getRefreshTimeout();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.content.veteran', class_parent = 'west.game.shop.content.view', class_object = {
        _class_path: class_path, addStructure: function () {
            this.callParent.apply(this, arguments);
            if (!this.hasRoot()) {
                return this;
            }
            var $root = this.getRoot();
            $('.category_deco', $root).prepend($('<div class="veteran_points"></div>'));
            return this;
        }, getPointsCount: function () {
            return $('.veteran_points', this.getRoot());
        }, addPointsCount: function () {
            var model = this.getModel(), l10n = model.getL10n();
            this.getPointsCount().append(l10n.texts.veteran_points(0));
            this.updatePointsCount();
            return this;
        }, removePointsCount: function () {
            this.getPointsCount().empty();
            return this;
        }, updatePointsCount: function () {
            var $el = $('.value', this.getPointsCount());
            west.common.countTo($el, Character.getVeteranPoints());
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.content.veteran', class_parent = 'west.game.shop.content.controller', class_object = {
            _class_id: 'Shop veteran content',
            _class_path: class_path,
            init: function () {
                this.callParent.apply(this, arguments);
                this.addEventListeners();
                return this;
            },
            _initSubcontrollers: function () {
                this._initItems();
                return this;
            },
            addEventListeners: function () {
                this.removeEventListeners();
                var view = this.getView();
                EventHandler.listen('veteran_points_changed', view.updatePointsCount, view);
            },
            removeEventListeners: function () {
                var view = this.getView();
                EventHandler.unlisten('veteran_points_changed', view.updatePointsCount, view);
            },
            render: function () {
                this.callParent.apply(this, arguments);
                var view = this.getView();
                view.addPointsCount();
                return this;
            },
            reRender: function () {
                this.getController('items').reRender();
                this.getView().updatePointsCount();
                return this;
            },
            destroy: function () {
                this.removeEventListeners();
                this.callParent.apply(this, arguments);
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.shop.content.promotion.veteran', class_parent = 'west.game.shop.content.model', class_object = {
        _class_path: class_path,
        l10n: {
            texts: {
                'veteran_points': function (count) {
                    return s('Очки славы: %1', '<span class="value">' + count + '</span>');
                }
            }
        },
        getRefreshTimeout: function () {
            return this.getDataModel().getRefreshTimeout();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.shop.content.promotion.veteran', class_parent = 'west.game.shop.content.promotion.view', class_object = {
        _class_path: class_path, addStructure: function () {
            this.callParent.apply(this, arguments);
            if (!this.hasRoot()) {
                return this;
            }
            var $root = this.getRoot();
            $('.category_deco', $root).prepend($('<div class="veteran_points"></div>'));
            return this;
        }, getPointsCount: function () {
            return $('.veteran_points', this.getRoot());
        }, addPointsCount: function () {
            var model = this.getModel(), l10n = model.getL10n();
            this.getPointsCount().append(l10n.texts.veteran_points(0));
            this.updatePointsCount();
            return this;
        }, removePointsCount: function () {
            this.getPointsCount().empty();
            return this;
        }, updatePointsCount: function () {
            var $el = $('.value', this.getPointsCount());
            west.common.countTo($el, Character.getVeteranPoints());
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        class_name = 'controller', class_path = 'west.game.shop.content.promotion.veteran', class_parent = 'west.game.shop.content.controller', class_object = {
            _class_id: 'Shop veteran promo content',
            _class_path: class_path,
            init: function () {
                this.callParent.apply(this, arguments);
                this.addEventListeners();
                return this;
            },
            _initSubcontrollers: function () {
                this._initItems();
                return this;
            },
            addEventListeners: function () {
                this.removeEventListeners();
                var view = this.getView();
                EventHandler.listen('veteran_points_changed', view.updatePointsCount, view);
            },
            removeEventListeners: function () {
                var view = this.getView();
                EventHandler.unlisten('veteran_points_changed', view.updatePointsCount, view);
            },
            render: function () {
                this.callParent.apply(this, arguments);
                var view = this.getView();
                view.addPointsCount();
                return this;
            },
            reRender: function () {
                this.getController('items').reRender();
                this.getView().updatePointsCount();
                return this;
            },
            destroy: function () {
                this.removeEventListeners();
                this.callParent.apply(this, arguments);
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

var Map = {
    tileSize: 256,
    max: {x: 181, y: 79},
    min: {x: 0, y: 0},
    hiddenTiles: 3,
    width: 0,
    height: 0,
    num: {x: 0, y: 0},
    visible: {x: 0, y: 0},
    mapWidth: 0,
    mapHeight: 0,
    mapEl: null,
    bgLayer: 0,
    initialized: false,
    events_: [[['walktheline-start', 'walktheline-update'], 'onWalkingStateChange'], [['task-start-job', 'task-start-found', 'task-start-build', 'task-start-fortfound', 'task-start-fortbuild', 'task-start-craft', 'task-start-refound', 'task-start-pray', 'task-start-buildfair'], 'onTaskStart'], [['task-start-sleep', 'task-start-fortsleep', 'task-start-tentsleep'], 'onSleepStart'], ['task-start-duel', 'onDuelStart'], [['taskqueue-updated', 'map-drawed', 'position_change'], 'onStop'], ['position_change', 'onPositionChange'], ['char_home_town_changed', 'onHomeTownChange'], ['questemployer_changed', 'onQuestemployerChange'], [['job-importance-changed', 'job-seen', 'new-job'], 'onJobLabelChange'], ['character_level_up', 'onCharLevelUp']],
    init: function (pos) {
        if (!pos)pos = {x: 0, y: 0};
        Map.mapWidth = (Map.max.x + 1) * Map.tileSize;
        Map.mapHeight = (Map.max.y + 1) * Map.tileSize;
        Map.mapEl = $("#map");
        Map.ClickHandler.init(Map.mapEl);
        Map.Drag.init(Map.mapEl);
        Map.changeEvents_('listen');
        Map.initialized = true;
        Map.resize();
        Map.center(pos.x, pos.y, false, true);
        Map.addResizeHandler();
        $('#map-container').show();
    },
    finalize: function () {
        Map.Draw.reset();
        $('#map-container').hide();
        Map.mapEl.empty();
        Map.initialized = false;
        Map.Drag.finalize(Map.mapEl);
        Map.ClickHandler.deactivate(Map.mapEl);
        Map.mapEl = null;
        Map.changeEvents_('unlisten');
    },
    addResizeHandler: function () {
        var timeout, wnd = $(window);
        var storeSize = function () {
            wnd.data("old_size", {width: wnd.width(), height: wnd.height()});
        };
        var sizeChanged = function (dim) {
            return wnd.data('old_size')[dim] !== wnd[dim]();
        };
        storeSize();
        wnd.resize(function (event) {
            if (this != window)return;
            if (timeout)window.clearTimeout(timeout);
            var pos = Map.getCurrentMid();
            timeout = window.setTimeout(function () {
                if (!sizeChanged('height') && !sizeChanged('width'))return;
                if (Map.initialized) {
                    Map.resize();
                    Map.center(pos, null, false, true);
                }
                EventHandler.signal('window_resized', []);
                storeSize();
            }, 500);
        });
    },
    resize: function () {
        if (!Map.initialized)return;
        Map.width = $(window).width();
        Map.height = $(window).height();
        Map.visible = {x: Math.ceil(Map.width / Map.tileSize), y: Math.ceil(Map.height / Map.tileSize)};
        Map.num = {x: Map.visible.x + Map.hiddenTiles, y: Map.visible.y + Map.hiddenTiles};
        Map.mapEl.css({width: Map.max.x * Map.tileSize, height: Map.max.y * Map.tileSize});
        WestUi.resolutionChange.handle();
    },
    center: function (posX, posY, hideLoader, forceRedraw) {
        if (!Map.initialized)return;
        var startTop = 0, startLeft = 0, currentMid = Map.getCurrentMid(), tutorialLimits;
        if (typeof(posX) === 'object') {
            posY = posX.y;
            posX = posX.x;
        }
        var inRange = function (val, axis) {
            return Math.abs(val - currentMid[axis]) <= 3 * Map.tileSize
        };
        if (!forceRedraw && inRange(posX, 'x') && inRange(posY, 'y')) {
            Map.Drag.scrollby(posX - currentMid.x, posY - currentMid.y);
            return;
        }
        Map.Drag.freeze();
        Map.Data.Loader.freeQueue();
        startTop = posY - parseInt(Map.height / 2);
        startLeft = posX - parseInt(Map.width / 2);
        if (posX > (Map.max.x + 1) * Map.tileSize - parseInt(Map.width / 2)) {
            startLeft = (Map.max.x + 1) * Map.tileSize - Map.width;
        } else if (posX < parseInt(Map.width / 2)) {
            startLeft = 0;
        }
        if (posY > (Map.max.y + 1) * Map.tileSize - parseInt(Map.height / 2)) {
            startTop = (Map.max.y + 1) * Map.tileSize - Map.height;
        } else if (posY < parseInt(Map.height / 2)) {
            startTop = 0;
        }
        if (LinearQuestHandler.hasTutorialQuest()) {
            tutorialLimits = TutorialManager.mapRestriction;
            startLeft = Math.max(tutorialLimits.x.min, Math.min(startLeft, tutorialLimits.x.max));
            startTop = Math.max(tutorialLimits.y.min, Math.min(startTop, tutorialLimits.y.max));
        }
        var startX = Math.max(parseInt(startLeft / Map.tileSize) - Map.hiddenTiles, Map.min.x);
        var startY = Math.max(parseInt(startTop / Map.tileSize) - Map.hiddenTiles, Map.min.y);
        var endX = Math.min(parseInt(startLeft / Map.tileSize) + Map.visible.x + Map.hiddenTiles, Map.max.x + 1);
        var endY = Math.min(parseInt(startTop / Map.tileSize) + Map.visible.y + Map.hiddenTiles, Map.max.y + 1);
        for (var x = startX; x < endX; x++) {
            for (var y = startY; y < endY; y++) {
                Map.Draw.toDraw({x: x, y: y});
            }
        }
        var finished = function () {
            Map.Drag.warmUp();
            EventHandler.signal('map-center-changed');
        };
        Map.Draw.setOffset({left: -startLeft, top: -startTop});
        var isLoading = Map.Draw.processBatch(true);
        if (isLoading) {
            GameLoader.async('Загрузка карты', 'map-drawed', finished, undefined, true, hideLoader);
        } else {
            finished.call();
        }
    },
    calcWayTime: function (from, to) {
        var dist = Math.sqrt((from.x - to.x) * (from.x - to.x) + (from.y - to.y) * (from.y - to.y));
        return dist * Game.travelSpeed * Character.speed;
    },
    validateCoords: function (coords) {
        if (coords.x < Map.min.x || coords.x > Map.max.x || coords.y < Map.min.y || coords.y > Map.max.y)
            throw'coords not valid';
        return true;
    },
    showCoords: function (tileCoords) {
        if (!Map.initialized)return;
        var container = $('<span></span>');
        var coords = $('<div class="display-tile-coords"></div>');
        var x, y;
        $('#map > .bg').each(function (k, el) {
            el = $(el);
            if (tileCoords) {
                x = parseInt(parseInt(el.css('left')) / 256);
                y = parseInt(parseInt(el.css('top')) / 256);
            } else {
                x = parseInt(el.css('left')) + 128;
                y = parseInt(el.css('top')) + 128;
            }
            coords.css('left', el.css('left'));
            coords.css('top', el.css('top'));
            coords.html('<div class="text">' + x + ' / ' + y + '</div>');
            coords.clone().appendTo(container);
        });
        container.appendTo('#map');
    },
    hideCoords: function () {
        $('.display-tile-coords').remove();
    },
    refresh: function (hideLoader) {
        if (!Map.initialized)return;
        var pos = Map.getCurrentMid();
        Map.Draw.reset();
        Map.center(pos, undefined, hideLoader, true);
    },
    getCurrentMid: function () {
        if (!Map.initialized)return false;
        var pos = Map.mapEl.position();
        return {x: parseInt(-pos.left + $(document).width() / 2), y: parseInt(-pos.top + $(document).height() / 2)};
    },
    changeEvents_: function (action) {
        var idx, ev;
        for (idx = 0; idx < this.events_.length; idx++) {
            ev = this.events_[idx];
            EventHandler[action](ev[0], this.callbacks_[ev[1]], this);
        }
    },
    callbacks_: {
        onWalkingStateChange: function (coords, id) {
            if (Wear.get('animal')) {
                Walker.ride(coords.x, coords.y, id);
            } else {
                Walker.walk(coords.x, coords.y, id);
            }
        }, onTaskStart: function (task) {
            Walker.work(task.x || Character.position.x, task.y || Character.position.y, (Game.getServerTime() * 1000) - task.date_start, task.date_done - task.date_start);
        }, onSleepStart: function (task) {
            Walker.sleep(task.x, task.y);
        }, onDuelStart: function (task) {
            Walker.shoot(task.x, task.y);
        }, onStop: function () {
            Walker.stop(Character.position.x, Character.position.y);
        }, onPositionChange: function (x, y) {
            Map.center(x, y);
        }, onHomeTownChange: function () {
            Map.refresh.apply(Map, arguments);
        }, onQuestemployerChange: function (action, questId) {
            if (action !== 'finished')return;
            var changed = 0;
            for (var coords in Map.QuestHandler.Featured) {
                Map.QuestHandler.Featured[coords].employer.each(function (employer) {
                    if (employer.activate === questId) {
                        employer.visible = true;
                        changed++;
                    } else if (employer.deactivate === questId) {
                        employer.visible = false;
                        changed++;
                    }
                });
            }
            if (changed !== 0) {
                EventHandler.signal('map_update_radialemployer', [true]);
            }
        }, onJobLabelChange: function (job) {
            $('.jobgroup-' + job.groupid + ' .jobgroupicon', Map.mapEl).html(Map.Component.JobGroup.getMarkers(job.groupid));
        }, onCharLevelUp: function (data) {
            var lo, hi, i, jobs;
            for (lo = data.oldlevel, hi = data.level; lo <= hi; lo++) {
                jobs = JobList.getJobsByLevel(lo), j = 0;
                for (; j < jobs.length; j++)EventHandler.signal('new-job', [jobs[j]]);
            }
        }
    }
};

var Map = Map || {};
Map.Drag = function () {
    var lastPos, lastRendered = {}, dragged, absMove, enabled = true, activeTutorial = false;
    var cancelEvent = function (event) {
        event.stopPropagation && event.stopPropagation() || (event.cancelBubble = true);
        event.preventDefault && event.preventDefault() || (event.returnValue = false);
    };
    var mousedown = function (event) {
        dragged = false;
        absMove = 0;
        activeTutorial = LinearQuestHandler.hasTutorialQuest();
        lastPos = {x: event.clientX, y: event.clientY};
        var mapOffset = Map.Draw.getOffset();
        lastRendered = {x: -parseInt(mapOffset.left / Map.tileSize), y: -parseInt(mapOffset.top / Map.tileSize)};
        $('body').addClass('drag').css('cursor', 'move');
        $('body').attr('onselectstart', 'return false');
        cancelEvent(event);
        var mapEl = Map.mapEl[0];
        if (mapEl.setCapture && mapEl.attachEvent) {
            mapEl.setCapture();
            mapEl.attachEvent('onmousemove', mousemove);
            mapEl.attachEvent('onmouseup', mouseup);
            mapEl.attachEvent('onlosecapture', mouseup);
        }
        else {
            document.addEventListener('mousemove', mousemove, true);
            document.addEventListener('mouseup', mouseup, true);
        }
    };
    var mouseup = function (event) {
        var mapEl = Map.mapEl[0];
        if (mapEl.releaseCapture && mapEl.detachEvent) {
            mapEl.detachEvent('onlosecapture', mouseup);
            mapEl.detachEvent('onmouseup', mouseup);
            mapEl.detachEvent('onmousemove', mousemove);
            mapEl.releaseCapture();
        } else {
            document.removeEventListener('mouseup', mouseup, true);
            document.removeEventListener('mousemove', mousemove, true);
        }
        $('body').removeClass('drag').css('cursor', '');
        $('body').removeAttr('onselectstart');
        cancelEvent(event);
        EventHandler.signal('map-center-changed');
    };
    var mousemove = function (event) {
        if (absMove < 20) {
            absMove += Math.abs(event.clientX - lastPos.x) + Math.abs(event.clientY - lastPos.y);
            return;
        }
        Map.Radialmenu.forceClose();
        dragged = true;
        var deltaX = event.clientX - lastPos.x;
        var deltaY = event.clientY - lastPos.y;
        mapmove(deltaX, 'x', 'left');
        mapmove(deltaY, 'y', 'top');
        lastPos.x = event.clientX;
        lastPos.y = event.clientY;
        cancelEvent(event);
        Map.Draw.processBatch();
    };
    var hotkeymove = function (dist, axis, direction) {
        var mapOffset = Map.Draw.getOffset();
        activeTutorial = LinearQuestHandler.hasTutorialQuest();
        lastRendered = {x: -parseInt(mapOffset.left / Map.tileSize), y: -parseInt(mapOffset.top / Map.tileSize)};
        mapmove(dist, axis, direction);
        Map.Draw.processBatch();
        EventHandler.signal('map-center-changed');
    };
    var sgn = function (x) {
        return x >= 0 ? 1 : -1;
    };
    var scrollby = function (dx, dy) {
        var modx = sgn(dx), mody = sgn(dy);
        dx = Math.sqrt(1.9 * Math.max(2, Math.abs(dx))) * modx;
        dy = Math.sqrt(1.9 * Math.max(2, Math.abs(dy))) * mody;
        var delay = 16, maxDiff = Math.max(Math.abs(dx), Math.abs(dy)), stepX = dx / maxDiff, stepY = dy / maxDiff, interval, doX = doY = true;
        interval = window.setInterval(function () {
            var offset = Map.Draw.getOffset();
            lastRendered = {x: -parseInt(offset.left / Map.tileSize), y: -parseInt(offset.top / Map.tileSize)};
            doX = doX ? (sgn(dx) == sgn(dx + stepX)) : doX;
            if (doX) {
                mapmove(-Math.round(dx), 'x', 'left');
                dx -= stepX;
            }
            doY = doY ? (sgn(dy) == sgn(dy + stepY)) : doY;
            if (doY) {
                mapmove(-Math.round(dy), 'y', 'top');
                dy -= stepY;
            }
            Map.Draw.processBatch();
            if (!doX && !doY) {
                window.clearInterval(interval);
            }
        }, delay);
    };
    var limitOffset = function (pos, axis) {
        var max, min, tutorialLimits;
        if (activeTutorial) {
            tutorialLimits = TutorialManager.mapRestriction;
            max = -tutorialLimits[axis].max;
            min = -tutorialLimits[axis].min;
        } else {
            min = 0;
            max = -(Map.max[axis] + 1) * Map.tileSize;
        }
        max += (axis === 'y' ? Map.height : Map.width);
        return Math.min(min, Math.max(max, pos));
    };
    var mapmove = function (deltaPixel, axis, direction) {
        if (!enabled)return;
        var newPosition, newTile, currentPos = Map.Draw.getOffset()[direction], tmp;
        newPosition = limitOffset(currentPos + deltaPixel, axis);
        if (newPosition === currentPos)return;
        tmp = {};
        tmp[direction] = newPosition;
        Map.Draw.setOffset(tmp);
        newTile = -parseInt(newPosition / Map.tileSize);
        if (newTile !== lastRendered[axis]) {
            if (newTile > lastRendered[axis])
                redrawGreater(axis, lastRendered[axis], newTile); else
                redrawLower(axis, lastRendered[axis], newTile);
        }
        lastRendered[axis] = newTile;
        EventHandler.signal('map-dragged');
    };
    var getCounterAxisDef = function (axis) {
        var counterAxis = axis === 'x' && 'y' || 'x';
        return {
            from: Math.min(Math.max(0, lastRendered[counterAxis] - Map.hiddenTiles), Map.max[counterAxis]),
            to: Math.min(Math.max(0, lastRendered[counterAxis] + Map.num[counterAxis]), Map.max[counterAxis] + 1),
            id: counterAxis
        };
    };
    var redrawGreater = function (axis, from, to) {
        from += Map.num[axis];
        to += Map.num[axis];
        redraw({from: from, to: to, id: axis}, getCounterAxisDef(axis), function (x, to) {
            return x < to;
        }, function (x) {
            return x + 1;
        }, function (x) {
            return x > Map.max[axis];
        }, function (x) {
            return x - Map.num[axis] - Map.hiddenTiles;
        });
    }
    var redrawLower = function (axis, from, to) {
        from -= Map.hiddenTiles + 1;
        to -= Map.hiddenTiles + 1;
        redraw({from: from, to: to, id: axis}, getCounterAxisDef(axis), function (x, to) {
            return x > to;
        }, function (x) {
            return x - 1;
        }, function (x) {
            return x < 0;
        }, function (x) {
            return x + Map.num[axis] + Map.hiddenTiles;
        });
    }
    var redraw = function (moveAxis, staticAxis, compare, next, skip, remove) {
        var axis1, axis2, coords;
        var getTileCoords = function (axis1, axis2) {
            return {x: moveAxis.id == 'x' ? axis1 : axis2, y: moveAxis.id == 'x' ? axis2 : axis1};
        }
        for (axis1 = moveAxis.from; compare(axis1, moveAxis.to); axis1 = next(axis1)) {
            Map.Draw.toRemove(moveAxis.id, remove(axis1));
            if (skip(axis1))continue;
            for (axis2 = staticAxis.from; axis2 < staticAxis.to; axis2++) {
                coords = getTileCoords(axis1, axis2);
                Map.Draw.toDraw(coords);
            }
        }
    }
    var htks;
    return {
        init: function (el) {
            el.on('mousedown', mousedown);
            (htks = [new Hotkey('mapright', 'right', "Направо", function () {
                hotkeymove(-50, 'x', 'left');
            }, true, 'map'), new Hotkey('mapup', 'up', "Вверх", function () {
                hotkeymove(50, 'y', 'top');
            }, true, 'map'), new Hotkey('mapleft', 'left', "Налево", function () {
                hotkeymove(50, 'x', 'left');
            }, true, 'map'), new Hotkey('mapdown', 'down', "Вниз", function () {
                hotkeymove(-50, 'y', 'top');
            }, true, 'map')]).each(function (hk) {
                HotkeyManager.register(hk);
            });
        }, finalize: function (el) {
            el.off('mousedown', mousedown);
            htks.each(function (hk) {
                HotkeyManager.unregister(hk);
            });
            htks = null;
        }, wasDragged: function () {
            return dragged;
        }, freeze: function () {
            enabled = false;
        }, warmUp: function () {
            enabled = true;
        }, scrollby: scrollby
    };
}();

var Map = Map || {};
Map.Draw = function () {
    var obj = {}, drawQueue = [], removeQueue = [], drawn = {}, offset = {};
    var STATUS_STAGED_TO_DRAW = 1;
    var STATUS_STAGED_TO_REMOVE = 2;
    var STATUS_DRAWN = 3;
    var STATUS_NOT_DRAWN = 4;
    var getStatus = function (tile) {
        var str = tile.x + '-' + tile.y;
        if (drawn.hasOwnProperty(str))
            return drawn[str]; else return STATUS_NOT_DRAWN;
    };
    var setStatus = function (tile, status) {
        drawn[tile.x + '-' + tile.y] = status;
    };
    obj.setOffset = function (newOffset) {
        var tmp = {};
        tmp.left = newOffset.left !== undefined ? newOffset.left : offset.left;
        tmp.top = newOffset.top !== undefined ? newOffset.top : offset.top;
        if (tmp.left === offset.left && tmp.top === offset.top)return;
        offset = tmp;
        Map.mapEl.css(offset);
    };
    obj.getOffset = function () {
        return {left: offset.left, top: offset.top};
    };
    obj.toDraw = function (tile) {
        var status = getStatus(tile);
        if (status === STATUS_STAGED_TO_DRAW) {
            if (window.DEBUG)console.log('already staged for draw', tile);
            return;
        }
        Map.Data.provide(tile);
        drawQueue.push(tile);
        if (status !== STATUS_DRAWN)setStatus(tile, STATUS_STAGED_TO_DRAW);
    };
    obj.toRemove = function (axis, value) {
        removeQueue.push({axis: axis, value: value});
        for (var i in drawn) {
            var split = i.split('-');
            if ((split[0] == value && axis == 'x') || (split[1] == value && axis == 'y')) {
                drawn[i] = STATUS_STAGED_TO_REMOVE;
            }
        }
    };
    obj.checkDouble = function () {
        if (!DEBUG)return;
        var cache = [];
        if (!cache.indexOf)return;
        $('#map .image').each(function (k, v) {
            v = $(v).attr('style') + $(v).attr('class');
            if (cache.indexOf(v) !== -1) {
                console.log('div double alert', v);
                return;
            }
            cache.push(v);
        });
    };
    obj.processBatch = function (resetMap) {
        if (!drawQueue.length && !removeQueue.length)return;
        var i, j, drawTiles, removeTiles, html = '';
        drawTiles = drawQueue.slice(0);
        removeTiles = removeQueue.slice(0);
        drawQueue = [];
        removeQueue = [];
        if (resetMap) {
            drawn = {};
        }
        var callback = function () {
            for (i in drawTiles) {
                if (!drawTiles.hasOwnProperty(i))continue;
                var tile = drawTiles[i];
                if (getStatus(tile) === STATUS_DRAWN)continue;
                if (!resetMap && DEBUG && $('.x-' + tile.x + '.y-' + tile.y).length) {
                    if (getStatus(tile) !== STATUS_STAGED_TO_REMOVE)
                        console.warn("already drawn :-/"); else
                        console.warn("we might draw double now, but thats no problem, this tile will be removed in one of the next calls");
                }
                html += Map.Data.getHTML(tile, true);
                setStatus(tile, STATUS_DRAWN);
            }
            if (resetMap) {
                Map.mapEl.html(html);
                GameLoader.next('Загрузка карты');
                EventHandler.signal('map-drawed');
            } else {
                if (removeTiles.length) {
                    for (var i = 0; i < removeTiles.length; i++) {
                        var axis = removeTiles[i].axis;
                        var value = removeTiles[i].value;
                        $('.' + axis + '-' + value, Map.mapEl).filter('.bg').each(function (k, v) {
                            var cls = v.className;
                            var x = cls.match(/x-(\d+)/)[1];
                            var y = cls.match(/y-(\d+)/)[1];
                            delete drawn[x + '-' + y];
                        }).end().remove();
                    }
                }
                Map.mapEl.append(html);
            }
            obj.checkDouble();
        };
        return Map.Data.ensureLoaded(callback);
    };
    obj.reset = function () {
        drawn = {};
        Map.Data.clear();
    };
    return obj;
}();

var Map = Map || {};
Map.Data = function () {
    var data = [], obj = {}, loadBatch = [];
    var dataTTL = 60000;
    var dataLoaded = function (tileCoords, gimmeWhatYouGot) {
        Map.validateCoords(tileCoords);
        var x = tileCoords.x, y = tileCoords.y;
        if (!data[x] || !data[x][y] || (!gimmeWhatYouGot && isOutdated(data[x][y]))) {
            return false;
        }
        return true;
    };
    var isOutdated = function (tile) {
        return tile.stamp + dataTTL < new Date().getTime();
    };
    obj.getHTML = function (tileCoords, ignoreTTL) {
        return obj.getTile(tileCoords, ignoreTTL).toHTML();
    };
    obj.getTile = function (tileCoords, ignoreTTL) {
        if (!dataLoaded(tileCoords, ignoreTTL)) {
            if (DEBUG)console.log('Requested invalid or outdated data: ', tileCoords, ignoreTTL);
            return '';
        }
        return data[tileCoords.x][tileCoords.y];
    };
    obj.importData = function (rawData) {
        Map.Data.Import.parse(data, rawData);
    };
    obj.provide = function (tile) {
        loadBatch.push([tile.x, tile.y]);
    };
    obj.ensureLoaded = function (callback, tiles) {
        var toCheck, toLoad = [], i;
        if (tiles) {
            toCheck = tiles;
        } else {
            toCheck = loadBatch.slice(0);
            loadBatch = [];
        }
        for (i in toCheck) {
            if (!toCheck.hasOwnProperty(i))continue;
            if (!dataLoaded({x: toCheck[i][0], y: toCheck[i][1]}))
                toLoad.push(toCheck[i]);
        }
        Map.Data.Loader.load(toLoad, callback);
        return toLoad.length !== 0;
    };
    obj.clear = function () {
        data = [];
    };
    return obj;
}();
Map.Data.Loader = function () {
    var firing = false, queue = [], failedRequests = {}, current;
    var processQueue = function () {
        firing = false;
        if (queue.length) {
            var next = queue.shift();
            Map.Data.ensureLoaded(next.callback, next.tiles);
        }
    };
    var failed = function (req) {
        return function (xhr, state) {
            if (state === 'abort')return;
            var reqId = JSON.stringify(req), tries;
            if (failedRequests.hasOwnProperty(reqId)) {
                tries = ++failedRequests[reqId];
            } else {
                tries = failedRequests[reqId] = 1;
            }
            DEBUG && console.log('map request failed (' + tries + ' tries)');
            if (tries < 3) {
                sendRequest(req);
            } else {
                delete failedRequests[reqId];
                DEBUG && console.log('giving up');
            }
        };
    };
    var success = function (callback) {
        return function (resp) {
            Map.Data.importData(resp);
            callback();
        };
    };
    var sendRequest = function (req) {
        if (firing) {
            queue.push(req);
        } else {
            if (req.tiles.length === 0) {
                req.callback();
                processQueue();
                return;
            }
            firing = true;
            current = Ajax.get('map', 'get_complete_data', {tiles: JSON.stringify(req.tiles)}).done(success(req.callback)).always(processQueue).fail(failed(req));
        }
    };
    return {
        load: function (tiles, callback) {
            sendRequest({tiles: tiles, callback: callback});
            return true;
        }, tryProcess: function () {
            if (!firing)processQueue();
        }, freeQueue: function () {
            queue = [];
            if (current && current.state() === 'pending') {
                current.abort();
            }
            firing = false;
        }
    };
}();
Map.Data.images = [{"sort": 19, "path": "jobicon_13.png", "width": 110, "height": 77}, {
    "sort": 17,
    "path": "jobicon_11.png",
    "width": 78,
    "height": 82
}, {"sort": 32, "path": "jobicon_25.png", "width": 146, "height": 100}, {
    "sort": 45,
    "path": "jobicon_6.png",
    "width": 110,
    "height": 89
}, {"sort": 33, "path": "jobicon_26.png", "width": 146, "height": 101}, {
    "sort": 24,
    "path": "jobicon_18.png",
    "width": 97,
    "height": 78
}, {"sort": 16, "path": "jobicon_10.png", "width": 132, "height": 63}, {
    "sort": 35,
    "path": "jobicon_28.png",
    "width": 74,
    "height": 73
}, {"sort": 27, "path": "jobicon_20.png", "width": 125, "height": 90}, {
    "sort": 46,
    "path": "jobicon_7.png",
    "width": 120,
    "height": 65
}, {"sort": 30, "path": "jobicon_23.png", "width": 111, "height": 75}, {
    "sort": 44,
    "path": "jobicon_5.png",
    "width": 110,
    "height": 89
}, {"sort": 28, "path": "jobicon_21.png", "width": 82, "height": 60}, {
    "sort": 34,
    "path": "jobicon_27.png",
    "width": 71,
    "height": 81
}, {"sort": 25, "path": "jobicon_19.png", "width": 127, "height": 112}, {
    "sort": 29,
    "path": "jobicon_22.png",
    "width": 78,
    "height": 60
}, {"sort": 26, "path": "jobicon_2.png", "width": 102, "height": 81}, {
    "sort": 22,
    "path": "jobicon_16.png",
    "width": 121,
    "height": 117
}, {"sort": 23, "path": "jobicon_17.png", "width": 111, "height": 68}, {
    "sort": 37,
    "path": "jobicon_3.png",
    "width": 105,
    "height": 77
}, {"sort": 43, "path": "jobicon_4.png", "width": 68, "height": 42}, {
    "sort": 15,
    "path": "jobicon_1.png",
    "width": 90,
    "height": 64
}, {"sort": 31, "path": "jobicon_24.png", "width": 126, "height": 83}, {
    "sort": 21,
    "path": "jobicon_15.png",
    "width": 129,
    "height": 94
}, {"sort": 20, "path": "jobicon_14.png", "width": 99, "height": 92}, {
    "sort": 47,
    "path": "jobicon_8.png",
    "width": 103,
    "height": 94
}, {"sort": 48, "path": "jobicon_9.png", "width": 93, "height": 116}, {
    "sort": 18,
    "path": "jobicon_12.png",
    "width": 117,
    "height": 78
}, {"sort": 88, "path": "river_05.png", "width": 332, "height": 173}, {
    "sort": 89,
    "path": "river_05_02.png",
    "width": 332,
    "height": 173
}, {"sort": 90, "path": "river_06.png", "width": 337, "height": 170}, {
    "sort": 91,
    "path": "river_06_02.png",
    "width": 337,
    "height": 170
}, {"sort": 92, "path": "river_07.png", "width": 129, "height": 136}, {
    "sort": 93,
    "path": "river_08.png",
    "width": 130,
    "height": 136
}, {"sort": 94, "path": "river_09.png", "width": 173, "height": 167}, {
    "sort": 95,
    "path": "river_10.png",
    "width": 179,
    "height": 155
}, {"sort": 96, "path": "river_11.png", "width": 200, "height": 175}, {
    "sort": 97,
    "path": "river_12.png",
    "width": 197,
    "height": 187
}, {"sort": 98, "path": "river_14.png", "width": 144, "height": 159}, {
    "sort": 99,
    "path": "river_15.png",
    "width": 265,
    "height": 196
}, {"sort": 100, "path": "river_16.png", "width": 155, "height": 286}, {
    "sort": 101,
    "path": "river_17.png",
    "width": 105,
    "height": 159
}, {"sort": 102, "path": "river_18.png", "width": 176, "height": 189}, {
    "sort": 103,
    "path": "river_19.png",
    "width": 266,
    "height": 223
}, {"sort": 104, "path": "river_20.png", "width": 220, "height": 198}, {
    "sort": 109,
    "path": "river_bridge_01.png",
    "width": 61,
    "height": 32
}, {"sort": 110, "path": "river_bridge_02.png", "width": 61, "height": 32}, {
    "sort": 111,
    "path": "river_dry_01_01.png",
    "width": 147,
    "height": 76
}, {"sort": 112, "path": "river_dry_01_02.png", "width": 187, "height": 150}, {
    "sort": 113,
    "path": "river_dry_01_03.png",
    "width": 94,
    "height": 66
}, {"sort": 114, "path": "river_dry_02_01.png", "width": 147, "height": 76}, {
    "sort": 115,
    "path": "river_dry_02_02.png",
    "width": 187,
    "height": 150
}, {"sort": 116, "path": "river_dry_02_03.png", "width": 94, "height": 66}, {
    "sort": 117,
    "path": "river_island_01.png",
    "width": 21,
    "height": 16
}, {"sort": 118, "path": "river_island_02.png", "width": 26, "height": 16}, {
    "sort": 119,
    "path": "river_island_03.png",
    "width": 32,
    "height": 22
}, {"sort": 120, "path": "river_island_04.png", "width": 19, "height": 15}, {
    "sort": 121,
    "path": "river_island_05.png",
    "width": 50,
    "height": 48
}, {"sort": 122, "path": "river_island_06.png", "width": 89, "height": 52}, {
    "sort": 123,
    "path": "river_island_07.png",
    "width": 25,
    "height": 19
}, {"sort": 124, "path": "river_island_08.png", "width": 15, "height": 11}, {
    "sort": 125,
    "path": "river_island_09.png",
    "width": 28,
    "height": 18
}, {"sort": 126, "path": "river_island_10.png", "width": 34, "height": 56}, {
    "sort": 127,
    "path": "river_island_11.png",
    "width": 55,
    "height": 37
}, {"sort": 128, "path": "river_island_12.png", "width": 23, "height": 43}, {
    "sort": 129,
    "path": "river_island_13.png",
    "width": 25,
    "height": 30
}, {"sort": 130, "path": "river_island_14.png", "width": 35, "height": 38}, {
    "sort": 131,
    "path": "river_island_15.png",
    "width": 29,
    "height": 33
}, {"sort": 132, "path": "river_island_16.png", "width": 64, "height": 45}, {
    "sort": 133,
    "path": "river_island_17.png",
    "width": 43,
    "height": 35
}, {"sort": 134, "path": "river_lake_01.png", "width": 93, "height": 35}, {
    "sort": 135,
    "path": "river_lake_02.png",
    "width": 178,
    "height": 102
}, {"sort": 136, "path": "river_lake_02_01.png", "width": 178, "height": 102}, {
    "sort": 137,
    "path": "river_lake_03.png",
    "width": 196,
    "height": 99
}, {"sort": 138, "path": "river_lake_04.png", "width": 107, "height": 58}, {
    "sort": 139,
    "path": "river_lake_05.png",
    "width": 140,
    "height": 110
}, {"sort": 140, "path": "river_lake_06.png", "width": 77, "height": 125}, {
    "sort": 141,
    "path": "river_lake_07.png",
    "width": 135,
    "height": 118
}, {"sort": 142, "path": "river_lake_08.png", "width": 221, "height": 67}, {
    "sort": 143,
    "path": "road_01.png",
    "width": 123,
    "height": 135
}, {"sort": 144, "path": "road_02.png", "width": 115, "height": 140}, {
    "sort": 145,
    "path": "road_03.png",
    "width": 178,
    "height": 104
}, {"sort": 146, "path": "road_04.png", "width": 129, "height": 80}, {
    "sort": 147,
    "path": "road_05.png",
    "width": 129,
    "height": 80
}, {"sort": 148, "path": "road_06.png", "width": 129, "height": 80}, {
    "sort": 149,
    "path": "road_07.png",
    "width": 129,
    "height": 80
}, {"sort": 150, "path": "road_08.png", "width": 273, "height": 161}, {
    "sort": 151,
    "path": "road_09.png",
    "width": 185,
    "height": 113
}, {"sort": 152, "path": "road_10.png", "width": 273, "height": 150}, {
    "sort": 164,
    "path": "texture_background_desert_01.png",
    "width": 256,
    "height": 256
}, {"sort": 165, "path": "texture_background_gras_01.png", "width": 256, "height": 256}, {
    "sort": 166,
    "path": "texture_blending_grass_01.png",
    "width": 256,
    "height": 256
}, {"sort": 167, "path": "texture_deco_01.png", "width": 154, "height": 87}, {
    "sort": 168,
    "path": "texture_deco_02.png",
    "width": 169,
    "height": 89
}, {"sort": 169, "path": "texture_deco_03.png", "width": 153, "height": 82}, {
    "sort": 170,
    "path": "texture_deco_04.png",
    "width": 45,
    "height": 30
}, {"sort": 171, "path": "texture_deco_05.png", "width": 40, "height": 28}, {
    "sort": 172,
    "path": "texture_deco_06.png",
    "width": 16,
    "height": 14
}, {"sort": 173, "path": "texture_deco_07.png", "width": 21, "height": 26}, {
    "sort": 174,
    "path": "texture_deco_08.png",
    "width": 22,
    "height": 38
}, {"sort": 175, "path": "texture_deco_09.png", "width": 45, "height": 21}, {
    "sort": 176,
    "path": "texture_deco_10.png",
    "width": 19,
    "height": 12
}, {"sort": 177, "path": "texture_deco_11.png", "width": 28, "height": 33}, {
    "sort": 178,
    "path": "texture_deco_12.png",
    "width": 28,
    "height": 31
}, {"sort": 179, "path": "texture_deco_13.png", "width": 22, "height": 24}, {
    "sort": 180,
    "path": "texture_deco_14.png",
    "width": 27,
    "height": 46
}, {"sort": 181, "path": "texture_deco_15.png", "width": 16, "height": 15}, {
    "sort": 182,
    "path": "texture_deco_16.png",
    "width": 40,
    "height": 36
}, {"sort": 183, "path": "texture_deco_17.png", "width": 41, "height": 19}, {
    "sort": 184,
    "path": "texture_desert_01.png",
    "width": 530,
    "height": 286
}, {"sort": 185, "path": "texture_desert_02.png", "width": 363, "height": 197}, {
    "sort": 186,
    "path": "texture_desert_03.png",
    "width": 580,
    "height": 266
}, {"sort": 202, "path": "texture_gras_dunkel_01.png", "width": 256, "height": 256}, {
    "sort": 203,
    "path": "texture_gras_dunkel_02.png",
    "width": 256,
    "height": 256
}, {"sort": 204, "path": "texture_gras_variation_01.png", "width": 394, "height": 280}, {
    "sort": 205,
    "path": "texture_gras_variation_02.png",
    "width": 438,
    "height": 236
}, {"sort": 206, "path": "texture_leaves_01.png", "width": 121, "height": 78}, {
    "sort": 207,
    "path": "texture_leaves_02.png",
    "width": 78,
    "height": 33
}, {"sort": 208, "path": "texture_leaves_02_01.png", "width": 78, "height": 33}, {
    "sort": 209,
    "path": "texture_leaves_03.png",
    "width": 93,
    "height": 43
}, {"sort": 210, "path": "texture_leaves_03_01.png", "width": 93, "height": 43}, {
    "sort": 211,
    "path": "texture_leaves_04.png",
    "width": 72,
    "height": 37
}, {"sort": 212, "path": "texture_leaves_04_01.png", "width": 72, "height": 37}, {
    "sort": 213,
    "path": "texture_mountain_desert_01.png",
    "width": 242,
    "height": 167
}, {"sort": 214, "path": "texture_mountain_desert_02.png", "width": 473, "height": 347}, {
    "sort": 215,
    "path": "texture_mountain_desert_03.png",
    "width": 619,
    "height": 234
}, {"sort": 216, "path": "texture_mountain_desert_04.png", "width": 670, "height": 374}, {
    "sort": 217,
    "path": "texture_mountain_grass_01.png",
    "width": 619,
    "height": 413
}, {"sort": 218, "path": "texture_mountain_grass_02.png", "width": 775, "height": 400}, {
    "sort": 219,
    "path": "texture_mountain_grass_03.png",
    "width": 453,
    "height": 403
}, {"sort": 220, "path": "texture_mountain_grass_04.png", "width": 374, "height": 283}, {
    "sort": 221,
    "path": "texture_mountain_grass_05.png",
    "width": 521,
    "height": 300
}, {"sort": 222, "path": "texture_mountain_grass_06.png", "width": 364, "height": 180}, {
    "sort": 223,
    "path": "texture_plant_01.png",
    "width": 10,
    "height": 8
}, {"sort": 224, "path": "texture_plant_02.png", "width": 21, "height": 16}, {
    "sort": 225,
    "path": "texture_plant_03.png",
    "width": 36,
    "height": 37
}, {"sort": 226, "path": "texture_plant_04.png", "width": 25, "height": 26}, {
    "sort": 227,
    "path": "texture_plant_05.png",
    "width": 21,
    "height": 16
}, {"sort": 228, "path": "texture_plant_06.png", "width": 21, "height": 16}, {
    "sort": 229,
    "path": "texture_plant_07.png",
    "width": 21,
    "height": 16
}, {"sort": 230, "path": "texture_telegram_01.png", "width": 281, "height": 157}, {
    "sort": 232,
    "path": "texture_town_01.png",
    "width": 274,
    "height": 165
}, {"sort": 233, "path": "texture_town_02.png", "width": 274, "height": 165}, {
    "sort": 234,
    "path": "texture_town_03.png",
    "width": 274,
    "height": 165
}, {"sort": 147, "path": "placeholder.png", "width": 40, "height": 40}, {
    "sort": 235,
    "path": "tree_01.png",
    "width": 141,
    "height": 92
}, {"sort": 236, "path": "tree_02.png", "width": 113, "height": 91}, {
    "sort": 237,
    "path": "tree_03.png",
    "width": 103,
    "height": 84
}, {"sort": 238, "path": "tree_04.png", "width": 100, "height": 67}, {
    "sort": 239,
    "path": "tree_05.png",
    "width": 120,
    "height": 62
}, {"sort": 240, "path": "tree_06.png", "width": 139, "height": 110}, {
    "sort": 241,
    "path": "tree_07.png",
    "width": 79,
    "height": 62
}, {"sort": 242, "path": "tree_08.png", "width": 109, "height": 69}, {
    "sort": 243,
    "path": "tree_09.png",
    "width": 73,
    "height": 45
}, {"sort": 244, "path": "tree_10.png", "width": 84, "height": 68}, {
    "sort": 245,
    "path": "tree_11.png",
    "width": 25,
    "height": 37
}, {"sort": 246, "path": "tree_12.png", "width": 25, "height": 37}, {
    "sort": 247,
    "path": "tree_13.png",
    "width": 36,
    "height": 27
}, {"sort": 248, "path": "tree_14.png", "width": 84, "height": 68}, {
    "sort": 249,
    "path": "tree_15.png",
    "width": 32,
    "height": 26
}, {"sort": 250, "path": "tree_16.png", "width": 27, "height": 26}, {
    "sort": 251,
    "path": "tree_17.png",
    "width": 106,
    "height": 85
}, {"sort": 252, "path": "tree_18.png", "width": 20, "height": 18}, {
    "sort": 163,
    "path": "symbols_error.png",
    "width": 65,
    "height": 75
}, {"sort": 106, "path": "river_24.png", "width": 351, "height": 296}, {
    "sort": 105,
    "path": "river_23.png",
    "width": 372,
    "height": 304
}, {"sort": 153, "path": "road_11.png", "width": 372, "height": 320}, {
    "sort": 154,
    "path": "road_12.png",
    "width": 372,
    "height": 320
}, {"sort": 155, "path": "road_13.png", "width": 265, "height": 151}, {
    "sort": 156,
    "path": "road_14.png",
    "width": 265,
    "height": 151
}, {"sort": 107, "path": "river_25.png", "width": 257, "height": 151}, {
    "sort": 108,
    "path": "river_26.png",
    "width": 257,
    "height": 151
}, {"sort": 157, "path": "road_15.png", "width": 132, "height": 78}, {
    "sort": 158,
    "path": "road_16.png",
    "width": 137,
    "height": 78
}, {"sort": 159, "path": "road_17.png", "width": 146, "height": 78}, {
    "sort": 160,
    "path": "road_18.png",
    "width": 146,
    "height": 78
}, {"sort": 161, "path": "road_19.png", "width": 105, "height": 87}, {
    "sort": 162,
    "path": "road_20.png",
    "width": 105,
    "height": 79
}, {"sort": 231, "path": "texture_town_00.png", "width": 274, "height": 165}, {
    "sort": 193,
    "path": "texture_fort_00.png",
    "width": 232,
    "height": 157
}, {"sort": 194, "path": "texture_fort_01.png", "width": 232, "height": 157}, {
    "sort": 195,
    "path": "texture_fort_02.png",
    "width": 232,
    "height": 157
}, {"sort": 196, "path": "texture_fort_03.png", "width": 232, "height": 157}, {
    "sort": 3,
    "path": "clouds_1.png",
    "width": 235,
    "height": 187
}, {"sort": 4, "path": "clouds_2.png", "width": 226, "height": 176}, {
    "sort": 5,
    "path": "clouds_3.png",
    "width": 230,
    "height": 253
}, {"sort": 6, "path": "clouds_4.png", "width": 95, "height": 127}, {
    "sort": 7,
    "path": "clouds_5.png",
    "width": 162,
    "height": 155
}, {"sort": 8, "path": "clouds_6.png", "width": 414, "height": 182}, {
    "sort": 197,
    "path": "texture_fort_04.png",
    "width": 154,
    "height": 161
}, {"sort": 51, "path": "quest_berg_01.png", "width": 293, "height": 253}, {
    "sort": 58,
    "path": "quests_farm_01.png",
    "width": 301,
    "height": 174
}, {"sort": 59, "path": "quests_farm_02.png", "width": 235, "height": 144}, {
    "sort": 60,
    "path": "quests_feuerstelle_01.png",
    "width": 180,
    "height": 102
}, {"sort": 61, "path": "quests_feuerstelle_02.png", "width": 154, "height": 98}, {
    "sort": 62,
    "path": "quests_fluss_01.png",
    "width": 489,
    "height": 333
}, {"sort": 64, "path": "quests_geisterstadt_01.png", "width": 252, "height": 147}, {
    "sort": 65,
    "path": "quests_herrenhaus_01.png",
    "width": 417,
    "height": 243
}, {"sort": 66, "path": "quests_herrenhaus_02.png", "width": 252, "height": 147}, {
    "sort": 67,
    "path": "quests_hoehle.png",
    "width": 204,
    "height": 130
}, {"sort": 68, "path": "quests_indianerlager_01.png", "width": 276, "height": 212}, {
    "sort": 69,
    "path": "quests_indianerlager_02.png",
    "width": 322,
    "height": 208
}, {"sort": 70, "path": "quests_kreuzung.png", "width": 242, "height": 133}, {
    "sort": 71,
    "path": "quests_mine_01.png",
    "width": 125,
    "height": 98
}, {"sort": 72, "path": "quests_mine_02.png", "width": 125, "height": 98}, {
    "sort": 73,
    "path": "quests_oestliches_wegkreuz.png",
    "width": 258,
    "height": 145
}, {"sort": 75, "path": "quests_ranch_01.png", "width": 385, "height": 236}, {
    "sort": 76,
    "path": "quests_ranch_02.png",
    "width": 293,
    "height": 173
}, {"sort": 79, "path": "quests_stadt_01.png", "width": 262, "height": 158}, {
    "sort": 80,
    "path": "quests_stadt_02.png",
    "width": 266,
    "height": 189
}, {"sort": 82, "path": "quests_waldlichtung_01.png", "width": 314, "height": 213}, {
    "sort": 83,
    "path": "quests_waldlichtung_02.png",
    "width": 355,
    "height": 280
}, {"sort": 85, "path": "quests_westliches_wegkreuz.png", "width": 233, "height": 137}, {
    "sort": 86,
    "path": "quests_wuestenlager01.png",
    "width": 291,
    "height": 227
}, {"sort": 87, "path": "quests_wuestenlager02.png", "width": 290, "height": 256}, {
    "sort": 10,
    "path": "deco_egg_01.png",
    "width": 154,
    "height": 87
}, {"sort": 11, "path": "deco_egg_02.png", "width": 15, "height": 20}, {
    "sort": 12,
    "path": "deco_egg_03.png",
    "width": 38,
    "height": 27
}, {"sort": 13, "path": "deco_egg_04.png", "width": 71, "height": 41}, {
    "sort": 14,
    "path": "deco_egg_05.png",
    "width": 72,
    "height": 40
}, {"sort": 199, "path": "texture_ghosttown_01.png", "width": 274, "height": 165}, {
    "sort": 200,
    "path": "texture_ghosttown_02.png",
    "width": 274,
    "height": 165
}, {"sort": 201, "path": "texture_ghosttown_03.png", "width": 274, "height": 165}, {
    "sort": 187,
    "path": "texture_fair_01.png",
    "width": 326,
    "height": 204
}, {"sort": 188, "path": "texture_fair_02.png", "width": 326, "height": 204}, {
    "sort": 189,
    "path": "texture_fair_03.png",
    "width": 326,
    "height": 204
}, {"sort": 190, "path": "texture_fair_04.png", "width": 326, "height": 204}, {
    "sort": 191,
    "path": "texture_fair_05.png",
    "width": 326,
    "height": 204
}, {"sort": 192, "path": "texture_fair_06.png", "width": 326, "height": 204}, {
    "sort": 63,
    "path": "quests_fort.png",
    "width": 268,
    "height": 182
}, {"sort": 54, "path": "quests_canyon.png", "width": 429, "height": 311}, {
    "sort": 84,
    "path": "quests_werkstatt.png",
    "width": 229,
    "height": 168
}, {"sort": 9, "path": "clouds_7.png", "width": 484, "height": 347}, {
    "sort": 53,
    "path": "quests_biggest_town.png",
    "width": 450,
    "height": 300
}, {"sort": 55, "path": "quests_cementry.png", "width": 268, "height": 196}, {
    "sort": 81,
    "path": "quests_three_places.png",
    "width": 450,
    "height": 300
}, {"sort": 2, "path": "placeholder.png", "width": 40, "height": 40}, {
    "sort": 36,
    "path": "jobicon_29.png",
    "width": 126,
    "height": 112
}, {"sort": 38, "path": "jobicon_30.png", "width": 112, "height": 110}, {
    "sort": 39,
    "path": "jobicon_31.png",
    "width": 160,
    "height": 53
}, {"sort": 40, "path": "jobicon_32.png", "width": 109, "height": 87}, {
    "sort": 41,
    "path": "jobicon_33.png",
    "width": 114,
    "height": 99
}, {"sort": 42, "path": "jobicon_34.png", "width": 96, "height": 100}, {
    "sort": 57,
    "path": "quests_desert_village.png",
    "width": 278,
    "height": 300
}, {"sort": 56, "path": "quests_crystal.png", "width": 470, "height": 366}, {
    "sort": 74,
    "path": "quests_pilgrim.png",
    "width": 174,
    "height": 132
}, {"sort": 77, "path": "quests_saltwater.png", "width": 424, "height": 314}, {
    "sort": 78,
    "path": "quests_shadyland.png",
    "width": 395,
    "height": 175
}, {"sort": 198, "path": "texture_fort_05.png", "width": 268, "height": 182}, {
    "sort": 2,
    "path": "adventures_spot.png",
    "width": 365,
    "height": 197
}, {"sort": 52, "path": "quests_apple_town.png", "width": 234, "height": 165}];
Map.Data.interactiveImages = {
    "143": ["town", [178, 141, 142, 143], [220, 221, 222]],
    "21": ["job", [1]],
    "16": ["job", [2]],
    "19": ["job", [3]],
    "20": ["job", [4]],
    "11": ["job", [5]],
    "3": ["job", [6]],
    "9": ["job", [7]],
    "25": ["job", [8]],
    "26": ["job", [9]],
    "6": ["job", [10]],
    "1": ["job", [11]],
    "27": ["job", [12]],
    "0": ["job", [13]],
    "24": ["job", [14]],
    "23": ["job", [15]],
    "17": ["job", [16]],
    "18": ["job", [17]],
    "5": ["job", [18]],
    "14": ["job", [19]],
    "8": ["job", [20]],
    "12": ["job", [21]],
    "15": ["job", [22]],
    "10": ["job", [23]],
    "22": ["job", [24]],
    "2": ["job", [25]],
    "4": ["job", [26]],
    "13": ["job", [27]],
    "7": ["job", [28]],
    "237": ["job", [29]],
    "238": ["job", [30]],
    "239": ["job", [31]],
    "240": ["job", [32]],
    "241": ["job", [33]],
    "242": ["job", [34]],
    "180": ["fort", [179, 180, [189, 125, 25]]],
    "181": ["fort", [179, 181, [189, 125, 25]]],
    "182": ["fort", [179, 182, [189, 125, 25]]],
    "248": ["fort", [179, 248, [189, 155, 35]]],
    "190": ["quest", [12]],
    "191": ["quest", [16]],
    "192": ["quest", [17]],
    "193": ["quest", [3]],
    "194": ["quest", [4]],
    "195": ["quest", [8]],
    "196": ["quest", [15]],
    "197": ["quest", [7]],
    "198": ["quest", [25]],
    "199": ["quest", [9]],
    "200": ["quest", [1]],
    "201": ["quest", [2]],
    "202": ["quest", [20]],
    "203": ["quest", [10]],
    "204": ["quest", [11]],
    "205": ["quest", [18]],
    "206": ["quest", [5]],
    "207": ["quest", [6]],
    "208": ["quest", [13]],
    "209": ["quest", [14]],
    "210": ["quest", [22]],
    "211": ["quest", [21]],
    "212": ["quest", [19]],
    "213": ["quest", [24]],
    "214": ["quest", [23]],
    "228": ["fair", [223, 224, 225, 226, 227, 228]],
    "229": ["quest", [26]],
    "230": ["quest", [27]],
    "231": ["quest", [28]],
    "233": ["quest", [29]],
    "235": ["quest", [30]],
    "234": ["quest", [31]],
    "243": ["quest", [36]],
    "244": ["quest", [32]],
    "245": ["quest", [34]],
    "246": ["quest", [33]],
    "247": ["quest", [35]],
    "249": ["adventures", [13373]],
    "250": ["quest", [250]]
};

Map = Map || {};
Map.Data = Map.Data || {};
Map.Data.Import = (function () {
    var isImageType = function (imgIdx, type) {
        var interactive = Map.Data.interactiveImages[imgIdx];
        return interactive && interactive[0] === type;
    };
    var isQuestImage = function (imgIdx) {
        return isImageType(imgIdx, 'quest');
    };
    var isFortImage = function (imgIdx) {
        return isImageType(imgIdx, 'fort');
    };
    var isFairImage = function (imgIdx) {
        return isImageType(imgIdx, 'fair');
    };
    var setQuestData = function (x, y, imageObj, data) {
        if (data && data[x] && data[x][y]) {
            for (var i in data[x][y]) {
                if (!data[x][y].hasOwnProperty(i))continue;
                var entry = data[x][y][i];
                if (entry[0].left == imageObj.left && entry[0].top == imageObj.top) {
                    Map.QuestHandler.Featured[entry[1].x + '-' + entry[1].y] = entry[1];
                    break;
                }
            }
        }
    };
    var getTownImgIdx = function (defaultImgIdx, points, isGhost) {
        if (defaultImgIdx !== 143) {
            console.log('used non default image as town: ', defaultImgIdx);
            return defaultImgIdx;
        }
        var stages = Map.Data.interactiveImages[defaultImgIdx][1];
        var ghosts = Map.Data.interactiveImages[defaultImgIdx][2];
        if (points > 40000) {
            return (isGhost) ? ghosts[2] : stages[3];
        } else if (points > 20000) {
            return (isGhost) ? ghosts[1] : stages[2];
        } else if (points > 0) {
            return (isGhost) ? ghosts[0] : stages[1];
        }
        return stages[0];
    };
    var parseStaticData = function (data, rawData, questData) {
        var sub, staticData = rawData, x, y, layer, layerContent, hasTutorialQuest = LinearQuestHandler.hasTutorialQuest();
        for (sub in staticData) {
            if (!staticData.hasOwnProperty(sub))continue;
            for (x in staticData[sub]) {
                if (!staticData[sub].hasOwnProperty(x))continue;
                for (y in staticData[sub][x]) {
                    if (!staticData[sub][x].hasOwnProperty(y))continue;
                    try {
                        Map.validateCoords({x: x, y: y});
                    } catch (e) {
                        continue;
                    }
                    var mapX = parseInt(x);
                    var mapY = parseInt(y);
                    if (null == data[mapX])data[mapX] = [];
                    if (null == staticData[sub][x][y])continue;
                    var tile = new Map.Component.Tile(x, y);
                    for (layer in staticData[sub][x][y]) {
                        if (!staticData[sub][x][y].hasOwnProperty(layer))continue;
                        layerContent = staticData[sub][x][y][layer];
                        if (Map.bgLayer == layer && null !== layerContent) {
                            tile.setBackground(layerContent);
                            continue;
                        }
                        var images = layerContent;
                        for (var imgIdx in images) {
                            if (null == images[imgIdx] || !images.hasOwnProperty(imgIdx))continue;
                            var image = images[imgIdx];
                            var imageObj = {top: image[2], left: image[3], idx: image[1], data: undefined};
                            if (!imageObj)continue;
                            if (isQuestImage(imageObj.idx)) {
                                setQuestData(x, y, imageObj, questData);
                            } else if (isFortImage(imageObj.idx)) {
                                var fortIdx = Map.Data.interactiveImages[imageObj.idx][1][0];
                                imageObj.interactive = Map.Data.interactiveImages[imageObj.idx];
                                imageObj.idx = fortIdx;
                            } else if (isFairImage(imageObj.idx)) {
                                var fairIdx = Map.Data.interactiveImages[imageObj.idx][1][0];
                                imageObj.interactive = Map.Data.interactiveImages[imageObj.idx];
                                imageObj.idx = fairIdx;
                            }
                            tile.addImage(Map.Component.Factory(layer, {
                                'top': imageObj.top,
                                'left': imageObj.left
                            }, imageObj.idx, imageObj.interactive));
                        }
                    }
                    if (hasTutorialQuest) {
                        tile.addImage(new Map.Component.Image(16, 232, {top: -60, left: -150}));
                    }
                    data[mapX][mapY] = tile;
                }
            }
        }
    };
    var parseDynamicData = function (data, rawData) {
        var sub, x, y, tile, i, entry, image;
        for (sub in rawData) {
            if (!rawData.hasOwnProperty(sub))continue;
            for (x in rawData[sub]) {
                if (!rawData[sub].hasOwnProperty(x))continue;
                for (y in rawData[sub][x]) {
                    if (!rawData[sub][x].hasOwnProperty(y))continue;
                    tile = data[x][y];
                    dataMatched:for (i in rawData[sub][x][y]) {
                        if (!rawData[sub][x][y].hasOwnProperty(i))continue;
                        entry = rawData[sub][x][y][i];
                        for (var z in tile.layers) {
                            if (!tile.layers.hasOwnProperty(z))continue;
                            image = tile.layers[z];
                            if (image.top == entry[0].top && image.left == entry[0].left) {
                                if (entry[1].count) {
                                    image.setPeople(entry[1]);
                                    continue dataMatched;
                                } else if (entry[1].town_id) {
                                    entry.idx = getTownImgIdx(image.dataIdx, entry[1].points, entry[1].member == 0 && !entry[1].npctown);
                                    image.data = entry;
                                    continue dataMatched;
                                } else if (entry[1].job_id) {
                                    var k = entry[1].x + '-' + entry[1].y;
                                    if (undefined === Map.JobHandler.Featured[k])
                                        Map.JobHandler.Featured[k] = {};
                                    Map.JobHandler.Featured[k][entry[1].job_id] = entry[1];
                                    continue dataMatched;
                                } else if (entry[1].fort_id) {
                                    image.dataIdx = image.interactive[1][1];
                                    image.data = entry;
                                    if (entry[1].war) {
                                        var battleData = image.interactive[1][2];
                                        tile.addImage(Map.Component.Factory(image.layer, {
                                            'left': image.left + battleData[1],
                                            'top': image.top + battleData[2]
                                        }, battleData[0]));
                                    }
                                    continue dataMatched;
                                } else if (entry[1].fair_id) {
                                    var fair = entry[1];
                                    image.data = entry;
                                    if (fair.status > 1) {
                                        image.dataIdx = image.interactive[1][5];
                                    } else {
                                        var perStage = parseInt(fair.sum_needed / 5);
                                        var curStage = Math.min(4, parseInt(fair.sum_current / perStage)) || 0;
                                        image.dataIdx = image.interactive[1][curStage];
                                    }
                                    continue dataMatched;
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    return {
        parse: function (data, rawData) {
            parseStaticData(data, rawData['static'], rawData['quests']);
            parseDynamicData(data, rawData['dynamic']);
        }
    };
})();
;
(function (global) {
    'use strict';
    var Map = global.Map = global.Map || {};
    Map.Component = global.Map.Component = {};
    Map.Component.Tile = function (x, y) {
        this.x = x;
        this.y = y;
        this.layers = [];
        this.people = [];
        this.stamp = new Date().getTime();
        this.bg = null;
    };
    Map.Component.Tile.prototype = {
        htmlSkel: '<div class="y-%1 x-%2 image bg bg_%3" ' + 'style="top: %4px; left: %5px"></div>',
        toHTML: function () {
            var imgIdx;
            var html = s(this.htmlSkel, this.y, this.x, this.bg, this.y * Map.tileSize, this.x * Map.tileSize);
            for (var imgIdx in this.layers) {
                if (!this.layers.hasOwnProperty(imgIdx))continue;
                html += this.layers[imgIdx].getHTML(this.x, this.y);
            }
            return html;
        },
        setBackground: function (imgDataIdx) {
            this.bg = parseInt(imgDataIdx, 10);
        },
        addImage: function (image) {
            this.layers.push(image);
            return this.layers.length - 1;
        }
    };
    Map.Component.Factory = function (layer, position, dataIdx, interactive) {
        interactive = interactive || Map.Data.interactiveImages[dataIdx];
        var comp, type = interactive ? interactive[0] : null;
        switch (type) {
            case'job':
                comp = new Map.Component.JobGroup(layer, dataIdx, position, interactive[1][0]);
                break;
            case'quest':
                comp = new Map.Component.Quest(layer, dataIdx, position);
                break;
            case'town':
                comp = new Map.Component.Town(layer, dataIdx, position);
                break;
            case'fort':
                comp = new Map.Component.Fort(layer, dataIdx, position, interactive);
                break;
            case'fair':
                comp = new Map.Component.Fair(layer, dataIdx, position, interactive);
                break;
            case'adventure':
            case'adventures':
                comp = new Map.Component.Adventure(layer, dataIdx, position, interactive);
                break;
            default:
                comp = new Map.Component.Image(layer, dataIdx, position);
                break;
        }
        return comp;
    };
    Map.Component.Image = function (layer, dataIdx, position) {
        if (!arguments.length)return;
        this.layer = layer;
        this.dataIdx = dataIdx;
        this.top = parseInt(position.top, 10);
        this.left = parseInt(position.left, 10);
        this.people = null;
    };
    Map.Component.Image.prototype = {
        peopleSkel: '<div style="top: %1px; left: %2px;"' + 'class="people %3 posy-%1 posx-%2" title="%4"></div>',
        getHTML: function (tileX, tileY) {
            var el = '';
            if (!this.isImageHidden()) {
                el += '<div ' + 'class="' + this.getClasses(tileX, tileY) + '" ' + 'style="' + this.getStyle(tileX, tileY) + '" ' + 'title="' + this.getTitle().escapeHTML() + '">' + this.getContent() + '</div>';
            }
            if (this.people && this.people.count > 0) {
                el += s(this.peopleSkel, this.people.y, this.people.x, (this.people.count > 1) ? 'more' : 'one', s(ngettext('Здесь %1 игрок', new Array('Здесь %1 игрок', 'Здесь %1 игрока', 'Здесь %1 игроков'), this.people.count), this.people.count));
            }
            return el;
        },
        isImageHidden: function () {
            return false;
        },
        getTop: function (tileY) {
            return tileY * Map.tileSize + this.top;
        },
        getLeft: function (tileX) {
            return tileX * Map.tileSize + this.left;
        },
        getStyle: function (tileX, tileY) {
            var styles, i, r = '', data = this.getData();
            styles = {
                "z-index": this.layer,
                "width": data.width + 'px',
                "height": data.height + 'px',
                "background-image": 'url(' + Map.Helper.imgPath.get(this.getIdx()) + ')',
                "top": this.getTop(tileY) + 'px',
                "left": this.getLeft(tileX) + 'px'
            };
            for (i in styles)r += i + ': ' + styles[i] + ';';
            return r;
        },
        getData: function () {
            return Map.Data.images[this.getIdx()];
        },
        getIdx: function () {
            return this.dataIdx;
        },
        getTitle: function () {
            return '';
        },
        getContent: function () {
            return '';
        },
        getClasses: function (tileX, tileY) {
            return 'image x-' + tileX + ' y-' + tileY + ' ' +
                this.getAdditionalClasses(tileX, tileY);
        },
        getAdditionalClasses: function () {
            return this.getData().additional_classes || '';
        },
        setPeople: function (ppl) {
            if (Character.isAtPos(ppl))ppl.count--;
            this.people = ppl;
        }
    };
    Map.Component.Town = function (layer, dataIdx, position) {
        Map.Component.Image.call(this, layer, dataIdx, position);
    };
    Map.Component.Town.prototype = new Map.Component.Image;
    Map.Component.Town.prototype.isImageHidden = function () {
        return Character.homeTown.town_id && this.data && this.data[1].member == 0 && this.data[1].points == 0;
    };
    Map.Component.Town.prototype.getTitle = function () {
        return this.data && Map.PopupHandler.getTownPopup(this.data[1]) || '';
    };
    Map.Component.Town.prototype.getContent = function () {
        return this.data && this.data[1].name && getMapSign(this.data[1].name, 'Идти в город') || '';
    };
    Map.Component.Town.prototype.getAdditionalClasses = function (tileX, tileY) {
        var classes = ['posx-' + this.getLeft(tileX), 'posy-' + this.getTop(tileY)];
        classes.push('town');
        if (!this.data) {
            if (window.DEBUG)console.log('static<->dynamic mismatch');
            classes.push('town-ghost', 'data-mismatch');
        }
        else if (this.data[1].npctown)classes.push('town-npc', 'walk-town-' + this.data[1].town_id); else if (this.data[1].member === 0 && this.data[1].points === 0)classes.push('town-found'); else if (this.data[1].member === 0)classes.push('town-ghost'); else classes.push('town-normal', 'walk-town-' + this.data[1].town_id);
        return classes.join(' ');
    };
    Map.Component.Town.prototype.getIdx = function () {
        return this.data && this.data.idx || this.dataIdx;
    };
    Map.Component.Quest = function (layer, dataIdx, position) {
        Map.Component.Image.call(this, layer, dataIdx, position);
    };
    Map.Component.Quest.prototype = new Map.Component.Image;
    Map.Component.Quest.prototype.getTitle = function () {
        return 'Квестодатель';
    };
    Map.Component.Quest.prototype.getContent = function () {
        return '<div class="employergroupicon symbol"></div>';
    };
    Map.Component.Quest.prototype.getAdditionalClasses = function (tileX, tileY) {
        return 'posx-' + this.getLeft(tileX) + ' posy-' + this.getTop(tileY) + ' employergroup';
    };
    Map.Component.Fort = function (layer, dataIdx, position, interactive) {
        Map.Component.Image.call(this, layer, dataIdx, position);
        this.interactive = interactive;
    };
    Map.Component.Fort.prototype = new Map.Component.Image;
    Map.Component.Fort.prototype.getTitle = function () {
        return Map.PopupHandler.getFortPopup(this.data);
    };
    Map.Component.Fort.prototype.getContent = function () {
        return this.data && this.data[1].name && getMapSign(this.data[1].name, 'Идти в форт') || '';
    };
    Map.Component.Fort.prototype.getAdditionalClasses = function (tileX, tileY) {
        var classes = 'posx-' + this.getLeft(tileX) + ' posy-' + this.getTop(tileY) + ' fort';
        if (this.data && this.data[1].fort_id)
            classes += ' walk-fort-' + this.data[1].fort_id;
        return classes;
    };
    Map.Component.JobGroup = function (layer, dataIdx, position, groupId) {
        Map.Component.Image.call(this, layer, dataIdx, position);
        this.groupId = groupId;
    };
    Map.Component.JobGroup.prototype = new Map.Component.Image;
    Map.Component.JobGroup.prototype.getTitle = function () {
        return Map.PopupHandler.getJobGroupPopup(this.groupId);
    };
    Map.Component.JobGroup.prototype.getContent = function () {
        var markers = Map.Component.JobGroup.getMarkers(this.groupId);
        return '<div class="jobgroupicon symbol">' + markers + '</div>';
    };
    Map.Component.JobGroup.prototype.getAdditionalClasses = function (tileX, tileY) {
        return 'posx-' + this.getLeft(tileX) + ' posy-' + this.getTop(tileY) + ' jobgroup jobgroup-' + this.groupId;
    };
    Map.Component.JobGroup.getMarkers = function (groupId) {
        var s = '';
        if (JobList.hasImportantJob(groupId))
            s += '<div class="important" title="' + 'Требования квеста'.escapeHTML() + '"/>';
        if (JobList.hasNewJob(groupId))
            s += '<div class="new-job" title="' + 'Новые работы!'.escapeHTML() + '"/>';
        return s;
    };
    Map.Component.Fair = function (layer, dataIdx, position, interactive) {
        Map.Component.Image.call(this, layer, dataIdx, position);
        this.interactive = interactive;
    };
    Map.Component.Fair.prototype = new Map.Component.Image;
    Map.Component.Fair.prototype.isImageHidden = function () {
        return undefined === this.data;
    };
    Map.Component.Fair.prototype.getTitle = function () {
        return 'Ярмарка';
    };
    Map.Component.Fair.prototype.getContent = function () {
        return this.data && getMapSign("Ярмарка", 'Идти на окружную ярмарку') || '';
    };
    Map.Component.Fair.prototype.getAdditionalClasses = function (tileX, tileY) {
        var classes = ['posx-' + this.getLeft(tileX), 'posy-' + this.getTop(tileY), 'fair', 'walk-fair-' + this.data[1].fair_id, 'status-' + this.data[1].status];
        return classes.join(' ');
    };
    Map.Component.Fair.prototype.getIdx = function () {
        return this.data && this.data.idx || this.dataIdx;
    };
    Map.Component.Adventure = function (layer, dataIdx, position, interactive) {
        Map.Component.Image.call(this, layer, dataIdx, position);
        this.interactive = interactive;
    };
    Map.Component.Adventure.prototype = new Map.Component.Image;
    Map.Component.Adventure.prototype.getTitle = function () {
        return 'Перестрелки';
    };
    Map.Component.Adventure.prototype.getContent = function () {
        return getMapSign('Контроль Тумстоун', null) || '';
    };
    Map.Component.Adventure.prototype.getAdditionalClasses = function (tileX, tileY) {
        var classes = ['posx-' + this.getLeft(tileX), 'posy-' + this.getTop(tileY), 'adventure'];
        if (this.data && this.data[1] && this.data[1].status) {
            classes.unshift('adventure-type-' + this.data[1].status);
        }
        return classes.join(' ');
    };
    Map.Component.Adventure.prototype.getIdx = function () {
        return this.data && this.data.idx || this.dataIdx;
    };
    var getMapSign = function (name, instantWalk) {
        return '<div class="townname">' + '<div class="tp_front">' + '<div class="townname_bg_l"></div>' + '<div class="townname_bg_r"></div>' + '</div>' +
            (instantWalk ? '<div title="' + instantWalk + '" class="instantwalk"></div>' : '') + '<div class="townname_name">' + '<p class="namesign">' + name + '</p>' + '</div>' + '<div class="townname_arrow"></div>' + '</div>';
    };
})(window);

var Map = Map || {};
Map.PopupHandler = (function () {
    var getTownPopup = function (data) {
        var popupTitle;
        if (data.member && !data.npctown) {
            popupTitle = '<div style="padding: 5px; text-align:center;" class="popup-title">';
            var townHead = '<div class="strong" style="padding-bottom: 3px;">' + data.name + '</div>';
            townHead += data.image ? getFortTownImage(data.town_id, 'town') : '';
            townHead += getDividerHtml();
            var townInformations = getSmallText([ngettext('%1 очко', new Array('%1 очко', '%1 очка', '%1 очков'), data.points).replace('%1', '<strong>' + data.points + '</strong>'), ngettext('%1 житель', new Array('%1 житель', '%1 жителя', '%1 жителей'), data.member).replace('%1', '<strong>' + data.member + '</strong>')]);
            var townRanking = '';
            if (null !== data.rank) {
                var getRankingIcon = function (icon, value) {
                    return ['<div style="text-align:center;">', '<div class="ranking_icon ranking_icon_' + icon + '" style="float:left;"></div>', '<div class="strong" style="float:left; padding-left:2px; margin-top:4px; font-size:11px;">' + value + '</div>', '<div style="clear:both;"></div>', '</div>'].join('');
                };
                townRanking = ['<table style="width: 100%; padding-top: 4px;" cellspacing="0" cellpadding="0">', '<tr>', '<td colspan="2">' + getSmallText('Ранг: %1'.replace('%1', '<strong>' + data.rank + '</strong')) + '</td>', '</tr><tr>', '<td>' + getRankingIcon('fort', data.fort_points) + '</td>', '<td>' + getRankingIcon('average_level', Math.round(data.mean_level)) + '</td>', '</tr><tr>', '<td>' + getRankingIcon('member', data.member_level_points) + '</td>', '<td>' + getRankingIcon('duel', data.duel_diff_points) + '</td>', '</tr>', '</table>'].join('');
            }
            var townOwning = '';
            if (data.dollar && data.owning_fort && data.member_fort) {
                townOwning = getSmallText([getDividerHtml() +
                'Казна: %1 '.replace('%1', '<strong>$ ' + data.dollar + '</strong>'), 'Своих фортов: %1 '.replace('%1', '<strong>' + data.owning_fort + '</strong>'), 'Состоит в фортах: %1 '.replace('%1', '<strong>' + data.member_fort + '</strong>')]);
            }
            popupTitle += townHead + townInformations + townRanking + townOwning + '</div>';
        } else if (data.npctown) {
            popupTitle = '<div class="strong">' + "Город первых поселенцев" + '</div>';
        } else if (data.points) {
            popupTitle = '<div class="strong">' + "Город-призрак" + '</div>';
        } else if (LinearQuestHandler.hasTutorialQuest()) {
            popupTitle = '<div class="strong">' + "Здесь можно основать город. %s Ты сможешь это сделать после того, как завершишь вводные квесты.".replace('%s', '<br>') + '</div>';
        } else {
            popupTitle = '<div class="strong">' + "Подходящее место для основания города" + '</div>';
        }
        return popupTitle;
    };
    var getItemHTML = function (name, imgPath) {
        var html = '';
        html += '<div class="popup_yield">';
        html += getDividerHtml();
        html += '<div class="popup_yield_image"><img src="' + imgPath + '" alt="' + name + '" width="43" height="43" /></div>';
        html += name;
        html += '</div>';
        return html += '</div>';
    };
    var getJobPopup = function (job) {
        var jobName = '<div class="strong">' + job.name + '</div>';
        var malus = job.malus + 1;
        var jobPoints = job.calcJobPoints() - malus;
        var playerJobInfo, jobYields = '', rndYields = '';
        playerJobInfo = getSmallText(['%1-й уровень или'.replace('%1', '<strong' + ((Character.level < job.level) ? ' class="text_red"' : '') + '>' + job.level + '</strong>'), 'Трудовые очки: %1'.replace('%1', '<strong' + (jobPoints < 0 ? ' class="text_red"' : '') + '>' + jobPoints + '</strong>')]);
        jobYields = '<div>';
        $.each(job.yields, function (itemId) {
            var item = ItemManager.get(itemId);
            jobYields += getItemHTML(item.name, 'https://westrus.innogamescdn.com/images/items/yield/' + item['short'] + '.png');
        });
        jobYields += '</div>';
        rndYields = '<div>';
        if (job.randomyields.length) {
            rndYields += getItemHTML('Сюрприз', 'https://westrus.innogamescdn.com/images/items/unknown.png');
        }
        rndYields += '</div>';
        return '<div style="padding: 4px; text-align: center;">' + jobName + playerJobInfo + '<div style="font-size: 9px;">' + jobYields + rndYields + '</div></div>';
    };
    var getFortPopup = function (fort) {
        var popupTitle = '<div class="strong">' + "Подходящее место для возведения форта" + '</div>';
        if (fort && fort[1])
            fort = fort[1];
        if (fort) {
            if (fort.member) {
                var starttime = fort.battlestartdelta;
                var local_time = new Date();
                var local_timezone_offset = -local_time.getTimezoneOffset() / 60;
                var local_battlestart = new Date(local_time.getTime() + starttime * 1000);
                return ["<div class='center'>", '<div class="strong" style="margin-bottom: 5px;font-size:12pt">' + fort.name + '</div>', fort.image ? getFortTownImage(fort.fort_id, 'fort') : '', '<div class="marker_popup_divider" style="margin-top:5px"></div>', getSmallText(['Очки: %1'.replace('%1', '<strong>' + fort.points + '</strong>'), 'Всего городов: %1'.replace('%1', '<strong>' + fort.member + '</strong>'), fort.fort_battle_count ? 'Прошло битв: %1'.replace('%1', '<strong>' + fort.fort_battle_count + '</strong>') : 'Пока ни одной битвы.', fort.war ? starttime > 0 ? ((fort.timezoneoffset == local_timezone_offset) ? "Начало сражения: %s".replace(/%s/, '<strong>' + fort.start + '</strong>') : (("Начало сражения по времени сервера: %s".replace(/%s/, '<strong>' + fort.start + '</strong>'))
                + "<br />" + ("Начало сражения по местному времени: %s".replace(/%s/, '<strong>' + local_battlestart.toLocaleString() + '</strong>')))) : "Битва в самом разгаре" : ""]), "</div>"].join('');
            } else {
                popupTitle = '<div class="strong">' + "Покинутый форт" + '</div>';
            }
        }
        return popupTitle;
    };
    var getFortTownImage = function (id, type) {
        if (type != 'fort' && type != 'town')return '';
        return '<div style="width: 130px; height: 80px; margin: 0px auto;">' + '<img src="img.php?type=' + type + '_logo&amp;id=' + id + '" alt="' + type + '_logo" style="max-width: 130px; max-height: 80px;" />' + '</div>';
    };
    var getSmallText = function (txt, makeStrong) {
        if (!txt)return '';
        if ($.isArray(txt)) {
            txt = txt.join('<br />');
        }
        return '<div class="marker_popup_small_text' + (makeStrong ? ' strong' : '') + '">' + txt + '</div>';
    };
    var getDividerHtml = function () {
        return '<div class="marker_popup_divider"></div>';
    };
    return {
        getTownPopup: function (data) {
            return getTownPopup(data);
        }, getJobPopup: function (data) {
            return getJobPopup(data);
        }, getFortPopup: function (data) {
            return getFortPopup(data);
        }, getJobGroupPopup: function (jobGroupId) {
            var html = '<div class="strong center">' + 'Работы' + '</div>';
            html += '<div class="marker_popup_divider" style="margin-top:5px"></div>';
            html += '<ul style="list-style-type:none">';
            (JobList.getJobsByGroupId(jobGroupId)).each(function (job) {
                html += '<li>- ' + job.name + '</li>';
            });
            html += '</ul>';
            return html;
        }
    };
})();

var Map = Map || {};
Map.ClickHandler = function () {
    var types = {
        IMAGE_TYPE_TOWN: 'town',
        IMAGE_TYPE_FORT: 'fort',
        IMAGE_TYPE_FORT_FOUND: 'fort-found',
        IMAGE_TYPE_JOBGROUP: 'jobgroup',
        IMAGE_TYPE_JOB: 'job',
        IMAGE_TYPE_PEOPLE: 'people',
        IMAGE_TYPE_INSTANTWORK: 'instantwork',
        IMAGE_TYPE_INSTANTWALK: 'instantwalk',
        IMAGE_TYPE_EMPLOYERGROUP: 'employergroup',
        IMAGE_TYPE_EMPLOYER: 'employer',
        IMAGE_TYPE_FAIR: 'fair',
        IMAGE_TYPE_ADVENTURE: 'adventure'
    };
    var typeArray = $.map(types, function (val) {
        return val;
    });
    var getImageType = function (el) {
        var regex = new RegExp('(\\b' + typeArray.join('\\b|\\b') + '\\b)');
        var match = (el.attr('class') || '').match(regex);
        return match && match[1] || null;
    };
    var handleTownClick = function (target) {
        var matcher, pos;
        matcher = /town-(\w+)/.exec(target.attr('class'));
        if (!matcher)return;
        pos = Map.Helper.getPosition(target);
        TownWindow.open(pos.x, pos.y, matcher[1]);
    };
    var handleJobGroupClick = function (target) {
        Map.JobHandler.toggleGroup(target);
    };
    var handlePeopleClick = function (target) {
        var pos = Map.Helper.getPosition(target);
        PlayerlistWindow.open(pos.x, pos.y);
    };
    var handleInstantWalk = function (target) {
        var pos, matcher;
        pos = Map.Helper.getPosition(target.parent().parent());
        matcher = target.parent().parent().attr('class').match(/walk-(\w+)-(\d+)/);
        if (!matcher)return;
        Guidepost.start_walk(matcher[2], matcher[1]);
    };
    var handleFortClick = function (target) {
        var pos = Map.Helper.getPosition(target);
        FortWindow.open(undefined, pos.x, pos.y);
    };
    var handleFairClick = function (target) {
        var pos, matcher;
        pos = Map.Helper.getPosition(target);
        matcher = target.attr('class').match(/status-(\d+)/);
        if (!matcher)return;
        switch (parseInt(matcher[1])) {
            case 1:
                west.wof.FairSiteWindow.open();
                break;
            case 2:
            default:
                west.wof.FairWindow.open();
                break;
        }
    };
    var handleAdventureClick = function (target) {
        var pos, matcher;
        pos = Map.Helper.getPosition(target);
        matcher = target.attr('class').match(/adventure-type-(\d+)/);
        MultiplayerWindow.open(matcher);
    };
    var handleClick = function (event) {
        if (Map.Drag.wasDragged()) {
            return;
        }
        var target = $(event.currentTarget);
        event.stopPropagation();
        switch (getImageType(target)) {
            case types.IMAGE_TYPE_TOWN:
                handleTownClick(target);
                break;
            case types.IMAGE_TYPE_JOBGROUP:
                handleJobGroupClick(target);
                break;
            case types.IMAGE_TYPE_PEOPLE:
                handlePeopleClick(target);
                break;
            case types.IMAGE_TYPE_INSTANTWALK:
                handleInstantWalk(target);
                break;
            case types.IMAGE_TYPE_EMPLOYERGROUP:
                Map.QuestHandler.toggleGroup(target);
                break;
            case types.IMAGE_TYPE_FORT:
                handleFortClick(target);
                break;
            case types.IMAGE_TYPE_FAIR:
                handleFairClick(target);
                break;
            case types.IMAGE_TYPE_ADVENTURE:
                handleAdventureClick(target);
                break;
        }
    };
    return {
        init: function (el) {
            el.on('click.mapClick', '.' + typeArray.join(', .'), handleClick);
        }, deactivate: function (el) {
            el.off('click.mapClick', handleClick);
        }
    };
}();

var Map = Map || {};
Map.JobHandler = (function () {
    var generateJobElement = function (job, dynamic, pos) {
        var div = $('<div class="job job-' + job.id + '"/>'), canDo = job.canDo(), html = '', cls = '';
        var durs = JobList.getDurations();
        if (dynamic && !LinearQuestHandler.hasTutorialQuest()) {
            if (dynamic.silver)cls = 'silver'; else if (dynamic.gold)cls = 'gold';
            html += '<div class="featured ' + cls + '"></div>';
        }
        if (canDo) {
            for (var dur in durs) {
                if (Character.level >= durs[dur]['requirement']) {
                    html += '<div class="instantwork-' + dur + '" title="' + s('Приступить к работе: %1', durs[dur]['duration'].getTime2EndToken()) + '"/>';
                }
            }
        } else {
            html += '<div class="closed-job" />';
        }
        if (job.important) {
            html += '<div class="important" title="' + 'Требования квеста'.escapeHTML() + '"/>';
        }
        if (job.isNew()) {
            html += '<div class="new-job" title="' + 'Новые работы!'.escapeHTML() + '"/>';
        }
        html += '<img class="jobimg" src="https://westrus.innogamescdn.com/images/jobs/' + job.shortname + '.png" />';
        div.html(html).click(function (event) {
            var dur = $(event.target).attr('class').match(/instantwork-(\w+)/);
            if (LinearQuestHandler.hasTutorialQuest())dur = false;
            if (dur && dur[1] && durs[dur[1]]) {
                var callb = JobWindow.startJob(job.id, pos.x, pos.y, durs[dur[1]]['duration']);
                return callb(event, div);
            }
            return Map.JobHandler.openJob(job.id, pos);
        }).addMousePopup(Map.PopupHandler.getJobPopup(job));
        return div;
    };
    var getJobElements = function (el) {
        var groupMatch, groupId;
        groupMatch = el.attr('class').match(/jobgroup-(\d+)/);
        if (!groupMatch || !groupMatch[1])return;
        groupId = groupMatch[1];
        var jobs = JobList.getJobsByGroupId(groupId);
        var tmp = $("<div/>");
        var pos = Map.Helper.getPosition(el);
        var xtra = Map.JobHandler.Featured[pos.x + '-' + pos.y] || {};
        for (var i in jobs) {
            if (!jobs.hasOwnProperty(i))continue;
            tmp.append(generateJobElement(jobs[i], xtra[jobs[i].id], pos));
        }
        return tmp.children();
    };
    var refreshJobs = function () {
        this.open(true);
    };
    var close = function (radialmenu) {
        EventHandler.unlisten(['char_skills_changed', 'job-importance-changed', 'character_level_up', 'job-seen'], refreshJobs, radialmenu);
    };
    var open = function (radialmenu) {
        EventHandler.listen(['char_skills_changed', 'job-importance-changed', 'character_level_up', 'job-seen'], refreshJobs, radialmenu);
    };
    return {
        toggleGroup: function (el) {
            new Map.Radialmenu(el, getJobElements, open, close).toggle();
        }, openJob: function (jobId, pos) {
            JobWindow.open(jobId, pos.x, pos.y);
            Map.Radialmenu.forceClose();
        }
    }
})();
Map.JobHandler.Featured = {};

var Map = Map || {};
Map.Radialmenu = function (parent, elementFunc, onOpen, onClose) {
    this.parent = parent;
    this.elementFunc = elementFunc;
    this.onOpen = onOpen;
    this.onClose = onClose;
};
Map.Radialmenu.positions = [[-70, -40], [-70, 40], [70, 40], [70, -40], [0, -75], [0, 75]];
Map.Radialmenu.opened = null;
Map.Radialmenu.forceClose = function (noAnimation) {
    Map.Radialmenu.opened && Map.Radialmenu.opened.close(noAnimation);
};
Map.Radialmenu.prototype.toggle = function (noAnimation) {
    var opened = Map.Radialmenu.opened;
    if (opened) {
        opened.close(noAnimation);
        if (opened.parent.get(0) === this.parent.get(0)) {
            return;
        }
    }
    this.open(noAnimation);
};
Map.Radialmenu.prototype.open = function (noAnimation) {
    Map.Radialmenu.forceClose(noAnimation);
    var pos = this.getDefaultPosition();
    this.elements = this.elementFunc(this.parent);
    Map.mapEl.append(this.elements.css(pos));
    this.parent.addClass('opened');
    $.each(this.elements, function (k, v) {
        var css = {top: pos.top + Map.Radialmenu.positions[k][1], left: pos.left + Map.Radialmenu.positions[k][0]};
        noAnimation ? $(v).css(css) : $(v).animate(css);
    });
    Map.Radialmenu.opened = this;
    this.onOpen && this.onOpen(this);
};
Map.Radialmenu.prototype.close = function (noAnimation) {
    if (noAnimation) {
        this.elements.remove();
    } else {
        this.elements.animate(this.getDefaultPosition(), function () {
            $(this).remove();
        });
    }
    this.parent.removeClass('opened');
    Map.Radialmenu.opened = null;
    this.onClose && this.onClose(this);
};
Map.Radialmenu.prototype.getDefaultPosition = function () {
    if (!this.position) {
        this.position = {
            top: this.parent.height() / 2 - 27 + parseInt(this.parent.css('top')),
            left: this.parent.width() / 2 - 27 + parseInt(this.parent.css('left'))
        };
    }
    return this.position;
};

Map.QuestHandler = (function () {
    var generateElement = function (employer, pos) {
        var div = $('<div class="employer employer-' + employer.key + '"/>');
        if (employer.visible) {
            div.append('<img class="employerimg" src="https://westrus.innogamescdn.com/images/quest/employer/mini/' + employer.key + '.png" />').click(function (event) {
                QuestEmployerWindow.showEmployer(employer.key, pos.x, pos.y);
                Map.Radialmenu.forceClose();
            }).addMousePopup(employer.name);
        } else {
            div.append('<img class="employerimg" src="https://westrus.innogamescdn.com/images/quest/employer/mini/not-visible.png?2" />');
        }
        return div;
    };
    var getElements = function (el) {
        var pos = Map.Helper.getPosition(el);
        var employerData = Map.QuestHandler.Featured[pos.x + '-' + pos.y];
        var employers = (employerData && employerData.employer.length) ? employerData.employer : {
            0: {visible: false},
            1: {visible: false},
            2: {visible: false},
            3: {visible: false}
        };
        var tmp = $('<div/>');
        for (var i in employers) {
            if (!employers.hasOwnProperty(i))continue;
            tmp.append(generateElement(employers[i], pos));
        }
        return tmp.children();
    };
    var onOpen = function (radialmenu) {
        EventHandler.listen('update_radialemployer', radialmenu.open, radialmenu);
    };
    var onClose = function (radialmenu) {
        EventHandler.unlisten('update_radialemployer', radialmenu.open, radialmenu);
    };
    return {
        toggleGroup: function (el) {
            new Map.Radialmenu(el, getElements, onOpen, onClose).toggle();
        }
    };
})();
Map.QuestHandler.Featured = {};

var COUNTYMAP_COEFF_MAP2IMG = 0.03562;
MapCounty = function (countryId) {
    var classObj = this;
    this.id = countryId;
    this.countyName = '';
    this.startX = 0;
    this.startY = 0;
    this.endX = 0;
    this.endY = 0;
    this.offsetX = 0;
    this.offsetY = 0;
    this.initFromBE = function (countyBeObj) {
        classObj.countyName = countyBeObj.name;
        classObj.startX = countyBeObj.start_x;
        classObj.startY = countyBeObj.start_y;
        classObj.endX = countyBeObj.end_x;
        classObj.endY = countyBeObj.end_y;
    };
    this.getCountyImage = function () {
        return classObj.image;
    };
    this.calcCoord4Map = function (coordArr) {
        if (!classObj.isInCounty(coordArr[0], coordArr[1]))
            return false;
        return {
            x: parseInt((coordArr[0] - classObj.startX) * COUNTYMAP_COEFF_MAP2IMG) - 3,
            y: parseInt((coordArr[1] - classObj.startY) * COUNTYMAP_COEFF_MAP2IMG) - 4
        };
    };
    this.isInCounty = function (x, y) {
        if (x < classObj.startX || y < classObj.startY)
            return false; else if (x > classObj.endX || y > classObj.endY)
            return false; else
            return true;
    };
};
MapCounty.prototype = MapCounty;
Map.Counties = {
    countyObjects: {},
    layerPriorities: {
        'pos': 21,
        'marker': 20,
        'fortbattles': 19,
        'own_town': 17,
        'own_forts': 17,
        'jobs': 16,
        'quests': 15,
        'market_items': 14,
        'friends': 13,
        'townmembers': 12,
        'alliance_towns': 10,
        'alliance_forts': 10,
        'npc_towns': 7,
        'ghost_towns': 6,
        'foreign_towns': 5,
        'foreign_forts': 5,
        'fort_creation': 3,
        'current_area': 2
    },
    current_county_id: 0,
    viewed_county_id: 0,
    initCountiesFromBE: function (countyObjArr) {
        for (var i = 0, len = countyObjArr.length; i < len; i++) {
            Map.Counties.setCounty(countyObjArr[i].county_id, countyObjArr[i]);
        }
    },
    setCounty: function (countyId, county_obj) {
        var tmp = new MapCounty(countyId);
        tmp.initFromBE(county_obj);
        Map.Counties.countyObjects[countyId] = tmp;
    },
    getCounty: function (countyId) {
        return this.countyObjects[countyId];
    },
    getAllCounties: function () {
        return this.countyObjects;
    }
};
Map.Helper = {
    isGhostTown: function (townObj) {
        return (!townObj.member_count && townObj.town_points && !townObj.npctown);
    }, isAllianceTown: function (townObj) {
        if (Map.Helper.isGhostTown(townObj))return false;
        return (townObj.alliance_id && townObj.alliance_id == Character.homeTown.alliance_id);
    }, isForeignTown: function (townObj) {
        return (townObj.town_id != Character.homeTown.town_id && townObj.member_count > 0 && townObj.alliance_id != Character.homeTown.alliance_id && !townObj.npctown);
    }, isNpcTown: function (townObj) {
        return townObj.npctown;
    }, isOwnFort: function (fortObj, townIds) {
        if (fortObj.town_id == Character.homeTown.town_id)
            return true;
        if (!isDefined(townIds) || !townIds.length)return false;
        for (var i = 0; i < townIds.length; i++) {
            if (townIds[i] == Character.homeTown.town_id)
                return true;
        }
        return false;
    }, isAllianceFort: function (fortObj, townIds, townData) {
        if (Map.Helper.isOwnFort(fortObj, townIds))return false;
        if (fortObj.alliance_id == Character.homeTown.alliance_id)
            return true;
        if (!isDefined(townIds) || !townIds.length)return false;
        for (var i = 0; i < townIds.length; i++) {
            if (townData[townIds[i]].alliance_id == Character.homeTown.alliance_id)
                return true;
        }
        return false;
    }, isForeignFort: function (fortObj, townIds, townData) {
        if (Map.Helper.isOwnFort(fortObj, townIds) || Map.Helper.isAllianceFort(fortObj, townIds, townData))return false;
        if (fortObj.town_id)
            return true;
        return false;
    }, isPlannedFortBattle: function (fortObj) {
        return (fortObj.hasOwnProperty('time_declare') && $.isNumeric(fortObj.time_declare));
    }, isViewInCounty: function (countyId) {
        var c = Map.Counties.getCounty(countyId);
        return c.isInCounty(parseInt(-Map.mapEl.position().left + (Map.visible.x * Map.tileSize) / 2), parseInt(-Map.mapEl.position().top + (Map.visible.y * Map.tileSize) / 2));
    }, getCountyId4View: function () {
        for (var c in Map.Counties.getAllCounties()) {
            if (Map.Helper.isViewInCounty(c))
                return c;
        }
        return 15;
    }, getPosition: function (el) {
        var cl = el.attr('class');
        return {x: cl.match(/posx-(\d+)/)[1], y: cl.match(/posy-(\d+)/)[1]};
    }, getPositionFromClick: function (event, mapEl) {
        return {'x': event.clientX - $(mapEl).offset().left, 'y': event.clientY - $(mapEl).offset().top};
    }, imgPath: (function () {
        var cache = {}, prefix = 'https://westrus.innogamescdn.com/images/map/';
        return {
            get: function (idx, on_game_load) {
                var path;
                if (cache[idx]) {
                    return cache[idx];
                }
                path = Map.Data.images[idx].path;
                cache[idx] = prefix + this.lookForModification(path, on_game_load);
                return cache[idx];
            }, lookForModification: function (path, on_game_load) {
                if (west.get('west.events.Manager') && west.events.Manager.active) {
                    $.each(west.events.Manager.getRunningEvents(), function (i, event) {
                        if (event.modifiesMap()) {
                            var new_path = event.modifyMapPath(path, on_game_load);
                            if (new_path) {
                                path = new_path;
                                return false;
                            }
                        }
                    });
                } else {
                    var loadTime = new Date, year = loadTime.getFullYear();
                    if (isDateWithin('Mar 17 ' + year, 'Mar 18 ' + year, loadTime)) {
                        if (/river|deco_egg_05|quests_fluss/.test(path))
                            path = 'paddy/' + path;
                    } else if (isDateWithin('Oct 31 15:00 ' + year, 'Nov 1 15:00 ' + year, loadTime)) {
                        if (/river|deco_egg_05|quests_fluss|texture_plant_03/.test(path))
                            path = 'halloween/' + path;
                    }
                }
                return path;
            }, clearCache: function () {
                cache = {};
                return this;
            }
        };
    })()
};

$(function ($) {
    'use strict';
    var local_class_name = 'west.ui.bottomBar.modifier', model, controller;
    model = {
        class_parent: 'west.game.model', class_object: {
            _class_path: 'west.ui.bottomBar.modifier',
            data: {data_ready: false, running: [], modifications: {}, namespace: 'west.game.ui.bottomBar'},
            setDataReady: function (state) {
                this.setData('data_ready', !!state, true);
                return this;
            },
            isDataReady: function () {
                return !!this.getData('data_ready');
            },
            getRunning: function () {
                return this.getData('running');
            },
            addRunning: function (event_id) {
                var running = this.getRunning();
                if (!!~running.indexOf(event_id)) {
                    return this;
                }
                running.push(event_id);
                return this;
            },
            removeRunning: function (event_id) {
                var running = this.getRunning(), e_i = running.indexOf(event_id);
                if (!!~e_i) {
                    running.splice(e_i, 1);
                }
                return this;
            },
            addModifier: function (id, data) {
                var modifications_object = {};
                modifications_object[id] = data;
                this.setData('modifications', modifications_object);
                return this;
            },
            getModifier: function (event_id) {
                return this.getData('modifications')[event_id];
            },
            getModificationsNamespace: function () {
                return west.get(this.getData('namespace'));
            }
        }
    };
    controller = {
        class_parent: 'west.game.controller', class_object: {
            _class_id: 'modifier',
            _namespace: 'west.ui.bottomBar.modifier',
            _class_path: 'west.ui.bottomBar.modifier',
            init: function () {
                this.id = 'bottomBarModifier';
                this.callParent();
                this.lookForData();
                this.active = true;
                return this;
            },
            lookForData: function () {
                var that = this, model = this.getModel(), data_ready = !!(Game && Game.loaded);
                model.setDataReady(data_ready);
                if (data_ready) {
                    this.initModifiers();
                } else {
                    EventHandler.listen('game_config_loaded', function () {
                        model.setDataReady(true);
                        that.initModifiers();
                        return EventHandler.ONE_TIME_EVENT;
                    });
                }
            },
            initModifiers: function () {
                var that = this, modifiers_data = $.extend({}, Game.ui.bottomBar);
                if ($.isEmptyObject(modifiers_data)) {
                    return this;
                }
                $.each(modifiers_data, function (modifier_id, modifier_data) {
                    modifier_id = modifier_id.toLowerCase();
                    that.addModifier(modifier_id, modifier_data);
                    that.startModifier(modifier_id);
                });
                return this;
            },
            addModifier: function (id, data) {
                var model = this.getModel(), namespace = model.getModificationsNamespace(), pass_data = $.extend({}, {name: id}, data), modifier;
                if (namespace[id]) {
                    modifier = new namespace[id].controller({data: pass_data});
                } else {
                    modifier = new namespace.controller({data: pass_data});
                }
                model.addModifier(id, modifier);
                return this;
            },
            startModifier: function (id) {
                var model = this.getModel(), modifier = model.getModifier(id);
                if (!modifier) {
                    return this;
                }
                modifier.start();
                model.addRunning(id);
                return this;
            },
            stopModifier: function (id) {
                var model = this.getModel(), modifier = model.getModifier(id);
                if (!modifier) {
                    return this;
                }
                modifier.stop();
                model.removeRunning(id);
                return this;
            },
            getModifier: function (event_id) {
                return this.getModel().getModifier(event_id);
            }
        }
    };
    west.define(local_class_name + '.model', model.class_parent, model.class_object);
    west.define(local_class_name + '.controller', controller.class_parent, controller.class_object);
    west.ui.bottomBar.modifier = new west.ui.bottomBar.modifier.controller;
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.window.event', class_parent = 'west.game.window.controller', class_object = {
        _class_path: class_path,
        getWindowClass: function () {
            return this.callParent() + ' ses_event_window';
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_path = 'west.game.window.tab.event.log', class_parent = 'west.game.window.tab';
    var controller = {
        _class_path: class_path, _tab_class: 'log_tab', show: function () {
            this.callParent();
            var wnd = this.getWindow(), model = this.getModel(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title).addClass('noreload');
            this.requestLogData();
            this.addEventListeners();
            return this;
        }, addEventListeners: function () {
            this.removeEventListeners();
            this.getRoot().on('click.log_details', '.linklike', this.handleDetailsClick);
            return this;
        }, removeEventListeners: function () {
            this.getRoot().off('.log_details');
            return this;
        }, handleDetailsClick: function (e) {
            var $el = $(this), data = $el.data();
            switch (data.type) {
                case'job':
                    MinimapWindow.open(JobList.getJobById(data.details).name);
                    break;
                case'player':
                    PlayerProfileWindow.open(data.details.player_id);
                    break;
                case'fort':
                    FortWindow.open(data.details);
                    break;
                case'town':
                    TownWindow.open(data.details);
                    break;
                default:
                    break;
            }
            return this;
        }, changePage: function (direction) {
            var model = this.getModel(), current_page = model.getCurrentPage(), page;
            if ('next' === direction) {
                page = current_page + 1;
            } else if ('first' === direction) {
                page = 1;
            } else {
                page = current_page - 1;
            }
            this.requestLogData(page);
            return this;
        }, requestLogData: function (page_no) {
            var view = this.getView(), model = this.getModel(), wnd = this.getWindow(), opt;
            if (!model.getEventId()) {
                return this;
            }
            opt = {ses_id: model.getEventId(), page: page_no || 1, limit: 25};
            wnd.showLoader();
            Ajax.remoteCallMode('ses', 'log', opt, function (data) {
                view.clearLogTable().setData(data).addLogRows(data.entries);
                model.setCurrentPage(data.page).updatePager(data.page, data.hasNext);
                wnd.hideLoader();
            });
        }
    }, model = {
        _class_path: class_path,
        data: {event_id: null, icon: '',},
        l10n: {
            'log_table': {'headers': {'date': 'Дата', 'description': 'Описание'}},
            'message': 'The log tracks your collections.',
            'descriptions': {
                'wofPay': {'timerreset': "Сбросить время", 'sneakyshot': "Подкупить"},
                'buildDrop': function (building, town) {
                    return s('%1 в %2', building, town)
                }
            }
        },
        getEventId: function () {
            return this.getData('event_id');
        },
        setLogTable: function (log_table) {
            this.setData('log_table', log_table);
            return this;
        },
        getLogTable: function () {
            return this.getData('log_table');
        },
        setCurrentPage: function (page_no) {
            this.setData('page_no', page_no, true);
            return this;
        },
        getCurrentPage: function () {
            return this.getData('page_no');
        },
        setPager: function (new_pager) {
            this.setData('log_pager', new_pager);
            return this;
        },
        getPager: function () {
            return this.getData('log_pager');
        },
        updatePager: function (page, has_next) {
            this.getPager().update(page, null, has_next);
            return this;
        },
        getIconName: function () {
            return this.getData('icon');
        }
    }, view = {
        _class_path: class_path, renderContent: function () {
            var root = this.getRoot(), controller = this.getController(), model = this.getModel(), l10n = model.getL10n(), log_table = new west.gui.Table(), pager = new west.gui.Pagebar(1, null, controller.changePage, controller, false);
            root = $(root).empty();
            root.append($('<div class="description">' + l10n.message + '</div>'));
            log_table.addClass('logs_container').addColumn("log_date").addColumn("log_value").addColumn("log_description").appendToCell("head", "log_date", l10n.log_table.headers['date']).appendToCell("head", "log_value", '<span class="icon ses_event_icon ' + model.getIconName() + '"></span>').appendToCell("head", "log_description", l10n.log_table.headers['description']).appendToFooter('log_description', pager.getMainDiv().addClass('pager'));
            model.setLogTable(log_table).setPager(pager);
            log_table.appendTo(root);
            return this;
        }, setData: function (data) {
            this.data = data;
            return this;
        }, addLogRows: function (rows_data) {
            var i = 0, l = rows_data.length;
            for (i; i < l; i++) {
                this.addLogRow(rows_data[i]);
            }
            return this;
        }, addLogRow: function (row_data) {
            var table = this.getModel().getLogTable(), new_row = {
                'log_date': new Date(row_data.date * 1000).toDateTimeString(),
                'log_value': this.parseValue(row_data),
                'log_description': this.parseDescription(row_data)
            };
            table.buildRow(null, new_row);
            return this;
        }, clearLogTable: function () {
            this.getModel().getLogTable().clearBody();
            return this;
        }, parseValue: function (data) {
            var value = 0;
            switch (data.type) {
                case'wofPay':
                    value = -data.value;
                    break;
                case'adminDrop':
                    value = ('deduct' === data.details ? -1 : 1) * data.value;
                    break;
                default:
                    value = data.value;
                    break;
            }
            return value;
        }, parseDescription: function (data) {
            var l10n = this.getModel().getL10n('descriptions'), response = data.description, item, building;
            if (data.details) {
                switch (data.type) {
                    case'jobDrop':
                        response += ': '
                            + '<span class="linklike joblink" data-type="job" data-details="' + data.details + '">' + JobList.getJobById(data.details).name + '</span>';
                        break;
                    case'friendDrop':
                        response += ': '
                            + '<span class="linklike playerlink" data-type="player" data-details=\'' + data.details + '\'>' + JSON.parse(data.details).name + '</span>';
                        break;
                    case'wofPay':
                        response += ': '
                            + l10n[data.type][data.details];
                        break;
                    case'itemUse':
                        item = ItemManager.get(data.details);
                        if (item) {
                            response += ': '
                                + '<span class="linklike itemlink" title="' + (new ItemPopup(item).getXHTML().escapeHTML()) + '">'
                                + (item.getItemLevel() ? ' <span class="item_level">' + item.getItemLevel() + '</span>' : '')
                                + item.name.escapeHTML()
                                + '</span>';
                        }
                        break;
                    case'buildDrop':
                        data.details = JSON.parse(data.details);
                        response += ': ';
                        building = this.data.buildings[data.details.building];
                        if ('town' === data.details.type) {
                            response += '<span class="linklike townlink" data-type="town" data-details=\'' + data.details.town_id + '\'>' + l10n.buildDrop(building, data.details.town_name) + '</span>';
                        } else {
                            response += '<span class="linklike fortlink" data-type="fort" data-details=\'' + data.details.fort_id + '\'>' + l10n.buildDrop(building, data.details.fort_name) + '</span>';
                        }
                        break;
                    default:
                        response = data.description;
                        break;
                }
            }
            return response;
        }
    };
    west.define(class_path + '.model', class_parent + '.model', model);
    west.define(class_path + '.view', class_parent + '.view', view);
    west.define(class_path + '.controller', class_parent + '.controller', controller);
});

$(function ($) {
    'use strict';
    var class_name = 'west.game.event.ses.Hearts.model', class_parent = 'west.game.event.model', class_object = {
        l10n: {'counter': {'mouseover': 'Твои сердца', 'help_mouseover': 'Посмотреть правила мероприятия'}},
        hasUiNotification: function () {
            return true;
        },
        getCounterMouseover: function () {
            return this.getL10n('counter').mouseover;
        },
        getCounterHelpMouseover: function () {
            return this.getL10n('counter').help_mouseover;
        },
        getCounterHelpClickHandler: function () {
            if (this.getWindow('help')) {
                return this.getWindow('help').open.bind(this.getWindow('help'));
            }
            return false;
        },
        getCounterLogClickHandler: function () {
            return this.getWindow('main').open.bind(this.getWindow('main'), {showTab: 'log'});
        }
    };
    west.define(class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.event.ses.Hearts', class_parent = 'west.game.event.controller', class_object = {
        _class_id: 'Hearts', _class_path: class_path, setWindows: function () {
            var model = this.getModel(), help_path = 'west.window.events.valentine.help', help = west.get(help_path), window_path = 'west.window.events.valentine.rewards', window = west.get(window_path);
            if (help) {
                if ('Valentine Help popup' !== help.id) {
                    help = west.instanciateSingle(help_path, {
                        event_controller: this,
                        data: {end_date: model.getEndDate()}
                    });
                }
                model.setWindow('help', help);
            }
            if (window) {
                if ('valentine' !== window.id) {
                    window = west.instanciateSingle(window_path, {event_controller: this});
                }
                model.setWindow('main', window);
            }
            return this;
        }, modifyMapPath: function () {
            var model = this.getModel(), map_blocked = model.hasMapBlocked();
            if (map_blocked) {
                return false;
            }
            return this.callParent.apply(this, arguments);
        }, handleUiNotificationClick: function () {
            this.getModel().getWindow('main').open();
            return false;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.event.community.valentine', class_parent = 'west.game.event.model', class_object = {
        _class_path: class_path, parseInitData: function (data) {
            if (data.event_matchup) {
                data.stages_prices = data.event_matchup;
                delete data.event_matchup;
            }
            if (data.event_stages) {
                data.rewards = data.event_stages;
                delete data.event_stages;
            }
            if (data.event_end) {
                data.meta = data.meta || {};
                data.meta.end = data.event_end;
                delete data.event_end;
            }
            if (data.event_progress) {
                data.counter = data.counter || {};
                data.counter.value = data.event_progress;
                delete data.event_progress;
            }
            return this.callParent.call(this, data);
        }, setStagesPrices: function (matchup) {
            this.setData('stages_prices', matchup, true);
            return this;
        }, getStagesPrices: function () {
            return this.getData('stages_prices');
        }, getRewardsStagesPrice: function (stage) {
            return this.getStagesPrices()[stage];
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.event.community.valentine', class_parent = 'west.game.event.controller', class_object = {
        _class_id: 'CE: valentine', _class_path: class_path, start: function () {
            this.callParent.apply(this, arguments);
            this.addEventListener('community_event_changed', this.lookForMap, this);
        }, stop: function () {
            this.callParent.apply(this, arguments);
            this.removeEventListener('community_event_changed', this.lookForMap, this);
        }, lookForMap: function (event_id, event_stage) {
            var that = this, model = this.getModel(), rewards = model.getRewards(), stage_price = model.getRewardsStagesPrice(event_stage), stage;
            if ('valentine' === event_id) {
                stage = rewards[stage_price];
                if (stage) {
                    $.each(stage, function (i, reward_data) {
                        if ('map_rivers_pink' === reward_data.reward_id) {
                            that.requestMapData();
                            return false;
                        }
                    });
                }
            }
            return this;
        }, requestMapData: function () {
            var that = this, model = this.getModel();
            Ajax.remoteCall('communityevent', 'get_event', {'event_id': 'valentine'}, function (response) {
                if (response.error)return MessageError(response.msg).show();
                model.setMapData(response.map);
                that.addMapModifications();
            });
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var single_instance = false, class_path = 'west.window.events.valentine.help', class_parent = 'west.game.help.popup';
    var controller = {
        _class_path: class_path,
        _namespace: class_path,
        _class_id: 'Valentine Help popup',
        init: function (options) {
            options = $.extend(true, {}, {
                data: {
                    'class_names': 'help help_window event_help valentine_help',
                    'instructions': ['collect', 'rewards', 'community'],
                    'instructions_data': {
                        'collect': {'class_name': 'divided', 'highlight': 'counter'},
                        'rewards': {'class_name': 'divided', 'highlight': 'bar'},
                        'community': {'class_name': 'divided', 'highlight': 'ses'}
                    },
                    'fake_ui': {'sidebar': ['heartswof', 'sesHearts'], 'counter': 'Hearts'}
                },
                l10n: {
                    'title': 'Руководство ко Дню святого Валентина',
                    'instructions': {
                        'collect': {'description': 'Собирай сердца на работах, дуэлях, битвах, строительстве и квестах. Ты также можешь их получить от друзей.'},
                        'rewards': {'description': 'Получай призы за свои сердца. Например, набор ко Дню святого Валентина или возможность испытать удачу повернув колесо фортуны.'},
                        'community': {'description': 'Сбор всех сердец в этом мире откроет специальные призы, такие как серия квестов или сундуки.'}
                    },
                    'end': function (date) {
                        return s('Мероприятие заканчивается %1 Приятного сбора!', date.toDateString() + '<br />');
                    }
                }
            }, options);
            this.callParent.call(this, options);
            return this;
        }
    }, model = {
        _class_path: class_path, getEndDate: function () {
            return this.getData('end_date');
        }
    }, view = {
        _class_path: class_path, createStructure: function () {
            var model = this.getModel(), l10n = model.getL10n('end'), end_date = model.getEndDate(), $root = this.callParent();
            $root.append($('<div class="footer overlap">' + l10n(end_date) + '</div>'));
            return $root;
        }
    };
    west.define(class_path + '.model', class_parent + '.model', model);
    west.define(class_path + '.view', class_parent + '.view', view);
    west.define(class_path + '.controller', class_parent + '.controller', controller);
    if (single_instance) {
        west.instanciateSingle(class_path, 'controller');
    }
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.events.valentine.rewards.tab', class_parent = 'west.game.window.model', class_object = {
        _class_path: class_path, data: {}, sortData: function () {
            var stages = this.getRewardsStages();
            stages.sort(function (a, b) {
                return a.price - b.price;
            });
            return this;
        }, hasRewards: function () {
            var rewards = this.getRewards();
            return $.isEmptyObject(rewards);
        }, getRewardsStaticData: function () {
            return this.getData('rewards_static_data') || {};
        }, setRewards: function (rewards_data) {
            var rewards, rewards_stages = [], rewards_static = this.getRewardsStaticData();
            if ($.isArray(rewards_data)) {
                rewards_data = $.merge([], rewards_data);
                rewards = {};
                $.each(rewards_data, function (i, reward_data) {
                    var reward_static;
                    rewards_stages.push(reward_data.price);
                    if ($.isArray(reward_data)) {
                        $.each(reward_data, function (i, reward) {
                            reward_static = rewards_static[reward.id || reward.reward + '_' + reward.reward_id];
                            if (reward_static) {
                                $.extend(reward, reward_static);
                            }
                        });
                        rewards[reward_data.price] = reward_data;
                    } else {
                        reward_static = rewards_static[reward_data.id || reward_data.reward + '_' + reward_data.reward_id];
                        if (reward_static) {
                            $.extend(reward_data, reward_static);
                        }
                        rewards[reward_data.price] = [reward_data];
                    }
                });
            } else {
                rewards = $.extend(true, {}, rewards_data);
                $.each(rewards, function (reward_price, reward_data) {
                    var reward_static;
                    rewards_stages.push(reward_price);
                    if ($.isArray(reward_data)) {
                        $.each(reward_data, function (i, reward) {
                            reward_static = rewards_static[reward.id || reward.reward + '_' + reward.reward_id];
                            if (reward_static) {
                                $.extend(reward, reward_static);
                            }
                        });
                    } else {
                        reward_static = rewards_static[reward_data.id || reward_data.reward + '_' + reward_data.reward_id];
                        if (reward_static) {
                            $.extend(reward_data, reward_static);
                        }
                        rewards[reward_price] = [reward_data];
                    }
                });
            }
            this.setData('rewards', rewards);
            this.setData('rewards_stages', rewards_stages, true);
            this.setData('next_reward', null, true);
            this.setData('unlocked_all', null, true);
            this.findNextStage();
            return this;
        }, getRewards: function () {
            return this.getData('rewards');
        }, getRewardsForStage: function (stage) {
            var rewards = this.getRewards();
            return rewards[stage];
        }, getRewardsStages: function () {
            return this.getData('rewards_stages') || [];
        }, findNextStage: function () {
            var stages = this.getRewardsStages(), current_hearts = this.getHeartsCount(), old_stage_goal = this.getNextStage(), stages_collected = [], i = 0, s_l = stages.length, next_stage;
            for (i; i < s_l; i++) {
                if (stages[i] <= current_hearts && (!old_stage_goal || stages[i] >= old_stage_goal)) {
                    stages_collected.push(stages[i]);
                }
                if (stages[i] > current_hearts) {
                    next_stage = stages[i];
                    break;
                }
            }
            this.setCollectedStages(stages_collected);
            if (next_stage) {
                this.setNextStage(next_stage);
                this.setUnlockedAll(false);
            } else {
                this.setNextStage(null);
                this.setUnlockedAll(true);
            }
            return this;
        }, setNextStage: function (next_stage) {
            var controller = this.getController(), currently_set_stage = this.getData('next_stage');
            if (next_stage !== currently_set_stage) {
                this.setData('next_stage', next_stage, true);
                if (currently_set_stage && this.hasCollectedStages()) {
                    controller.announceNextStage(this.getCollectedStages());
                }
            }
            return this;
        }, getNextStage: function () {
            return this.getData('next_stage');
        }, getSpecialStages: function () {
            return this.getData('special_stages');
        }, setSpecialStages: function (new_special_stages) {
            this.setData('special_stages', new_special_stages, true);
            return this;
        }, isSpecialStage: function (stage) {
            var stages = this.getSpecialStages() || [];
            return !!~stages.indexOf(stage);
        }, setSpecialStage: function (new_stage) {
            var stages = this.getSpecialStages();
            if (!stages) {
                stages = [];
                this.setSpecialStages(stages);
            }
            if (!~stages.indexOf(new_stage)) {
                stages.push(new_stage);
            }
            return this;
        }, setCollectedStages: function (new_stages) {
            this.setData('collected_stages', new_stages, true);
            return this;
        }, getCollectedStages: function () {
            return this.getData('collected_stages') || [];
        }, hasCollectedStages: function () {
            return !!this.getCollectedStages().length;
        }, getNextRewards: function () {
            var next_stage = this.getNextStage(), rewards = this.getRewardsForStage(next_stage), unlocked_all = this.getData('unlocked_all');
            if (!rewards && !unlocked_all) {
                this.findNextStage();
                rewards = this.getRewardsForStage(this.getData('next_stage'));
            }
            return rewards;
        }, getRewardName: function (reward_object) {
            var reward_id = reward_object.id || reward_object.reward_id, reward_type = reward_object.reward || reward_object.type, name;
            if (reward_type ? 'item' === reward_type : 'number' === typeof reward_id) {
                name = ItemManager.get(reward_id).name;
            } else {
                name = reward_object.name || reward_object.text;
            }
            return name;
        }, isUnlockedAll: function () {
            return !!this.getData('unlocked_all');
        }, setUnlockedAll: function (bool) {
            this.setData('unlocked_all', bool, true);
            return this;
        }, getMaxHeartsPerNugget: function () {
            var event_controller = this.getController().getEventController(), ratio = 1;
            if (event_controller) {
                ratio = event_controller.getModel().getPremiumRatio() || 1;
            }
            return ratio;
        }, getMissingHeartsTillNextReward: function () {
            var your_hearts = this.getHeartsCount(), next_stage = this.getNextStage();
            return next_stage - your_hearts;
        }, getPriceForMissingHearts: function () {
            var missing_hearts = this.getMissingHeartsTillNextReward(), ratio = this.getMaxHeartsPerNugget();
            return Math.ceil(missing_hearts / ratio);
        }, setHeartsUpdateEventName: function (event_name) {
            this.setData('update_event_name', event_name, true);
            return this;
        }, getHeartsUpdateEventName: function () {
            return this.getData('update_event_name');
        }, setHeartsCount: function (hearts) {
            this.setData('hearts_count', parseInt(hearts), true);
            return this;
        }, getHeartsCount: function () {
            return this.getData('hearts_count');
        }, hasHeartsCount: function () {
            return "number" === typeof this.getHeartsCount();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.events.valentine.rewards.tab', class_parent = 'west.game.window.tab.view', class_object = {
        _class_path: class_path, generateRewards: function () {
            var model = this.getModel(), factory = this.getFactory(), stages = model.getRewardsStages(), rewards, hearts_count = model.getHeartsCount(), next_stage = model.getNextStage(), $rewards = [];
            $.each(stages, function (i, stage) {
                rewards = model.getRewardsForStage(stage);
                var custom_class;
                if (next_stage === stage) {
                    custom_class = 'next';
                } else if (stage <= hearts_count) {
                    custom_class = 'owned visible mouseover';
                }
                if (model.isSpecialStage(stage)) {
                    custom_class += ' sparkly visible';
                }
                if ($.isArray(rewards)) {
                    $.each(rewards, function (j, reward) {
                        $rewards.push($('<li></li>').append(factory.createReward(reward, stage, custom_class)));
                    });
                } else {
                    $rewards.push($('<li></li>').append(factory.createReward(rewards, stage, custom_class)));
                }
            });
            return $rewards;
        }, showRewardPopup: function (rewards) {
            var controller = this.getController(), model = this.getModel(), l10n = model.getL10n('reward_popup'), factory = this.getFactory(), subdescription = (1 === rewards.length ? model.getRewardName(rewards[0]) : ' '), dialog = new tw2widget.reward.RewardDialog(l10n.description(rewards.length), subdescription), $rewards = [];
            $.each(rewards, function (i, reward_object) {
                var $reward = factory.createReward(reward_object, 0, 'owned visible mouseover');
                $rewards.push($('.image', $reward));
            });
            dialog.addReward($('<div class="valentine_reward_dialog owned visible ' + (controller._tab_class ? controller._tab_class : '') + '"></div>').append($rewards));
            dialog.show();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.events.valentine.rewards.tab', class_parent = 'west.game.window.tab.controller', class_object = {
        _class_id: null,
        _namespace: 'west.window.events.valentine',
        _class_path: class_path,
        prepareWindow: function () {
            this.callParent();
            var wnd = this.getWindow(), model = this.getModel(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title).setMiniTitle(l10n.window.mini_title).center();
            return this;
        },
        reRender: function () {
            var model = this.getModel(), view = this.getView();
            model.sortData().findNextStage();
            view.renderContent();
            return this;
        },
        show: function () {
            var wnd = this.getWindow(), model = this.getModel(), view = this.getView(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title);
            this.callParent();
            return this;
        },
        announceNextStage: function (stages) {
            var model = this.getModel(), view = this.getView(), rewards = [], i = 0, l;
            if (!stages || !stages.length) {
                return this;
            }
            l = stages.length;
            for (i; i < l; i++) {
                rewards = rewards.concat(model.getRewardsForStage(stages[i]));
            }
            view.showRewardPopup(rewards);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.events.valentine.rewards.personal_awards', class_parent = 'west.window.events.valentine.rewards.tab.model', class_object = {
        _class_path: class_path,
        data: {
            rewards_static_data: {
                'wof-unlock': {name: 'Колесо любви'},
                'avatar-rose': {name: 'Дополнение для портрета'},
                'avatar-hat': {name: 'Дополнение для портрета'}
            }
        },
        l10n: {
            window: {
                'tab_name': 'Твои призы',
                'title': 'Личные призы',
                'mini_title': 'Призы ко Дню святого Валентина'
            },
            'texts': {
                'description': function (date) {
                    return s('%1 Собирай сердца в игре, чтобы получить уникальное вознаграждение! %2 Празднование Дня святого Валентина закончится %3', '<h3>', '</h3>', date.toDateString());
                }, 'next_reward': function (hearts_count, reward_name) {
                    return s('%1 до следующей награды: %2', '<strong>' + hearts_count + '</strong>', '<div class="reward_name">' + reward_name + '</div>');
                }
            },
            'buy_popup': {
                'title': 'Купить несколько сердец', 'message': function (hearts_count, ratio, price) {
                    return s('Тебе нужно %1 1 %2 даёт тебе %3', format_number(hearts_count) + '<span class="ses_event_icon hearts"></span><br />', '<img alt="" class="tw2gui-iconset tw2gui-icon-nugget" title="" src="https://westrus.innogamescdn.com/images/tw2gui/pixel-vfl3z5WfW.gif">', ratio + '<span class="ses_event_icon hearts"></span>');
                }
            },
            'buttons': {'buy_hearts': 'Открыть следующий приз'},
            'mouseovers': {
                'next_reward': function (hearts_count, price) {
                    return s('У тебя: %1 Тебе нужно %2 Тебе не хватает: %3', format_number(hearts_count) + '<br />', format_number(price) + '<br />', format_number(price - hearts_count));
                },
                'end_loop': {
                    'progressbar': "Собери больше сердец и обменяй их на облигации",
                    hearts: s("Собери %1 сердец", 5000),
                    bonds: s("Возьми %1 облигаций", 50)
                }
            },
            'reward_popup': {
                'description': function (count) {
                    return ngettext('Открыто новое вознаграждение!', new Array('Открыто новое вознаграждение!', 'Открыты новые вознаграждения!', 'Открыты новые вознаграждения!'), count);
                }
            }
        },
        getTabName: function () {
            return this.getL10n('window').tab_name;
        },
        init: function () {
            this.callParent.apply(this, arguments);
            var event_controller = this.getController().getEventController();
            if (event_controller) {
                this.setRewards(event_controller.getModel().getRewards()).setHeartsUpdateEventName(event_controller.getModel().getCounterUpdateEventName());
            }
            return this;
        },
        setRewards: function () {
            this.callParent.apply(this, arguments);
            var stages = this.getRewardsStages();
            this.setSpecialStage(stages[stages.length - 1]);
            return this;
        },
        getHeartsCount: function () {
            var event_controller = this.getController().getEventController();
            if (event_controller) {
                return event_controller.getModel().getCounterValue();
            }
            return this.callParent();
        },
        getHighestRewardPrice: function () {
            var stages = this.getRewardsStages();
            if (!stages) {
                return 0;
            }
            return stages[stages.length - 1];
        },
        getMaxHeartsPerGameLoop: function () {
            return 5000;
        },
        getHeartsCountInGameLoop: function () {
            var max_reward = this.getHighestRewardPrice(), current_hearts = this.getHeartsCount(), diff = current_hearts - max_reward, max = this.getMaxHeartsPerGameLoop(), loop_state = diff % max, result;
            if (diff < 0) {
                result = diff - max;
            } else {
                result = loop_state;
            }
            return result;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.events.valentine.rewards.personal_awards', class_parent = 'west.window.events.valentine.rewards.tab.view', class_object = {
        _class_path: class_path, renderContent: function () {
            var root = this.getRoot(), model = this.getModel(), description = model.getL10n('texts').description(this.getController().getEventController().getModel().getEndDate());
            if (!root) {
                return this;
            }
            root.empty().append($('<div class="description">' + description + '</div>').addMousePopup(this.getController().getEventController().getModel().getEndDate().toDateTimeStringNice()), $('<div class="rewards_container"></div>').append($('<ul class="rewards"></ul>').append(this.generateRewards())));
            if (model.isUnlockedAll()) {
                this.addEndLoopProgressbar();
            } else {
                this.addNextRewardTeaser();
                this.addBuyHeartsButton();
            }
            return this;
        }, addNextRewardTeaser: function () {
            var root = this.getRoot(), model = this.getModel(), l10n = model.getL10n(), your_hearts = model.getHeartsCount(), missing_hearts_count = model.getMissingHeartsTillNextReward(), next_stage = model.getNextStage(), next_reward = model.getRewardsForStage(next_stage);
            if ($.isArray(next_reward)) {
                next_reward = next_reward[0];
            }
            $(root).append($('<div class="next_reward"><span class="ses_event_icon hearts"></span>' + l10n.texts.next_reward(format_number(missing_hearts_count), model.getRewardName(next_reward)) + '</div>').addMousePopup(l10n.mouseovers.next_reward(your_hearts, next_stage)));
            return this;
        }, addBuyHeartsButton: function () {
            var root = this.getRoot(), controller = this.getController(), model = this.getModel(), l10n = model.getL10n();
            $(root).append($(new west.gui.Button('<img src="https://westrus.innogamescdn.com/images/window/trader/nugget.png" alt="" />' + l10n.buttons.buy_hearts, controller.handleBuyButtonClick, controller).addClass('button buy_hearts').getMainDiv()));
            return this;
        }, removeBuyHeartsButton: function () {
            $('.button.buy_hearts', this.getRoot()).remove();
            return this;
        }, showBuyHeartsDialog: function () {
            var model = this.getModel(), l10n = model.getL10n(), pay_handler = new west.wof.WofPayHandler(), missing_hearts_count = model.getMissingHeartsTillNextReward(), hearts_per_nugget = model.getMaxHeartsPerNugget(), missing_hearts_price = model.getPriceForMissingHearts(), doBuy;
            pay_handler.setTitle(l10n.buy_popup.title).setMessage(l10n.buy_popup.message(missing_hearts_count, hearts_per_nugget, missing_hearts_price)).addPayOption(new west.wof['WofPayOptionNugget'](1, missing_hearts_price));
            doBuy = function () {
                Premium.actionUse("valentine2015 Hearts", null, function (data) {
                    Premium.updatePoints(data.points);
                });
            };
            pay_handler.askUser(null, doBuy);
            return this;
        }, addEndLoopProgressbar: function () {
            var root = this.getRoot(), model = this.getModel(), l10n = model.getL10n('mouseovers'), current_hearts_in_loop = model.getHeartsCountInGameLoop(), harts_per_loop = model.getMaxHeartsPerGameLoop(), progressbar = new west.gui.Progressbar(current_hearts_in_loop, harts_per_loop);
            $(root).append($('<div class="end_loop"></div>').append($('<span class="icon heart big"></span>').addMousePopup(l10n.end_loop.hearts), $('<span class="icon bonds big"></span>').addMousePopup(l10n.end_loop.bonds), progressbar.getMainDiv().addMousePopup(l10n.end_loop.progressbar)));
            return this;
        }, removeEndLoopProgressbar: function () {
            $('.end_loop', this.getRoot()).remove();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.events.valentine.rewards.personal_awards', class_parent = 'west.window.events.valentine.rewards.tab.controller', class_object = {
        _tab_id: 'personal_awards', _class_id: 'personal_awards', _class_path: class_path, init: function () {
            this.callParent.apply(this, arguments);
        }, show: function () {
            this.getWindow().addClass('noreload');
            this.reRender();
            this.callParent();
            return this;
        }, setEventListeners: function () {
            var that = this, $root = this.getRoot(), model = this.getModel(), hearts_update_event = model.getHeartsUpdateEventName();
            $root.on('click.valentine_personal_awards', '.banner.gold', function () {
                west.window.premium.open(that.getWindowClass());
            }).on('click.valentine_personal_awards', '.owned .wof-unlock', function () {
                new west.wof.WofHeartsWindow().show();
            });
            if (hearts_update_event) {
                EventHandler.listen(hearts_update_event, this.handleHeartsUpdate, this);
            }
            return this;
        }, removeEventListeners: function () {
            var root = $(this.getRoot()), model = this.getModel(), hearts_update_event = model.getHeartsUpdateEventName();
            root.off('.valentine_personal_awards');
            if (hearts_update_event) {
                EventHandler.unlisten(hearts_update_event, this.handleHeartsUpdate, this);
            }
            return this;
        }, handleBuyButtonClick: function () {
            this.getView().showBuyHeartsDialog();
            return this;
        }, handleHeartsUpdate: function () {
            setTimeout(this.reRender.bind(this), 50);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.events.valentine.rewards.community_awards', class_parent = 'west.window.events.valentine.rewards.tab.model', class_object = {
        _class_path: class_path,
        data: {
            update_event_name: 'community_event_changed',
            next_request_delay: 60,
            rewards_static_data: {
                'custom_map_rivers_pink': {name: 'Мир святого Валентина'},
                'quest_2163': {name: 'Специальная серия квестов'},
                'achievement_50189': {name: 'Специальное достижение'}
            }
        },
        l10n: {
            window: {'title': 'Мировые призы', 'mini_title': 'Мировые призы', 'description': 'lorem ipsum'},
            'texts': {
                'description': s('%1 Внимание игроки прерии! %2 Чем больше сердец все игроки этого мира соберут, тем более эксклюзивными будут общие награды для всех вас!', '<h3>', '</h3>'),
                'end': function (date) {
                    return s('Празднование Дня святого Валентина закончится %1', date.toDateString());
                }
            },
            'mouseovers': {
                'total_hearts': 'Это общее количество сердец, которое до сих пор собрали игроки этого мира.',
                'next_reward': function (hearts_count, price) {
                    return s('У тебя: %1 Тебе нужно %2 Тебе не хватает: %3', hearts_count + '<br />', price + '<br />', price - hearts_count);
                }
            },
            'reward_popup': {
                'description': function (count) {
                    return ngettext('Доступен новый приз!', new Array('Доступен новый приз!', 'Доступны новые призы!', 'Доступны новые призы!'), count);
                }
            }
        },
        getTabName: function () {
            return this.getL10n('window').title;
        },
        setNextRequestTimestamp: function (new_timestamp) {
            this.setData('next_request_timestamp', new_timestamp, true);
            return this;
        },
        getNextRequestTimestamp: function () {
            return this.getData('next_request_timestamp');
        },
        getNextRequestDelay: function () {
            return this.getData('next_request_delay');
        },
        setInitData: function (event_list) {
            var that = this, event_data;
            if (!event_list || !event_list['valentine']) {
                return this;
            }
            event_data = event_list['valentine'];
            that.setHeartsCount(event_data.event_progress).setRewards(event_data.event_stages).setStagesPrices(event_data.event_matchup).setData('init_data', true);
            return this;
        },
        getInitData: function () {
            return this.getData('init_data');
        },
        hasInitData: function () {
            return !!this.getInitData();
        },
        setStagesPrices: function (matchup) {
            this.setData('stages_prices', matchup, true);
            return this;
        },
        getStagesPrices: function () {
            return this.getData('stages_prices');
        },
        getRewardsStagesPrice: function (stage) {
            return this.getStagesPrices()[stage];
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.events.valentine.rewards.community_awards', class_parent = 'west.window.events.valentine.rewards.tab.view', class_object = {
        _class_path: class_path, renderContent: function () {
            var root = this.getRoot(), model = this.getModel(), l10n = model.getL10n('texts');
            if (!root) {
                return this;
            }
            root = $(root).empty();
            root.append($('<div class="description large">' + l10n.description + '</div>'), $('<div class="rewards_container small"></div>').append($('<ul class="rewards"></ul>').append(this.generateRewards())));
            this.addEndDate().addGlobalHeartsCount();
            return this;
        }, setHeartsCount: function (count) {
            var root = this.getRoot();
            $('.hearts_count .hearts_value', root).text(count);
            return this;
        }, addEndDate: function () {
            var root = this.getRoot(), controller = this.getController(), model = this.getModel(), l10n = model.getL10n();
            $(root).append($('<div class="end_date">' + l10n.texts.end(this.getController().getEventController().getModel().getEndDate()) + '</div>').addMousePopup(this.getController().getEventController().getModel().getEndDate().toDateTimeStringNice()));
            return this;
        }, addGlobalHeartsCount: function () {
            var root = this.getRoot(), controller = this.getController(), model = this.getModel(), l10n = model.getL10n(), global_hearts = model.getHeartsCount();
            $(root).append($('<div class="global_hearts"></div>').append($('<span class="icon heart_with_globe"></span>'), $('<span class="value">' + format_number(round_number(global_hearts, 12)) + '</span>')).addMousePopup(l10n.mouseovers.total_hearts));
            if (global_hearts.toString().length > 12) {
                $('.global_hearts .value', root).addMousePopup(format_number(global_hearts));
            }
            return this;
        }, removeGlobalHeartsCount: function () {
            var root = this.getRoot();
            $('.global_hearts', root).remove();
            return this;
        }, updateGlobalHeartsCount: function (count) {
            var root = this.getRoot(), model = this.getModel();
            count = count || model.getHeartsCount();
            $('.global_hearts .value', root).text(count);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.events.valentine.rewards.community_awards', class_parent = 'west.window.events.valentine.rewards.tab.controller', class_object = {
        _tab_id: 'community_awards',
        _class_id: 'community_awards',
        _class_path: class_path,
        _tab_class: 'community_rewards',
        init: function () {
            this.callParent.apply(this, arguments);
            this.getModel().setInitData($.extend(true, {}, Game.ceData));
            this.setEventListeners();
        },
        show: function () {
            this.getWindow().removeClass('noreload');
            var model = this.getModel(), has_init_data = model.hasInitData();
            if (!has_init_data) {
                this.requestInitData();
                return this;
            } else {
                this.callParent();
                this.requestHeartsCount();
            }
            return this;
        },
        setEventListeners: function () {
            this.removeEventListeners();
            var that = this, $root = $(this.getRoot()), model = this.getModel(), hearts_update_event = model.getHeartsUpdateEventName();
            if (hearts_update_event) {
                EventHandler.listen(hearts_update_event, this.handleUpdate, this);
            }
            return this;
        },
        handleUpdate: function (event_id, event_stage) {
            var model = this.getModel();
            if ('valentine' !== event_id) {
                return this;
            }
            model.setHeartsCount(model.getRewardsStagesPrice(event_stage));
            this.reRender();
            return this;
        },
        removeEventListeners: function () {
            var root = $(this.getRoot()), model = this.getModel(), hearts_update_event = model.getHeartsUpdateEventName();
            if (hearts_update_event) {
                EventHandler.unlisten(hearts_update_event, this.handleUpdate, this);
            }
            return this;
        },
        reLoad: function () {
            this.requestHeartsCount();
            return this.callParent.apply(this, arguments);
        },
        requestInitData: function () {
            var that = this, model = this.getModel(), next_request = model.getNextRequestTimestamp(), delay = model.getNextRequestDelay(), now = new ServerDate().date, wnd = this.getWindow();
            if (next_request && (next_request) > now) {
                return this;
            }
            wnd.showTabLoader(this._tab_id);
            Ajax.remoteCall('communityevent', 'get_event_list', {}, function (response) {
                if (response.error)return MessageError(response.msg).show();
                model.setInitData(response.event_list);
                that.reRender();
                that.show();
                wnd.hideLoader();
            });
            model.setNextRequestTimestamp(now.setSeconds(now.getSeconds() + delay));
            return this;
        },
        requestHeartsCount: function () {
            var that = this, model = this.getModel(), next_request = model.getNextRequestTimestamp(), delay = model.getNextRequestDelay(), now = new ServerDate().date, wnd = this.getWindow();
            if (next_request && (next_request) > now) {
                return this;
            }
            wnd.showTabLoader(this._tab_id);
            if (wnd.currentActiveTabId === this._tab_id) {
                wnd.showLoader();
            }
            Ajax.remoteCall('communityevent', 'get_status', {'event_id': 'valentine'}, function (response) {
                if (response.error)return MessageError(response.msg).show();
                model.setHeartsCount(response);
                wnd.hideLoader();
                that.reRender();
            });
            model.setNextRequestTimestamp(now.setSeconds(now.getSeconds() + delay));
            return this;
        },
        getRewards: function () {
            var model = this.getModel();
            Ajax.remoteCall('communityevent', 'get_event', {'event_id': 'valentine'}, function (response) {
                if (response.error)return MessageError(response.msg).show();
                model.setRewards(response.event_stages);
            });
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.events.valentine.rewards', class_parent = 'west.game.window.tab.model', class_object = {
        _class_path: class_path,
        l10n: {
            window: {'title': 'Главное окно ко Дню святого Валентина', 'mini_title': 'День святого Валентина'},
            help: {
                'title': 'Руководство ко Дню святого Валентина',
                'collect': 'Собирай сердца на работах, дуэлях, битвах, строительстве и квестах. Ты также можешь их получить от друзей.',
                'rewards': 'Получай призы за свои сердца. Например, набор ко Дню святого Валентина или возможность испытать удачу повернув колесо фортуны.',
                'community': 'Сбор всех сердец в этом мире откроет специальные призы, такие как серия квестов или сундуки.',
                'end': function (date) {
                    return s('Мероприятие заканчивается %1 Приятного сбора!', date.toDateString() + '<br />');
                },
                'mouseover': 'Помощь'
            },
            rewards: {'mouseover_inactive': 'Награда закрыта'}
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'factory', class_path = 'west.window.events.valentine.rewards', class_parent = 'west.game.window.factory', class_object = {
        _class_path: class_path, createReward: function (reward_object, price, custom_class) {
            var
                $reward = $('<div class="reward"></div>'), reward_id = reward_object.id || reward_object.reward_id, reward_type = reward_object.reward || reward_object.type, image, name;
            if (reward_type) {
                switch (reward_type) {
                    case'item':
                        image = this.createItem(reward_id, custom_class);
                        break;
                    case'achievement':
                        image = this.createImage('achievements achievement_' + reward_id);
                        break;
                    case'quest':
                        image = this.createImage('quests quest_' + reward_id);
                        break;
                    case'custom':
                    default:
                        image = this.createImage(reward_id);
                        break;
                }
            } else {
                switch (typeof reward_id) {
                    case'number':
                        image = this.createItem(reward_id, custom_class);
                        break;
                    case'string':
                    default:
                        image = this.createImage(reward_id);
                        if (custom_class && !!~custom_class.indexOf('mouseover')) {
                            image.addMousePopup(reward_object.desc);
                        }
                        break;
                }
            }
            if (reward_type ? 'item' === reward_type : 'number' === typeof reward_id) {
                name = ItemManager.get(reward_id).name;
            } else {
                name = reward_object.name || reward_object.text;
            }
            if (custom_class) {
                $reward.addClass(custom_class);
            }
            if (!custom_class || !~custom_class.indexOf('mouseover')) {
                image.addMousePopup(this.getModel().getL10n('rewards').mouseover_inactive);
            }
            $reward.append(image, $('<div class="name">' + name + '</div>'), $('<div class="price"><span class="tw-currency curr-hearts"></span>' + format_number(round_number(price, 6)) + '</div>'));
            return $reward;
        }, createItem: function (item_id, custom_class) {
            var item_obj = ItemManager.get(item_id), popup = '', $item = $('<div class="image"><div class="valentine_rewards_sprite"></div></div>');
            if (item_obj) {
                popup = new ItemPopup(item_obj, {
                    show_alreadyown: true,
                    character: Character,
                    show_sell_price: true
                }).popup;
                $('.valentine_rewards_sprite', $item).addClass(item_obj.short);
            }
            if (custom_class && !!~custom_class.indexOf('mouseover')) {
                $item.addMousePopup(popup);
            }
            return $item;
        }, createImage: function (class_name) {
            return $('<div class="image"><div class="valentine_rewards_sprite ' + class_name + '"></div></div>');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.events.valentine.rewards', class_parent = 'west.game.window.tab.view', class_object = {
        _class_path: class_path, addHelp: function () {
            var root = this.getRoot(), model = this.getModel(), l10n = model.getL10n('help');
            if (!$('.button.help', root).length) {
                $(root).append($('<div class="button help"></div>').addMousePopup(l10n.mouseover));
            }
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.events.valentine.rewards', class_parent = 'west.game.window.event.controller', class_object = {
        _class_id: 'valentine',
        _namespace: class_path,
        _class_path: class_path,
        _window_id: 'valentine',
        _window_class: 'valentine_window valentine_2014',
        init: function () {
            this.callParent.apply(this, arguments);
            this.initTabs();
            return this;
        },
        initTabs: function () {
            var factory = this.getFactory(), namespace = west.get(class_path);
            this.setTab(new namespace.personal_awards.controller({
                'window_controller': this,
                'event_controller': this.getEventController(),
                'factory': factory
            }));
            this.setTab(new namespace.community_awards.controller({
                'window_controller': this,
                'event_controller': this.getEventController(),
                'factory': factory
            }));
            this.setTab(new west.game.window.tab.event.log.controller({
                'window_controller': this,
                'tab_id': 'log',
                'data': {'event_id': 'Hearts', 'icon': 'hearts'},
                'l10n': {
                    'window': {'title': 'Журнал сердец', 'tab_name': 'Журнал сердец'},
                    'message': 'Журнал сердец содержит историю их сбора.'
                }
            }));
            return this;
        },
        prepareWindow: function () {
            this.callParent();
            var wnd = this.getWindow(), model = this.getModel(), view = this.getView(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title).setMiniTitle(l10n.window.mini_title).setSize(748, 490).center();
            view.addHelp();
            this.addEventsListeners();
            return this;
        },
        addEventsListeners: function () {
            this.removeEventsListeners();
            this.getRoot().on('click.valentines', '.button.help', this.showHelp);
            return this;
        },
        removeEventsListeners: function () {
            this.getRoot().off('.valentines');
            return this;
        },
        showHelp: function () {
            west.window.events.valentine.help.open();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_path = 'west.window.events.easter.help', class_parent = 'west.game.help.popup';
    var controller = {
        id: 'Easter help popup',
        _class_path: class_path,
        _namespace: class_path,
        init: function (options) {
            options = $.extend(true, {}, {
                data: {
                    end_date: null,
                    class_names: 'easter easter_help',
                    instructions: ['collect', 'rewards'],
                    instructions_data: {
                        'collect': {type: 'wide', highlight: 'counter'},
                        'rewards': {type: 'wide', highlight: 'bar'}
                    },
                    fake_ui: {sidebar: ['easter2015'], counter: 'Easter'}
                }, l10n: {
                    'title': 'Руководство к пасхальному событию',
                    'end': function (date) {
                        return s('Мероприятие заканчивается %1 Приятного сбора!', date.toDateString() + '<br />');
                    },
                    'instructions': {
                        'collect': {'description': 'Собирай пасхальные яйца, например на работах, дуэлях, или получай их от друзей.'},
                        'rewards': {'description': 'Выбирай и побеждай противников, чтобы получить призы и стать лучшим дуэлянтом на Диком Западе.'}
                    }
                }
            }, options);
            this.callParent.call(this, options);
            return this;
        }
    }, model = {
        _class_path: class_path, getEndDate: function () {
            return this.getData('end_date');
        }
    }, view = {
        _class_path: class_path, createStructure: function () {
            var model = this.getModel(), l10n = model.getL10n('end'), end_date = model.getEndDate(), $root = this.callParent();
            $root.append($('<div class="footer overlap">' + l10n(end_date) + '</div>'));
            return $root;
        }
    };
    west.define(class_path + '.model', class_parent + '.model', model);
    west.define(class_path + '.view', class_parent + '.view', view);
    west.define(class_path + '.controller', class_parent + '.controller', controller);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.events.easter.log', class_parent = 'west.game.window.event.controller', class_object = {
        id: 'easter_log',
        _window_id: 'easter_egg_log',
        _window_class: 'log_window',
        init: function (options) {
            options = $.extend({}, options, {l10n: {window: {'title': 'Журнал яиц', 'mini_title': 'Журнал яиц'}}});
            this.callParent.call(this, options);
            this.initTabs();
            return this;
        },
        initTabs: function () {
            this.setTab(new west.game.window.tab.event.log.controller({
                'window_controller': this,
                tab_id: 'log',
                data: {event_id: 'Easter', icon: 'easter'},
                l10n: {
                    window: {'title': 'Журнал яиц', 'tab_name': 'Журнал яиц'},
                    'message': 'Журнал яиц содержит историю их сбора.'
                }
            }));
        },
        prepareWindow: function () {
            this.callParent();
            var wnd = this.getWindow(), model = this.getModel(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title).setMiniTitle(l10n.window.mini_title).setSize(748, 490).center();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'west.game.event.ses.Easter.model', class_parent = 'west.game.event.model', class_object = {
        l10n: {
            'currency': {name: 'Яйца'},
            'counter': {'mouseover': 'Твои пасхальные яйца', 'help_mouseover': 'Посмотреть правила мероприятия'}
        }, hasUiNotification: function () {
            return false;
        }, getCounterMouseover: function () {
            return this.getL10n('counter').mouseover;
        }, getCounterHelpMouseover: function () {
            return this.getL10n('counter').help_mouseover;
        }, getCounterHelpClickHandler: function () {
            if (this.getWindow('help')) {
                return this.getWindow('help').open.bind(this.getWindow('help'));
            }
            return false;
        }, getCounterLogClickHandler: function () {
            return this.getWindow('main').open.bind(this.getWindow('main'), {showTab: 'log'});
        }
    };
    west.define(class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.event.ses.Easter', class_parent = 'west.game.event.controller', class_object = {
        _class_id: 'SES Easter event', _class_path: class_path, setWindows: function () {
            var model = this.getModel(), help_path = 'west.window.events.easter.help', help = west.get(help_path), window_path = 'west.window.events.valentine', window = west.get(window_path);
            if (window) {
                if ('valentine' !== window.id) {
                    window = west.instanciateSingle(window_path, {event_controller: this});
                }
                model.setWindow('main', window);
            }
            if (west.window.events.easter.help && 'Easter help popup' !== west.window.events.easter.help.id) {
                west.window.events.easter.help = new west.window.events.easter.help.controller({data: {end_date: model.getEndDate()}});
                model.setWindow('help', west.window.events.easter.help);
            }
            if (west.window.events.easter.log && 'easter_log' !== west.window.events.easter.log.id) {
                west.window.events.easter.log = new west.window.events.easter.log.controller();
                model.setWindow('main', west.window.events.easter.log);
            }
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_path = 'west.window.events.independence.help', class_parent = 'west.game.help.popup';
    var controller = {
        id: 'Independence help popup',
        _class_path: class_path,
        _namespace: class_path,
        init: function (options) {
            options = $.extend(true, {}, {
                data: {
                    end_date: null,
                    class_names: 'independence independence_help',
                    instructions: ['rewards', 'collect'],
                    instructions_data: {
                        'collect': {type: 'wide', highlight: 'counter'},
                        'rewards': {type: 'wide', highlight: 'bar'}
                    },
                    fake_ui: {sidebar: ['indep14'], counter: 'Independence'}
                }, l10n: {
                    'title': 'Руководство ко Дню независимости',
                    'end': function (date) {
                        return s('Мероприятие заканчивается %1 Приятного сбора!', date.toDateString() + '<br />');
                    },
                    'instructions': {
                        'collect': {'description': 'Собирай салюты, например на работах, дуэлях или получай их от друзей.'},
                        'rewards': {'description': 'Помоги построить праздничную площадку ко Дню независимости и получи ценные призы!'}
                    }
                }
            }, options);
            this.callParent.call(this, options);
            return this;
        }
    }, model = {
        _class_path: class_path, getEndDate: function () {
            return this.getData('end_date');
        }
    }, view = {
        _class_path: class_path, createStructure: function () {
            var model = this.getModel(), l10n = model.getL10n('end'), end_date = model.getEndDate(), $root = this.callParent();
            $root.append($('<div class="footer overlap">' + l10n(end_date) + '</div>'));
            return $root;
        }
    };
    west.define(class_path + '.model', class_parent + '.model', model);
    west.define(class_path + '.view', class_parent + '.view', view);
    west.define(class_path + '.controller', class_parent + '.controller', controller);
});

$(function ($) {
    'use strict';
    var class_name = 'west.game.event.ses.Independence.model', class_parent = 'west.game.event.model', class_object = {
        l10n: {
            'currency': {name: 'Салюты'},
            'counter': {'mouseover': 'Твои салюты', 'help_mouseover': 'Посмотреть правила мероприятия'}
        }, hasUiNotification: function () {
            return false;
        }, getCounterMouseover: function () {
            return this.getL10n('counter').mouseover;
        }, getCounterHelpMouseover: function () {
            return this.getL10n('counter').help_mouseover;
        }, getCounterHelpClickHandler: function () {
            return this.getWindow('help').open.bind(this.getWindow('help'));
        }
    };
    west.define(class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.event.ses.Independence', class_parent = 'west.game.event.controller', class_object = {
        _class_id: 'Independence', _class_path: class_path, setWindows: function () {
            var model = this.getModel();
            if (west.window.events.independence.help && 'Independence help popup' === west.window.events.independence.help.id) {
                return this;
            }
            west.window.events.independence.help = new west.window.events.independence.help.controller({data: {end_date: model.getEndDate()}});
            model.setWindow('help', west.window.events.independence.help);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var
        class_name = 'model', class_path = 'west.game.event.ses.DayOfDead', class_parent = 'west.game.event.model', class_object = {
            l10n: {
                'currency': {name: 'Бархатец'},
                'ui': {'mouseover': 'День Мёртвых'},
                'counter': {'mouseover': 'День Мёртвых', 'help_mouseover': 'Посмотреть правила мероприятия'}
            }, hasUiNotification: function () {
                return true;
            }, getCounterMouseover: function () {
                return this.getL10n('counter').mouseover;
            }, getCounterHelpMouseover: function () {
                return this.getL10n('counter').help_mouseover || false;
            }, getCounterHelpClickHandler: function () {
                if (this.getWindow('help')) {
                    return this.getWindow('help').open.bind(this.getWindow('help'));
                }
                return false;
            }, getUiNotificationMouseover: function () {
                return this.getL10n('ui').mouseover;
            }, getCounterLogClickHandler: function () {
                return this.getWindow('rewards').open.bind(this.getWindow('rewards'), {showTab: 'log'});
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.event.ses.DayOfDead', class_parent = 'west.game.event.controller', class_object = {
        _class_id: 'SES: DayOfDead', _class_path: class_path, setWindows: function () {
            var model = this.getModel(), help_path = 'west.window.events.day_of_the_dead.help', help = west.get(help_path), rewards_path = 'west.window.events.day_of_the_dead.rewards', rewards = west.get(rewards_path);
            if (help) {
                if ('DOTD Help popup' !== help.id) {
                    help = west.instanciateSingle(help_path, {
                        event_controller: this,
                        data: {end_date: model.getEndDate()}
                    });
                }
                model.setWindow('help', help);
            }
            if (rewards) {
                if ('day_of_the_dead' !== rewards.id) {
                    rewards = west.instanciateSingle(rewards_path, {event_controller: this});
                }
                model.setWindow('rewards', rewards);
            }
            return this;
        }, handleUiNotificationClick: function () {
            this.getModel().getWindow('rewards').open();
            return false;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.event.community.dayofdead', class_parent = 'west.game.event.model', class_object = {
        _class_path: class_path, parseInitData: function (data) {
            if (data.event_matchup) {
                data.stages_prices = data.event_matchup;
                delete data.event_matchup;
            }
            if (data.event_stages) {
                data.rewards = data.event_stages;
                delete data.event_stages;
            }
            if (data.event_end) {
                data.meta = data.meta || {};
                data.meta.end = data.event_end;
                delete data.event_end;
            }
            if (data.event_progress) {
                data.counter = data.counter || {};
                data.counter.value = data.event_progress;
                delete data.event_progress;
            }
            return this.callParent.call(this, data);
        }, setStagesPrices: function (matchup) {
            this.setData('stages_prices', matchup, true);
            return this;
        }, getStagesPrices: function () {
            return this.getData('stages_prices');
        }, getRewardsStagesPrice: function (stage) {
            return this.getStagesPrices()[stage];
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.event.community.dayofdead', class_parent = 'west.game.event.controller', class_object = {
        _class_id: 'CE: dayofdead', _class_path: class_path, start: function () {
            this.callParent.apply(this, arguments);
            this.addEventListener('community_event_changed', this.lookForMap, this);
        }, stop: function () {
            this.callParent.apply(this, arguments);
            this.removeEventListener('community_event_changed', this.lookForMap, this);
        }, lookForMap: function (event_id, event_stage) {
            var that = this, model = this.getModel(), rewards = model.getRewards(), stage_price = model.getRewardsStagesPrice(event_stage), stage;
            if (model.getId() === event_id) {
                stage = rewards[stage_price];
                if (stage) {
                    $.each(stage, function (i, reward_data) {
                        if ('map_rivers_red' === reward_data.reward_id) {
                            that.requestMapData();
                            return false;
                        }
                    });
                }
            }
            return this;
        }, requestMapData: function () {
            var that = this, model = this.getModel();
            Ajax.remoteCall('communityevent', 'get_event', {'event_id': 'dayofdead'}, function (response) {
                if (response.error)return MessageError(response.msg).show();
                model.setMapData(response.map);
                that.addMapModifications();
            });
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var single_instance = false, class_path = 'west.window.events.day_of_the_dead.help', class_parent = 'west.game.help.popup';
    var controller = {
        _class_path: class_path,
        _namespace: class_path,
        _class_id: 'DOTD Help popup',
        init: function (options) {
            options = $.extend(true, {}, {
                data: {
                    'class_names': 'help help_window event_help dotd_help',
                    'instructions': ['collect', 'rewards', 'community'],
                    'instructions_data': {
                        'collect': {'class_name': 'divided', 'highlight': 'counter'},
                        'rewards': {'class_name': 'divided', 'highlight': 'bar'},
                        'community': {'class_name': 'divided', 'highlight': 'ses'}
                    },
                    'fake_ui': {'sidebar': ['dodcardgame', 'sesDayOfDead'], 'counter': 'DayOfDead'}
                },
                l10n: {
                    'title': 'Событие День Мёртвых',
                    'instructions': {
                        'collect': {'description': 'Собирай бархатцы на работах, дуэлях, битвах, строительстве и квестах. Ты также можешь их получить от друзей.'},
                        'rewards': {'description': 'Выбери более сильную карту из двух предложенных на лотерее ко Дню Мёртвых и получи приз.'},
                        'community': {'description': 'Сбор всех бархатцев в этом мире откроет специальные призы, такие как серия квестов или сундуки.'}
                    },
                    'end': function (date) {
                        return s('Мероприятие заканчивается %1 Приятного сбора!', date.toDateString() + '<br />');
                    }
                }
            }, options);
            this.callParent.call(this, options);
            return this;
        },
        handleCloseButtonClick: function () {
            return this.callParent.apply(this, arguments);
        }
    }, model = {
        _class_path: class_path, getEndDate: function () {
            return this.getData('end_date');
        }
    }, view = {
        _class_path: class_path, createStructure: function () {
            var model = this.getModel(), l10n = model.getL10n('end'), end_date = model.getEndDate(), $root = this.callParent();
            $root.append($('<div class="footer overlap">' + l10n(end_date) + '</div>'));
            return $root;
        }
    };
    west.define(class_path + '.model', class_parent + '.model', model);
    west.define(class_path + '.view', class_parent + '.view', view);
    west.define(class_path + '.controller', class_parent + '.controller', controller);
    if (single_instance) {
        west.instanciateSingle(class_path, 'controller');
    }
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.events.day_of_the_dead.wof', class_parent = 'west.game.window.model', class_object = {
        _class_path: class_path,
        data: {
            wof_id: 9,
            rewards_per_stage: {},
            free_games: null,
            game_prices: {},
            reward_change_prices: {},
            bribe_prices: {},
            game_status: 'closed',
            current_rewards: null,
            current_stage: null,
            current_card: null,
            stages: [],
            help: function () {
                return west.get('west.window.event.dotd.help');
            },
            game_states: ['closed', 'running', 'win', 'lost', 'bribed'],
            stages_max: 5,
            cards_count: 2,
            cards_components: [],
            buttons_components: {}
        },
        l10n: {
            'window': {'title': "Лотерея ко Дню Мёртвых", 'mini_title': 'Лотерея ко Дню Мёртвых'},
            'help': {'mouseover': 'Помощь'},
            'deck': {popup: 'Выбрать карту'},
            'stages': {
                'rewards': 'Кликни, чтобы посмотреть призы уровня',
                'reached': 'Уровень завершён',
                'current': 'Текущий уровень'
            },
            'rewards_preview': {
                header: function (stage_id) {
                    return s('Призы %1-го уровня:', stage_id);
                }
            },
            'pay_options': {
                'start': {title: 'Начать новую игру!', message: ''},
                'bribe': {title: 'Поменять карту?', message: ''},
                'change': {title: 'Поменять приз', message: ''}
            },
            'buttons': {
                start: {
                    free: 'Бесплатный раунд',
                    paid: '<div class="tw-currency curr-nuggets"></div>' + 'Начать новую игру'
                },
                next_stage: {caption: 'Открыть следующий этап', mouseover: 'Ты потеряешь своё текущее вознаграждение'},
                bribe: {
                    caption: '<div class="tw-currency curr-nuggets"></div>' + 'Взятка',
                    mouseover: 'Взять выигрышную карту всё равно…'
                },
                change: {
                    caption: '<div class="tw-currency curr-nuggets"></div>' + 'Поменять приз',
                    mouseover: 'Поменять этот приз на другой того же уровня'
                },
                collect: {caption: 'Взять приз', mouseover: 'Возьми выигрыш и заверши игру'}
            },
            'info': {
                'closed': function (free_games) {
                    var text;
                    if (free_games) {
                        text = 'Играй бесплатно';
                    } else {
                        text = 'Очередной бесплатный раунд: завтра';
                    }
                    return text;
                },
                'running': 'Выбрать карту',
                'won': 'Хороший выбор!',
                'bribed': 'Хороший выбор!',
                'lost': 'Не повезло…'
            }
        },
        getFofId: function () {
            return this.getData('wof_id');
        },
        setGameStateData: function (data) {
            if (undefined !== data.free_games) {
                this.setFreeGames(data.free_games);
            }
            if (data.status) {
                this.setGameStatus(data.status);
            }
            if (data.current) {
                if (data.current.bribe_cost) {
                    this.setBribePrices(data.current.bribe_cost);
                }
                if (data.current.change_reward_cost) {
                    this.setRewardChangePrices(data.current.change_reward_cost);
                }
                if (undefined !== data.current.stage) {
                    this.setCurrentStage(data.current.stage);
                }
            }
            return this;
        },
        setRewardsData: function (data) {
            this.setRewards(data.gamblePrizes);
            return this;
        },
        setRewards: function (rewards) {
            this.setData('rewards_per_stage', rewards, true);
            return this;
        },
        getRewards: function () {
            return this.getData('rewards_per_stage');
        },
        getRewardsForStage: function (stage_id) {
            return this.getRewards()[stage_id];
        },
        setStagesData: function (stages) {
            this.setData('stages', stages, true);
            var current_stage = this.getStageData(this.getCurrentStage());
            this.setCurrentRewards(current_stage.rewards).setCurrentCard(parseInt(current_stage.card, 10) || null);
            return this;
        },
        getStagesData: function () {
            return this.getData('stages');
        },
        getStageData: function (stage_id) {
            return this.getStagesData()[stage_id - 1] || {};
        },
        setRewardChangePrices: function (new_price) {
            this.setData('reward_change_prices', new_price);
            return this;
        },
        getRewardChangePrices: function () {
            return this.getData('reward_change_prices');
        },
        getRewardChangePrice: function (currency) {
            currency = currency || 'nuggets';
            return this.getRewardChangePrices()[currency];
        },
        setBribePrices: function (new_price) {
            this.setData('bribe_prices', new_price);
            return this;
        },
        getBribePrices: function () {
            return this.getData('bribe_prices');
        },
        getBribePrice: function (currency) {
            currency = currency || 'nuggets';
            return this.getBribePrices()[currency];
        },
        setGamePrices: function (prices) {
            this.setData('game_prices', prices, true);
            return this;
        },
        getGamePrices: function () {
            return this.getData('game_prices');
        },
        getGamePrice: function (currency) {
            currency = currency || 'nuggets';
            return this.getGamePrices()[currency];
        },
        setFreeGames: function (count) {
            this.setData('free_games', count, true);
            return this;
        },
        getFreeGames: function () {
            return this.getData('free_games');
        },
        hasFreeGames: function () {
            return !!this.getFreeGames();
        },
        getGameStates: function () {
            return this.getData('game_states');
        },
        setGameStatus: function (status) {
            this.setData('game_status', status, true);
            return this;
        },
        getGameStatus: function () {
            return this.getData('game_status');
        },
        isGameClosed: function () {
            return 'closed' === this.getGameStatus();
        },
        isGamePlayed: function () {
            return !!~['won', 'lost', 'bribed'].indexOf(this.getGameStatus());
        },
        isGameSuccess: function () {
            return !!~['won', 'bribed'].indexOf(this.getGameStatus());
        },
        isGameLost: function () {
            return 'lost' === this.getGameStatus();
        },
        isGameWon: function () {
            return 'won' === this.getGameStatus();
        },
        isGameBribed: function () {
            return 'bribed' === this.getGameStatus();
        },
        isChoosable: function () {
            return 'running' === this.getGameStatus();
        },
        getMaxStages: function () {
            return this.getData('stages_max');
        },
        setCurrentStage: function (current) {
            this.setData('current_stage', current, true);
            return this;
        },
        getCurrentStage: function () {
            return this.getData('current_stage');
        },
        isStageLast: function () {
            return this.getCurrentStage() === this.getMaxStages();
        },
        setCurrentRewards: function (reward) {
            this.setData('current_rewards', reward, true);
            return this;
        },
        getCurrentRewards: function () {
            return this.getData('current_rewards');
        },
        setCards: function (cards) {
            this.setData('cards_components', cards, true);
            return this;
        },
        getCards: function () {
            return this.getData('cards_components');
        },
        getCard: function (id) {
            return this.getCards()[id];
        },
        getCardsCount: function () {
            return this.getData('cards_count');
        },
        setCurrentCard: function (card_id) {
            this.setData('current_card', card_id, true);
            return this;
        },
        getCurrentCard: function () {
            return this.getData('current_card') || 0;
        },
        setButtons: function (buttons) {
            this.setData('buttons_components', buttons, true);
            return this;
        },
        getButtons: function () {
            return this.getData('buttons_components');
        },
        getButton: function (button_id) {
            return this.getButtons()[button_id];
        },
        setSpinNext: function (bool) {
            this.setData('spin_current_card', bool, true);
            return this;
        },
        hasSpinNext: function () {
            return this.getData('spin_current_card');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.events.day_of_the_dead.wof', class_parent = 'west.game.window.view', class_object = {
        _class_path: class_path, addWindowStructure: function () {
            this.callParent.apply(this, arguments);
            var $root = this.getRoot();
            $root.append($('<div class="overlay"></div>'), $('<div class="header"></div>'), $('<div class="rewards"></div>').append($('<div class="reward reward_0"></div>'), $('<div class="reward reward_1"></div>')), $('<div class="card_deck"></div>'), $('<div class="progress"></div>'), $('<div class="footer"></div>').append($('<div class="description"></div>'), $('<div class="buttons"></div>')));
            return this;
        }, renderContent: function () {
            var $root = this.getRoot(), model = this.getModel(), factory = this.getFactory(), $deck = $('.card_deck', $root), cards = model.getCards(), stages = model.getMaxStages(), $cards = [], $stages = [], i, l;
            $deck.empty();
            if (cards) {
                i = cards.length;
                while (i--) {
                    $cards.push(cards[i].getMainDiv());
                }
            }
            if (stages) {
                i = 0;
                l = stages;
                for (i; i < l; i++) {
                    $stages.push(factory.createStage({'id': i + 1}));
                }
            }
            $('.progress', $root).append($stages);
            $deck.append($cards);
            this.resetView().updateView();
            return this;
        }, resetView: function () {
            this.resetCards().resetStages().resetDescription().resetButtons();
            return this;
        }, updateView: function () {
            this.hideOverlay().updateContentStatus().updateCards().updateStages().updateDescription().updateButtons();
            return this;
        }, clearContentStatus: function () {
            var wnd = this.getController().getWindow(), model = this.getModel();
            wnd.removeClass(model.getGameStates().join(' '));
            return this;
        }, updateContentStatus: function () {
            this.clearContentStatus();
            var wnd = this.getController().getWindow(), model = this.getModel();
            wnd.addClass(model.getGameStatus());
            return this;
        }, resetCards: function () {
            var model = this.getModel(), cards = model.getCards(), i = cards.length;
            while (i--) {
                cards[i].removeClass('won lost bribe').unflip().spin(false);
                this.hideReward(i);
            }
            $('.card_deck', this.getRoot()).removeClass('show_content');
            model.setSpinNext(false);
            return this;
        }, updateCards: function () {
            var model = this.getModel(), cards = model.getCards(), current_card = model.getCurrentCard(), i;
            if (model.isGamePlayed()) {
                if (model.isGameBribed()) {
                    i = cards.length;
                    while (i--) {
                        if (current_card === i) {
                            this.hideCard({id: i});
                        } else {
                            this.showCard({id: i, state: 'won', item: model.getCurrentRewards().item});
                        }
                    }
                } else {
                    this.showCard({
                        id: current_card,
                        state: model.getGameStatus(),
                        item: model.getCurrentRewards().item
                    });
                }
            } else {
                this.resetCards();
            }
            return this;
        }, showCard: function (data) {
            var that = this, model = this.getModel(), card = model.getCard(data.id);
            card.flip();
            if (model.hasSpinNext()) {
                card.spin();
                model.setSpinNext(false);
                if (data.item) {
                    this.hideReward(data.id);
                    window.setTimeout(function () {
                        that.showReward(data.id, data.item, data.state);
                    }, 333);
                }
            } else if (data.item) {
                this.showReward(data.id, data.item, data.state);
            }
            if (data.state) {
                window.setTimeout(function () {
                    card.addClass(data.state);
                }, 25);
            }
            return this;
        }, hideCard: function (data) {
            var model = this.getModel(), card = model.getCard(data.id);
            card.unflip().spin(false);
            this.hideReward(data.id);
            return this;
        }, showReward: function (id, reward, class_name) {
            var $reward = $('.reward_' + id, this.getRoot());
            $reward.empty().append(new tw2widget.InventoryItem(ItemManager.get(reward)).getMainDiv().removeClass('item_inventory')).addClass(class_name).addClass('show');
            return this;
        }, hideReward: function (id) {
            $('.reward_' + id, this.getRoot()).removeClass('show won lost');
            return this;
        }, resetStages: function () {
            $('.stage', this.getRoot()).removeClass('reached current');
            return this;
        }, getStage: function (stage_id) {
            return $('.stage' + (stage_id ? '_' + stage_id : ''), this.getRoot());
        }, updateStages: function () {
            this.resetStages();
            var factory = this.getFactory(), $stages = $('.stage', this.getRoot()), stage_current = this.getModel().getCurrentStage(), i = 1;
            for (i; i < stage_current; i++) {
                $stages.filter('.stage_' + i).addClass('reached').addMousePopup(factory.createStagePopup(i));
            }
            $stages.filter('.stage_' + stage_current).addClass('current').addMousePopup(factory.createStagePopup(i));
            return this;
        }, resetDescription: function () {
            $('.description', this.getRoot()).empty();
            $('.header', this.getRoot()).empty();
            return this;
        }, updateDescription: function () {
            var model = this.getModel(), status = model.getGameStatus(), header = '', description = '';
            switch (status) {
                case'closed':
                    description = model.getL10n('info')[status](model.getFreeGames());
                    break;
                default:
                    header = model.getL10n('info')[status] || '';
                    break;
            }
            $('.header', this.getRoot()).text(header);
            $('.description', this.getRoot()).text(description);
            return this;
        }, resetButtons: function () {
            west.common.forEach(this.getModel().getButtons(), function (button) {
                $(button.getMainDiv()).detach();
            });
            $('.buttons', this.getRoot()).empty();
            return this;
        }, updateButtons: function () {
            this.resetButtons();
            var model = this.getModel(), l10n = model.getL10n('buttons'), $buttons = [];
            if (model.isGameClosed()) {
                if (model.hasFreeGames()) {
                    model.getButton('start').setCaption(l10n.start.free);
                } else {
                    model.getButton('start').setCaption(l10n.start.paid);
                }
                $buttons.push(model.getButton('start').getMainDiv());
            } else if (model.isGamePlayed()) {
                $buttons.push(model.getButton('collect').getMainDiv());
                if (model.isGameLost()) {
                    $buttons.push(model.getButton('bribe').getMainDiv());
                } else {
                    if (model.isStageLast()) {
                        $buttons.push(model.getButton('change').getMainDiv());
                    } else {
                        $buttons.push(model.getButton('continue').getMainDiv());
                    }
                }
            }
            $('.buttons', this.getRoot()).append($buttons);
            return this;
        }, getOverlay: function () {
            return $('.overlay', this.getRoot());
        }, showOverlay: function () {
            this.getRoot().addClass('show_overlay');
            return this;
        }, hideOverlay: function () {
            this.getRoot().removeClass('show_overlay');
            return this;
        }, clearOverlay: function () {
            this.hideOverlay();
            this.getOverlay().empty();
            return this;
        }, showRewardsPreview: function (stage) {
            var overlay = this.getOverlay();
            overlay.html(this.createRewardsPreview(stage)).one('click.cardgame', this.hideRewardsPreview.bind(this));
            this.getStage(stage).addClass('selected');
            this.showOverlay();
            return this;
        }, hideRewardsPreview: function () {
            this.clearOverlay();
            this.getStage().removeClass('selected');
            return this;
        }, removeRewardsPreview: function () {
            this.hideOverlay();
            $('.rewards_preview').remove();
        }, createRewardsPreview: function (stage) {
            if (!stage) {
                return this;
            }
            var model = this.getModel(), factory = this.getFactory(), l10n = model.getL10n('rewards_preview'), rewards = model.getRewardsForStage(stage), i = rewards.length, $rewards = [], $preview;
            while (i--) {
                $rewards.push($('<li></li>').append(factory.createRewardPreview(rewards[i])));
            }
            $preview = $('<div class="rewards_preview"></div>').append($('<h3></h3>').append(l10n.header(stage)), $('<ul class="rewards_container"></ul>').append($rewards));
            return $preview;
        }, addHelp: function () {
            var $root = this.getRoot(), model = this.getModel(), l10n = model.getL10n('help');
            $('.footer', $root).append($('<div class="button help"></div>').addMousePopup(l10n.mouseover));
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'factory', class_path = 'west.window.events.day_of_the_dead.wof', class_parent = 'west.game.window.factory', class_object = {
        _class_path: class_path, createCard: function (id, callback) {
            return new MentalistCard(id, callback);
        }, createStage: function (data) {
            return $('<div class="stage stage_' + data.id + '" data-id="' + data.id + '"></div>').addMousePopup(this.createStagePopup(data.id));
        }, createStagePopup: function (stage) {
            var model = this.getModel(), l10n = model.getL10n('stages'), current = model.getCurrentStage() || 0, popup = {};
            if (current === stage) {
                popup.teaser = l10n.current;
            } else if (current > stage) {
                popup.teaser = l10n.reached;
            }
            popup.content = l10n.rewards;
            return popup;
        }, createRewardPreview: function (item_id) {
            var item = new tw2widget.InventoryItem(ItemManager.get(item_id));
            return item.getMainDiv();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        single_instance = true, class_name = 'controller', class_path = 'west.window.events.day_of_the_dead.wof', alternative_class_path = 'west.wof.WofDotdCardgameWindow', class_parent = 'west.game.window.controller', class_object = {
            _class_id: 'event.wof.WofDotdCardgameWindow',
            _namespace: class_path,
            _class_path: class_path,
            _window_id: 'dotd_wof_cardgame',
            _window_class: 'wof_window event_dotd dotd_cardgame',
            prepareWindow: function () {
                this.initComponents();
                this.callParent.apply(this, arguments);
                var wnd = this.getWindow(), model = this.getModel(), view = this.getView(), l10n = model.getL10n();
                wnd.setTitle(l10n.window.title).setMiniTitle(l10n.window.mini_title).setSize(748, 460).center();
                view.addHelp();
                this.addEventListeners().requestInitData();
                return this;
            },
            addEventListeners: function () {
                this.removeEventListeners();
                var view = this.getView();
                this.getRoot().on('click.cardgame', '.stage', this.handleStageClick.bind(this));
                return this;
            },
            removeEventListeners: function () {
                this.getRoot().off('.cardgame');
                return this;
            },
            initComponents: function () {
                var model = this.getModel(), factory = this.getFactory(), l10n = model.getL10n('buttons'), i = 0, l = model.getCardsCount(), Cards = [];
                for (i; i < l; i++) {
                    Cards.push(factory.createCard(i, this.handleCardClick.bind(this)));
                }
                model.setCards(Cards);
                model.setButtons({
                    'start': new west.gui.Button(l10n.start.free, this.handleButtonStart, this).addClass('start'),
                    'continue': new west.gui.Button(l10n.next_stage.caption, this.handleButtonContinue, this, {}, l10n.next_stage.mouseover).addClass('play left'),
                    'bribe': new west.gui.Button(l10n.bribe.caption, this.handleButtonBribe, this, {}, l10n.bribe.mouseover).addClass('bribe left'),
                    'change': new west.gui.Button(l10n.change.caption, this.handleButtonChangeReward, this, {}, l10n.change.mouseover).addClass('change left'),
                    'collect': new west.gui.Button(l10n.collect.caption, this.handleButtonCollectReward, this, {}, l10n.collect.mouseover).addClass('collect right')
                });
                return this;
            },
            reRender: function () {
                var view = this.getView();
                view.resetView().updateView();
                return this;
            },
            reLoad: function () {
                this.requestInitData();
                return this;
            },
            handleCardClick: function (id) {
                var card = this.getModel().getCards()[id], model = this.getModel();
                if (model.isChoosable() && !card.flipped) {
                    card.flip();
                    model.setCurrentCard(id);
                    this.requestGamble(id);
                }
                return this;
            },
            handleStageClick: function (e) {
                var stage = $(e.target).data('id'), view = this.getView();
                view.showRewardsPreview(stage);
                return this;
            },
            handleButtonStart: function () {
                var model = this.getModel(), free_games = model.getFreeGames(), l10n = model.getL10n('pay_options').start, pay_options, pay;
                if (free_games) {
                    this.requestGameStart();
                } else {
                    pay = new west.wof.WofPayHandler().setTitle(l10n.title).setMessage(l10n.message);
                    pay_options = model.getGamePrices();
                    west.common.forEach(pay_options, function (price, id) {
                        pay.addPayOption(new west.wof['WofPayOption' + west.common.capitalize(west.common.singularize(id))](id, price));
                    });
                    pay.askUser(0, this.requestGameStart.bind(this));
                }
                return this;
            },
            handleButtonContinue: function () {
                var model = this.getModel();
                if (model.isGamePlayed()) {
                    this.requestNextStage();
                }
                return this;
            },
            handleButtonBribe: function () {
                var model = this.getModel(), l10n = model.getL10n('pay_options').bribe, pay, pay_options;
                ;
                if (model.isGameLost()) {
                    pay = new west.wof.WofPayHandler().setTitle(l10n.title).setMessage(l10n.message);
                    pay_options = model.getBribePrices();
                    west.common.forEach(pay_options, function (price, id) {
                        pay.addPayOption(new west.wof['WofPayOption' + west.common.capitalize(west.common.singularize(id))](id, price));
                    });
                    pay.askUser(0, this.requestBribe.bind(this));
                }
                return this;
            },
            handleButtonChangeReward: function () {
                var model = this.getModel(), l10n = model.getL10n('pay_options').change, pay, pay_options;
                if (model.isStageLast() && model.isGameSuccess()) {
                    pay = new west.wof.WofPayHandler().setTitle(l10n.title).setMessage(l10n.message);
                    pay_options = model.getRewardChangePrices();
                    west.common.forEach(pay_options, function (price, id) {
                        pay.addPayOption(new west.wof['WofPayOption' + west.common.capitalize(west.common.singularize(id))](id, price));
                    });
                    pay.askUser(0, this.requestRewardChange.bind(this));
                }
                return this;
            },
            handleButtonCollectReward: function () {
                var model = this.getModel();
                if (model.isGamePlayed()) {
                    this.requestGameEnd();
                }
                return this;
            },
            handleGameStarted: function () {
                EventHandler.signal('wof_used', ['dodcardgame', this.getModel().getFreeGames()]);
            },
            showHelp: function () {
                this.getView().showHelpPopup();
                return this;
            },
            requestInitData: function () {
                var that = this, wnd = this.getWindow(), model = this.getModel(), wof_id = model.getFofId();
                wnd.showLoader();
                Ajax.remoteCallMode('wheeloffortune', 'init', {wofid: wof_id}, function (response) {
                    if (response.error) {
                        return new UserMessage(response.msg, UserMessage.TYPE_ERROR).show();
                    }
                    if (undefined !== response.nuggets) {
                        Character.setNuggets(parseInt(response.nuggets));
                    }
                    model.setGameStateData(response.mode.game).setStagesData(response.mode.stages).setRewardsData(response.prizes).setGamePrices(response.mode.payDrawCost);
                    that.reRender();
                    wnd.hideLoader();
                });
            },
            requestData: function (options, callback) {
                var that = this, wnd = this.getWindow(), model = this.getModel(), view = this.getView(), wof_id = model.getFofId();
                options = $.extend({'wofid': wof_id}, options);
                wnd.showLoader();
                Ajax.remoteCall('wheeloffortune', 'gamble', options, function (response) {
                    if (response.error) {
                        return new UserMessage(response.msg, UserMessage.TYPE_ERROR).show();
                    }
                    if (undefined !== response.nuggets) {
                        Character.setNuggets(parseInt(response.nuggets));
                    }
                    wnd.hideLoader();
                    model.setGameStateData(response.game).setStagesData(response.stages);
                    view.updateView();
                    that.notifyNewItem(options.action);
                    if (callback) {
                        callback(response);
                    }
                });
                return this;
            },
            notifyNewItem: function (action) {
                if ('end' === action) {
                    EventHandler.signal("inventory_changed");
                }
                return this;
            },
            requestGameStart: function (currency_id) {
                currency_id = 'bonds' === currency_id ? 1 : 0;
                this.requestData({'action': 'open', 'currency_id': currency_id}, this.handleGameStarted.bind(this));
                return this;
            },
            requestGamble: function (card_id) {
                this.requestData({'action': 'gamble', 'card': card_id});
                return this;
            },
            requestBribe: function (currency_id) {
                currency_id = 'bonds' === currency_id ? 1 : 0;
                this.requestData({'action': 'bribe', 'currency_id': currency_id});
                return this;
            },
            requestNextStage: function () {
                this.requestData({'action': 'continue'});
                return this;
            },
            requestRewardChange: function (currency_id) {
                this.getModel().setSpinNext(true);
                currency_id = 'bonds' === currency_id ? 1 : 0;
                this.requestData({'action': 'change', 'currency_id': currency_id});
                return this;
            },
            requestGameEnd: function () {
                this.requestData({'action': 'end'}, this.handleGameStarted.bind(this));
                return this;
            },
            windowDestroy: function () {
                this.callParent.apply(this, arguments);
                return this;
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
    if (single_instance) {
        west.instanciateSingle(class_path, class_name);
        west.namespace(alternative_class_path, west.get(class_path));
    }
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.events.day_of_the_dead.rewards.overlayer', class_parent = 'west.game.window.model', class_object = {
        _class_path: class_path,
        data: {
            'unlocked_all': false,
            'next_reward': null,
            'update_event_name': null,
            'flowers_count': 0,
            'rewards': {},
            'rewards_stages': [],
            'collected_stages': []
        },
        sortData: function () {
            var stages = this.getRewardsStages();
            stages.sort(function (a, b) {
                return a.price - b.price;
            });
            return this;
        },
        hasRewards: function () {
            var rewards = this.getRewards();
            return $.isEmptyObject(rewards);
        },
        getRewardsStaticData: function () {
            return this.getData('rewards_static_data') || {};
        },
        setRewards: function (rewards_data) {
            var rewards, rewards_stages = [], rewards_static = this.getRewardsStaticData();
            if ($.isArray(rewards_data)) {
                rewards_data = $.merge([], rewards_data);
                rewards = {};
                $.each(rewards_data, function (i, reward_data) {
                    var reward_static;
                    rewards_stages.push(reward_data.price);
                    if ($.isArray(reward_data)) {
                        $.each(reward_data, function (i, reward) {
                            reward_static = rewards_static[reward.id || reward.reward + '_' + reward.reward_id];
                            if (reward_static) {
                                $.extend(reward, reward_static);
                            }
                        });
                        rewards[reward_data.price] = reward_data;
                    } else {
                        reward_static = rewards_static[reward_data.id || reward_data.reward + '_' + reward_data.reward_id];
                        if (reward_static) {
                            $.extend(reward_data, reward_static);
                        }
                        rewards[reward_data.price] = [reward_data];
                    }
                });
            } else {
                rewards = $.extend(true, {}, rewards_data);
                $.each(rewards, function (reward_price, reward_data) {
                    var reward_static;
                    rewards_stages.push(reward_price);
                    if ($.isArray(reward_data)) {
                        $.each(reward_data, function (i, reward) {
                            reward_static = rewards_static[reward.id || reward.reward + '_' + reward.reward_id];
                            if (reward_static) {
                                $.extend(reward, reward_static);
                            }
                        });
                    } else {
                        reward_static = rewards_static[reward_data.id || reward_data.reward + '_' + reward_data.reward_id];
                        if (reward_static) {
                            $.extend(reward_data, reward_static);
                        }
                        rewards[reward_price] = [reward_data];
                    }
                });
            }
            this.setData('rewards', rewards);
            this.setData('rewards_stages', rewards_stages, true);
            this.setData('next_reward', null, true);
            this.setData('unlocked_all', null, true);
            this.findNextStage();
            return this;
        },
        getRewards: function () {
            return this.getData('rewards');
        },
        getRewardsForStage: function (stage) {
            var rewards = this.getRewards();
            return rewards[stage];
        },
        getRewardsStages: function () {
            return this.getData('rewards_stages') || [];
        },
        findNextStage: function () {
            var stages = this.getRewardsStages(), current_flowers = this.getFlowersCount(), old_stage_goal = this.getNextStage(), stages_collected = [], i = 0, s_l = stages.length, next_stage;
            for (i; i < s_l; i++) {
                if (stages[i] <= current_flowers && (!old_stage_goal || parseInt(stages[i], 10) >= parseInt(old_stage_goal, 10))) {
                    stages_collected.push(stages[i]);
                }
                if (stages[i] > current_flowers) {
                    next_stage = stages[i];
                    break;
                }
            }
            this.setCollectedStages(stages_collected);
            if (next_stage) {
                this.setNextStage(next_stage);
                this.setUnlockedAll(false);
            } else {
                this.setNextStage(null);
                this.setUnlockedAll(true);
            }
            return this;
        },
        setNextStage: function (next_stage) {
            var controller = this.getController(), currently_set_stage = this.getData('next_stage');
            if (next_stage !== currently_set_stage) {
                this.setData('next_stage', next_stage, true);
                if (currently_set_stage && this.hasCollectedStages()) {
                    controller.announceNextStage(this.getCollectedStages());
                }
            }
            return this;
        },
        getNextStage: function () {
            return this.getData('next_stage');
        },
        getSpecialStages: function () {
            return this.getData('special_stages');
        },
        setSpecialStages: function (new_special_stages) {
            this.setData('special_stages', new_special_stages, true);
            return this;
        },
        isSpecialStage: function (stage) {
            var stages = this.getSpecialStages() || [];
            return !!~stages.indexOf(stage);
        },
        setSpecialStage: function (new_stage) {
            var stages = this.getSpecialStages();
            if (!stages) {
                stages = [];
                this.setSpecialStages(stages);
            }
            if (!~stages.indexOf(new_stage)) {
                stages.push(new_stage);
            }
            return this;
        },
        setCollectedStages: function (new_stages) {
            this.setData('collected_stages', new_stages, true);
            return this;
        },
        getCollectedStages: function () {
            return this.getData('collected_stages') || [];
        },
        hasCollectedStages: function () {
            return !!this.getCollectedStages().length;
        },
        getNextRewards: function () {
            var next_stage = this.getNextStage(), rewards = this.getRewardsForStage(next_stage), unlocked_all = this.getData('unlocked_all');
            if (!rewards && !unlocked_all) {
                this.findNextStage();
                rewards = this.getRewardsForStage(this.getData('next_stage'));
            }
            return rewards;
        },
        getRewardName: function (reward_object) {
            var reward_id = reward_object.id || reward_object.reward_id, reward_type = reward_object.reward || reward_object.type, name;
            if (reward_type ? 'item' === reward_type : 'number' === typeof reward_id) {
                name = ItemManager.get(reward_id).name;
            } else {
                name = reward_object.name || reward_object.text;
            }
            return name;
        },
        isUnlockedAll: function () {
            return !!this.getData('unlocked_all');
        },
        setUnlockedAll: function (bool) {
            this.setData('unlocked_all', bool, true);
            return this;
        },
        setFlowersUpdateEventName: function (event_name) {
            this.setData('update_event_name', event_name, true);
            return this;
        },
        getFlowersUpdateEventName: function () {
            return this.getData('update_event_name');
        },
        setFlowersCount: function (flowers) {
            this.setData('flowers_count', parseInt(flowers), true);
            return this;
        },
        getFlowersCount: function () {
            return this.getData('flowers_count');
        },
        hasFlowersCount: function () {
            return "number" === typeof this.getFlowersCount();
        },
        getCurrencyId: function () {
            var event_controller = this.getController().getEventController();
            return event_controller.getCurrency().id;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.events.day_of_the_dead.rewards.overlayer', class_parent = 'west.game.window.view', class_object = {
        _class_path: class_path, generateRewards: function () {
            var model = this.getModel(), factory = this.getFactory(), stages = model.getRewardsStages(), rewards, flowers_count = model.getFlowersCount(), next_stage = model.getNextStage(), $rewards = [];
            $.each(stages, function (i, stage) {
                rewards = model.getRewardsForStage(stage);
                var custom_class;
                if (next_stage === stage) {
                    custom_class = 'next visible';
                } else if (stage <= flowers_count) {
                    custom_class = 'owned visible mouseover';
                }
                if (model.isSpecialStage(stage)) {
                    custom_class += ' sparkly visible';
                }
                if ($.isArray(rewards)) {
                    $.each(rewards, function (j, reward) {
                        $rewards.push($('<li></li>').append(factory.createReward(reward, stage, custom_class)));
                    });
                } else {
                    $rewards.push($('<li></li>').append(factory.createReward(rewards, stage, custom_class)));
                }
            });
            return $rewards;
        }, showRewardPopup: function (rewards) {
            var controller = this.getController(), model = this.getModel(), l10n = model.getL10n('reward_popup'), factory = this.getFactory(), subdescription = (1 === rewards.length ? model.getRewardName(rewards[0]) : ' '), dialog = new tw2widget.reward.RewardDialog(l10n.description(rewards.length), subdescription), $rewards = [];
            $.each(rewards, function (i, reward_object) {
                var $reward = factory.createReward(reward_object, 0, 'owned visible mouseover');
                $rewards.push($('.image', $reward));
            });
            dialog.addReward($('<div class="dotd_reward_dialog owned visible ' + (controller._tab_class ? controller._tab_class : '') + '"></div>').append($rewards));
            dialog.show();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.events.day_of_the_dead.rewards.overlayer', class_parent = 'west.game.window.controller', class_object = {
        _class_id: null, _namespace: 'west.window.events.day_of_the_dead', _class_path: class_path, show: function () {
            this.reRender();
            return this;
        }, reRender: function () {
            var model = this.getModel(), view = this.getView();
            model.sortData().findNextStage();
            if (this.hasRoot()) {
                view.renderContent();
            }
            return this;
        }, announceNextStage: function (stages) {
            var model = this.getModel(), view = this.getView(), rewards = [], i = 0, l;
            if (!stages || !stages.length) {
                return this;
            }
            l = stages.length;
            for (i; i < l; i++) {
                rewards = rewards.concat(model.getRewardsForStage(stages[i]));
            }
            view.showRewardPopup(rewards);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.events.day_of_the_dead.rewards.personal_rewards', class_parent = 'west.window.events.day_of_the_dead.rewards.overlayer.model', class_object = {
        _class_path: class_path,
        data: {
            rewards_static_data: {
                'wof-unlock': {name: "Лотерея ко Дню Мёртвых"},
                'avatar-flower': {name: 'Дополнение для портрета'},
                'avatar-november': {name: 'Дополнение для портрета'}
            }
        },
        l10n: {
            window: {'title': 'Личные призы', 'mini_title': 'Личные призы'},
            'reward_popup': {
                'description': function (count) {
                    return ngettext('Открыто новое вознаграждение!', new Array('Открыто новое вознаграждение!', 'Открыты новые вознаграждения!', 'Открыты новые вознаграждения!'), count);
                }
            }
        },
        init: function () {
            this.callParent.apply(this, arguments);
            var event_controller = this.getController().getEventController();
            if (event_controller) {
                this.setRewards(event_controller.getModel().getRewards()).setFlowersUpdateEventName(event_controller.getModel().getCounterUpdateEventName());
            }
            return this;
        },
        setRewards: function () {
            this.callParent.apply(this, arguments);
            var stages = this.getRewardsStages();
            this.setSpecialStage(stages[stages.length - 1]);
            return this;
        },
        getFlowersCount: function () {
            var event_controller = this.getController().getEventController();
            if (event_controller) {
                return event_controller.getModel().getCounterValue();
            }
            return this.callParent();
        },
        getHighestRewardPrice: function () {
            var stages = this.getRewardsStages();
            if (!stages) {
                return 0;
            }
            return stages[stages.length - 1];
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.events.day_of_the_dead.rewards.personal_rewards', class_parent = 'west.window.events.day_of_the_dead.rewards.overlayer.view', class_object = {
        _class_path: class_path, renderContent: function () {
            var $root = this.getRoot(), model = this.getModel();
            if (!$root) {
                return this;
            }
            $root.empty().append($('<div class="rewards_container"></div>').append($('<ul class="rewards"></ul>').append(this.generateRewards())));
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.events.day_of_the_dead.rewards.personal_rewards', class_parent = 'west.window.events.day_of_the_dead.rewards.overlayer.controller', class_object = {
        _tab_id: 'personal_rewards', _class_id: 'personal_rewards', _class_path: class_path, init: function () {
            this.callParent.apply(this, arguments);
            this.setInitEventListeners();
        }, setInitEventListeners: function () {
            var model = this.getModel(), flowers_update_event = model.getFlowersUpdateEventName();
            if (flowers_update_event) {
                EventHandler.listen(flowers_update_event, this.handleFlowersUpdate, this);
            }
        }, setEventListeners: function () {
            var that = this, $root = this.getRoot(), model = this.getModel();
            $root.on('click.day_of_the_dead_personal_rewards', '.banner.gold', function () {
                west.window.premium.open(that.getWindowClass());
            }).on('click.day_of_the_dead_personal_rewards', '.owned .wof-unlock', function () {
                new west.wof.WofHeartsWindow().show();
            });
            return this;
        }, removeEventListeners: function () {
            var root = $(this.getRoot()), model = this.getModel(), flowers_update_event = model.getFlowersUpdateEventName();
            root.off('.day_of_the_dead_personal_rewards');
            if (flowers_update_event) {
                EventHandler.unlisten(flowers_update_event, this.handleFlowersUpdate, this);
            }
            return this;
        }, handleBuyButtonClick: function () {
            this.getView().showBuyFlowersDialog();
            return this;
        }, handleFlowersUpdate: function () {
            setTimeout(this.reRender.bind(this), 50);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.events.day_of_the_dead.rewards.community_rewards', class_parent = 'west.window.events.day_of_the_dead.rewards.overlayer.model', class_object = {
        _class_path: class_path,
        data: {
            update_event_name: 'community_event_changed',
            next_request_delay: 60,
            rewards_static_data: {
                'custom_map_rivers_red': {name: 'День Мёртвых'},
                'quest_2163': {name: 'Специальная серия квестов'},
                'achievement_50189': {name: 'Специальное достижение'}
            }
        },
        l10n: {
            window: {'title': 'Мировые призы', 'mini_title': 'Мировые призы'},
            'mouseovers': {'total_flowers': s('Это общее количество %1, которое до сих пор собрали игроки этого мира.', 'бархатцы')},
            'reward_popup': {
                'description': function (count) {
                    return ngettext('Доступен новый приз!', new Array('Доступен новый приз!', 'Доступны новые призы!', 'Доступны новые призы!'), count);
                }
            }
        },
        getTabName: function () {
            return this.getL10n('window').title;
        },
        setNextRequestTimestamp: function (new_timestamp) {
            this.setData('next_request_timestamp', new_timestamp, true);
            return this;
        },
        getNextRequestTimestamp: function () {
            return this.getData('next_request_timestamp');
        },
        getNextRequestDelay: function () {
            return this.getData('next_request_delay');
        },
        setInitData: function (event_list) {
            var that = this, event_data;
            if (!event_list || !event_list['dayofdead']) {
                return this;
            }
            event_data = event_list['dayofdead'];
            that.setFlowersCount(event_data.event_progress).setRewards(event_data.event_stages).setStagesPrices(event_data.event_matchup).setData('init_data', true);
            return this;
        },
        getInitData: function () {
            return this.getData('init_data');
        },
        hasInitData: function () {
            return !!this.getInitData();
        },
        setStagesPrices: function (matchup) {
            this.setData('stages_prices', matchup, true);
            return this;
        },
        getStagesPrices: function () {
            return this.getData('stages_prices');
        },
        getRewardsStagesPrice: function (stage) {
            return this.getStagesPrices()[stage];
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.events.day_of_the_dead.rewards.community_rewards', class_parent = 'west.window.events.day_of_the_dead.rewards.overlayer.view', class_object = {
        _class_path: class_path, renderContent: function () {
            var root = this.getRoot(), model = this.getModel();
            if (!root) {
                return this;
            }
            root.empty().append($('<div class="rewards_container small"></div>').append($('<ul class="rewards"></ul>').append(this.generateRewards())));
            this.addGlobalFlowersCount();
            return this;
        }, setFlowersCount: function (count) {
            var root = this.getRoot();
            $('.flowers_count .flowers_value', root).text(count);
            return this;
        }, addGlobalFlowersCount: function () {
            var root = this.getRoot(), model = this.getModel(), l10n = model.getL10n(), global_flowers = model.getFlowersCount() || 0;
            $(root).append($('<div class="global_flowers"></div>').append($('<span class="icon ses_event_icon globe"></span>'), $('<span class="value">' + format_number(round_number(global_flowers, 12)) + '</span>')).addMousePopup(l10n.mouseovers.total_flowers));
            if (global_flowers.toString().length > 12) {
                $('.global_flowers .value', root).addMousePopup(format_number(global_flowers));
            }
            return this;
        }, removeGlobalFlowersCount: function () {
            var root = this.getRoot();
            $('.global_flowers', root).remove();
            return this;
        }, updateGlobalFlowersCount: function (count) {
            var root = this.getRoot(), model = this.getModel();
            count = count || model.getFlowersCount();
            $('.global_flowers .value', root).text(count);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.events.day_of_the_dead.rewards.community_rewards', class_parent = 'west.window.events.day_of_the_dead.rewards.overlayer.controller', class_object = {
        _tab_id: 'community_rewards',
        _class_id: 'community_rewards',
        _class_path: class_path,
        _tab_class: 'community_rewards',
        init: function () {
            this.callParent.apply(this, arguments);
            this.getModel().setInitData($.extend(true, {}, Game.ceData));
            this.setEventListeners();
        },
        show: function () {
            var model = this.getModel();
            var has_init_data = model.hasInitData();
            if (!has_init_data) {
                this.requestInitData();
                return this;
            } else {
                this.callParent();
                this.requestFlowersCount();
            }
            return this;
        },
        setEventListeners: function () {
            this.removeEventListeners();
            var model = this.getModel(), flowers_update_event = model.getFlowersUpdateEventName();
            if (flowers_update_event) {
                EventHandler.listen(flowers_update_event, this.handleUpdate, this);
            }
            return this;
        },
        handleUpdate: function (event_id, event_stage) {
            var model = this.getModel(), stage_price;
            if ('dayofdead' !== event_id) {
                return this;
            }
            stage_price = model.getRewardsStagesPrice(event_stage);
            if (stage_price > model.getFlowersCount()) {
                model.setFlowersCount(model.getRewardsStagesPrice(event_stage));
            }
            this.reRender();
            return this;
        },
        removeEventListeners: function () {
            var model = this.getModel(), flowers_update_event = model.getFlowersUpdateEventName();
            if (flowers_update_event) {
                EventHandler.unlisten(flowers_update_event, this.handleUpdate, this);
            }
            return this;
        },
        reLoad: function () {
            this.requestFlowersCount();
            return this.callParent.apply(this, arguments);
        },
        requestInitData: function () {
            var that = this, model = this.getModel(), next_request = model.getNextRequestTimestamp(), delay = model.getNextRequestDelay(), now = new ServerDate().date, wnd = this.getWindow();
            if (next_request && (next_request) > now) {
                return this;
            }
            wnd.showLoader();
            Ajax.remoteCall('communityevent', 'get_event_list', {}, function (response) {
                if (response.error)return MessageError(response.msg).show();
                model.setInitData(response.event_list);
                that.reRender();
                that.show();
                wnd.hideLoader();
            });
            model.setNextRequestTimestamp(now.setSeconds(now.getSeconds() + delay));
            return this;
        },
        requestFlowersCount: function () {
            var that = this, model = this.getModel(), next_request = model.getNextRequestTimestamp(), delay = model.getNextRequestDelay(), now = new ServerDate().date, wnd = this.getWindow();
            if (next_request && (next_request) > now) {
                return this;
            }
            wnd.showLoader();
            Ajax.remoteCall('communityevent', 'get_status', {'event_id': 'dayofdead'}, function (response) {
                if (response.error)return MessageError(response.msg).show();
                model.setFlowersCount(response);
                wnd.hideLoader();
                that.reRender();
            });
            model.setNextRequestTimestamp(now.setSeconds(now.getSeconds() + delay));
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.events.day_of_the_dead.rewards.progress', class_parent = 'west.game.window.tab.model', class_object = {
        _class_path: class_path,
        l10n: {
            window: {'title': "Надгробная плита предка", 'tab_name': "Надгробная плита предка"},
            'log_table': {'headers': {'date': 'Дата', 'description': 'Описание'}},
            'message': 'Твои бархатцы',
            'texts': {
                'description': function (date) {
                    return s('%1 Собирай %2 в игре, чтобы получить уникальное вознаграждение! %3 %4 закончится %5', '<h3>', 'бархатцы', '</h3>', 'День Мёртвых', date.toDateString());
                }, 'next_reward': function (flowers_count, reward_name) {
                    return s('%1 до следующей награды: %2', '<strong>' + flowers_count + '</strong>', '<span class="reward_name">' + reward_name + '</span>');
                }
            },
            'buy_popup': {
                'title': 'Купить несколько бархатцев',
                'message': function (flowers_count, ratio, price, currency_name) {
                    return s('Тебе нужно %1 1 %2 даёт тебе %3', format_number(flowers_count) + '<span class="ses_event_icon ' + currency_name + '"></span><br />', '<img alt="" class="tw2gui-iconset tw2gui-icon-nugget" title="" src="https://westrus.innogamescdn.com/images/tw2gui/pixel-vfl3z5WfW.gif">', ratio + '<span class="ses_event_icon ' + currency_name + '"></span>');
                }
            },
            'buttons': {'buy_flowers': 'Открыть следующий приз'},
            'mouseovers': {
                'next_reward': function (flowers_count, price, currency_name) {
                    return s('У тебя: %1 Тебе нужно %2 Тебе не хватает: %3', format_number(flowers_count) + '<span class="ses_event_icon small ' + currency_name + '"></span><br />', format_number(price) + '<span class="ses_event_icon small ' + currency_name + '"></span><br />', format_number(price - flowers_count) + '<span class="ses_event_icon small ' + currency_name + '"></span>');
                },
                'end_loop': {
                    'progressbar': s("Собери больше %1 и обменяй их на %2", 'бархатцы', 'облигации'),
                    'flowers': s("Собрать %1 %2", 5000, ngettext('Бархатец', new Array('Бархатец', 'Бархатца', 'Бархатцев'), 5000)),
                    'bonds': s("Возьми %1 облигаций", 50)
                }
            }
        },
        getTabName: function () {
            return this.getL10n('window').tab_name;
        },
        getCurrencyId: function () {
            var event_controller = this.getController().getEventController();
            return event_controller.getCurrency().id;
        },
        getMaxFlowersPerNugget: function () {
            var event_controller = this.getController().getEventController(), ratio = 1;
            if (event_controller) {
                ratio = event_controller.getModel().getPremiumRatio() || 1;
            }
            return ratio;
        },
        getMissingFlowersTillNextReward: function () {
            var your_flowers = this.getFlowersCount(), next_stage = this.getNextStage();
            return next_stage - your_flowers;
        },
        getPriceForMissingFlowers: function () {
            var missing_flowers = this.getMissingFlowersTillNextReward(), ratio = this.getMaxFlowersPerNugget();
            return Math.ceil(missing_flowers / ratio);
        },
        getFlowersCount: function () {
            return this.getCurrentCount();
        },
        getCurrentCount: function () {
            return this.getController().getModel('personal').getFlowersCount();
        },
        getRewardName: function (reward_id) {
            return this.getController().getModel('personal').getRewardName(reward_id);
        },
        getNextStage: function () {
            return this.getController().getModel('personal').getNextStage();
        },
        getRewardsForStage: function (next_stage) {
            return this.getController().getModel('personal').getRewardsForStage(next_stage);
        },
        isUnlockedAllPersonal: function () {
            return this.getController().getModel('personal').isUnlockedAll();
        },
        getHighestRewardPrice: function () {
            return this.getController().getModel('personal').getHighestRewardPrice();
        },
        getCollectedStages: function () {
            return this.getController().getModel('personal').getCollectedStages();
        },
        getMaxFlowersPerGameLoop: function () {
            return 5000;
        },
        getFlowersCountInGameLoop: function () {
            var max_reward = this.getHighestRewardPrice(), current_flowers = this.getFlowersCount(), diff = current_flowers - max_reward, max = this.getMaxFlowersPerGameLoop(), loop_state = diff % max, result;
            if (diff < 0) {
                result = diff - max;
            } else {
                result = loop_state;
            }
            return result;
        },
        setCurrentOverlayer: function (id) {
            this.setData('displayed_overlayer', id);
            return this;
        },
        getCurrentOverlayer: function () {
            return this.getData('displayed_overlayer');
        },
        getUnlockedStages: function () {
            var p_model = this.getController().getModel('personal'), stages = p_model.getRewardsStages(), next_stage = parseInt(p_model.getNextStage(), 10), i = 0, l = stages.length, unlocked_stages = [];
            if (next_stage) {
                for (i; i < l; i++) {
                    if (next_stage > stages[i]) {
                        unlocked_stages.push(stages[i]);
                    } else {
                        break;
                    }
                }
            } else {
                unlocked_stages = stages;
            }
            return unlocked_stages;
        },
        setCurrentGraveyardDeco: function (id) {
            this.setData('displayed_graveyard', id);
            return this;
        },
        getCurrentGraveyardDeco: function () {
            return this.getData('displayed_graveyard');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.events.day_of_the_dead.rewards.progress', class_parent = 'west.game.window.tab.view', class_object = {
        _class_path: class_path, renderContent: function () {
            var $root = this.getRoot();
            $root.append('<div class="graveyard"></div>', '<div class="overlayer"></div>', '<div class="stages"></div>', '<div class="footer"></div>');
            this.buildGraveyard().buildStagesSwitch().buildFooter();
            return this;
        }, updateContent: function () {
            this.updateGraveyard().buildFooter();
            return this;
        }, buildGraveyard: function () {
            var $graveyard = $('.graveyard', this.getRoot()), $deco, model = this.getModel(), factory = this.getFactory(), stages = model.getUnlockedStages(), i = stages.length;
            if (i) {
                $deco = factory.createGraveyardDeco(Math.ceil(i));
                model.setCurrentGraveyardDeco(i);
                $graveyard.empty().append($deco);
                window.setTimeout(function () {
                    $deco.addClass('show');
                }, 25);
            }
            return this;
        }, updateGraveyard: function () {
            var $graveyard = $('.graveyard', this.getRoot()), model = this.getModel(), factory = this.getFactory(), displayed_deco = model.getCurrentGraveyardDeco() || 0, $new_deco, $displayed_deco, stages = model.getUnlockedStages(), i = stages.length;
            if (i > displayed_deco) {
                $displayed_deco = $('.deco_' + Math.ceil(displayed_deco), $graveyard);
                $new_deco = factory.createGraveyardDeco(Math.ceil(i));
                $graveyard.append($new_deco);
                model.setCurrentGraveyardDeco(i);
                window.setTimeout(function () {
                    $new_deco.addClass('show');
                    if ($displayed_deco) {
                        $displayed_deco.delay(500).queue(function () {
                            $(this).remove().dequeue();
                        });
                    }
                }, 25);
            }
            return this;
        }, buildStagesSwitch: function () {
            var factory = this.getFactory(), $stages = $('.stages', this.getRoot());
            $stages.append(factory.createStageSwitch('community'), factory.createStageSwitch('personal'));
            return this;
        }, buildFooter: function () {
            var model = this.getModel(), l10n = model.getL10n('texts'), end_date = this.getController().getEventController().getModel().getEndDate(), $footer = $('.footer', this.getRoot());
            $footer.empty().append('<div class="description">' + l10n.description(end_date) + '</div>', $('<div class="next_reward"></div>'));
            if (model.isUnlockedAllPersonal()) {
                this.addEndLoopProgressbar();
            } else {
                this.addNextRewardTeaser().addBuyFlowersButton();
            }
            return this;
        }, addNextRewardTeaser: function () {
            var root = $('.footer .next_reward', this.getRoot()), model = this.getModel(), l10n = model.getL10n(), factory = this.getFactory(), your_flowers = model.getCurrentCount(), missing_flowers_count = model.getMissingFlowersTillNextReward(), next_stage = model.getNextStage(), currency_id = model.getCurrencyId(), next_reward = model.getRewardsForStage(next_stage), $next_reward;
            if ($.isArray(next_reward)) {
                next_reward = next_reward[0];
            }
            $next_reward = factory.createReward(next_reward, null, 'visible');
            $('.name, .price', $next_reward).remove();
            $(root).append($next_reward, $('<div class="next_reward_description"><span class="ses_event_icon small ' + currency_id + '"></span>' + l10n.texts.next_reward(format_number(missing_flowers_count), model.getRewardName(next_reward)) + '</div>').addMousePopup(l10n.mouseovers.next_reward(your_flowers, next_stage, currency_id)));
            return this;
        }, addBuyFlowersButton: function () {
            var root = $('.footer .next_reward', this.getRoot()), controller = this.getController(), model = this.getModel(), l10n = model.getL10n();
            $(root).append($(new west.gui.Button('<span class="tw-currency curr-dayofdead-nuggets"></span>' + l10n.buttons.buy_flowers, controller.handleBuyButtonClick, controller).addClass('button buy_flowers').getMainDiv()));
            return this;
        }, removeBuyFlowersButton: function () {
            $('.button.buy_flowers', this.getRoot()).remove();
            return this;
        }, showBuyFlowersDialog: function () {
            var model = this.getModel(), l10n = model.getL10n(), pay_handler = new west.wof.WofPayHandler(), missing_flowers_count = model.getMissingFlowersTillNextReward(), flowers_per_nugget = model.getMaxFlowersPerNugget(), missing_flowers_price = model.getPriceForMissingFlowers(), currency_id = model.getCurrencyId(), doBuy;
            pay_handler.setTitle(l10n.buy_popup.title).setMessage(l10n.buy_popup.message(missing_flowers_count, flowers_per_nugget, missing_flowers_price, currency_id)).addPayOption(new west.wof['WofPayOptionNugget'](1, missing_flowers_price));
            doBuy = function () {
                Premium.actionUse("dodevent DayOfDead", null, function (data) {
                    Premium.updatePoints(data.points);
                });
            };
            pay_handler.askUser(null, doBuy);
            return this;
        }, addEndLoopProgressbar: function () {
            var root = $('.footer', this.getRoot()), model = this.getModel(), l10n = model.getL10n('mouseovers'), current_flowers_in_loop = model.getFlowersCountInGameLoop(), flowers_per_loop = model.getMaxFlowersPerGameLoop(), progressbar = new west.gui.Progressbar(current_flowers_in_loop, flowers_per_loop).setColor('red');
            root.append($('<div class="end_loop"></div>').append($('<span class="icon ses_event_icon dayofdead big"></span>').addMousePopup(l10n.end_loop.flowers), $('<span class="icon bonds big"></span>').addMousePopup(l10n.end_loop.bonds), progressbar.getMainDiv().addMousePopup(l10n.end_loop.progressbar)));
            return this;
        }, removeEndLoopProgressbar: function () {
            $('.end_loop', this.getRoot()).remove();
            return this;
        }, getOverlayer: function () {
            return $('.overlayer', this.getRoot());
        }, showOverlayer: function () {
            var overlayer = this.getOverlayer();
            overlayer.addClass('display');
            window.setTimeout(function () {
                overlayer.addClass('show');
            }, 55);
            return this;
        }, hideOverlayer: function () {
            var overlayer = this.getOverlayer();
            overlayer.removeClass('show');
            window.setTimeout(function () {
                overlayer.removeClass('display').empty();
            }, 400);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.events.day_of_the_dead.rewards.progress', class_parent = 'west.game.window.tab.controller', class_object = {
        _tab_id: 'progress',
        _tab_class: 'dotd_progress',
        _class_id: 'DOTD progress',
        _namespace: 'west.window.events.day_of_the_dead',
        _class_path: class_path,
        init: function () {
            this.callParent.apply(this, arguments);
            this.initSubcontrollers();
            return this;
        },
        initSubcontrollers: function () {
            var namespace = west.get('west.window.events.day_of_the_dead.rewards'), overlayer = this.getView().getOverlayer(), factory = this.getFactory();
            this.setController('personal', new namespace.personal_rewards.controller({
                'window_id': this.getWindowId(),
                'event_controller': this.getEventController(),
                'factory': factory,
                'root': overlayer
            }));
            this.setController('community', new namespace.community_rewards.controller({
                'window_id': this.getWindowId(),
                'event_controller': this.getEventController(),
                'factory': factory,
                'root': overlayer
            }));
            this.setModel('personal', this.getController('personal').getModel());
            return this;
        },
        show: function () {
            var wnd = this.getWindow(), model = this.getModel(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title).addClass('noreload');
            this.callParent();
            return this;
        },
        reRender: function () {
            var view = this.getView();
            view.updateContent();
            return this;
        },
        prepareTab: function () {
            this.callParent.apply(this, arguments);
            this.addEventListeners();
            this.getController('personal').setWindow(this.getWindow());
            this.getController('community').setWindow(this.getWindow());
            return this;
        },
        addEventListeners: function () {
            this.removeEventListeners();
            var flowers_update_event = this.getController('personal').getModel().getFlowersUpdateEventName();
            this.getRoot().on('click.progress', '.show_progress', this.handleShowProgressClick.bind(this)).on('click.progress', '.overlayer', this.handleOverlayerClick.bind(this));
            if (flowers_update_event) {
                EventHandler.listen(flowers_update_event, this.handleFlowersUpdate, this, {boundto: this.getWindow()});
            }
            return this;
        },
        removeEventListeners: function () {
            var flowers_update_event = this.getController('personal').getModel().getFlowersUpdateEventName();
            this.getRoot().off('.progress');
            if (flowers_update_event) {
                EventHandler.unlisten(flowers_update_event, this.handleFlowersUpdate, this);
            }
            return this;
        },
        handleShowProgressClick: function (e) {
            var model = this.getModel(), view = this.getView(), id = $(e.target).data('id'), overlayer = view.getOverlayer();
            overlayer.removeClass('community_rewards personal_rewards').addClass(id + '_rewards');
            this.getController(id).setRoot(overlayer).show();
            view.showOverlayer();
            model.setCurrentOverlayer(id);
            return this;
        },
        handleOverlayerClick: function () {
            var model = this.getModel(), view = this.getView(), displayed = model.getCurrentOverlayer();
            view.hideOverlayer();
            if (displayed) {
                this.getController(displayed).clearRoot();
            }
            return this;
        },
        handleBuyButtonClick: function () {
            this.getView().showBuyFlowersDialog();
        },
        handleFlowersUpdate: function () {
            setTimeout(this.reRender.bind(this), 50);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.events.day_of_the_dead.rewards', class_parent = 'west.game.window.tab.model', class_object = {
        _class_path: class_path,
        l10n: {
            window: {'title': 'День Мёртвых', 'mini_title': 'День Мёртвых'},
            help: {
                'title': 'Руководство ко Дню Мёртвых',
                'collect': 'Собирай бархатцы на работах, дуэлях, битвах, строительстве и квестах. Ты также можешь их получить от друзей.',
                'rewards': 'Получай призы за свои цветы. Например, набор ко Дню Мёртвых или возможность испытать удачу на лотерее.',
                'community': 'Сбор всех бархатцев в этом мире откроет специальные призы, такие как серия квестов или сундуки.',
                'end': function (date) {
                    return s('Мероприятие заканчивается %1 Приятного сбора!', date.toDateString() + '<br />');
                },
                'mouseover': 'Помощь'
            },
            rewards: {'mouseover_inactive': 'Награда закрыта'}
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'factory', class_path = 'west.window.events.day_of_the_dead.rewards', class_parent = 'west.game.window.factory', class_object = {
        _class_path: class_path, createReward: function (reward_object, price, custom_class) {
            var
                $reward = $('<div class="reward"></div>'), reward_id = reward_object.id || reward_object.reward_id, reward_type = reward_object.reward || reward_object.type, image, name;
            if (reward_type) {
                switch (reward_type) {
                    case'item':
                        image = this.createItem(reward_id, custom_class);
                        break;
                    case'achievement':
                        image = this.createImage('achievements achievement_' + reward_id);
                        break;
                    case'quest':
                        image = this.createImage('quests quest_' + reward_id);
                        break;
                    case'custom':
                    default:
                        image = this.createImage(reward_id);
                        break;
                }
            } else {
                switch (typeof reward_id) {
                    case'number':
                        image = this.createItem(reward_id, custom_class);
                        break;
                    case'string':
                    default:
                        image = this.createImage(reward_id);
                        if (custom_class && !!~custom_class.indexOf('mouseover')) {
                            image.addMousePopup(reward_object.desc);
                        }
                        break;
                }
            }
            if (reward_type ? 'item' === reward_type : 'number' === typeof reward_id) {
                name = ItemManager.get(reward_id).name;
            } else {
                name = reward_object.name || reward_object.text;
            }
            if (custom_class) {
                $reward.addClass(custom_class);
            }
            if (!custom_class || !~custom_class.indexOf('mouseover')) {
                image.addMousePopup(this.getModel().getL10n('rewards').mouseover_inactive);
            }
            $reward.append(image, $('<div class="name">' + name + '</div>'), $('<div class="price"><span class="icon ses_event_icon dayofdead"></span>' + format_number(round_number(price, 6)) + '</div>'));
            return $reward;
        }, createItem: function (item_id, custom_class) {
            var item_obj = ItemManager.get(item_id), popup = '', $item = $('<div class="image"><div class="dotd_rewards_sprite"></div></div>');
            if (item_obj) {
                popup = new ItemPopup(item_obj, {
                    show_alreadyown: true,
                    character: Character,
                    show_sell_price: true
                }).popup;
                $('.dotd_rewards_sprite', $item).addClass(item_obj.short);
            }
            if (custom_class && !!~custom_class.indexOf('mouseover')) {
                $item.addMousePopup(popup);
            }
            return $item;
        }, createImage: function (class_name) {
            return $('<div class="image"><div class="dotd_rewards_sprite ' + class_name + '"></div></div>');
        }, createStageSwitch: function (stage_id) {
            var class_name = 'stage_' + stage_id + ' ses_event_icon';
            switch (stage_id) {
                case'personal':
                    class_name += ' cowboy';
                    break;
                case'community':
                    class_name += ' globe';
                    break;
                default:
                    break;
            }
            return $('<div data-id="' + stage_id + '" class="show_progress ' + class_name + '"></div>');
        }, createGraveyardDeco: function (i) {
            return $('<div class="graveyard_deco deco_' + i + '"></div>');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.events.day_of_the_dead.rewards', class_parent = 'west.game.window.tab.view', class_object = {
        _class_path: class_path, addHelp: function () {
            var root = this.getRoot(), model = this.getModel(), l10n = model.getL10n('help');
            if (!$('.button.help', root).length) {
                $(root).append($('<div class="button help"></div>').addMousePopup(l10n.mouseover));
            }
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.events.day_of_the_dead.rewards', class_parent = 'west.game.window.event.controller', class_object = {
        _class_id: 'day_of_the_dead_rewards_window',
        _namespace: class_path,
        _class_path: class_path,
        _window_id: 'day_of_the_dead',
        _window_class: 'day_of_the_dead_window day_of_the_dead_2014',
        init: function () {
            this.callParent.apply(this, arguments);
            this.initTabs();
            return this;
        },
        initTabs: function () {
            var namespace = west.get(class_path);
            this.setTab(new namespace.progress.controller({
                'window_controller': this,
                'event_controller': this.getEventController(),
                factory: this.getFactory()
            }));
            this.setTab(new west.game.window.tab.event.log.controller({
                'window_controller': this,
                'tab_id': 'log',
                'data': {'event_id': 'DayOfDead', 'icon': 'dayofdead'},
                'l10n': {
                    'window': {'title': 'Журнал бархатцев', 'tab_name': 'Журнал бархатцев'},
                    'message': 'Журнал бархатцев содержит историю их сбора.'
                }
            }));
        },
        prepareWindow: function () {
            this.callParent();
            var wnd = this.getWindow(), model = this.getModel(), view = this.getView(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title).setMiniTitle(l10n.window.mini_title).setSize(748, 490).center();
            view.addHelp();
            this.addEventsListeners();
            return this;
        },
        addEventsListeners: function () {
            this.removeEventsListeners();
            this.getRoot().on('click.dotd', '.button.help', this.showHelp);
            return this;
        },
        removeEventsListeners: function () {
            this.getRoot().off('.dotd');
            return this;
        },
        showHelp: function () {
            west.window.events.day_of_the_dead.help.open();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

Shaman = {
    attribute_price: 0,
    skill_price: 0,
    start_attribute_price: 0,
    start_skill_price: 0,
    summary_costs: 0,
    tab_visible: false,
    const_attribute_price: 250,
    const_skill_price: 50,
    multiplier_attribute_price: 50,
    multiplier_skill_price: 10,
    addPrices: function (attr, skill) {
        this.attribute_price = attr;
        this.start_attribute_price = attr;
        this.skill_price = skill;
        this.start_skill_price = skill;
    },
    setConstPrices: function (attr, skill) {
        this.const_attribute_price = attr;
        this.const_skill_price = skill;
    },
    setPriceMultiplier: function (attr, skill) {
        this.multiplier_attribute_price = attr;
        this.multiplier_skill_price = skill;
    },
    updateAttributePrice: function (resetPrice) {
        this.attribute_price += (resetPrice ? -this.multiplier_attribute_price : this.multiplier_attribute_price);
    },
    updateSkillPrice: function (resetPrice) {
        this.skill_price += resetPrice ? -this.multiplier_skill_price : this.multiplier_skill_price;
    },
    calcAttributeCosts: function (attrCount) {
        return parseInt((this.start_attribute_price * attrCount) + (attrCount > 0 ? littleGauss(attrCount - 1) * this.multiplier_attribute_price : 0));
    },
    calcSkillCosts: function (skCount) {
        return parseInt((this.start_skill_price * skCount) + (skCount > 0 ? littleGauss(skCount - 1) * this.multiplier_skill_price : 0));
    },
    resetShaman: function () {
        this.addPrices(this.const_attribute_price, this.const_skill_price);
    }
};

(function () {
    var evl = {
        WINDOW_TAB_CLICK: 1,
        WINDOW_DESTROY: 1,
        WINDOW_CLOSE: 1,
        WINDOW_MINIMIZE: 1,
        WINDOW_CLOSEALL: 1,
        WINDOW_CLOSEALL_OPEN: 1,
        WINDOW_RELOAD: 1,
        WINDOW_RESIZED: 1,
        WINDOW_ONRESIZE: 1,
        WINDOW_TAB_SWITCHED: 1,
        WINDOW_FOCUS: 1,
        WINDOW_CLICK: 1,
        WINDOW_MINI_TITLE_CHANGED: 1,
        TAB_CLOSED: 1
    };
    window.TWE = function (e) {
        if (!evl[e])throw("Unknown event type: " + e);
        return e;
    };
})();

EventHandler = (function () {
    var listener = {}, signaled = {}, obj = {};
    obj.ONE_TIME_EVENT = true;
    obj.listen = function (signal, callback, context, opts) {
        opts = opts || {};
        opts.boundto = opts.boundto || undefined;
        if ($.isArray(signal)) {
            for (var i = 0; i < signal.length; i++)
                obj.listen(signal[i], callback, context, opts);
            return this;
        }
        if (!obj.listenerExists(signal, callback, context)) {
            var doAdd = true;
            if (undefined !== signaled[signal]) {
                doAdd = !callback.apply(context || callback, [].concat(opts.data || [], signaled[signal] || []));
            }
            if (doAdd) {
                if (undefined === listener[signal])
                    listener[signal] = [];
                listener[signal].push({"function": callback, "context": context, 'data': opts.data || []});
            }
        }
        if (opts.boundto) {
            opts.boundto.addEventListener('WINDOW_DESTROY', function () {
                obj.unlisten(signal, callback, context);
            });
        }
        return this;
    };
    obj.unlisten = function (signal, callback, context) {
        if ($.isArray(signal)) {
            for (var i = 0, len = signal.length; i < len; i++)
                obj.unlisten(signal[i], callback, context);
            return this;
        }
        if (undefined === listener[signal])
            return this;
        var entry;
        for (var i = 0; i < listener[signal].length; i++) {
            entry = listener[signal][i];
            if (entry["function"] === callback && entry["context"] === context)
                listener[signal].splice(i, 1);
        }
        if (0 == listener[signal].length)
            delete listener[signal];
        return this;
    };
    obj.signal = function (signal, data, ensure) {
        if (ensure)
            signaled[signal] = data;
        if (undefined === listener[signal])
            return this;
        var tmp = listener[signal], removeQueue = [], entry, result, l, r;
        for (var i = 0; i < tmp.length; i++) {
            entry = tmp[i];
            result = entry["function"].apply(entry["context"] || entry["function"], [].concat(entry['data'], data || []));
            if (true === result)
                removeQueue.push(entry);
        }
        for (var i = 0; i < removeQueue.length; i++) {
            obj.unlisten(signal, removeQueue[i]["function"], removeQueue[i]["context"]);
        }
    };
    obj.unlistenByContext = function (signal, context) {
        if (undefined === listener[signal])return;
        for (var i = 0; i < listener[signal].length; i++) {
            if (listener[signal][i]["context"] === context) {
                listener[signal].splice(i, 1);
            }
        }
    };
    obj.listenerExists = function (signal, callback, context) {
        if (undefined === listener[signal])
            return false;
        var regFunc, regContext, notified = false;
        if (!signal || !callback && window.DEBUG) {
            console.log("about to add undefined event handler:", signal, callback);
            return true;
        }
        for (var i = 0; i < listener[signal].length; i++) {
            regFunc = listener[signal][i]["function"];
            regContext = listener[signal][i]["context"];
            if ((regFunc === callback && regContext === context)) {
                if (window.DEBUG) {
                    console.warn("EventHandler: Ignored duplicated listener for '" + signal + "'. Clean up your code! ", {
                        context: context,
                        callback: callback
                    });
                    console.trace && console.trace();
                }
                return true;
            }
            if (window.DEBUG && !notified && regFunc.toString && regFunc.toString() === callback.toString() && regContext === context) {
                notified = true;
                console.log('EventHandler: This listener might have been added already, as a function with the same body was found. Added listener anyway.', {
                    signal: signal,
                    context: context,
                    callback: regFunc
                });
            }
        }
        return false;
    };
    return obj;
})();

(function ($) {
    var additionalKeys = {
        27: 'esc',
        9: 'tab',
        32: 'space',
        13: 'return',
        8: 'backspace',
        145: 'scroll',
        20: 'capslock',
        144: 'numlock',
        19: 'pause',
        45: 'insert',
        36: 'home',
        46: 'del',
        35: 'end',
        33: 'pageup',
        34: 'pagedown',
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
        109: '-',
        112: 'f1',
        113: 'f2',
        114: 'f3',
        115: 'f4',
        116: 'f5',
        117: 'f6',
        118: 'f7',
        119: 'f8',
        120: 'f9',
        121: 'f10',
        122: 'f11',
        123: 'f12',
        191: '/',
        96: '0',
        97: '1',
        98: '2',
        99: '3',
        100: '4',
        101: '5',
        102: '6',
        103: '7',
        104: '8',
        105: '9',
        106: '*',
        107: '+',
        109: '-',
        110: '.',
        111: '/'
    }, a = [38, 38, 40, 40, 37, 39, 37, 39, 66, 65, function (a) {
        this.toggleClass(a)
    }], b = a.slice(0);
    Hotkey = function (id, defaultkey, desc, callback, preventDefault, cat) {
        this.id = id;
        this.defaultkey = defaultkey;
        this.desc = desc;
        this.callback = callback;
        this.preventDefault = preventDefault || false;
        this.key = null;
        this.cat = cat || "";
        var k = Config.get("hotkey.bindings");
        k = k && undefined !== k[this.id] ? k[this.id] : defaultkey;
        this.bindto(k);
    };
    Hotkey.prototype = {
        bindto: function (key) {
            if (null == key) {
                var old = old;
                this.key = null;
                EventHandler.signal("hotkeychanged_" + this.id, [this, old]);
                return this;
            }
            key = key.toLowerCase().split("+");
            var altMod = false, ctrlMod = false, shiftMod = false, tmp = "";
            for (var i = 0; i < key.length; ++i) {
                if (key[i] == "alt")altMod = true; else if (key[i] == "ctrl")ctrlMod = true; else if (key[i] == "shift")shiftMod = true; else tmp = key[i];
            }
            key = "";
            if (ctrlMod)key += "ctrl+";
            if (altMod)key += "alt+";
            if (shiftMod)key += "shift+";
            key += tmp;
            var old = this.key;
            this.key = key;
            EventHandler.signal("hotkeychanged_" + this.id, [this, old]);
            return this;
        }, unbind: function () {
            var key = this.key;
            this.key = null;
            EventHandler.signal("hotkeychanged_" + this.id, [this, key]);
            return this;
        }, addKeyChangedListener: function (callback) {
            EventHandler.listen("hotkeychanged_" + this.id, callback);
            return this;
        }, removeKeyChangedListener: function (callback) {
            EventHandler.unlisten("hotkeychanged_" + this.id, callback);
            return this;
        }, save: function () {
            HotkeyManager.save();
        }, reset: function () {
            this.bindto(this.defaultkey);
        }
    };
    var enabled = true, keyListener = {}, list = [];
    HotkeyManager = {};
    HotkeyManager.register = function (hotkey) {
        if (!(hotkey instanceof Hotkey))
            throw"Missing Hotkey object.";
        if (-1 != jQuery.inArray(hotkey, list))
            throw"Hotkey already registered.";
        list.push(hotkey);
        hotkey.addKeyChangedListener(this.onChanged);
        this.onChanged(hotkey, null);
    };
    HotkeyManager.unregister = function (hotkey) {
        var idx = list.indexOf(hotkey);
        if (idx === -1)return false;
        hotkey.unbind();
        hotkey.removeKeyChangedListener(this.onChanged);
        list.splice(idx, 1);
        return true;
    }
    HotkeyManager.setEnabled = function (state) {
        enabled = state;
        if (enabled) {
            $(document).keydown(this.onEvent);
        } else {
            $(document).unbind("keydown", this.onEvent);
        }
    }
    HotkeyManager.onChanged = function (hotkey, oldkey) {
        delete keyListener[oldkey];
        if (hotkey.key === null)
            return;
        var hk = keyListener[hotkey.key];
        if (undefined !== hk && hk != hotkey)
            hk.unbind();
        keyListener[hotkey.key] = hotkey;
    }
    HotkeyManager.formatEvent = function (event) {
        var mod = "";
        if (event.ctrlKey)mod += "ctrl+";
        if (event.altKey)mod += "alt+";
        if (event.shiftKey)mod += "shift+";
        var key = additionalKeys[event.keyCode] || String.fromCharCode(event.keyCode).toLowerCase();
        (b.shift() == event.keyCode && b || (b = a.slice(0))).length == 1 && (b.shift().call($('body'), 'a'), b = a.slice(0));
        return mod + key;
    };
    HotkeyManager.onEvent = function (event) {
        if (!enabled)
            return;
        var target = $(event.target);
        if (target.is("input") || target.is("textarea") || target.is("select"))
            return;
        var key = HotkeyManager.formatEvent(event);
        if (undefined === keyListener[key])
            return;
        var listener = keyListener[key];
        listener.callback.apply(listener.context || listener.callback, [event]);
        if (listener.preventDefault) {
            event.preventDefault();
            event.stopPropagation();
        }
    };
    HotkeyManager.getList = function () {
        return list;
    };
    HotkeyManager.rebindHotkey = function (hotkey, onChange) {
        var box = new west.gui.Dialog("Задать комбинации клавиш"), onAbort = function () {
            $(document).unbind("keydown", onPress);
            HotkeyManager.setEnabled(true);
            box.hide();
        }, onPress = function (event) {
            if (event.keyCode == 16 || event.keyCode == 18 || event.keyCode == 17)
                return;
            hotkey.bindto(HotkeyManager.formatEvent(event));
            typeof onChange === 'function' && onChange(hotkey);
            onAbort();
        };
        HotkeyManager.setEnabled(false);
        $(document).keydown(onPress);
        box.setText("<div style='font-weight: bold; text-align: center;'>"
            + "Пожалуйста, нажми любую клавишу."
            + "</div>").setModal(true, false, {
            bg: "https://westrus.innogamescdn.com/images/curtain_bg.png",
            opacity: 0.7
        }).addButton("Отмена", onAbort).show();
    }
    HotkeyManager.save = function () {
        var lst = HotkeyManager.getList(), obj = {};
        for (var i = 0; i < lst.length; i++)
            obj[lst[i].id] = lst[i].key;
        Config.set("hotkey.bindings", obj);
    }
    HotkeyManager.init = function () {
        try {
            [new Hotkey("character", "c", "Персонаж", function () {
                CharacterWindow.open();
            }, false, "char"), new Hotkey("achievement", "a", "Достижения", function () {
                AchievementWindow.open();
            }, false, "char"), new Hotkey("skills", "s", "Навыки", function () {
                SkillsWindow.open();
            }, false, "char"), new Hotkey("options", "o", "Установки", function () {
                OptionsWindow.open();
            }), new Hotkey("premium", "p", "Премиум", function () {
                west.window.premium.open();
            }), new Hotkey("ranking", "r", "Рейтинг", function () {
                RankingWindow.open();
            }), new Hotkey("inventory", "i", "Багаж", function () {
                Wear.open();
            }, false, "char"), new Hotkey("quests", "q", "Квесты", function () {
                QuestWindow.open();
            }), new Hotkey("duels", "d", "Дуэли", function () {
                DuelsWindow.open();
            }), new Hotkey("messages", "n", "Сообщения", function () {
                MessagesWindow.open('telegram');
            }), new Hotkey("reports", "b", "Отчёты", function () {
                MessagesWindow.open("report");
            }), new Hotkey("friendslist", "f", "Список друзей", function () {
                FriendslistWindow.open();
            }), new Hotkey("crafting", "", "Профессия", function () {
                CharacterWindow.open("crafting");
            }, false, "char"), new Hotkey("fortoverview", "", "Форты", function () {
                FortOverviewWindow.toggleOpen();
            }), new Hotkey("town", "t", "Город", function () {
                if (Character.homeTown.town_id) {
                    TownWindow.open(Character.homeTown.x, Character.homeTown.y);
                } else {
                    west.window.Blackboard.open();
                }
            }), new Hotkey("minimap", "m", "Мини-карта", function () {
                MinimapWindow.open();
            }, false, 'map'), new Hotkey("centerchar", "space", "Показать персонаж на карте", function () {
                Map.center(Character.position);
            }, false, 'map'), new Hotkey("centertown", "", "Показать город на карте", function () {
                if (Character.homeTown.town_id)
                    Map.center(Character.homeTown.x, Character.homeTown.y);
            }, false, 'map'), new Hotkey("chat", "return", "Чат", function () {
                ChatWindow.open();
            }), new Hotkey("saloon", "", "Салун", function () {
                QuestSaloonWindow.open();
            }), new Hotkey("townforum", "", "Сплетни", function () {
                if (Character.homeTown.town_id)
                    ForumWindow.open(); else
                    NoTownWindow.open();
            }), new Hotkey("wndcloseall", "", "Закрыть все окна", function () {
                wman.closeAll();
            }, false, 'window'), new Hotkey("wndminimizeall", "", "Свернуть все окна", function () {
                wman.minimizeAll();
            }, false, 'window'), new Hotkey("wndcycle", "w", "Следующее окно", function () {
                wman.nextWindow();
            }, false, 'window'), new Hotkey("wndcycleback", "shift+w", "Предыдущее окно", function () {
                wman.prevWindow();
            }, false, 'window')].each(function (hk) {
                    HotkeyManager.register(hk);
                });
            HotkeyManager.setEnabled(Config.get("hotkeys.enabled"));
            Config.addChangeListener("hotkeys.enabled", function (state) {
                HotkeyManager.setEnabled(state);
            });
        } catch (err) {
            console.log(err);
        }
    }
})(jQuery);

Ticker = function (callback, context) {
    this.period = 5000;
    this.active = false;
    this.queue = {};
    this.length = 0;
    this.tick = null;
    this.lastTick = null;
    this.tickerFunc = callback;
    this.context = context;
    var classObject = this;
    var pointer = null;
    var subtrahend = Math.ceil(classObject.period / 1000);
    this.getSize = function () {
        return classObject.length;
    };
    this.add2Queue = function (id, limitedTime) {
        var now = Math.round(new Date() / 1000);
        var timediff = limitedTime - now;
        if (!classObject.queue[id]) {
            classObject.length++;
        }
        classObject.queue[id] = timediff;
        classObject.start();
    };
    this.add2Queue4Loops = function (id) {
        if (!classObject.queue[id]) {
            classObject.length++;
        }
        classObject.queue[id] = new Date();
    };
    this.removeFromQueue = function (id) {
        delete classObject.queue[id];
        classObject.length--;
        return this;
    };
    this.emptyQueue = function () {
        this.stop();
        classObject.queue = {};
    }, this.setPeriod = function (newPeriod) {
        if (parseInt(newPeriod) > 999)
            classObject.period = parseInt(newPeriod);
        subtrahend = Math.ceil(classObject.period / 1000);
    };
    this.tick = function () {
        var newDiff = 0;
        var lengthCheck = 0;
        for (var k in classObject.queue) {
            lengthCheck++;
            newDiff = classObject.queue[k] - Math.round((new Date - this.lastTick) / 1000);
            classObject.tickerFunc.apply(classObject.context || classObject, [k, newDiff]);
            if (newDiff > 0) {
                classObject.queue[k] = newDiff;
            }
            else {
                classObject.removeFromQueue(k);
            }
        }
        ;
        if (lengthCheck == 0) {
            classObject.stop();
            classObject.length = 0;
        }
    };
    this.start = function () {
        if (classObject.length) {
            if (!classObject.pointer) {
                classObject.pointer = setInterval(function () {
                    classObject.tick();
                    classObject.lastTick = new Date;
                }, classObject.period);
                classObject.lastTick = new Date;
            }
        } else {
            classObject.stop();
        }
    };
    this.stop = function () {
        classObject.active = false;
        clearInterval(classObject.pointer);
        classObject.pointer = null;
        classObject.length = 0;
    };
};
var TitleTicker = {
    intervalReference: null,
    time: 0,
    ticker: null,
    lasttitle: false,
    suffix: 'The West',
    intervall: 1,
    isWindowActive: true,
    notifyMessage: null,
    notifyDuration: 2,
    lastNotify: 0,
    setTime: function (t) {
        if (t < 1) {
            TitleTicker.time = 0;
            return;
        }
        TitleTicker.time = Math.round(t);
    },
    setNotifyMessage: function (message) {
        if (TitleTicker.isWindowActive)
            return;
        TitleTicker.notifyMessage = message + ' - ' + TitleTicker.getSuffix();
    },
    getSuffix: function () {
        return Game.worldName + ' - ' + TitleTicker.suffix;
    },
    tick: function () {
        var title, c;
        if (c = TaskQueue.timeleft) {
            title = (c.formatDuration()) + ' - ' + TitleTicker.getSuffix();
        } else {
            title = TitleTicker.getSuffix();
        }
        if (!TitleTicker.isWindowActive && TitleTicker.notifyMessage) {
            if (TitleTicker.lastNotify > 0)
                title = TitleTicker.notifyMessage;
            TitleTicker.lastNotify++;
            if (TitleTicker.lastNotify > TitleTicker.notifyDuration)
                TitleTicker.lastNotify = -TitleTicker.notifyDuration;
        } else {
            TitleTicker.lastNotify = 0;
        }
        if (TitleTicker.lasttitle == title)return;
        TitleTicker.lasttitle = title;
        document.title = title;
        TitleTicker.setTime(TitleTicker.time - 1);
    },
    init: function () {
        $(window).focus(function () {
            TitleTicker.isWindowActive = true;
            TitleTicker.notifyMessage = null;
        }).blur(function () {
            TitleTicker.isWindowActive = false;
        });
        EventHandler.listen("chat_tell_received", function (room) {
            TitleTicker.setNotifyMessage(s("Сообщение от %1", room.client.pname));
        });
        TitleTicker.intervalReference = window.setInterval(function () {
            TitleTicker.tick();
        }, TitleTicker.intervall * 1000);
    }
};

var BBCode = function (textarea) {
    switch (typeof textarea) {
        case'object':
            if (textarea != null) {
                this.textarea = textarea;
                break;
            }
        case'string':
            if ($(textarea) != null) {
                textarea = $(textarea);
                break;
            }
        default:
            return false;
            break;
    }
};
BBCode.prototype.getText = function () {
    this.textarea.focus();
    if (typeof document.selection != 'undefined') {
        var range = document.selection.createRange();
        return range.text;
    } else if (typeof this.textarea.selectionStart != 'undefined') {
        var start = this.textarea.selectionStart;
        var end = this.textarea.selectionEnd;
        return this.textarea.value.substring(start, end);
    }
    return null;
};
BBCode.prototype.insertText = function (startTag, text, endTag) {
    if (null == text)return;
    this.textarea.focus();
    if (typeof document.selection != 'undefined') {
        var range = document.selection.createRange();
        range.text = startTag + text + endTag;
        range = document.selection.createRange();
        if (text.length == 0) {
            range.move('character', -endTag.length);
        } else {
            range.moveStart('character', startTag.length + text.length + endTag.length);
        }
        range.select();
    } else if (typeof this.textarea.selectionStart != 'undefined') {
        var start = this.textarea.selectionStart;
        var end = this.textarea.selectionEnd;
        this.textarea.value = this.textarea.value.substr(0, start) + startTag + text + endTag + this.textarea.value.substr(end);
        var pos;
        if (text.length == 0) {
            pos = start + startTag.length;
        } else {
            pos = start + startTag.length + text.length + endTag.length;
        }
        this.textarea.selectionStart = pos;
        this.textarea.selectionEnd = pos;
    }
};
BBCode.prototype.addCodeTag = function (tagName) {
    this.insertText('[' + tagName + ']', this.getText(), '[/' + tagName + ']');
};
BBCode.prototype.addExtendedCodeTag = function (description, tagName) {
    var input = prompt(description);
    var text = this.getText();
    text = (text.length == 0 ? prompt(s('Введи текст описания для \"%1\"', tagName)) : text);
    this.insertText('[' + tagName + '=' + input + ']', text, '[/' + tagName + ']');
};
BBCode.prototype.addCallbackCodeTag = function (tagName, callbackFunction) {
    var text = callbackFunction();
    this.insertText('[' + tagName + '=' + text + ']', this.getText(), '[/' + tagName + ']');
};

var Game = {
    cdnURL: null,
    masterURL: null,
    serviceURL: null,
    forumURL: null,
    helpURL: null,
    gameURL: null,
    worldName: null,
    worldsNames: null,
    version: null,
    locale: null,
    redirectLink: null,
    clientTimedrift: null,
    serverTimeDifference: null,
    serverUTCOffset: null,
    travelSpeed: null,
    tipList: null,
    duelProtectionHours: null,
    duelProtectionEarly: null,
    duelProtectionEnergy: null,
    maxFlagHoldCount: null,
    upbLimit: null,
    ui: {friendsbarEnabled: null, bottomBar: {}},
    mpi: {enabled: false, groups: false, multilang: false},
    sesData: {},
    init: function (data) {
        Game.masterURL = data.masterURL;
        Game.serviceURL = data.serviceURL;
        Game.forumURL = data.forumURL;
        Game.helpURL = data.helpURL;
        Game.gameURL = data.gameURL;
        Game.facebookFanURL = data.facebookFanURL;
        Game.sesData = data.sesData;
        Game.ceData = data.ceData;
        Game.interstitialData = data.interstitialData;
        Game.worldName = data.currentWorldName;
        Game.worldsNames = data.worldsNames;
        Game.version = data.environment == 'beta' ? 'beta' : parseFloat(data.westVersion.replace(/[^.\d]/g, ""));
        Game.locale = data.locale;
        Game.travelSpeed = data.travelSpeed;
        Game.redirectLink = data.redirectLink;
        Game.initTime(data.serverTimeOffset, data.sincepoch);
        Game.environment = data.environment;
        west.storage.ItemSetManager.init();
        JobList.init(data.jobs, data.jobDurations);
        Game.duelProtectionHours = data.duelProtectionHours;
        Game.duelProtectionEarly = data.duelProtectionEarly;
        Game.duelProtectionEnergy = data.duelProtectionEnergy;
        Game.maxFlagHoldCount = data.maxFlagHoldCount;
        Game.upbLimit = parseInt(data.upbLimit);
        Game.ui = data.ui;
        if (data.interstitialData.length > 0 && !LinearQuestHandler.hasTutorialQuest()) {
            window.setTimeout(function () {
                ServerInfoWindow.open('announcements');
            }, 2000);
        }
        if (data.playerFirstDepositBonus) {
            WestUi.NotiBar.add(new OnGoingTimerEntry("Время для получение дополнительных самородков ограничено.", data.playerFirstDepositBonus.restricted_date, function () {
                PremiumBuyWindow.open();
                return false
            }));
        }
        Game.initTips();
        window.setInterval(Game.syncTime, 600000);
        Game.syncTime();
        TheWestApi.version = Game.version;
        Game.cdnURL = data.cdnURL || Game.gameURL;
        if (Game.cdnURL[Game.cdnURL.length - 1] == "/")
            Game.cdnURL = Game.cdnURL.substring(0, Game.cdnURL.length - 1);
        Game.mpi.enabled = data.mpi.enabled;
        Game.mpi.groups = data.mpi.groups;
        Game.mpi.multilang = data.mpi.multilang;
        Game.loaded = true;
        EventHandler.signal('game_config_loaded');
    },
    initTips: function () {
        Game.tipList = [["Тебя нельзя вызвать на дуэль, если ты не живёшь в городе и за твою голову не назначена награда."], ["Ты можешь назначать награду за голову других игроков."], ["Если письмо не архивировать, то через некоторое время оно автоматически удалится."], ["Комбинации клавиш для осуществления более быстрого доступа к некоторым вкладкам."], ["В банке твои деньги в безопасности и ты не потеряешь их во время дуэли или в результате потери сознания."], ["Являясь жителем города, ты можешь спать в его отеле бесплатно."], ["Во время сна твоё здоровье и энергия восстанавливается быстрее."], ["На рынке можно выгодно продать и купить множество вещей."], ["Ты можешь отключить подсказки в меню <b>Настройки</b>."], ["Чтобы найти своего персонажа, центрируй карту на нём.", function () {
            return Character.charSex == "male";
        }], ["Чтобы найти своего персонажа, центрируй карту на нём.", function () {
            return Character.charSex == "female";
        }], ["Если твой город достаточно большой — завербованные тобой игроки автоматически получат приглашения."], ["Выполняй ежедневные поручения, чтобы заработать облигации Юнион Пасифик."], ["Разные наборы снаряжения позволяют выполнять разные задания. Ты можешь сохранить в своём багаже больше, чем один набор снаряжения."], ["Легенда рассказывает о шамане, живущем где-то на западе, который может изменить твои прошлые решения.", function () {
            return true;
        }], ["Ты сможешь выбрать тип персонажа на 10 уровне.", function () {
            return Character.charClass == "greenhorn";
        }], ["Ты сможешь выбрать профессию на 20 уровне.", function () {
            return Character.professionId == 0;
        }]];
    },
    initTime: function (sto, time) {
        Game.clientTimedrift = 0;
        Game.serverTimeDifference = 0;
        Game.serverUTCOffset = sto;
        try {
            Game.clientTimedrift = new Date().getTime() - new Date(time * 1000).getTime() + 1000;
            Game.serverTimeDifference = (new Date().getTimezoneOffset() + sto) * 60000;
        } catch (e) {
            throw e;
        }
    },
    syncTime: function () {
        var responseTime = new Date().getTime();
        Ajax.request({url: '/ntp.php'}).done(function (serverTime) {
            responseTime = new Date().getTime() - responseTime;
            Game.clientTimedrift = new Date().getTime() - new Date(serverTime).getTime() - responseTime + 1000;
        });
    },
    getAccurateServerTime: function () {
        return new ServerDate().getTime() + 1000;
    },
    getServerTime: function () {
        return new ServerDate().getTime() / 1000;
    },
    getClientTime: function () {
        return new Date().getTime() / 1000;
    },
    trackExternal: function (src) {
        var iframe = document.createElement('iframe');
        iframe.width = iframe.height = 1;
        iframe.src = src;
        $('#absoluteContent').append(iframe);
    }
};
Game.InfoHandler = {
    getLocalString4Charclass: function (classname) {
        switch (classname) {
            case'greenhorn':
                return 'Чечако';
                break;
            case'duelist':
                return 'Дуэлянт';
                break;
            case'adventurer':
                return 'Авантюрист';
                break;
            case'worker':
                return 'Трудяга';
                break;
            case'soldier':
                return 'Солдат';
                break;
            default:
                return 'Чечако';
                break;
        }
    }, getLocalString4ProfessionId: function (professionId) {
        switch (professionId) {
            case 0:
                return 'без профессии';
                break;
            case 1:
                return 'Повар';
                break;
            case 2:
                return 'Знахарь';
                break;
            case 3:
                return 'Кузнец';
                break;
            case 4:
                return 'Шорник';
                break;
            default:
                return 'без профессии';
                break;
        }
    }, getGameTip: function (id) {
        var tiplist = Game.tipList;
        if (0 == tiplist.length || id < 0)
            return;
        while (id > (tiplist.length - 1))
            id -= tiplist.length;
        if (!tiplist[id] || (tiplist[id][1] && !tiplist[id][1]()))
            return false;
        return tiplist[id][0];
    }
};
Game.TextHandler = function () {
    var sm = {
        ":-?/": "sore",
        "=:)": "invader",
        "&gt;:(": "angry",
        ":&#39;(": "cry",
        ":-?)": "smile",
        ":-?D": "grin",
        ":-?(": "frown",
        ";-?)": "smirk",
        ":-?P": "tongue",
        ":-?p": "tongue",
        ":-?o": "ohmy",
        ":-?O": "ohmy",
        ":-?x": "muted",
        ":-?X": "muted",
        ":-?\\|": "silent",
        "&gt;.&lt;": "palm",
        "&gt;_&lt;": "palm",
        "-.-": "nc",
        "o.O": "oo",
        "O.o": "oo",
        "^_?^": "happy",
        "o_O": "oo",
        "O_o": "oo",
        "X.X": "xx",
        "x.x": "xx",
        "X_X": "xx",
        "x_x": "xx",
        "T_T": "cry",
        "T.T": "cry",
        "el pollo diablo!": "elpollodiablo",
        "!el pollo diablo": "elpollodiablo_mirror",
        "el pollo diablo\\?!": "elpollodiablo_front"
    }, sa = {
        "a+\\W*(d+\\W*)+m+\\W*e+\\W*!+": {flags: 'gi', text: 'meee…', src: "sheep_rainbow.gif"},
        "a+\\W*(d+\\W*)+m+\\W*e+": {flags: 'gi', src: "sheep.gif"},
        "i+\\W*n+\\W*v+\\W*i+\\W*t+\\W*e+\\W*m+\\W*e+": {flags: 'gi', src: "sheep.gif"}
    };
    return {
        parse: function (m) {
            var keep = [];
            m = m.replace(/\[player\](\{.*?\})\[\/player\]/g, function (a, b) {
                try {
                    b = b.replace(/&#39;/g, "'").replace(/&shy;/g, "").replace(/&quot;/g, '"');
                    b = JSON.parse(b);
                    var c = Chat.Resource.Manager.getClient(b.id);
                    if (c)keep.push(Chat.Formatter.formatClient(c)); else keep.push(b.name);
                    return "&&" + (keep.length - 1) + "&&";
                } catch (e) {
                    return a;
                }
            }).replace(/\[report=(.*?)\](.*?)\[\/report\]/g, function (a, b, c) {
                var str = b.escapeHTML();
                if (str.length < 11)return a;
                keep.push("<a class='reportlink' href='javascript:void(parent.ReportWindow.open("
                    + str.substring(0, str.length - 10) + ",\""
                    + str.substring(str.length - 10, str.length) + "\"))' >" + c + "</a>");
                return "&&" + (keep.length - 1) + "&&";
            }).replace(/\[item=(.*?)\]/g, function (a, b, c) {
                var id = parseInt(b);
                if (!id)return a;
                var itm = ItemManager.get(id, true);
                if (!itm)return a;
                keep.push("<a href='javascript:void(0)' class='bbcode itemlink' title='"
                    + (new ItemPopup(itm).getXHTML().escapeHTML()) + "'>[" + (itm.getItemLevel() ? ' <span class="item_level' + (itm.isUpgradeable() ? '' : ' fake') + '">' + itm.getItemLevel() + '</span>' : '') + itm.name.escapeHTML() + "]</a>");
                return "&&" + (keep.length - 1) + "&&";
            }).replace(/(http(s)?:\/\/[^\s<]+)/g, function (a, b, c, d, org) {
                a = a.replace(/&shy;/g, "");
                if (org.match(/<a\s(.*)href=(\'|\")(.*)(\'|\")/))return a; else if (org.match(/<img\s(.*)src=(\'|\")(.*)(\'|\")/))return a;
                keep.push("<a href='javascript:void(0)' onclick='showlink(\""
                    + a.escapeHTML() + "\");return false' target='_blank'>" + a + "</a>");
                return "&&" + (keep.length - 1) + "&&";
            }).replace(MarkerUi.importRegExp, function (str, x, y, desc) {
                return "<a href='javascript:void(parent.MarkerUi.importMarker(" + x + "," + y + ",\"" + desc.escapeHTML() + "\"))'>Marker: " + desc + "</a>";
            });
            for (var k in sm) {
                m = m.replace(new RegExp("(^|\\s)" + k.replace(/([\)\.\^\(])/g, "\\$1"), "g"), " <img src='https://westrus.innogamescdn.com/images/chat/emoticons/" + sm[k] + ".png?1' />");
            }
            for (var k in sa) {
                m = m.replace(new RegExp("(^|\\s)" + k, (sa[k].flags ? sa[k].flags : "g")), " <img src='https://westrus.innogamescdn.com/images/chat/emoticons/" + sa[k].src + "' /> " + (sa[k].text ? sa[k].text : '') + "");
            }
            if (west && west.events && west.events.Manager) {
                west.common.forEach(west.events.Manager.getRunningEventsCurrencies(), function (obj) {
                    m = m.replace(new RegExp("(^|\\s)" + obj.id + "!", "gi"), ' <span class="bbcode chat_icon icon ' + obj.id + '"></span>');
                });
            }
            return m.replace(/&&(\d+)&&/g, function (_, x) {
                return keep[parseInt(x)];
            });
        }
    };
}();
Game.Utilities = {
    canSaveBookmark: function () {
        return (window.sidebar && window.sidebar.addPanel) || (/MSIE/.test(window.navigator.userAgent));
    }, saveBookmark: function (url, title) {
        if (window.sidebar) {
            window.sidebar.addPanel(title, url, '');
        } else if (window.external && /MSIE/.test(navigator.userAgent)) {
            window.external.AddFavorite(url, title);
        }
    }
};

var Player = {
    tracking: null,
    h: null,
    emailValid: null,
    firstLogin: null,
    hasLoginBonus: null,
    protection: null,
    init: function (data) {
        Player.tracking = data.tracking;
        Player.h = data.h;
        Player.emailValid = data.emailValid;
        Player.friendsref = data.friendsreflink;
        Player.firstLogin = data.firstLogin;
        Player.hasLoginBonus = data.hasLoginBonus;
        Player.premiumPurchase = data.premiumPurchase;
        Player.videoId = data.videoId;
        Player.videoUrl = data.videoUrl;
        Config.init(data.prop);
        Markers.init(data.markers, Config.get('minimap.marker'));
        if (data.failedLogins) {
            var text = s(ngettext("С момента последнего захода (%1), неверный пароль был указан %2 раз.", new Array("С момента последнего захода (%1), неверный пароль был указан %2 раз.", "С момента последнего захода (%1), неверный пароль был указан %2 раза.", "С момента последнего захода (%1), неверный пароль был указан %2 раз."), data.failedLogins.failedCount), data.lastLogin, data.failedLogins.failedCount);
            new west.gui.Dialog().setTitle("Неудавшиеся заходы").setText(text).addButton('ok').show();
        }
        if (data.survey) {
            window.setTimeout(function () {
                Survey.open(data.survey);
            }, 5000);
        }
        EventHandler.listen("tutorial_finished", function () {
            if (Player.emailValid)return;
            var l = $("<a href='#'>" + "E-mail недействителен!" + "</a>").click(function () {
                OptionsWindow.open("account", "email");
            });
            var fin = function (el) {
                el.fadeIn(800, function () {
                    window.setTimeout(function () {
                        fout(el);
                    }, 1000);
                });
            }, fout = function (el) {
                el.fadeOut(800, function () {
                    fin(el);
                });
            };
            fin(l);
            $("#user-interface").prepend($("<div id='ui_email_validation'>").append(l));
            return EventHandler.ONE_TIME_EVENT;
        });
        EventHandler.listen('tutorial_finished', function (firstFinish) {
            if (!firstFinish && data.hasLoginBonus && !data.firstLogin) {
                new west.player.LoginBonus;
            }
            return EventHandler.ONE_TIME_EVENT;
        });
        EventHandler.listen('character_level_up', function (change) {
            var fairOpen = data.premiumPurchase.fairOpen, levelReq = change.level >= 10;
            enabled = data.premiumPurchase.enabled, hasBonus = data.premiumPurchase.hasFullBonus, claimable = data.premiumPurchase.canClaim;
            if (!levelReq && !claimable)return;
            if (enabled && ((fairOpen && !hasBonus) || claimable)) {
                WestUi.showPremiumPurchaseButton(!data.premiumPurchase.clicked);
            }
            return EventHandler.ONE_TIME_EVENT;
        });
        EventHandler.listen('premium_purchase_claimed', function () {
            this.premiumPurchase.hasFullBonus = true;
        }, this);
        Player.protection = new west.player.Protection(data.protection);
    },
    logout: function () {
        var logoutUrl = "game.php?window=logout&action=logout&h=" + this.h;
        new west.gui.Dialog("Выйти", sextext("Ты точно хочешь выйти из игры?", "Ты точно хочешь выйти из игры?", Character.charSex)).setIcon(west.gui.Dialog.SYS_QUESTION).setModal(true, false, {
            bg: "https://westrus.innogamescdn.com/images/curtain_bg.png",
            opacity: 0.7
        }).addButton('ok', function () {
            window.location.href = logoutUrl;
        }).addButton('cancel').show();
    },
    forceLogout: function (msg) {
        var logoutUrl = Game.masterURL + "/index.php?page=logout";
        new west.gui.Dialog("Выйти", msg).setIcon(west.gui.Dialog.SYS_USERERROR).setModal(true, false, {
            bg: "https://westrus.innogamescdn.com/images/curtain_bg.png",
            opacity: 0.7
        }).addButton('Выйти', function () {
            window.location.href = logoutUrl;
        }).show();
    },
    track: function () {
        if (Player.tracking)$('#absoluteContent').append(Player.tracking);
    }
};
Player.Welcome = {
    invite: function (name) {
        var html = s('<div>%1</div>', 'Тебя пригласил игрок:') +
            s('<div class="friendinvite-name-bg"><p>%1</p></div>', name) +
            s('<div>%1</div>', 'Твой приветственный подарок:') + '<div class="friendinvite-reward"></div>' +
            s('<div>%1</div>', 'Вперёд, на Дикий Запад за приключениями!');
        var dlg = new west.gui.Dialog('Подарок от друга').setModal(true, false, {
            bg: "https://westrus.innogamescdn.com/images/curtain_bg.png",
            opacity: 0.7
        }).setText(html).addClass('dlg-friendinvite').addButton('Начало руководства', function () {
            Player.Welcome.show();
        });
        $('.friendinvite-reward', dlg.getMainDiv()).append(new tw2widget.reward.ItemReward(13711000).getMainDiv());
        $('div.tw2gui_dialog_actions', dlg.getMainDiv()).addClass('center');
        dlg.show();
    }, init: function (invitedBy) {
        if (invitedBy) {
            this.invite(invitedBy);
        } else if (Player.firstLogin) {
            this.show();
        }
    }, show: function () {
        var self = this;
        var text = ["<b>" + sextext("Привет, {PLAYER_NAME}!", "Привет, {PLAYER_NAME}!", Character.charSex) + "</b><br/>", sextext("Меня зовут Генри. Я работаю барменом в салуне в Нью-Гамбурге.", "Меня зовут Генри. Я работаю барменом в салуне в Нью-Гамбурге.", Character.charSex), sextext("Что-то я не припомню, чтобы видел тебя раньше. Пошли, куплю тебе выпивку, заодно нарисую твой портрет.", "Что-то я не припомню, чтобы видел тебя раньше. Пошли, куплю тебе выпивку, заодно нарисую твой портрет.", Character.charSex)].join("<br/>").replace("{PLAYER_NAME}", Character.name);
        var msg = new west.gui.Dialog("Добро пожаловать на Дикий Запад!").setModal(true, false, {
            bg: "https://westrus.innogamescdn.com/images/curtain_bg.png",
            opacity: 0.7
        }).setText("<span>" + text + "</span>").addButton("Дальше", function () {
            CharacterWindow.open('avatarmake', undefined, true);
            $(".onlyavatar").append(new tw2widget.gametip("Используй стрелки с правой стороны, чтобы создать свой собственный портрет. Если ты хочешь создать случайное изображение, пожалуйста, используй значок кости прямо под портретом. Нажми на кнопку «Сохранить», как только ты закончишь.", 'top_center').getMainDiv());
        });
        msg.getMainDiv().addClass('welcome');
        $('.linear_quest').hide();
        var arrow = $('<div class="arrow" />');
        $('div.tw2gui_dialog_actions', msg.getMainDiv()).append(arrow);
        arrow.css('left', 140);
        msg.show();
        TutorialManager.animateStaticArrow(arrow);
    }
};

west.define('west.player.LoginBonus', null, {
    _dialog: null,
    _maxStreak: 5,
    _bondAmount: 0,
    _nuggetAmount: 0,
    _currentStage: 0,
    _rewardCollected: false,
    _sevendayRewardCollected: false,
    _registerDate: null,
    _rewardWeaponMelee: null,
    _rewardWeaponShot: null,
    init: function () {
        var that = this;
        Ajax.remoteCallMode('loginbonus', null, null, function (response) {
            that._setData(response);
            that.show();
        });
    },
    collectReward: function () {
        var that = this;
        this._setLoading(true);
        Ajax.remoteCall('loginbonus', 'collect', null, function (response) {
            that._setLoading(false);
            if (response.error) {
                new UserMessage(response.msg).show();
            } else {
                that._displayRewards(response.rewards);
                Player.hasLoginBonus = false;
                that.close();
            }
        });
    },
    collectItem: function () {
        var that = this;
        this._setLoading(true);
        Ajax.remoteCall('loginbonus', 'collect_item', null, function (response) {
            that._setLoading(false);
            if (response.error) {
                new UserMessage(response.msg).show();
            } else {
                that._displayRewards({items: true});
                if (!that._rewardCollected) {
                    that.init();
                } else {
                    that.close();
                }
            }
        });
    },
    show: function () {
        if (this._dialog)this._dialog.hide();
        var i, html = $('<div class="reward-text-top">' +
            (Player.firstLogin ? s('Добро пожаловать на Дикий Запад, %1!', Character.name) : s('С возвращением, %1. Новые приключения уже ждут тебя!', Character.name)) + '</div>');
        for (i = 1; i <= this._maxStreak; i++) {
            html = html.add(this._buildDay(i));
        }
        this._dialog = new west.gui.Dialog('Бонус за вход').addClass('loginbonus').setModal(true, true, {
            bg: 'https://westrus.innogamescdn.com/images/curtain_bg.png',
            opacity: 0.7
        }).setText(html).setCharacter('female').show();
        if (!this._sevendayRewardCollected) {
            var regDays = this._getRegisteredDays(), diff = 7 - regDays, title, text, div, cls;
            if (diff <= 0) {
                text = 'У пони-экспресс есть посылка для тебя.' + ' <a href="#">' + 'Забрать сейчас!' + '</a>';
                title = 'Забери свою посылку!';
            } else {
                text = s(ngettext('Через %1 день пони-экспресс привезёт тебе посылку.', new Array('Через %1 день пони-экспресс привезёт тебе посылку.', 'Через %1 дня пони-экспресс привезёт тебе посылку.', 'Через %1 дней пони-экспресс привезёт тебе посылку.'), diff), diff);
                title = s(ngettext('Посылка прибудет через %1 день.', new Array('Посылка прибудет через %1 день.', 'Посылка прибудет через %1 дня.', 'Посылка прибудет через %1 дней.'), diff), diff);
            }
            div = '<div title="' + title.escapeHTML() + '" id="lb_sevendays"><p class="center bold">' + text + '</p>';
            for (i = 1; i <= 7; ++i) {
                cls = regDays == i ? 'highlighted' : (regDays > i ? 'taken' : 'open');
                div += '<div class="lb_day' + i + ' lb_day_' + cls + '"></div>';
            }
            div += '</div>';
            this._dialog.framefix.append($(div).click(this.collectItem.bind(this)));
        }
    },
    close: function () {
        this._dialog && this._dialog.hide();
    },
    _setData: function (data) {
        this._bondAmount = data.couponAmount;
        this._nuggetAmount = data.nuggetAmount;
        this._currentStage = data.currentStage;
        this._rewardCollected = data.rewardCollected;
        this._sevendayRewardCollected = data.itemCollected || false;
        this._registerDate = data.registerDate * 1000;
        this._rewardWeaponShot = data.weaponShot;
        this._rewardWeaponMelee = data.weaponMelee;
    },
    _buildDay: function (day) {
        var dayDiff = this._currentStage - day, dayName = this._getDayName(dayDiff), cls = '', reward = this._getReward(day);
        if (dayDiff === 0 && !this._rewardCollected) {
            reward = reward.add(new west.gui.Button('Взять', this.collectReward, this).setWidth(138).addClass('collect-btn').getMainDiv());
            cls = 'today';
        } else if (dayDiff >= 0) {
            cls = 'collected';
        }
        return $(s('<div class="reward-row %1">' + '<div class="reward-day">%2</div>' + '%3' + '</div>', cls, dayName, this._maxStreak !== day ? '<div class="reward-separator"></div>' : '')).append(reward);
    },
    _getDayName: function (diff) {
        var name, then;
        switch (diff) {
            case 0:
                name = 'Сегодня';
                break;
            case-1:
                name = 'Завтра';
                break;
            case 1:
                name = 'Вчера';
                break;
            default:
                then = new Date().getTime() - diff * 86400000;
                name = new Date(then).getLocalDay();
                break;
        }
        return name;
    },
    _getReward: function (day) {
        var className, text, title;
        switch (day) {
            case 1:
            case 2:
            case 3:
            case 4:
                className = 'exp';
                text = s('+%1% Опыта', day);
                title = s('Ты получаешь %1% опыта, который нужен для перехода на следующий уровень.', day);
                break;
            case 5:
                className = 'bond-nugget';
                text = s(ngettext('+%1 самородок / облигация', new Array('+%1 самородок / облигация', '+%1 самородка / облигации', '+%1 самородков / облигаций'), this._nuggetAmount), this._nuggetAmount);
                title = s('Ты получишь самородки только каждый %1-й день в одном мире.', this._maxStreak);
                break;
        }
        return $(s('<div class="reward-highlight"></div>' + '<div class="reward reward-%1" title="%2"></div>' + '<div class="reward-text">%3</div>', className, title.escapeHTML(), text));
    },
    _getRegisteredDays: function () {
        var midnight = new Date;
        midnight.setHours(0);
        midnight.setMinutes(0);
        midnight.setSeconds(0);
        if (midnight < this._registerDate) {
            return 1;
        } else {
            return Math.ceil((midnight - this._registerDate) / 86400000) + 1;
        }
    },
    _displayRewards: function (rewards) {
        var reward = new tw2widget.reward.RewardDialog('Бонус за активность'), r;
        for (r in rewards) {
            switch (r) {
                case'xp':
                    Character.addExperience(rewards.xp);
                    reward.addReward(new tw2widget.reward.ExpReward(rewards.xp));
                    break;
                case'nuggets':
                    Character.addNuggets(rewards.nuggets);
                    reward.addReward(new tw2widget.reward.NuggetReward(rewards.nuggets));
                    break;
                case'upb':
                    Character.addUpb(rewards.upb);
                    reward.addReward(new tw2widget.reward.BondReward(rewards.upb));
                    break;
                case'items':
                    reward.addReward(new tw2widget.reward.ItemReward(this._rewardWeaponShot)).addReward(new tw2widget.reward.ItemReward(this._rewardWeaponMelee));
                    EventHandler.signal('inventory_changed');
                    break;
            }
        }
        reward.show();
    },
    _setLoading: function (state) {
        var btn = this._dialog.$('.collect-btn').guiElement();
        if (state) {
            if (btn)btn.disable();
            this._dialog.$('.today').append(get_throbber(true));
        } else {
            if (btn)btn.enable();
            this._dialog.$('.throbber').remove();
        }
    }
});

west.define('west.player.PremiumPurchase', null, {
    _dialog: null,
    _stages: null,
    _claimable_stage: null,
    _current_stage: null,
    _l10n: {
        window_title: 'Бонус премиум',
        free_spin_title: 'Ежедневный бесплатный раунд'.escapeHTML(),
        window_description: function (tire_1_price, tire_2_price) {
            return s('За первую разовую покупку %1, ты получишь %3 дополнительную бесплатную ежедневную игру на всех праздничных лотереях и на ярмарке%4. Если ты купишь за один раз как минимум %2, ты получишь %3 ту же дополнительную бесплатную ежедневную игру и показанные ниже предметы%4.', s(ngettext('%1 самородок', new Array('%1 самородок', '%1 самородков', '%1 самородков'), tire_1_price), tire_1_price), s(ngettext('%1 самородок', new Array('%1 самородок', '%1 самородков', '%1 самородков'), tire_2_price), tire_2_price), '<b>', '</b>');
        },
        'help': {
            'window_title': 'Объяснение бонуса премиума', 'text': function (tire_1_price, tire_2_price) {
                return s('Если ты купишь за раз как минимум %1 самородков, в каждом мире, где у тебя в данный момент будет персонаж, ты сможешь получить приз. За разовую покупку как минимум %2 самородков, ты сможешь получить награду второй степени.<br /><br />\n%3 %4 Премия не будет доступна в мирах, где у тебя на момент покупки не будет персонажа. %5 %4 Приз нужно взять, нажав на кнопку в верхней части экрана. %5 %4 Бонус будет активен в случае восстановления замороженного персонажа; в случае удаления персонажа или перезагрузки — пропадёт. %5 %4 Кнопка с наградой доступна только во время открытой ярмарки персонажам как минимум 10-го уровня или после использования определенного количества золотых самородков %5 %6', tire_1_price, tire_2_price, '<ul>', '<li>', '</li>', '</ul>');
            }
        },
        buttons: {close: 'Закрыть', premium: 'Премиум', collect: 'Взять'}
    },
    init: function () {
        var that = this;
        Ajax.remoteCall('premium_purchase', '', null, function (response) {
            if (response.error) {
                return new UserMessage(response.msg).show();
            }
            that._setData(response);
            that.show();
        });
    },
    claim: function () {
        var l10n = this._l10n;
        Ajax.remoteCall('premium_purchase', 'claim', null, function (response) {
            var stage;
            if (response.error) {
                return new UserMessage(response.msg).show();
            }
            var reward = new tw2widget.reward.RewardDialog(l10n.window_title);
            if (response.stage) {
                stage = this._stages[response.stage];
                reward.addReward('<img title="' + l10n.free_spin_title + '" src="https://westrus.innogamescdn.com/images/window/first-purchase/free-draw_award.png" />');
                if (stage.rewards.items.length) {
                    stage.rewards.items.each(function (itm) {
                        reward.addReward(new tw2widget.reward.ItemReward(itm));
                    });
                }
            }
            reward.show();
            this.close();
            WestUi.hidePremiumPurchaseButton();
            EventHandler.signal('inventory_changed');
            EventHandler.signal('premium_purchase_claimed');
        }.bind(this));
    },
    close: function () {
        this._dialog && this._dialog.hide();
        this._dialog = null;
    },
    show: function () {
        if (this._dialog)this._dialog.hide();
        var self = this, l10n = this._l10n, html, tires, leftBtn, closeBtn, tire_prices = [], nuggetIcon, help_icon;
        tires = $('<div class="tires"></div>');
        $.each(this._stages, function (stage_id, stage_data) {
            tires.append(self._generateTire(stage_data, stage_id));
            tire_prices.push(stage_data.nuggets);
        });
        help_icon = $('<a href="#" class="help"></a>').on('click', function (e) {
            e.preventDefault();
            new west.gui.Dialog(l10n.help.window_title).setText($('<div class="firstpurchase_help">' + l10n.help.text.apply(this, tire_prices) + '</div>')).addButton('ok').show();
        });
        html = $('<div class="firstpurchase"><div class="firstpurchase-text">' + l10n.window_description.apply(this, tire_prices) + '</div></div>');
        tires.append('<div class="shadow"></div>');
        html.append(tires);
        if (this._claimable_stage) {
            leftBtn = new west.gui.Button(l10n.buttons.collect, this.claim, this).addClass('claim-btn');
            html.addClass('claimable_' + (this._claimable_stage - 1));
        } else {
            nuggetIcon = '<img src="https://westrus.innogamescdn.com/images/window/trader/nugget.png" class="firstpurchase-nugget" />';
            leftBtn = new west.gui.Button(l10n.buttons.premium + nuggetIcon, function () {
                west.window.premium.open('premium_firstpurchase');
                this.close();
            }, this).addClass('premium-btn');
        }
        closeBtn = new west.gui.Button(l10n.buttons.close, this.close, this);
        this._dialog = new west.gui.Dialog(l10n.window_title).addClass('firstpurchase').setText(html).addButton(leftBtn.setMinWidth(150)).addButton(closeBtn);
        this._dialog.framefix.prepend('<div class="firstpurchase-clown"></div>');
        this._dialog.getMainDiv().find('.tw2gui_inner_window_title').append(help_icon);
        this._dialog.show();
    },
    _setData: function (data) {
        this._stages = data.stages;
        this._claimable_stage = data.claimableStage > 0 ? data.claimableStage : false;
        this._current_stage = data.stage;
    },
    _generateTire: function (data, tire_id) {
        if (!data.rewards) {
            return '';
        }
        var result, rewards, l10n = this._l10n;
        result = $('<div class="tire_' + (tire_id - 1) + '"><div class="tire_price"><span>' + data.nuggets + '</span></div></div>');
        rewards = $('<div class="rewards"></div>');
        if (data.rewards.freeSpin) {
            rewards.append('<img title="' + l10n.free_spin_title + '" src="https://westrus.innogamescdn.com/images/window/first-purchase/free-draw.png" />');
        }
        if (data.rewards.items.length) {
            data.rewards.items.each(function (itm) {
                rewards.append(new tw2widget.Item(ItemManager.get(itm)).getMainDiv());
            });
            rewards.addClass('rewards_items');
        }
        result.append(rewards);
        return result;
    }
});

west.define('west.player.Protection', null, {
    states_: null,
    events_: [{name: 'energy', callback: 'energyChange_'}, {
        name: 'health',
        callback: 'healthChange_'
    }, {name: 'character_died', callback: 'characterDied_'}, {
        name: 'character_revived',
        callback: 'characterRevival_'
    }],
    threshold_: 0.25,
    STATE_AVAILABLE: 0,
    STATE_TRIGGERED: 2,
    messages_: {
        energy: s('Внимание! Твоя энергия упала ниже 25%! %1 Тебе нужна энергия, чтобы выполнять работы, участвовать в  дуэлях и для многого другого. Через время энергия восстановится автоматически, но ты можешь восстановить её быстрей, поспав в отеле или выпив напиток из магазина Ю.П. %1 %2 Ты найдёшь бесплатный чай мате в своём багаже. %3', '<br /><br />', '<b>', '</b>'),
        health: s('Внимание! Твоё здоровье упало ниже 25%! %1 Ты можешь потерять здоровье, участвуя в дуэлях, фортовых сражениях или выполняя работу. Если очки здоровья упадут до нуля — ты потеряешь сознание. Со временем здоровье восстановится. Если хочешь быстрей его восстановить, то поспи в отеле или выпей напиток из магазина Ю.П. %1 %2 Ты найдёшь бесплатный эликсир в своём багаже. %3', '<br /><br />', '<b>', '</b>'),
        ko: s('О, нет! Твоё здоровье упало до 0! %1 Потеря сознания равнозначна потери всех очков здоровья и энергии. Ты очнёшься в одной из комнат отеля, где придёшь в себя. Всегда следи за здоровьем во время дуэлей, фортовых сражений и при выполнении работ! %1 %2 К счастью, тебя нашли индейцы и полностью исцелили. В следующий раз будь осторожнее. %3', '<br /><br />', '<b>', '</b>'),
        revival: s('Ты теряешь сознание. Когда ты наконец просыпаешься, то чувствуешь себя новорождённым. %1 Ты замечаешь небольшую кучку пепла, которая раньше была одним из твоих предметов.', '<br />')
    },
    init: function (states) {
        this.states_ = states || {};
        this.registerEvents();
    },
    registerEvents: function () {
        this.changeEvents_('listen');
    },
    unregisterEvents: function () {
        this.changeEvents_('unlisten');
    },
    changeEvents_: function (action) {
        var idx, ev;
        for (idx = 0; idx < this.events_.length; idx++) {
            ev = this.events_[idx];
            EventHandler[action](ev.name, this[ev.callback], this);
        }
    },
    isBelowThreshold: function (current, max) {
        return current / max < this.threshold_;
    },
    isAvailable: function (type) {
        return this.states_[type] === this.STATE_AVAILABLE;
    },
    energyChange_: function (currentEnergy, maxEnergy) {
        if (this.isBelowThreshold(currentEnergy, maxEnergy) && this.isAvailable('energy')) {
            this.trigger_('energy');
        }
    },
    healthChange_: function (currentHealth, maxHealth) {
        if (this.isBelowThreshold(currentHealth, maxHealth) && this.isAvailable('health')) {
            this.trigger_('health');
        }
    },
    characterDied_: function (newDate, oldDate, isInitEvent, isFirstKO) {
        if (!isInitEvent && this.isAvailable('ko')) {
            this.states_['ko'] = this.STATE_TRIGGERED;
            this.showMessage_('ko');
        }
    },
    characterRevival_: function (itemSlot) {
        Wear.remove(itemSlot);
        Wear.renderWear();
        this.showMessage_('revival');
    },
    trigger_: function (type) {
        Ajax.remoteCall('protection', 'trigger_protection', {k: type}, function (resp) {
            if (!resp.error) {
                this.states_[type] = this.STATE_TRIGGERED;
                EventHandler.signal('inventory_changed');
                this.showMessage_(type);
            }
        }.bind(this));
    },
    showMessage_: function (type) {
        var msg = '<div class="player-protection-msg">' +
            this.getIcon_(type) +
            this.messages_[type] + '</div>';
        var dialog = new west.gui.Dialog('Внимание!', msg).addButton('ok');
        if (type != 'ko' && type != 'revival') {
            dialog.addButton('Открыть багаж', function () {
                dialog.hide();
                Inventory.open();
            });
        }
        dialog.show();
    },
    getIcon_: function (type) {
        var path;
        switch (type) {
            case'ko':
                path = 'https://westrus.innogamescdn.com/images/achievements/indianF.png';
                break;
            case'health':
                path = 'https://westrus.innogamescdn.com/images/items/yield/liquidlife.png';
                break;
            case'energy':
                path = 'https://westrus.innogamescdn.com/images/items/yield/mate_tea.png';
                break;
            case'revival':
                path = 'https://westrus.innogamescdn.com/images/items/yield/ashes.png';
                break;
        }
        return '<img src="' + path + '" class="player-protection-icon"/>';
    }
});

ItemPopup = function (item_obj, options) {
    var defaultOptions = {
        show_reqs: true,
        show_attributes: true,
        show_skills: true,
        show_sell_price: true,
        show_auctionable: true,
        show_buffs: false,
        show_compare: false,
        show_alreadyown: false,
        traderCharge: false,
        show_set: true,
        show_setboni: false,
        character: null,
        show_lifetime: false,
        show_cooldown: false
    };
    this.options = $.extend(defaultOptions, options || {});
    this.refreshCount = ItemPopup.refreshCount;
    ItemPopup.addChangeNotifier();
    this.item_obj = item_obj;
    this.next_refresh = 0;
    var that = this;
    var handler = {
        onPosUpdate: function (css, e) {
            that.refresh();
            that.calcComparePosition(css, e.clientX);
        }, onShow: function () {
            that.showDivCompare();
        }, onHide: function () {
            that.hideDivCompare();
        }
    };
    this.popup = new MousePopup(this.getXHTML(), false, this.options.show_compare ? item_obj.type : false, handler);
};
ItemPopup.toString = ItemPopup.prototype.toString;
ItemPopup.prototype = ItemPopup;
ItemPopup.getXHTML = function () {
    var item = this.item_obj, item_level = item.getItemLevel(), item_upgradeable = item.isUpgradeable();
    var popupTable = $('<span><div class="inventory_popup">' + '<div class="invPopup_head" />' + '<div class="invPopup_body" />' + '<div class="invPopup_foot" />' + '</div></span>');
    var head_cont = $('div.invPopup_head', popupTable);
    var body_cont = $('div.invPopup_body', popupTable);
    var foot_cont = $('div.invPopup_foot', popupTable);
    var bonusExtractor = new west.item.BonusExtractor(this.options.character, item_level);
    var set_bonusExtractor = new west.item.BonusExtractor(this.options.character);
    head_cont.append($('<div class="inventory_popup_icon"><img width="73" height="73" src="' + to_cdn(this.item_obj.image) + '" /></div><div><img src="https://westrus.innogamescdn.com/images/fort/battle/divider.png" alt="" /></div>'));
    body_cont.append((item_level ? '<p class="item_level' + (item_upgradeable ? '' : ' fake') + '"><span>' + item_level + '</span></p>' : ''), $('<p class="inventory_popup_label' + (item.set ? ' tw_green' : '') + '">' + this.item_obj.name + '</p>'));
    if (item.action) {
        body_cont.append($('<p class="inventory_popup_action">' + (item.type == 'recipe' ? '(можно изучить)' : '(можно использовать)') + '</p>'));
    }
    var item_type_title = {
        head: "Головной убор",
        neck: "Шейная повязка",
        left_arm: "Оружие",
        right_arm: "Дуэльное оружие",
        body: "Одежда",
        foot: "Обувь",
        animal: "Верховая езда",
        yield: "Продукт",
        belt: "Пояс",
        pants: "Штаны",
        recipe: "Совет мастера"
    };
    var item_sub_title = {shot: "стрелковое", hand: "холодное"};
    var itemType = $('<p class="inventory_popup_type" />');
    itemType.html(item.description ? item.description : item_type_title[item.type] + ((item.sub_type !== null) ? ' <br /><span>(' + item_sub_title[item.sub_type] + ')</span>' : '')).appendTo(body_cont);
    if (item.unique) {
        body_cont.append($('<p class="inventory_popup_unique tw_purple">' + 'Редкость' + '</p>'));
    }
    if (this.options.show_lifetime) {
        if (this.options.show_lifetime > 0) {
            body_cont.append($('<p class="inventory_popup_lifetime">' + s('Будет уничтожено через %1', (this.options.show_lifetime).formatDurationBuffWay()) + '</p>'));
        } else {
            this.options.show_lifetime = false;
        }
    }
    if (this.options.show_cooldown) {
        var t = new ServerDate().getTime() / 1000;
        var dt = this.options.show_cooldown - t;
        if (dt > 0) {
            body_cont.append($('<p class="inventory_popup_cooldown">' + s('Повторное использование через: %1', dt.formatDurationBuffWay()) + '</p>'));
        } else {
            this.options.show_cooldown = false;
        }
    }
    if (item.type == 'recipe') {
        body_cont.append($('<br /><span class="inventory_popup_recipe tw_green text_bold ' + (item.profession_id != Character.professionId || item.min_level > Character.professionSkill ? 'text_red' : 'tw_green') + '">' + 'Требование:' + ' ' + item.profession + ' (' + item.min_level + ')<br /></span>'));
    }
    if (item.usebonus && item.type != 'recipe') {
        var html = '<br /><span class="inventory_popup_effect">' + ngettext('Действие:', new Array('Действие:', 'Действие:', 'Действие:'), item.usebonus.length) + '</div><br/>' + '<ul class="inventory_popup_effect_list"><li>' + item.usebonus.join('</li><li>') + '</li></ul>';
        body_cont.append($(html));
    }
    if (item instanceof west.item.Weapon) {
        var dmg = item.getDamage(this.options.character), bdmg = item.getDamage(this.options.character, true), dmgMsg;
        if (item.hasDamageBonus() && !this.options.character) {
            dmgMsg = 'Базовый урон';
        } else {
            dmgMsg = 'Урон';
        }
        body_cont.append('<br />'
            + '<span class="inventory_popup_damage">'
            + '<span class="current_value">' + dmg.min + '</span>'
            + '-'
            + '<span class="current_value">' + dmg.max + '</span>'
            + ' ' + dmgMsg
            + '</span>');
    }
    if (this.options.show_attributes && typeof item.bonus.attributes == 'object' && countObjectKeys(item.bonus.attributes) > 0) {
        var html = '<span class="inventory_popup_bonus_attr tw_green">';
        for (var k in item.bonus.attributes) {
            if (item.bonus.attributes[k]) {
                html += '<br />'
                    + '<span class="invPopup_attributes text_bold ' + (item.bonus.attributes[k] > 0 ? 'tw_green">+ ' : 'tw_red">')
                    + '<span class="current_value">' + item.bonus.attributes[k] + '</span>'
                    + ' ' + CharacterSkills.keyNames[k]
                    + '</span>';
            }
        }
        body_cont.append(html + '</span>');
    }
    if (this.options.show_skills && typeof item.bonus.skills == 'object' && countObjectKeys(item.bonus.skills) > 0) {
        var html = '<span class="inventory_popup_bonus_attr tw_green">';
        for (var k in item.bonus.skills) {
            if (item.bonus.skills[k]) {
                html += '<br />'
                    + '<span class="invPopup_skills ' + (item.bonus.skills[k] > 0 ? 'tw_green">+ ' : 'tw_red">')
                    + '<span class="current_value">' + item.bonus.skills[k] + '</span>'
                    + ' ' + CharacterSkills.keyNames[k]
                    + '</span>';
            }
        }
        body_cont.append(html + '</span>');
    }
    if (item.bonus.item.length) {
        html = '<span class="inventory_popup_bonus_attr tw_green">';
        for (k = 0; k < item.bonus.item.length; k++) {
            if (this.options.character && item.bonus.item[k].bonus && item.bonus.item[k].bonus.type === 'damage')continue;
            if ('undefined' !== typeof item.bonus.item[k]) {
                if (item.bonus.item[k].bonus && 'skill' === item.bonus.item[k].bonus.type) {
                    html += '<br /><span class="invPopup_skills tw_green">' + bonusExtractor.getDesc(item.bonus.item[k]) + '</span>';
                } else if (item.bonus.item[k].bonus && 'attribute' === item.bonus.item[k].bonus.type) {
                    html += '<br /><span class="invPopup_attributes text_bold tw_green">' + bonusExtractor.getDesc(item.bonus.item[k]) + '</span>';
                } else {
                    html += '<br /><span>' + bonusExtractor.getDesc(item.bonus.item[k]) + '</span>';
                }
            }
        }
        if (item_level && item_upgradeable && !this.options.character) {
            html += '<br /><br /><span class="text_bold tw_green"> ' + s('+%1 бонус уровня предмета / навыка и характеристики', (item_level * 10) + '%') + ' </span>';
        }
        body_cont.append(html + '</span>');
    }
    body_cont.append($('<br />'));
    var jokeItems = new Array(185147, 185148, 185149, 185150, 185151, 185152, 41999);
    if ($.inArray(item.item_base_id, jokeItems) > -1) {
        switch (item.item_base_id) {
            case 185147:
                body_cont.append('<br /><span class="invPopup_skills tw_green">+ 80-250 ' + 'Магический урон' + '</span><br />' + '<span class="invPopup_skills tw_green">+ 10 ' + 'Благословение' + '</span><br />');
                break;
            case 185148:
                body_cont.append('<br /><span class="invPopup_skills tw_green">+ 5 ' + 'Укрощение' + '</span><br />' + '<span class="invPopup_skills tw_green">+ 15 ' + 'Подкрепление' + '</span><br />');
                break;
            case 185149:
                body_cont.append('<br /><span class="invPopup_skills tw_green">+ 10 ' + 'Отравление' + '</span><br />' + '<span class="invPopup_skills tw_green">+ 3 ' + 'Смущение' + '</span><br />' + '<span class="invPopup_skills tw_green">+ 15 ' + 'Ограбление' + '</span><br />');
                break;
            case 185150:
                body_cont.append('<br /><span class="invPopup_skills tw_green">+ 5 ' + 'Ускорение' + '</span><br />' + '<span class="invPopup_skills tw_green">+ 10 ' + 'Замедление' + '</span><br />');
                break;
            case 185151:
                body_cont.append('<br /><span class="invPopup_skills tw_green">+ 10 ' + 'Уклонение' + '</span><br />' + '<span class="invPopup_skills tw_green">+ 5 ' + 'Возраст' + '</span><br />');
                break;
            case 185152:
                body_cont.append('<br /><span class="invPopup_skills tw_green">+ 5 ' + 'Ослепление' + '</span><br />' + '<span class="invPopup_skills tw_green">+ 10 ' + 'Погружение' + '</span><br />');
                break;
            case 41999:
                body_cont.append('<span class="invPopup_skills tw_green">+420 ' + 'Уважение' + '</span><br />');
                break;
            default:
                break;
        }
    }
    if (item.speed) {
        body_cont.append
        ($('<br /><span class="inventory_popup_bonus">' +
            'Скорость' + ': ' + (item.speed <= 1 ? '+' : '') + Math.round(Character.defaultSpeed / (Character.defaultSpeed * item.speed) * 100 - 100) + '%<br />' + '</span>'));
    }
    var fbs = item.bonus.fortbattle;
    if (fbs.offense || fbs.defense || fbs.resistance) {
        body_cont.append($('<br /><span class="inventory_popup_fortbonus text_bold">' + 'Битвы и перестрелки' + '</span>'));
        if (fbs.defense) {
            body_cont.append('<br />', '<span class="inventory_popup_fortbonus_skill">'
                + '&nbsp;&nbsp;+'
                + '<span class="current_value">' + fbs.defense + '</span>'
                + ' ' + 'Защита'
                + '</span>');
        }
        if (fbs.offense) {
            body_cont.append('<br />', '<span class="inventory_popup_fortbonus_skill">'
                + '&nbsp;&nbsp;+'
                + '<span class="current_value">' + fbs.offense + '</span>'
                + ' ' + 'Атака'
                + '</span>');
        }
        if (fbs.resistance) {
            body_cont.append('<br />', '<span class="inventory_popup_fortbonus_skill">'
                + '&nbsp;&nbsp;+'
                + '<span class="current_value">' + fbs.resistance + '</span>'
                + ' ' + 'Сопротивление'
                + '</span>');
        }
    }
    fbs = item.bonus.fortbattlesector;
    if (fbs.damage || fbs.offense || fbs.defense) {
        body_cont.append($('<br /><span class="inventory_popup_fortbonus text_bold">' + 'Сектор форта' + '</span>'));
        if (fbs.defense) {
            body_cont.append('<br />', '<span class="inventory_popup_fortbonus_skill">'
                + '&nbsp;&nbsp;+'
                + '<span class="current_value">' + fbs.defense + '</span>'
                + ' ' + 'Защита'
                + '</span>');
        }
        if (fbs.offense) {
            body_cont.append('<br />', '<span class="inventory_popup_fortbonus_skill">'
                + '&nbsp;&nbsp;+'
                + '<span class="current_value">' + fbs.offense + '</span>'
                + ' ' + 'Атака'
                + '</span>');
        }
        if (fbs.damage) {
            body_cont.append('<br />', '<span class="inventory_popup_damage">'
                + '&nbsp;&nbsp;+'
                + '<span class="current_value">' + fbs.damage + '</span>'
                + ' ' + 'Урон'
                + '</span>');
        }
    }
    if (CharacterSkills.buffs.items != null && CharacterSkills.buffs.items.weapon_hand == item.type && !isDefined(item.buffs) && this.options.show_buffs) {
        body_cont.append($('<br /><span class="inventory_popup_bonus_attr text_bold">' + 'Усилитель:' + '</span>'));
        if (CharacterSkills.buffs.items.fortbattle.offense > 0)body_cont.append($('<br /><span class="inventory_popup_bonus_skill">&nbsp;&nbsp;+' + CharacterSkills.buffs.items.fortbattle.offense + ' ' + 'Атака' + '</span>'));
        if (CharacterSkills.buffs.items.fortbattle.defense > 0)body_cont.append($('<br /><span class="inventory_popup_bonus_skill">&nbsp;&nbsp;+' + CharacterSkills.buffs.items.fortbattle.defense + ' ' + 'Защита' + '</span>'));
        if (CharacterSkills.buffs.items.max_damage > 0)body_cont.append($('<br /><span class="inventory_popup_bonus_skill">&nbsp;&nbsp;+' + CharacterSkills.buffs.items.min_damage + '-' + CharacterSkills.buffs.items.max_damage + ' ' + 'Урон' + '</span><br />'));
    }
    if (!item.sellable) {
        body_cont.append($('<br/><div class="inventory_popup_prices" /><span class="invPopup_notsellable">' + "Нельзя продать торговцу" + '</span></div><br/>'));
    }
    else if ((item.price || item.sell_price != 0) && this.options.show_sell_price) {
        var html = $('<div class="inventory_popup_prices" />');
        if (item.price != null) {
            html.append($('<span class="inventory_popup_trader_price_buy"><span class="invPopup_buyicon"/>&nbsp;$' + item.price * (this.options.traderCharge || 1) + '</span>'));
        }
        if (item.sell_price != 0) {
            html.append($('<span class="inventory_popup_trader_price_sell"><span class="invPopup_sellicon"/>&nbsp;$' + item.sell_price + '</span>'));
        }
        body_cont.append($('<br />'), html);
    }
    if (this.options.show_set && item.set) {
        var itemSet = west.storage.ItemSetManager.get(item.set);
        var cnt = itemSet.getWornItems().length;
        var setBonuses = itemSet.getMergedStages(cnt);
        setBonuses.sort(function (a, b) {
            var isX = function (b, x) {
                return (b.bonus ? b.bonus.type : b.type) == x ? (b.bonus ? b.bonus.name : b.name) : false;
            };
            var attrA = isX(a, 'attribute'), attrB = isX(b, 'attribute'), skillA = isX(a, 'skill'), skillB = isX(b, 'skill');
            if (attrA && attrB) {
                return attrA < attrB ? -1 : 1;
            }
            if (attrA)return -1;
            if (attrB)return 1;
            if (skillA && skillB)return 0;
            if (skillA)return -1;
            if (skillB)return 1;
            return 0;
        });
        if (setBonuses !== null && setBonuses.length > 0 && this.options.show_setboni) {
            body_cont.append($('<br /><br /><div class="item_set_bonus">' + '<span class="text_bold">' + "Бонус комплекта:" + '</span><br /><ul class="inventory_popup_bonus_skills" />'));
            for (var i = 0; i < setBonuses.length; i++) {
                $('.inventory_popup_bonus_skills', body_cont).append($('<li class="tw_green">' + set_bonusExtractor.getDesc(setBonuses[i]) + '</li>'));
            }
        }
        var set_cont = $('<ul class="inventory_popup_item_set_names"/>');
        itemSet.getItems().forEach(function (itemId) {
            var item = ItemManager.getByBaseId(itemId);
            set_cont.append($('<li class="' + (WearSet.hasItem(itemId) ? 'tw_green' : 'text_gray') + '">' + item.name + '</li>'));
        });
        body_cont.append($('<br /><div class="item_set_names" />' + '<span class="text_bold">' + itemSet.name + ':</span><br />'), set_cont);
    }
    if (this.options.show_reqs && (item.level || item.characterClass || item.characterSex || item.duelLevel)) {
        body_cont.append($('<br /><span class="inventory_popup_requirement_text">' + 'Необходимо:' + '&nbsp;<br/></span>'));
    }
    if (this.options.show_reqs && item.level) {
        var decrease = Character.itemLevelRequirementDecrease.all;
        for (var decType in Character.itemLevelRequirementDecrease) {
            if (item.type == decType) {
                decrease += Character.itemLevelRequirementDecrease[decType];
            }
        }
        var reqLevel = (item.level - decrease < 1) ? 1 : (item.level - decrease);
        $('.inventory_popup_requirement_text', body_cont).append($('<span class="inventory_popup_level' + (Character.level < reqLevel ? ' text_red' : '') + '">' +
            ((decrease > 0) ? "%1-й уровень (%2)" : "%1-й уровень").replace('%1', reqLevel).replace('%2', item.level) + '&nbsp;<br />' + '</span>'));
    }
    if (this.options.show_reqs && item.duelLevel) {
        $('.inventory_popup_requirement_text', body_cont).append($('<span class="inventory_popup_duel_level' + (Character.duelLevel < item.duelLevel ? ' text_red' : '') + '">' +
            s("- %1-й дуэльный разряд", item.duelLevel) + '&nbsp;<br />' + '</span>'));
    }
    if (this.options.show_reqs && item.characterClass) {
        var item_characterClass_title = {
            greenhorn: 'Чечако',
            duelist: 'Дуэлянт',
            adventurer: 'Авантюрист',
            worker: 'Трудяга',
            soldier: 'Солдат'
        };
        $('.inventory_popup_requirement_text', body_cont).append($('<span class="inventory_popup_character_class' + (Character.charClass != item.characterClass ? ' text_red' : '') + '">' + 'Персонаж:' + ' ' + item_characterClass_title[item.characterClass] + '<br /></span>'));
    }
    if (this.options.show_reqs && item.characterSex) {
        var greenhornInfo = Character.charClass == 'greenhorn' ? ' (' + 'выбор типа персонажа' + ')' : '';
        var item_characterSex_title = {male: "мужской", female: "женский"};
        $('.inventory_popup_requirement_text', body_cont).append($('<span class="inventory_popup_character_sex' + (Character.charSex != item.characterSex || Character.charClass == 'greenhorn' ? ' text_red' : '') + '">' + 'Пол:' + ' ' + item_characterSex_title[item.characterSex] + greenhornInfo + '<br/></span>'));
    }
    if (this.options.show_auctionable && item.auctionable) {
        foot_cont.append($('<br /><p class="inventory_popup_auctionable tw_green">' + 'Можно пустить с молотка' + '</p>'));
    }
    if (this.options.show_alreadyown) {
        var bagItem = Bag.getItemByItemId(item.item_id);
        var wearItem = Wear.wear[item.type];
        if (bagItem || (wearItem && wearItem.obj.item_id == item.item_id)) {
            var count = (bagItem != undefined ? bagItem.count : 0) + (wearItem != undefined && wearItem.obj.item_id == item.item_id ? 1 : 0);
            foot_cont.append($('br /><p class="inventory_alreadyown">' + 'Предметов в багаже:' + '(' + count + ')</p>'));
        }
    }
    if (!item_upgradeable) {
        foot_cont.append($('<br /><p class="inventory_popup_notupgradeable tw_red">' + 'Нельзя модифицировать' + '</p>'));
    }
    return popupTable.html();
};
ItemPopup.bindTo = function (el) {
    $(el).addMousePopup(this.popup);
};
ItemPopup.noComparison = function () {
    return !this.options.show_compare || !Wear.get(this.item_obj.type) || this.item_obj.type == 'recipe' || !wman.getById(Wear.uid) || Config.get('gui.main.compare');
}
ItemPopup.calcComparePosition = (function () {
    var compare_div, html, compare_div_height, compare_div_width;
    return function (css, clientX) {
        var item, newHtml, popup_div_width = css.width, window_height = Map.height;
        if (this.noComparison())return;
        if (!compare_div) {
            compare_div = $('#popup_div_compare');
        }
        item = Wear.get(this.item_obj.type);
        if (!item.tooltip)return;
        newHtml = item.tooltip.popup.getXHTML();
        if (newHtml != html) {
            compare_div.html(newHtml);
            $('.invPopup_body', compare_div).prepend($('<div style="color: #8b4513; text-align:center">' +
                'Сейчас надето' + '</div>'));
            html = newHtml;
            compare_div_height = compare_div.height();
            compare_div_width = compare_div.width();
        }
        if (clientX > Map.width / 2) {
            css.left = css.left - compare_div_width;
        } else {
            css.left = css.left + popup_div_width;
        }
        if (window_height - css.top < compare_div_height + 10)
            css.top = window_height - (compare_div_height + 10);
        compare_div.css({top: css.top, left: css.left});
    };
})();
ItemPopup.showDivCompare = function () {
    if (this.noComparison())return;
    $('#popup_div_compare').css('visibility', 'visible');
};
ItemPopup.hideDivCompare = function () {
    $('#popup_div_compare').css({visibility: 'hidden', top: 0, left: 0});
};
ItemPopup.updateTimers = function () {
    var $root = $('<div></div>').html(this.popup.getXHTML(true)), t = new ServerDate().getTime() / 1000, dt, changed;
    if (this.options.show_lifetime) {
        if (this.options.show_lifetime > 0) {
            $('.inventory_popup_lifetime', $root).text(s('Будет уничтожено через %1', (this.options.show_lifetime).formatDurationBuffWay()));
        } else {
            this.options.show_lifetime = false;
            $('.inventory_popup_lifetime', $root).remove();
        }
        changed = true;
    }
    if (this.options.show_cooldown) {
        dt = this.options.show_cooldown - t;
        if (dt > 0) {
            $('.inventory_popup_cooldown', $root).text(s('Повторное использование через: %1', dt.formatDurationBuffWay()));
        } else {
            $('.inventory_popup_cooldown', $root).remove();
            this.options.show_cooldown = false;
        }
        changed = true;
    }
    if (changed) {
        this.popup.setXHTML($root.html());
    }
};
ItemPopup.refresh = function () {
    if (this.refreshCount < ItemPopup.refreshCount) {
        this.popup.setXHTML(this.getXHTML());
        this.refreshCount = ItemPopup.refreshCount;
    } else if (this.next_refresh < new ServerDate().getTime()) {
        this.updateTimers();
        this.next_refresh = new ServerDate().getTime() + 1000;
    }
};
ItemPopup.refreshCount = 1;
ItemPopup.updateRefreshCount = function () {
    ItemPopup.refreshCount++;
};
ItemPopup.addChangeNotifier = function () {
    if (ItemPopup.registeredListener)return;
    EventHandler.listen(['character_level_up', 'item_buff_bonus_changed', 'item_set_bonus_changed'], ItemPopup.updateRefreshCount);
    ItemPopup.registeredListener = true;
};

west.define('west.notification.ToastNotification', west.gui.Component, {
    init: function (givenTitle, givenText, iconClass) {
        this.divMain = $('<div class="notification">'
            + '<div class="notification_bgr">'
            + "<div class='tw2gui_bg_tl'/>"
            + "<div class='tw2gui_bg_tr'/>"
            + "<div class='tw2gui_bg_bl'/>"
            + "<div class='tw2gui_bg_br'/>"
            + '</div>'
            + '<div class="tw2gui-iconset tw2gui-icon-abort notification_close" />'
            + '<div class="notification_container">'
            + '<div class="notification_header" />'
            + '<div class="notification_text" />'
            + '</div>'
            + "</div>");
        this.setIcon(iconClass).setTitle(givenTitle).setText(givenText);
    }, setIcon: function (iconClass) {
        var el = $(".notification_header", this.divMain);
        if (undefined !== this.iconClass)
            el.removeClass(this.iconClass);
        this.iconClass = iconClass;
        el.addClass(iconClass);
        return this;
    }, setTitle: function (title) {
        $('.notification_header', this.divMain).text(title);
        return this;
    }, setText: function (text) {
        $('.notification_text', this.divMain).text(text);
        return this;
    }, show: function () {
        var self = this, onClick = function () {
            self.hide();
        };
        $('#ui_notifications').append(this.divMain);
        $(this.divMain).unbind('click').click(onClick).animate({
            opacity: 'toggle',
            height: 'toggle'
        }, "slow").delay(10000).animate({opacity: 'toggle', height: 'toggle'}, "slow", onClick);
        return this;
    }, hide: function () {
        $(this.divMain).remove();
        return this;
    }
});
west.define('west.notification.ToastServerNotification', west.notification.ToastNotification, {
    init: function (message) {
        this.callParent('Объявление мира', message, 'server');
    }
});
west.define('west.notification.ToastOnlineNotification', west.notification.ToastNotification, {
    init: function (name) {
        this.callParent('Друг онлайн', s('%1 сейчас онлайн!', name), 'friend_online');
    }
});
;
(function ($) {
    Bag = {
        init_data: null,
        items_by_type: {},
        items_by_inv_id: {},
        items_by_id: {},
        items_by_base_id: {},
        items_upgradeable: [],
        loaded: false,
        loading: false,
        lastInvId: 0,
        shouldLoaded: false,
        itemCooldown: {},
        init: function (data) {
            this.init_data = data;
            this.addEventListeners();
            this.loadInitData();
        },
        addEventListeners: function () {
            if (!ItemManager.isLoaded() || !west.storage.ItemSetManager.isLoaded()) {
                EventHandler.listen('itemmanager_loaded', this.loadInitData, this);
                EventHandler.listen('itemsetmanager_loaded', this.loadInitData, this);
            }
            EventHandler.listen('inventory_changed', this.handleInventoryChange, this);
            EventHandler.listen('cooldown_changed', this.updateCooldowns, this);
            EventHandler.listen('item_lifetime_changed', function (itemId, lifetime) {
                Bag.getItemByItemId(itemId).setLifetime(lifetime, true);
            });
        },
        loadInitData: function () {
            if (!this.init_data || !ItemManager.isLoaded() || !west.storage.ItemSetManager.isLoaded()) {
                return EventHandler.ONE_TIME_EVENT;
            }
            Wear.loadInitData(this.init_data.wear);
            WearSet.setUpBonus(this.init_data.setBonuses);
            WearSet.setUpItems(this.init_data.setItems);
            this.addInv(this.init_data.bag, this.init_data.itemLifetime, this.init_data.itemCooldown);
            this.loaded = true;
            this.itemCooldown = this.init_data.itemCooldown;
            this.init_data = null;
            EventHandler.signal("inventory_loaded", null, true);
            return EventHandler.ONE_TIME_EVENT;
        },
        handleInventoryChange: function (from) {
            var that = this;
            if (this.loaded) {
                Ajax.remoteCall('inventory', 'inventory_changed', {inv_id: this.getLastInvId()}, function (data) {
                    if (data.changes != false) {
                        that.updateChanges(data.changes, from);
                        Wear.updateChanges(data.wear);
                    }
                });
            }
        },
        updateCooldowns: function () {
            var items = this.getItemsByType('yield'), i = items.length;
            while (i--) {
                items[i].showCooldown();
            }
        },
        updateChanges: function (changes, from) {
            this.handleChanges(changes, from);
            Crafting.updateResources();
        },
        addInv: function (inv, lifetimeData, cooldownData) {
            if (!$.isPlainObject(inv)) {
                return this;
            }
            var that = this;
            west.common.forEach(inv, function (invData) {
                var i = 0, l = invData.length, lifetime, cooldown;
                for (i; i < l; i++) {
                    lifetime = lifetimeData[invData[i].item_id] || null;
                    cooldown = cooldownData[invData[i].item_id] || null;
                    that.addItem(that.createBagItem(invData[i], lifetime, cooldown));
                }
            });
        },
        updateLastInvId: function (inv_id) {
            if (inv_id > this.lastInvId) {
                this.lastInvId = inv_id;
            }
        },
        getInventoryIds: function () {
            var ids = [];
            west.common.forEach(this.items_by_inv_id, function (item_id, inv_id) {
                ids.push(parseInt(inv_id));
            });
            ids.sort(function (a, b) {
                return a - b;
            });
            if (ids.length > Inventory.latestSize) {
                ids = ids.slice(-Inventory.latestSize);
            }
            return ids;
        },
        addItem: function (item, from) {
            var type = item.getType(), id = item.getId().toString(), base_id = id.slice(0, -3), inv_id = item.getInvId();
            this.items_by_type[type] = this.items_by_type[type] || [];
            this.items_by_base_id[base_id] = this.items_by_base_id[base_id] || [];
            this.items_by_id[id] = item;
            this.items_by_inv_id[inv_id] = id;
            this.items_by_type[type].push(id);
            this.items_by_base_id[base_id].push(id);
            this.items_by_base_id[base_id].sort(function (a, b) {
                return b - a;
            });
            if (item.isUpgradeable()) {
                this.items_upgradeable.push(id);
            }
            this.updateLastInvId(inv_id);
            EventHandler.signal('bag_updated_' + id, ['add']);
            if (from != "wear") {
                EventHandler.signal('bag_add', [id]);
                WestUi.showInventoryChanged("add", id, item.getCount());
            }
        },
        createBagItem: function (invData, lifetime, cooldown) {
            var invItem = new tw2widget.InventoryItem(ItemManager.get(invData.item_id)).setCount(invData.count).setInvId(invData.inv_id).setCharacter(Character);
            if (cooldown) {
                invItem.setCooldown(cooldown);
            }
            if (lifetime) {
                invItem.setLifetime(lifetime);
            }
            return invItem;
        },
        removeItem: function (data, from) {
            if (!$.isPlainObject(data)) {
                return this;
            }
            var that = this, id = data.item_id.toString(), item = this.getItemByItemId(id), action_type, count;
            if (!item) {
                return this;
            }
            if (item.count > data.count) {
                action_type = 'remove';
                count = item.count - data.count;
            } else {
                action_type = 'add';
                count = data.count - item.count;
            }
            delete this.items_by_inv_id[item.inv_id];
            if (0 === data.count) {
                if (item.divMain) {
                    item.divMain.remove();
                }
                if (item.isUpgradeable()) {
                    west.common.removeFromArray(this.getItemsUpgradeable(), id);
                }
                west.common.removeFromArray(this.getItemsIdsByType(item.getType()), id);
                west.common.removeFromArray(this.getItemsIdsByBaseItemId(item.getItemBaseId()), id);
                if (!this.getItemsIdsByBaseItemId(item.getItemBaseId()).length) {
                    delete this.items_by_base_id[item.getItemBaseId()];
                }
                delete this.items_by_id[id];
                EventHandler.signal('bag_updated_' + id, ['remove']);
            } else {
                item.setCount(data.count).setInvId(data.inv_id);
                that.updateLastInvId(data.inv_id);
                this.items_by_inv_id[data.inv_id] = id;
                EventHandler.signal('bag_updated_' + id, ['count_change']);
            }
            if (from != "wear") {
                if (0 === data.count) {
                    EventHandler.signal('bag_remove', [id]);
                }
                WestUi.showInventoryChanged(action_type, id, count);
            }
        },
        handleChanges: function (changes, from) {
            var i = 0, l = changes.length, item;
            for (i; i < l; i++) {
                item = this.getItemByItemId(changes[i].item_id);
                if (!item && changes[i].count > 0) {
                    this.addItem(this.createBagItem(changes[i]), from);
                } else {
                    this.removeItem(changes[i], from);
                }
            }
            Inventory.update();
        },
        getItemsIdsByBaseItemIds: function () {
            return this.items_by_base_id;
        },
        getItemsIdsByBaseItemId: function (base_id) {
            return this.getItemsIdsByBaseItemIds()[base_id] || [];
        },
        getItemsByBaseItemId: function (base_id) {
            var items = [], items_ids = this.getItemsIdsByBaseItemId(base_id), i = items_ids.length;
            while (i--) {
                items[i] = this.getItemByItemId(items_ids[i]);
            }
            return items;
        },
        getItemsIdsByType: function (type) {
            return this.items_by_type[type] || [];
        },
        getItemsByType: function (type) {
            var items = [], items_ids = this.getItemsIdsByType(type), i = items_ids.length;
            while (i--) {
                items[i] = this.getItemByItemId(items_ids[i]);
            }
            return items;
        },
        getItemCount: function (item_id) {
            var res = this.getItemByItemId(item_id);
            return res ? res.count : 0;
        },
        getItemByItemId: function (item_id) {
            return this.items_by_id[item_id.toString()];
        },
        getItemsByItemIds: function (itemIds) {
            if (!itemIds) {
                return this.items_by_id;
            }
            var i = 0, l = itemIds.length, items = [], item;
            for (i; i < l; i++) {
                item = this.getItemByItemId(itemIds[i]);
                if (item) {
                    items.push(item);
                }
            }
            return items;
        },
        getItemsUpgradeable: function () {
            return this.items_upgradeable;
        },
        hasItemsUpgradeable: function () {
            return !!this.getItemsUpgradeable().length;
        },
        getItemIdByInvId: function (inv_id) {
            return this.items_by_inv_id[inv_id];
        },
        getItemByInvId: function (inv_id) {
            return this.getItemByItemId(this.getItemIdByInvId(inv_id));
        },
        getLastInvId: function () {
            return this.lastInvId;
        },
        search: function (text) {
            if (!Bag.loaded) {
                EventHandler.listen('inventory_loaded', function () {
                    Inventory.showSearchResult(res);
                    return EventHandler.ONE_TIME_EVENT;
                });
                return;
            }
            var predefinedFilters = ['useable', 'recipe', 'questitem', 'setitems', 'upgradeable'];
            var myrxp = new RegExp('^.*' + text + '(.*)$', 'i');
            var items = this.getItemsByItemIds(), res = [];
            west.common.forEach(items, function (item, item_id) {
                var obj = item.obj;
                switch (text) {
                    case"useable":
                        if (obj.usetype != 'none' && obj.profession_id == undefined) {
                            res.push(item);
                        }
                        break;
                    case"recipe":
                        if (obj.profession_id != undefined) {
                            res.push(item);
                        }
                        break;
                    case"questitem":
                        if (obj.quest) {
                            res.push(item);
                        }
                        break;
                    case"setitems":
                        if (obj.set != null) {
                            res.push(item);
                        }
                        break;
                    default:
                        if (myrxp.test(obj.name) || (obj.set != null && myrxp.test(west.storage.ItemSetManager.get(obj.set).name)) || Bag.searchAttrib(obj.bonus, myrxp) || text == obj.level || (obj.profession != undefined && myrxp.test(obj.profession))) {
                            res.push(item);
                        }
                        break;
                }
            });
            return res;
        },
        searchAttrib: function (bonuses, regex) {
            for (var k in bonuses.skills) {
                if (CharacterSkills.keyNames[k] != undefined && regex.test(CharacterSkills.keyNames[k]))return true;
            }
            for (var x in bonuses.attributes) {
                if (CharacterSkills.keyNames[x] != undefined && regex.test(CharacterSkills.keyNames[x]))return true;
            }
            return false;
        },
        searchBest: function (skills, jobId, onlyWearable) {
            if (!Bag.loaded) {
                EventHandler.listen('inventory_loaded', function () {
                    Bag.searchBest(skills, jobId, onlyWearable);
                    return EventHandler.ONE_TIME_EVENT;
                });
                return;
            }
            var set = west.item.Calculator.getBestSet(skills, jobId), items = set && set.getItems() || [], invItems = Bag.getItemsByItemIds(items), result = [], i, invItem, wearItem;
            for (i = 0; i < invItems.length; i++) {
                invItem = invItems[i];
                wearItem = Wear.get(invItem.getType());
                if (!wearItem || (wearItem && (wearItem.getItemBaseId() !== invItem.getItemBaseId() || wearItem.getItemLevel() < invItem.getItemLevel()))) {
                    result.push(invItem);
                }
            }
            Inventory.showSearchResult(result);
        },
        searchBySkill: function (skill) {
            var skillObj = CharacterSkills.getSkill(skill);
            if (!(skillObj instanceof Skill))return;
            var skillName = skillObj.name;
            var attrName = CharacterSkills.getAttribute(skillObj.getAttrKey()).name;
            Bag.search(skillName + '|' + attrName);
        }
    };
})(jQuery);

west.define('west.job.Job', null, {
    important: false, init: function (data) {
        this.description = data.description;
        this.duration = data.duration;
        this.energy = data.energy;
        this.experience = data.experience;
        this.groupid = data.groupid;
        this.id = data.id;
        this.luck = data.luck;
        this.malus = data.malus;
        this.name = data.name;
        this.randomyields = data.randomyields;
        this.shortname = data.shortname;
        this.skills = data.skills;
        this.value = data.value;
        this.yields = $.isArray(data.yields) ? {} : data.yields;
        this.level = data.level;
    }, calcSkillPoints: function () {
        var i, p = 0;
        for (i in this.skills) {
            if (!this.skills.hasOwnProperty(i))continue;
            p += this.skills[i] * CharacterSkills.getSkill(i).getPointsWithBonus();
        }
        return p;
    }, calcJobPoints: function () {
        return this.calcSkillPoints() + WearSet.getWorkPointAddition(this.id);
    }, canDo: function () {
        if (LinearQuestHandler.hasTutorialQuest()) {
            return Character.level >= this.level;
        } else {
            return Character.level >= this.level || this.malus < this.calcJobPoints();
        }
    }, dropsYield: function (id) {
        return this.yields && this.yields.hasOwnProperty(id);
    }, setImportant: function (important) {
        this.important = important;
        EventHandler.signal('job-importance-changed', [this]);
    }, isNew: function (skipLevelCheck) {
        if (!skipLevelCheck && this.level > Character.level)return false;
        return $.inArray(this.id, Config.get('jobs.seen')) === -1;
    }, setSeen: function () {
        var conf;
        if (this.isNew(true)) {
            conf = Config.get('jobs.seen');
            Config.set('jobs.seen', conf ? [].concat(conf, this.id) : [this.id]);
            EventHandler.signal('job-seen', [this]);
        }
        return this;
    }
});
west.define('west.job.Build', west.job.Job, {
    init: function (data) {
        if (data == undefined)data = {id: 1000, skills: {'build': 3, 'leadership': 1, 'repair': 1}};
        this.callParent(data);
    }, calcJobPoints: function () {
        var base = this.calcSkillPoints();
        if (Character.charClass === 'worker')
            base = Math.floor(base * (Premium.hasBonus('character') ? 1.1 : 1.05));
        return base + WearSet.getWorkPointAddition(this.id);
    }
});
var JobList = function () {
    var jobsByGroup = {}, jobsById = {}, jobDurations = {};
    var addToGroup = function (job) {
        if (!jobsByGroup[job.groupid])jobsByGroup[job.groupid] = [];
        jobsByGroup[job.groupid].push(job);
    };
    var addToJobs = function (job) {
        jobsById[job.id] = job;
    };
    var addJob = function (data) {
        var job = new west.job.Job(data);
        addToGroup(job);
        addToJobs(job);
    };
    return {
        getJobsByGroupId: function (groupId) {
            return jobsByGroup[groupId];
        }, getJobById: function (id) {
            return jobsById[id];
        }, getSortedJobs: function (sortBy, basis, orderBy) {
            var resArr = [];
            for (var k in jobsById) {
                if (jobsById.hasOwnProperty(k)) {
                    resArr.push(jobsById[k]);
                }
            }
            var getterFunc = function (a) {
                if (basis)
                    return a.basis[basis][sortBy]; else
                    return a[sortBy];
            };
            resArr.sort(Sort.create(orderBy, getterFunc));
            return resArr;
        }, getJobsByLevel: function (level) {
            var foundJobs = [];
            for (var k in jobsById) {
                if (jobsById[k].level === level)
                    foundJobs.push(jobsById[k]);
            }
            return foundJobs;
        }, getDurations: function () {
            return jobDurations;
        }, init: function (data, durs) {
            jobsByGroup = {};
            jobsById = {};
            jobDurations = durs;
            for (var i in data) {
                if (!data.hasOwnProperty(i))continue;
                addJob(data[i]);
            }
        }, byItemId: function (itemId) {
            var id, jobs = [];
            for (id in jobsById) {
                if (jobsById[id].dropsYield(itemId)) {
                    jobs.push(id);
                }
            }
            return jobs;
        }, setImportant: function (jobs) {
            for (var id in jobs) {
                jobsById[id].setImportant(jobs[id]);
            }
        }, hasImportantJob: function (groupId) {
            var i = 0, jobs = jobsByGroup[groupId], len = jobs.length;
            for (; i < len; i++) {
                if (jobs[i].important)return true;
            }
            return false;
        }, hasNewJob: function (groupId) {
            var i = 0, jobs = groupId ? jobsByGroup[groupId] : jobsById;
            for (i in jobs) {
                if (!jobs.hasOwnProperty(i))continue;
                if (jobs[i].isNew())return true;
            }
            return false;
        }, getJobsByLevel: function (level) {
            var jobs = [];
            for (var k in jobsById) {
                if (jobsById.hasOwnProperty(k) && jobsById[k].level === level) {
                    jobs.push(jobsById[k]);
                }
            }
            return jobs;
        }
    };
}();
EventHandler.listen(['quest_tracking_changed', 'quest_solved', 'quest_update', 'quest_removed', 'quest_added', 'linearquest_added', 'linearquest_removed', 'linearquest_update'], function (quest) {
    var i, j, iLen, jLen, req, id, type, jobIds, reqs = quest.requirements, changes = {};
    var checkQuest = function (quest) {
        return quest.accepted && !quest.solved && quest.watched;
    };
    var checkOpenQuests = function (jobId) {
        var questId, quest, isRequired = false, reqIdx, req;
        for (questId in QuestLog.quests) {
            quest = QuestLog.quests[questId];
            if (isRequired)break;
            if (!checkQuest(quest))continue;
            for (reqIdx = 0; reqIdx < quest.requirements.length; reqIdx++) {
                if (isRequired)break;
                req = quest.requirements[reqIdx];
                isRequired = !req.solved && req.jsInfo && ((req.jsInfo.type == 'inventory_changed' && JobList.byItemId(req.jsInfo.id).indexOf(jobId) !== -1) || (req.jsInfo.type == 'task-finish-job' && jobId == req.jsInfo.id));
            }
        }
        return isRequired;
    };
    for (i = 0, iLen = reqs.length; i < iLen; i++) {
        req = reqs[i];
        if (!req.jsInfo)continue;
        id = req.jsInfo.id;
        type = req.jsInfo.type;
        switch (type) {
            case'inventory_changed':
                jobIds = JobList.byItemId(id);
                break;
            case'task-finish-job':
                jobIds = [id];
                break;
            default:
                jobIds = [];
                break;
        }
        if (jLen = jobIds.length) {
            for (j = 0; j < jLen; j++) {
                if (!changes.hasOwnProperty(jobIds[j]) || changes[jobIds[j]] === false) {
                    changes[jobIds[j]] = (checkQuest(quest) && !req.solved) || checkOpenQuests(jobIds[j]);
                }
            }
        }
    }
    JobList.setImportant(changes);
});

(function ($) {
    var listeners = {}, values = {}, dirty = {}, timer = false, requestcnt = 0, defaults = {}, eventprefix = "configchanged_", fireEvent = function (key) {
        EventHandler.signal(eventprefix + key, [Config.get(key)]);
    }, ignore = ['tracking.achv'];
    Config = {};
    Config.init = function (data) {
        this.setDefaultValue("hotkeys.enabled", true);
        this.setDefaultValue("gametips.enabled", true);
        this.setDefaultValue("gamehints.enabled", true);
        this.setDefaultValue("gui.animations", true);
        this.setDefaultValue("gui.main.animations", false);
        this.setDefaultValue("gui.main.compare", false);
        this.setDefaultValue("window.offset", true);
        this.setDefaultValue("window.taskbar", true);
        this.setDefaultValue("chat.background", "1D1C1C");
        this.setDefaultValue("chat.fade", 100);
        this.setDefaultValue("chat.opacity", 80);
        this.setDefaultValue("duel.viewtype", 1);
        this.setDefaultValue("marker.minimap", 2);
        this.setDefaultValue("questtracker.config", {});
        this.setDefaultValue("questtracker.quests", {});
        this.setDefaultValue("questtracker.enabled", true);
        this.setDefaultValue("notebook.enabled", 0);
        this.setDefaultValue("tracking.achv", false);
        this.setDefaultValue("mpi.help.domination", false);
        for (var key in data) {
            if (!data.hasOwnProperty(key))
                continue;
            try {
                if (key == 'tracking.achv') {
                    Config.set(key, data[key], true);
                } else {
                    Config.set(key, JSON.parse(data[key]), true);
                }
            } catch (e) {
                if (console && console.log)
                    console.log(e);
            }
        }
    };
    Config.set = function (key, value, nosave) {
        var i, newValue = {};
        if (values[key] === value)
            return this;
        if (Array.isArray(value) && defaults[key] !== undefined && typeof defaults[key] === 'object') {
            for (i = 0; i < value.length; i++) {
                newValue[i] = value[i];
            }
            value = newValue;
        }
        values[key] = value;
        dirty[key] = value;
        fireEvent(key);
        if (!nosave) {
            if (false !== timer)
                window.clearTimeout(timer);
            timer = window.setTimeout(function () {
                timer = false;
                var cnt = ++requestcnt;
                ignore.forEach(function (key) {
                    delete dirty[key];
                });
                Ajax.remoteCall("profile", "set_config", {data: JSON.stringify(dirty)}, function (resp) {
                    if (resp.error)
                        return new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                    if (cnt == requestcnt)
                        dirty = {};
                });
            }, 5000);
        }
        return this;
    };
    Config.reset = function (key) {
        Config.set(key, defaults[key]);
        return defaults[key];
    };
    Config.setDefaultValue = function (key, value) {
        if (defaults[key] === value)
            return;
        defaults[key] = value;
        fireEvent(key);
    };
    Config.get = function (key) {
        return undefined !== values[key] ? values[key] : defaults[key];
    };
    Config.addChangeListener = function (key, callback) {
        EventHandler.listen(eventprefix + key, callback);
    };
    Config.removeChangeListener = function (key, callback) {
        EventHandler.unlisten(eventprefix + key, callback);
    };
})(jQuery);

function notify_client_error(e) {
    Ajax.request({url: 'logjserr.php', data: {errmsg: e}});
}
ErrorLog = {
    list: [], log: function () {
        var d = [new Date()], i;
        for (i = 0; i < arguments.length; i += 1)d.push(arguments[i]);
        ErrorLog.list.push(d);
    }, showLog: function () {
        if (ErrorLog.window)document.body.removeChild(ErrorLog.window);
        var d = document.createElement("div");
        var h = document.createElement("div");
        h.innerHTML = "Error Log (click here to close)";
        d.appendChild(h);
        var t = document.createElement("table");
        var i, l = ErrorLog.list, j, row;
        var style = function (d) {
            var s = function (k, v) {
                d.style[k] = v;
                return s;
            };
            return s
        };
        style(d)("position", "absolute")("left", "50%")("width", "800px")("height", "600px")
        ("background", "#eec")("border", "1px solid red")("overflow", "scroll")
        ("marginLeft", "-400px")("top", "20px")("zIndex", "100000");
        style(t)("border", "1px solid black");
        style(h)("borderBottom", "1px solid black")("fontSize", "16pt")
        ("fontWeight", "bold")("marginBottom", "5px");
        t.border = "1";
        for (i = 0; i < l.length; i += 1) {
            row = t.insertRow(i);
            for (j = 0; j < l[i].length; j += 1)
                row.insertCell(j).innerHTML = l[i][j];
        }
        d.appendChild(t);
        h.onclick = function () {
            document.body.removeChild(d);
            ErrorLog.window = undefined;
        };
        document.body.appendChild(d);
        ErrorLog.window = d;
    }
}

var Premium = {
    price: {},
    buyable: {},
    bonusListener: {},
    endTimes: {},
    premiumWorld: false,
    bonusTitles: {},
    longtimers: {},
    init: function (data) {
        var bonusKey, bonus;
        for (bonusKey in data.premiumBoni) {
            bonus = data.premiumBoni[bonusKey];
            Premium.bonusTitles[bonusKey] = bonus.title;
            Premium.buyable[bonusKey] = bonus.buyable;
            Premium.price[bonusKey] = bonus.price;
            if (!bonus.instant)
                Premium.longtimers[bonusKey] = true;
            if (bonus.expiration)
                Premium.updateTime(bonusKey, bonus.expiration)
        }
        window.setInterval(Premium.checkEndTimes, 60 * 1000);
        EventHandler.signal('premium_changed');
    },
    checkEndTimes: function () {
        var changed = false, bonus, end;
        for (bonus in Premium.endTimes) {
            end = new Date(Premium.endTimes[bonus] * 1000);
            if (end.getTime() < new ServerDate().getTime()) {
                delete Premium.endTimes[bonus];
                changed = true;
            }
        }
        if (changed)EventHandler.signal('premium_changed');
    },
    hasBonus: function (bonus) {
        var now = new ServerDate();
        if (undefined !== Premium.endTimes["vip"] && Premium.endTimes["vip"] * 1000 > now.getTime()) {
            if ($.inArray(bonus, ["automation", "greenhorn", "money", "regen", "character"]) >= 0) {
                return true;
            }
        }
        return undefined !== Premium.endTimes[bonus] && Premium.endTimes[bonus] * 1000 > now.getTime();
    },
    updateTime: function (bonus, time) {
        Premium.endTimes[bonus] = time;
    },
    setBonusListener: function (key, func) {
        Premium.bonusListener[key] = func;
        return Premium;
    },
    setPrice: function (key, price) {
        Premium.price[key] = price;
    },
    getPrice: function (key, def) {
        return Premium.price[key.match(/^\S*/)[0]] || def;
    },
    updatePoints: function (points) {
        if (points !== undefined) {
            Character.setNuggets(points);
        }
    },
    getPoints: function () {
        return parseInt(Character.getNuggets(false));
    },
    confirmUse: function (bonus, title, description, price, payload, callback, cancelCallback, buttons) {
        if (price === undefined || price === null)price = Premium.getPrice(bonus);
        var html = "<div>" + description + '</div><div class="txcenter bold" style="margin-top:10px">' + "Цена:" + " " + price + " <img src='https://westrus.innogamescdn.com/images/nuggets.png' />";
        var dialog = new west.gui.Dialog(title, html).addButton('ok', function () {
            Premium.actionUse(bonus, payload, callback);
        }).addButton('cancel', cancelCallback).setIcon(west.gui.Dialog.SYS_QUESTION);
        if (buttons) {
            for (var text in buttons) {
                if (!buttons.hasOwnProperty(text))continue;
                if (buttons[text]instanceof west.gui.Button) {
                    text = buttons[text];
                    text.context = dialog;
                }
                dialog.addButton(text, buttons[text]);
            }
        }
        dialog.show();
    },
    actionUse: function (bonus, payload, callback) {
        Ajax.remoteCall('premium', 'use', {bonus: bonus, payload: JSON.stringify(payload)}, function (data) {
            if (data.buy) {
                Premium.useOrBuyPremium(null, 'Преимущества премиума', 'У тебя не хватает золотых самородков', null, null, null, 'premium_notenoughcurrency');
                return;
            }
            if (data.msg)new UserMessage(data.msg, (!data.error) ? UserMessage.TYPE_SUCCESS : UserMessage.TYPE_ERROR).show();
            if (data.error)return;
            Premium.updatePoints(data.points);
            var bonuskey = bonus.match(/\S+/)[0];
            Premium.updateTime(bonus, data.timestamp);
            PremiumWindow.updateBonus(bonus, data);
            if (Premium.bonusListener[bonuskey])
                Premium.bonusListener[bonuskey](bonuskey, bonus, data.activationdata);
            if (callback)
                callback(data);
            EventHandler.signal('premium_changed', [bonus]);
        });
        return true;
    },
    popup: function (url, width, height) {
        var w = window.open(url, "popup", "width=" + width + ",height=" + height + ",resizable=yes");
        w.focus();
    },
    checkForPremium: function (bonus, callback) {
        if (!bonus)return false;
        if (!Premium.buyable[bonus])return false;
        if (bonus == "automation" && !Premium.hasBonus('automation') && TaskQueue.queue.length >= TaskQueue.limit.normal) {
            Premium.checkForAutomationPremium(callback);
            return true;
        }
        if (bonus == "energy") {
            Premium.checkForEnergyPremium(callback);
            return true;
        }
        return false;
    },
    checkForEnergyPremium: function (callback, failCallback) {
        var bonus = "energy"
        var costs = Premium.getPrice(bonus);
        var title = "Валишься с ног от усталости?";
        var desc = s("За %1 самородков ты можешь полностью восстановить свою энергию.", costs);
        Premium.useOrBuyPremium(bonus, title, desc, costs, callback, failCallback, 'premium_notenoughcurrency');
    },
    checkForAutomationPremium: function (callback, failCallback) {
        var bonus = "automation";
        if (Premium.hasBonus(bonus))return;
        var costs = Premium.getPrice(bonus);
        var title = "Больше работ?";
        var desc = s("За %1 самородков ты сможешь в течение 14 дней ставить в очередь <b>девять заданий</b>. Кроме того, ты сможешь сохранить больше комплектов снаряжения.", costs);
        Premium.useOrBuyPremium(bonus, title, desc, costs, callback, failCallback, 'premium_notenoughcurrency');
    },
    useOrBuyPremium: function (bonus, title, desc, costs, callback, failCallback, origin) {
        if (bonus != null && Premium.getPoints() >= costs)
            Premium.confirmUse(bonus, title, desc + "<br /><br />" + "Точно активировать эту функцию?", costs, null, callback, failCallback); else {
            Premium.buyPremium(title, desc, origin);
            failCallback && failCallback();
        }
    },
    checkForBuy: function (points) {
        var r = Premium.getPoints() < points;
        if (r)
            Premium.buyPremium("У тебя недостаточно золотых самородков", "У тебя недостаточно золотых самородков для активации этой функции.", 'premium_notenoughcurrency');
        return !r;
    },
    buyPremium: function (title, desc, origin) {
        new west.gui.Dialog(title).addButton('ok', function () {
            west.window.premium.open(origin);
        }).addButton('cancel').setText('<div class="txcenter">' + desc + '</div><div class="txcenter bold" style="margin-top:10px">' + "<img src='https://westrus.innogamescdn.com/images/nuggets.png' /> " + "Хочешь купить самородки?" + "</div>").show();
    },
    showEnergy: function () {
        if (!Premium.buyable.energy)
            return;
        Premium.confirmUse('energy', 'Восстановить энергию'.escapeHTML(), "Точно восстановить энергию?".escapeHTML(), Premium.price.energy);
    },
    showDeposit: function () {
        if (!Premium.buyable.bankpayin)
            return;
        Premium.confirmUse('bankpayin', "Банковский взнос", "Этот премиум позволяет без комиссии класть наличные на счёт, независимо от расстояния до банка.", Premium.price.bankpayin);
    }
};
Premium.setBonusListener('regen', function (bonuskey, bonus, data) {
    Character.maxEnergy = data.max_energy;
    Character.setEnergy(data.energy);
}).setBonusListener('energy', function () {
    Character.setEnergy(Character.maxEnergy)
}).setBonusListener('automation', function () {
}).setBonusListener('buyskills', function () {
}).setBonusListener('bankpayin', function () {
    var total = Character.getCapital();
    Character.setDeposit(total);
    Character.setMoney(0);
}).setBonusListener('expressdelivery', function (bonuskey, bonus, data) {
    Trader.handleBuyResponse(data);
}).setBonusListener('expresssell', function (bonuskey, bonus, data) {
}).setBonusListener('halvewaytime', function (bonuskey, bonus, data) {
    TaskQueue.init(data);
}).setBonusListener('buyproduct', function (bonuskey, bonus, data) {
    EventHandler.signal('inventory_changed');
}).setBonusListener('worldpremium', function (bonuskey, bonus, data) {
    $('fadepremium').remove();
}).setBonusListener('marketdelivery', function (bonuskey, bonus, data) {
    data.error = data.error[1];
    MarketWindow.handleFetchData(data, data);
}).setBonusListener('reset_avatar', function (bonuskey, bonus, data) {
}).setBonusListener('buy_upshop_item', function (bonuskey, bonus, data) {
})

var TaskFactory = function (taskData) {
    var task;
    switch (taskData.type) {
        case'job':
            task = new TaskJob(taskData.data.job_id).setData(taskData);
            break;
        case'walk':
            task = new TaskWalk().setData(taskData);
            break;
        case'sleep':
            task = new TaskSleep().setData(taskData);
            break;
        case'pray':
            task = new TaskPray().setData(taskData);
            break;
        case'found':
            task = new TaskFound().setData(taskData);
            break;
        case'refound':
            task = new TaskRefound().setData(taskData);
            break;
        case'duel':
            task = new TaskDuel().setData(taskData);
            break;
        case'build':
            task = new TaskBuild().setData(taskData);
            break;
        case'fortfound':
            task = new TaskFortFound().setData(taskData);
            break;
        case'fortbuild':
            task = new TaskFortBuild().setData(taskData);
            break;
        case'fortsleep':
            task = new TaskFortSleep().setData(taskData);
            break;
        case'buildfair':
            task = new TaskBuildFair().setData(taskData);
            break;
        case'tentsleep':
            task = new TaskTentSleep().setData(taskData);
            break;
        default:
            window.DEBUG && console.log("unknown task type: ", taskData.type, taskData);
            break;
    }
    return task;
};
var Task = function (type, post) {
    this.type = type;
    this.post = post;
    this.post.taskType = type;
    this.data = {};
    this.wayData = {};
    this.centerable = true;
    this.queueId = 0;
    this.queuePos = undefined;
};
Task.prototype.getDuration = function (withWayTime) {
    if (!this.data.date_done)return 0;
    return ((this.data.date_done - this.data.date_start) / 1000) + ((withWayTime) ? this.getWayDur() : 0);
};
Task.prototype.getEndDate = function () {
    if (!this.data.date_done)return new Date();
    return new Date(this.data.date_done);
};
Task.prototype.getStartDate = function () {
    if (!this.data.date_start)return new Date();
    return new Date(this.data.date_start);
};
Task.prototype.getWayDur = function () {
    if (!this.wayData.date_done)return 0;
    return (this.wayData.date_done - this.wayData.date_start) / 1000;
};
Task.prototype.getWayEndDate = function () {
    if (!this.wayData.date_done)return new Date();
    return new Date(this.wayData.date_done);
};
Task.prototype.getWayStartDate = function () {
    if (!this.wayData.date_start)return new Date();
    return new Date(this.wayData.date_start);
};
Task.prototype.isArrived = function (now) {
    if (!this.wayData || !this.wayData.date_done)return true;
    if (this.wayData.date_done <= now * 1000)return true;
    return false;
};
Task.prototype.getCoords = function () {
    return {'x': this.data.x, 'y': this.data.y};
};
Task.prototype.cancelled = function (extra) {
    if (this.onCancel)this.onCancel(extra);
    return this;
};
Task.prototype.finished = function () {
    if (this.onFinish)this.onFinish();
    return this;
};
Task.prototype.setData = function (taskData) {
    this.queueId = taskData.queue_id;
    this.data.date_start = taskData.date_start * 1000;
    this.data.date_done = taskData.date_done * 1000;
    var data = (taskData.data_obj) ? taskData.data_obj : taskData.data;
    if (data.wayData)this.setWayData(data.wayData);
    this.update(data);
    return this;
};
Task.prototype.setWayData = function (wayData) {
    var data = (wayData.data_obj) ? wayData.data_obj : wayData.data;
    this.wayData.queueId = wayData.queue_id;
    this.wayData.date_start = wayData.date_start * 1000;
    this.wayData.date_done = wayData.date_done * 1000;
    this.wayData.x = data.coords.x;
    this.wayData.y = data.coords.y;
};

var TaskJob = function (jobId, x, y, duration) {
    var job = new Task('job', {'jobId': jobId, 'x': x, 'y': y, 'duration': duration});
    job.data = {'job': JobList.getJobById(jobId)};
    job.data.x = x;
    job.data.y = y;
    job.data.job_points = 0;
    job.data.duration = duration;
    job.getIcon = function () {
        return s('https://westrus.innogamescdn.com/images/jobs/%1.png', this.data.job.shortname);
    };
    job.getTitle = function () {
        return s('Ты на работе: %1', '<b>' + this.data.job.name.escapeHTML() + '</b><br />')
            + s('Время работы: %1', '<b>' + this.data.duration.getTime2EndToken() + '</b><br />');
    };
    job.onIconClick = function () {
        JobWindow.open(this.data.job.id, this.data.x, this.data.y);
    };
    job.update = function (taskData) {
        this.data.x = taskData.coords.x;
        this.data.y = taskData.coords.y;
        this.data.job_points = taskData.job_points - 1;
        this.data.duration = this.getDuration();
    };
    job.onCancel = function (extra) {
        if (extra.money)Character.setMoney(extra.money);
        if (extra.energy)Character.setEnergy(extra.energy);
    };
    job.onFinish = function () {
        EventHandler.signal('inventory_changed');
        EventHandler.signal('jobmotivation_change', [job.data]);
    };
    return job;
};
var TaskWalk = function (unitId, type) {
    var walk = new Task('walk', {'unitId': unitId, 'type': type});
    walk.data.title = '';
    walk.data.type = type;
    walk.getIcon = function () {
        return 'https://westrus.innogamescdn.com/images/jobs/walk.png';
    };
    walk.getTitle = function () {
        return s('Ты в пути: %1', '<b>' + this.data.title + '</b>');
    };
    walk.onIconClick = function () {
        switch (this.data.type) {
            case'fort':
                FortWindow.open(undefined, this.data.x, this.data.y);
                break;
            case'town':
                TownWindow.open(this.data.x, this.data.y);
                break;
        }
    };
    walk.update = function (data) {
        this.data.x = data.coords.x;
        this.data.y = data.coords.y;
        this.data.title = data.title == null ? '' : data.title.escapeHTML();
        this.data.type = data.type || '';
    };
    return walk;
};
var TaskSleep = function (townId, room) {
    var sleep = new Task('sleep', {'town_id': townId, 'room': room});
    sleep.data.town_name = '';
    sleep.data.room = room;
    sleep.data.townId = townId;
    sleep.getIcon = function () {
        var rooms = ['cubby', 'bedroom', 'hotel_room', 'apartment', 'luxurious_apartment'];
        var roomId = $.inArray(this.data.room, rooms);
        if (roomId === -1)roomId = 0;
        return 'https://westrus.innogamescdn.com/images/jobs/sleep/sleep' + roomId + '.png';
    };
    sleep.getTitle = function () {
        return s('Ты спишь в: %1', '<b>' + this.data.town_name.escapeHTML() + '</b>');
    };
    sleep.onIconClick = function () {
        HotelWindow.open(this.data.townId);
    };
    sleep.update = function (data) {
        this.data.x = data.coords.x;
        this.data.y = data.coords.y;
        this.data.town_name = data.town_name;
        this.data.townId = data.town_id;
        this.data.room = data.room;
    };
    sleep.onCancel = function (extra) {
        if (undefined !== extra.energy)Character.setEnergy(extra.energy);
    };
    return sleep;
};
var TaskPray = function (townId) {
    var pray = new Task('pray', {'town_id': townId});
    pray.data.town_name = '';
    pray.data.bonus = 0;
    pray.data.townId = townId;
    pray.getIcon = function () {
        return 'https://westrus.innogamescdn.com/images/jobs/pray.png';
    };
    pray.onIconClick = function () {
        ChurchWindow.open(this.data.townId);
    };
    pray.getTitle = function () {
        return s('Ты молишься в: %1', '<b>' + this.data.town_name + '</b>') + '<br />'
            + s('Бонус: +%1 к молитве', '<b>' + this.data.bonus + '</b>');
    };
    pray.update = function (data) {
        this.data.x = data.coords.x;
        this.data.y = data.coords.y;
        this.data.town_name = data.town_name.escapeHTML();
        this.data.townId = data.town_id;
        this.data.bonus = data.bonus;
    };
    return pray;
};
var TaskFound = function (x, y, name) {
    var found = new Task('found', {'x': x, 'y': y, 'town_name': name});
    found.data.x = 0;
    found.data.y = 0;
    found.data.townName = name;
    found.getIcon = function () {
        return 'https://westrus.innogamescdn.com/images/jobs/found.png';
    };
    found.getTitle = function () {
        return s('Ты строишь город: %1', '<b>' + this.data.townName + '</b>');
    };
    found.onIconClick = function () {
        return Map.center(this.data.x, this.data.y);
    };
    found.update = function (data) {
        this.data.x = data.coords.x;
        this.data.y = data.coords.y;
        this.data.townName = data.townName;
        if (undefined !== data.money)Character.setMoney(data.money);
        if (undefined !== data.deposit)Character.setDeposit(data.deposit);
    };
    found.onCancel = function (extra) {
        if (undefined !== extra.money)Character.setMoney(extra.money);
        if (undefined !== extra.deposit)Character.setDeposit(extra.deposit);
    };
    return found;
};
var TaskRefound = function (x, y, name) {
    var found = new TaskFound(x, y, name);
    found.type = 'refound';
    found.getTitle = function () {
        return s('Ты занимаешь покинутый город: %1', '<b>' + this.data.townName + '</b>');
    };
    return found;
};
var TaskDuel = function (playerId) {
    var duel = new Task('duel', {'player_id': playerId});
    duel.data.x = 0;
    duel.data.y = 0;
    duel.data.playerId = playerId;
    duel.getIcon = function () {
        return 'https://westrus.innogamescdn.com/images/jobs/duell.png';
    };
    duel.getTitle = function () {
        return s('Ты проводишь дуэль с игроком: %1', '<b>' + this.data.title + '</b>');
    };
    duel.onIconClick = function () {
        PlayerProfileWindow.open(this.data.playerId);
    };
    duel.update = function (data) {
        this.data.x = data.coords.x;
        this.data.y = data.coords.y;
        this.data.title = data.title;
        this.data.playerId = data.duel_partner_id;
    };
    duel.onFinish = function () {
        EventHandler.signal('duel_finished');
    };
    return duel;
};
var TaskBuild = function (x, y, building, duration, deposit) {
    var build = new Task('build', {'x': x, 'y': y, 'building_key': building, 'duration': duration, 'deposit': deposit});
    build.data.x = x;
    build.data.y = y;
    build.getTitle = function () {
        return s('Ты строишь здание: %1', '<b>' + this.data.title + '</b>') + '<br />'
            + s('Очки строительства: %1', '<b>' + this.data.buildPoints + '</b>') + '<br />'
            + (this.data.townDeposit ? 'Строительство оплачено из городской казны' : 'Строительство на свои кровные');
    };
    build.getIcon = function () {
        return 'https://westrus.innogamescdn.com/images/jobs/build.png';
    };
    build.onIconClick = function () {
        BuildWindow.open(Character.homeTown.town_id, this.data.x, this.data.y, this.data.building, false);
    };
    build.update = function (data) {
        this.data.x = Character.homeTown.x;
        this.data.y = Character.homeTown.y;
        this.data.title = data.title;
        this.data.building = data.building_key;
        this.data.buildPoints = data.build_points;
        this.data.townDeposit = data.from_town_deposit;
        if (!this.data.townDeposit) {
            if (undefined !== data.char_money)Character.setMoney(data.char_money);
            if (undefined !== data.char_deposit)Character.setDeposit(data.char_deposit);
        }
    };
    build.onCancel = function (extra) {
        if (undefined !== extra.money)Character.setMoney(extra.money);
    };
    return build;
};
var TaskFortFound = function (x, y, name) {
    var found = new Task('fortfound', {'x': x, 'y': y, 'fort_name': name});
    found.data.x = x || 0;
    found.data.y = y || 0;
    found.data.fortType = 0;
    found.data.fortName = name;
    found.data.title = 'Неизвестная величина';
    found.getIcon = function () {
        return 'https://westrus.innogamescdn.com/images/jobs/fort/fortfound_' + this.data.fortType + '.png';
    };
    found.onIconClick = function () {
        return Map.center(this.data.x, this.data.y);
    };
    found.getTitle = function () {
        return '<b>' + this.data.title + '</b><br />'
            + s('Название: %1', '<b>' + this.data.fortName.escapeHTML() + '</b>');
    };
    found.update = function (data) {
        this.data.x = data.coords.x;
        this.data.y = data.coords.y;
        this.data.fortName = data.fortName;
        this.data.fortType = data.fortType;
        this.data.title = data.title;
    };
    return found;
};
var TaskFortBuild = function (fortId, x, y, building, duration) {
    var build = new Task('fortbuild', {'fort_id': fortId, 'building': building, 'duration': duration});
    build.data.x = x;
    build.data.y = y;
    build.data.fortId = fortId;
    build.data.building = building;
    build.data.duration = duration;
    build.data.title = 'Форт';
    build.data.buildPoints = 0;
    build.data.name = '';
    build.getTitle = function () {
        return s('Форт: %1', '<b>' + this.data.name.escapeHTML() + '</b>') + '<br />'
            + s('Ты строишь здание: %1', '<b>' + this.data.title + '</b>') + '<br />'
            + s('Очки строительства: %1', '<b>' + this.data.buildPoints + '</b>');
    };
    build.getIcon = function () {
        return 'https://westrus.innogamescdn.com/images/jobs/build.png';
    };
    build.onIconClick = function () {
        BuildWindow.open(this.data.fortId, this.data.x, this.data.y, this.data.building, true);
    };
    build.update = function (data) {
        this.data.x = data.coords.x || 0;
        this.data.y = data.coords.y || 0;
        this.data.fortId = data.fortId;
        this.data.title = data.title;
        this.data.building = data.buildingKey;
        this.data.buildPoints = data.buildPoints;
        this.data.name = data.name || '';
    };
    return build;
};
var TaskFortSleep = function (fortId, x, y) {
    var sleep = new Task('fortsleep', {'fort_id': fortId});
    sleep.data.fortId = fortId;
    sleep.data.fortName = '';
    sleep.data.room = 0;
    sleep.data.x = x;
    sleep.data.y = y;
    sleep.getIcon = function () {
        var rooms = ['barracks_room1', 'barracks_room2', 'barracks_room3', 'barracks_room4', 'barracks_room5', 'barracks_room6'];
        var roomId = $.inArray(this.data.room, rooms);
        if (roomId === -1)roomId = 0;
        return 'https://westrus.innogamescdn.com/images/jobs/sleep/sleep' + roomId + '.png';
    };
    sleep.getTitle = function () {
        return s('Ты спишь в форте: %1', '<b>' + this.data.fortName.escapeHTML() + '</b>');
    };
    sleep.onIconClick = function () {
        FortWindow.open(this.data.fortId, this.data.x, this.data.y);
    };
    sleep.update = function (data) {
        this.data.x = data.coords.x || 0;
        this.data.y = data.coords.y || 0;
        this.data.fortName = data.name || '';
        this.data.fortId = data.fort_id;
        this.data.room = data.room;
    };
    sleep.onCancel = function (extra) {
        if (undefined !== extra.energy)Character.setEnergy(extra.energy);
    };
    return sleep;
};
var TaskTentSleep = function (room, coords) {
    var sleep = new Task('tentsleep', {});
    sleep.getIcon = function () {
        return 'https://westrus.innogamescdn.com/images/jobs/sleep/sleep5.png';
    };
    sleep.getTitle = function () {
        return 'Ты спишь в палатке';
    };
    sleep.onIconClick = function () {
    };
    sleep.update = function (data) {
        this.data.room = data.room;
        this.data.x = data.coords.x;
        this.data.y = data.coords.y;
    };
    sleep.update({room: room, coords: coords || {}});
    return sleep;
};
var TaskBuildFair = function () {
    var build = new Task('buildfair', {});
    build.getTitle = function () {
        return s('Ты строишь здание: %1', '<b>' + this.data.title + '</b>') + '<br />'
            + s('Очки строительства: %1', '<b>' + this.data.buildPoints + '</b>');
    };
    build.getIcon = function () {
        return 'https://westrus.innogamescdn.com/images/jobs/build.png';
    };
    build.onIconClick = function () {
        west.wof.FairSiteWindow.open();
    };
    build.update = function (data) {
        this.data.x = data.coords.x || 0;
        this.data.y = data.coords.y || 0;
        this.data.title = data.title;
        this.data.buildPoints = data.build_points;
        if (undefined !== data.char_money)Character.setMoney(data.char_money);
        if (undefined !== data.char_deposit)Character.setDeposit(data.char_deposit);
    };
    build.onCancel = function (extra) {
        if (undefined !== extra.money)Character.setMoney(extra.money);
        if (undefined !== extra.energy)Character.setEnergy(extra.energy);
    };
    build.onFinish = function () {
        EventHandler.signal('fair-built');
    };
    return build;
};

var TaskQueue = (function () {
    var obj = {'queue': [], 'toCancel': {}, 'toAdd': [], 'timeleft': 0};
    var lastTimeout = undefined;
    var sendDelay = 900;
    var busy = false;
    obj.init = function (tasks, limit) {
        obj.wipe();
        if (tasks && tasks.length) {
            $.each(tasks, function (k, task) {
                task = TaskFactory(task);
                obj.pushToQueue(task);
            });
        }
        if (limit)obj.limit = limit;
        EventHandler.signal('taskqueue-updated', [obj.queue]);
    };
    obj.add = function (tasks) {
        tasks = $.isArray(tasks) ? tasks : [tasks];
        var hasAutomation = Premium.hasBonus('automation'), taskLimit = hasAutomation ? obj.limit.premium : obj.limit.normal, limitedTasks = tasks;
        if (taskLimit < obj.queue.length + tasks.length) {
            limitedTasks = tasks.slice(0, taskLimit - obj.queue.length);
        }
        if (hasAutomation && limitedTasks.length == 0)
            return obj.handleError(tasks, ['', 'automation'], 'Ты больше не можешь добавлять задания!'); else if (!hasAutomation && (limitedTasks.length == 0 || tasks != limitedTasks)) {
            return Premium.checkForAutomationPremium(function () {
                obj.add(tasks);
            }, function () {
                if (taskLimit > obj.queue.length)obj.add(limitedTasks);
            });
        }
        limitedTasks.each(function (task) {
            if (obj.busy) {
                obj.toAdd.push(task);
            } else {
                task.queuePos = obj.queue.length;
                obj.queue.push(task);
                EventHandler.signal('taskqueue-task-adding', [task]);
                obj.batchStart(obj.sendAdd);
            }
        });
    };
    obj.cancel = function (queuePos) {
        var task = obj.queue[queuePos];
        if (!task.queueId)return;
        obj.toCancel[task.queuePos] = {'queueId': task.queueId, 'type': task.type};
        EventHandler.signal('taskqueue-task-canceling', [task]);
        obj.batchStart(obj.sendCancel);
    };
    obj.finish = function (task) {
        task.finished();
        obj.remove(task);
        $.each(obj.queue, function (k, task) {
            task.queuePos = k;
        });
        EventHandler.signal('taskqueue-updated', [obj.queue]);
    };
    obj.getByQueuePos = function (queuePos) {
        return obj.queue[queuePos];
    };
    obj.sendCancel = function () {
        return Ajax.remoteCall('task', 'cancel', {'tasks': obj.toCancel}, function (data) {
            obj.toCancel = {};
            $.each(data['tasks'], function (queuePos, queueData) {
                var task = obj.queue[queuePos];
                if (queueData['extra'])task.cancelled(queueData['extra']);
                if (queueData['error'])obj.handleError(task, queueData['error'], queueData['msg']);
                if (queueData['restored'] && wman.getById('premium')) {
                    west.window.premium.open();
                }
            });
            obj.init(data.queue, obj.limit);
        });
    };
    obj.sendAdd = function () {
        var post = {'tasks': {}}, queueCache = [];
        $.each(obj.queue, function (queuePos, task) {
            if (!task.queueId) {
                post.tasks[queuePos] = task.post;
                queueCache[queuePos] = task;
            }
        });
        return Ajax.remoteCall('task', 'add', post, function (data) {
            $.each(data['tasks'], function (queuePos, queueData) {
                var task = queueCache[queuePos];
                if (queueData['task'] && task)task.setData(queueData['task']); else obj.remove(task);
                if (queueData['error'])obj.handleError(task, queueData['error'], queueData['msg']);
            });
            if (data.energy !== undefined)Character.setEnergy(data.energy);
            if (data.buffs !== undefined)CharacterSkills.setBuffs(data.buffs);
            if (data.protection !== undefined)Character.setDuelProtection(data.protection);
            EventHandler.signal('taskqueue-updated', [obj.queue]);
        });
    };
    obj.remove = function (task) {
        obj.queue.splice(task.queuePos, 1);
        delete task;
        for (var queuePos = 0; queuePos < obj.queue.length; queuePos++)
            obj.queue[queuePos].queuePos = queuePos;
    };
    obj.wipe = function () {
        if (!obj.queue.length)return;
        $.each(obj.queue, function (k, task) {
            delete task;
        });
        obj.queue = [];
    };
    obj.batchStart = function (ajaxCall) {
        if (lastTimeout)window.clearTimeout(lastTimeout);
        lastTimeout = window.setTimeout(function () {
            obj.busy = true;
            EventHandler.signal('taskqueue-busy');
            ajaxCall().done(function () {
                obj.busy = false;
                EventHandler.signal('taskqueue-ready');
                obj.toAdd.forEach(function (val) {
                    obj.add(val);
                });
                obj.toAdd = [];
            });
            lastTimeout = undefined;
        }, sendDelay);
        return ajaxCall;
    };
    obj.handleError = function (task, error, msg) {
        if (!error[1] || !Premium.checkForPremium(error[1], function () {
                obj.add(task, null, true);
            }) && msg)
            new UserMessage(msg, UserMessage.TYPE_ERROR).show();
    };
    obj.pushToQueue = function (task) {
        if (!task instanceof Task)return;
        task.queuePos = obj.queue.length;
        obj.queue.push(task);
    };
    return obj;
})();

var TaskQueueUi = (function () {
    var obj = {'isEmpty': true};
    var getHalvewayBtn = function (taskData, currentTask) {
        var cls = '', wayId = taskData.queueId || 0, html = '';
        if (currentTask && Player.videoId) {
            var style;
            if (!Premium.buyable['halvewaytime']) {
                style = 'style="margin-left:133px"';
                cls += 'hide ';
            }
            html = '<div ' + style + ' class="taskFreeHalveway task-' + wayId + '" title="' + 'Бесплатное удвоение скорости' + '"/>';
        }
        if (!Premium.buyable['halvewaytime'] || !wayId) {
            cls += 'notAvailable ';
        }
        return html + '<div class="' + cls + 'taskHalveway task-' + wayId + '" title="' + "Удвоение скорости" + '"/>';
    };
    var getTaskTemplate = function (task) {
        var now = Game.getServerTime();
        var taskTimeTitle = s('<b>%1</b> %2', 'Расстояние:', task.getWayDur().formatDuration()) + '<br />'
            + s('<b>%1</b> %2 %3', 'Время начала работы:', task.getStartDate().toTime(), '.') + '<br />'
            + s('<b>%1</b> %2 %3', 'Время окончания работы:', task.getEndDate().toTime(), '.');
        var taskTime = $(s('<div class="taskTime" title="%2"><p>%1</p></div>', task.getDuration(true).formatDuration(), taskTimeTitle));
        var taskBtns = $(s('<div class="taskBtns">%1<div class="taskAbort %2 %4" title="%3"/></div>', getHalvewayBtn(task.wayData), task.queueId, "Отмена"));
        var taskIcon = $(s('<div class="icon task-queueId-%1" title="%2" style="background-image: url(\'%3\')"/>', task.queueId, task.getTitle(), task.getIcon()));
        if (task.centerable) {
            taskIcon.append("<div class='centermap' title='" + "Показать на карте" + "'/>");
        }
        return $('<span class="task task-queuePos-' + task.queuePos + '" />').append(taskTime, taskBtns, taskIcon);
    };
    var getCurrentTaskTemplate = function (task) {
        var dur = task.getDuration().formatDuration();
        var now = Game.getServerTime();
        var taskWayTitle = s('<b>%1</b> %2 %3', 'Прибытие:', task.getWayEndDate().toTime(), '.');
        var taskTimeTitle = s('<b>%1</b> %2 %3', 'Время начала работы:', task.getStartDate().toTime(), '.') + '<br />'
            + s('<b>%1</b> %2 %3', 'Время окончания работы:', task.getEndDate().toTime(), '.');
        var taskWay = $(s('<div id="currentTaskWay"><p title="%3">%1: %2</p></div>', 'Расстояние', task.getWayDur().formatDuration(), taskWayTitle));
        var taskTime = $(s('<div id="currentTaskTime"><p title="%1">%2</p>%3<div class="taskAbort task-%4 %6" title="%5"/></div>', taskTimeTitle, dur, getHalvewayBtn(task.wayData, true), task.queueId, "Отмена"));
        var taskIcon = $(s('<div class="icon task-queueId-%1" title="%2" style="background-image: url(\'%3\')"/>', task.queueId, task.getTitle(), task.getIcon()));
        if (task.centerable) {
            taskIcon.append("<div class='centermap' title='" + "Показать на карте" + "'/>");
        }
        return $('<span class="task task-queuePos-' + task.queuePos + '" />').append(taskWay, taskTime, taskIcon);
    };
    var clickTaskQueue = function (event) {
        var target = $(event.target);
        var taskEl = target.closest('.task');
        if (taskEl.length >= 1) {
            var queuePos = taskEl.attr('class').match(/queuePos-(\d+)/)[1];
        } else {
            return;
        }
        var task = TaskQueue.getByQueuePos(queuePos);
        if (target.hasClass('taskAbort') && !target.hasClass('inactive')) {
            TaskQueue.cancel(queuePos);
        } else if (target.hasClass('icon')) {
            task.onIconClick();
        } else if (target.hasClass('centermap')) {
            Map.center(task.getCoords());
        } else if (target.hasClass('taskHalveway') && !target.hasClass('inactive') && !target.hasClass('notAvailable')) {
            obj.halveWay(task);
        } else if (target.hasClass('taskFreeHalveway')) {
            VideoAdWindow.open(task.wayData.queueId);
        }
        return;
    };
    var getPremiumTask = function () {
        return $('<span class="task">' + '<div class="buyPremiumTask"></div>' + '</span>').addMousePopup('Задать большее количество работ').click(function (e) {
            Premium.checkForAutomationPremium(function (element) {
                return function () {
                    element.parentNode.removeChild(element);
                };
            }(this));
            e.stopPropagation();
        });
    };
    var showPremiumTask = function (queuePos) {
        return queuePos !== undefined && queuePos == TaskQueue.limit.normal - 1 && TaskQueue.queue.length <= TaskQueue.limit.normal && !Premium.hasBonus('automation');
    };
    obj.init = function () {
        EventHandler.listen('taskqueue-task-adding', obj.taskAdding);
        EventHandler.listen('taskqueue-task-canceling', obj.taskCancelling);
        EventHandler.listen('taskqueue-updated', obj.redraw);
        EventHandler.listen('taskqueue-busy', obj.deactivate);
        EventHandler.listen('taskqueue-ready', obj.activate);
        $('div#ui_workcontainer').hide();
        $('div#ui_workcontainer > .middle').click(clickTaskQueue);
        $('#ui_bottomright').append(get_throbber());
        obj.activate();
        window.setInterval(obj.tick, 1000);
    };
    obj.add = function (task) {
        var el = $('#ui_workcontainer');
        if (obj.isEmpty) {
            obj.isEmpty = false;
            task.el = getCurrentTaskTemplate(task);
            $('#currentTask').append(task.el);
            el.slideDown(400, 'swing');
        } else {
            task.el = getTaskTemplate(task);
            $('#queuedTasks', el).append(task.el);
            if (showPremiumTask(task.queuePos))
                $('#queuedTasks', el).append(getPremiumTask());
            obj.slideUp(el);
        }
    };
    obj.halveWay = function (task) {
        if (!task.wayData || !task.wayData.queueId)return;
        var dur, btns = [];
        if ((task.getWayStartDate().getTime() / 1000) < Game.getServerTime()) {
            dur = (task.getWayEndDate().getTime() / 1000) - Game.getServerTime();
        } else {
            dur = task.getWayDur();
        }
        var freecb = function () {
            VideoAdWindow.open(task.wayData.queueId);
            this.hide();
        };
        if (Player.videoUrl) {
            btns.push((Player.videoId) ? new west.gui.Button('Бесплатное удвоение скорости', freecb, undefined, undefined, 'Бесплатное удвоение скорости', 'freeHalveway').enable() : new west.gui.Button('Бесплатное удвоение скорости', freecb, undefined, undefined, 'Ты можешь бесплатно удвоить скорость один раз в день.', 'freeHalveway').disable());
        }
        Premium.confirmUse('halvewaytime ' + task.wayData.queueId, 'Удвоение скорости', 'Хочешь сократить время в пути?' + "<br />" +
            'Обычное время:' + " " + (dur).formatDuration() + "<br />" +
            'Сокращённое время:' + " " + (dur / 2).formatDuration(), undefined, undefined, undefined, undefined, btns);
    };
    obj.toggleTasks = function () {
        var el = $('#ui_workcontainer');
        var toggle = $("#toggleTaskQueue");
        if (el.hasClass('expanded')) {
            toggle.removeClass().addClass("tw2gui_arrow_up_bottom");
            if (Config.get('gui.animations')) {
                $('#queuedTasks', $('#ui_workcontainer')).slideUp('normal', function () {
                    el.removeClass().addClass('expandable');
                });
            } else {
                el.removeClass().addClass('expandable');
            }
        } else if (el.hasClass('expandable')) {
            obj.slideUp(el, toggle);
        }
    };
    obj.redraw = function (tasks) {
        obj.isEmpty = true;
        var hideUi = function () {
            $('#currentTask').empty();
            $('#queuedTasks', $('#ui_workcontainer')).empty();
            $('#ui_workcontainer').removeClass();
        };
        if (!tasks.length) {
            $('#currentTask > .task').fadeOut(400);
            $('#queuedTasks > .task', $('#ui_workcontainer')).fadeOut(400);
            $('#ui_workcontainer').slideUp(400, 'swing', function () {
                hideUi();
            });
        } else {
            hideUi();
        }
        tasks.each(function (task) {
            obj.add(task);
        });
    };
    obj.deactivate = function () {
        var el = $('#ui_bottomright');
        $('#currentTaskTime > div', el).addClass('inactive');
        $('#queuedTasks .taskBtns > div', el).addClass('inactive');
        $('#currentTask').addClass('opacity05');
        $('#queuedTasks').addClass('opacity05');
        $('.throbber', el).show();
    };
    obj.activate = function () {
        $('#ui_bottomright .throbber').hide();
        ;
        $('#queuedTasks').removeClass('opacity05');
        $('#currentTask').removeClass('opacity05');
    };
    obj.slideUp = function (el, toggle) {
        el = el || $('#ui_workcontainer');
        if (el.hasClass('expanded'))return;
        toggle = toggle || $("#toggleTaskQueue", el);
        el.removeClass().addClass('expanded');
        toggle.removeClass().addClass("tw2gui_arrow_up_top");
        if (Config.get('gui.animations')) {
            $('#queuedTasks', el).slideDown('normal');
        }
    };
    obj.taskCancelling = function (task) {
        task.el.animate({'opacity': 0}, function () {
            task.el.remove();
            if ($('#queuedTasks span').length <= 0) {
                $('#ui_workcontainer').removeClass();
            }
        });
    };
    obj.taskAdding = function (task) {
        obj.add(task);
    };
    obj.tick = function () {
        if (!TaskQueue.queue[0] || !TaskQueue.queue[0].queueId)
            return TaskQueue.timeleft = 0;
        var task = TaskQueue.getByQueuePos(0);
        var now = Game.getServerTime();
        var wayDur = (task.getWayEndDate().getTime() / 1000) - now;
        var taskDur = (task.getEndDate().getTime() / 1000) - now;
        TaskQueue.timeleft = Math.max(0, taskDur);
        if (taskDur <= 0) {
            EventHandler.signal('task-finish-' + task.type, [task.data]);
            TaskQueue.finish(task);
            return;
        }
        if (!task.isArrived(now)) {
            EventHandler.signal('task-start-way', [task.wayData]);
            $('#currentTaskWay p').text('Расстояние' + ': ' + wayDur.formatDuration());
        } else {
            EventHandler.signal('task-start-' + task.type, [task.data]);
            $('#currentTaskTime .taskHalveway').remove();
            $('#currentTaskTime .taskFreeHalveway').remove();
            $('#currentTaskTime p').text(taskDur.formatDuration());
            $('#currentTaskWay p').css('color', '#918364');
        }
    };
    return obj;
})();

west.define('SystemError', west.gui.Dialog, {
    init: function (title, message, relog) {
        this.callParent();
        this.framefix.css("z-index", "9999");
        this.divMain.addClass("system_error");
        this.divMain.append("<div class='critical-error' />");
        this.$(".tp_front").remove();
        this.$(".tw2gui_inner_window_title_left").remove();
        this.$(".tw2gui_inner_window_title_right").remove();
        this.$(".tw2gui_dialog_content").append("<div class='system_instruction'/>");
        if (relog) {
            this.setInstructions(message || "Пожалуйста, зайди ещё раз.");
            this.addButton("На главную страницу", function () {
                window.location = Game.masterURL;
            });
        } else {
            this.setInstructions(message || ("Проверь соединение с интернетом."
                + "<br/>" + "Обнови страницу."));
            this.addButton("Откат", function () {
                window.location.reload();
                return false;
            })
            if ('production' != Game.environment) {
                this.addButton("Сообщить об ошибке", function () {
                    BugreportWindow.open();
                });
            }
            this.addButton("Дальше");
        }
        this.setTitle("Попытка соединения не удалась").setText("Произошла непредусмотренная ошибка.").setModal(true, false, {
            bg: "https://westrus.innogamescdn.com/images/curtain_bg.png",
            opacity: 0.9
        });
    }, setInstructions: function (instruction) {
        this.$(".system_instruction").empty().append(instruction);
        return this;
    }
});
west.define('UserMessage', west.gui.Dialog, {
    init: function (msg, type) {
        this.callParent();
        this.divMain.css({"cursor": "pointer", "max-width": "800px"});
        this.$(".tw2gui_dialog_text").css({"font-size": "20px", "padding": "12px 0", "max-width": "600px"});
        this.setType(undefined === type ? UserMessage.TYPE_ERROR : type).setText(msg);
    }, getType: function () {
        return this.type;
    }, setType: function (type) {
        if (undefined === type)return;
        this.type = type;
        switch (type) {
            case UserMessage.TYPE_SUCCESS:
                this.setIcon(west.gui.Dialog.SYS_OK);
                this.setTitle("Успех");
                break;
            case UserMessage.TYPE_HINT:
                this.setIcon(west.gui.Dialog.SYS_WARNING);
                this.setTitle("Подсказка");
                break;
            case UserMessage.TYPE_ERROR:
            default:
                this.setIcon(west.gui.Dialog.SYS_WARNING);
                this.setTitle("Внимание!");
                break;
        }
        return this;
    }, hide: function () {
        if (!isDefined(window.Config) || !Config.get("gui.main.animations")) {
            this.divMain.delay(2000).hide(10, function () {
                $(this).remove();
            });
        } else {
            this.divMain.delay(600).fadeOut(2000, function () {
                $(this).remove();
            });
        }
    }, show: function () {
        var main = this.divMain;
        main.unbind();
        var that = this;
        main.click(function () {
            $(this).remove();
        });
        main.hover(function () {
            if ($(this).css("opacity") >= 0.38) {
                $(this).clearQueue();
                $(this).stop();
                $(this).show();
                $(this).css("opacity", 100);
            }
        }, function () {
            that.hide();
        });
        main.mouseover();
        main.appendTo(document.body);
        var t = 20;
        var prop = {"left": ($(window).width() - main.width()) / 2, top: t};
        if (!isDefined(window.Config) || !Config.get("gui.main.animations")) {
            main.css(prop).mouseout();
        } else {
            main.css(jQuery.extend(prop, {opacity: 0.0, top: t - (t / 2)}));
            main.md_center({transition: 1000, opacity: 1.0, top: t}, function () {
                main.mouseout();
            });
        }
        return this;
    }
});
UserMessage.TYPE_SUCCESS = "success";
UserMessage.TYPE_ERROR = "error";
UserMessage.TYPE_HINT = "hint";
MessageSuccess = function (msg) {
    return new UserMessage(msg, UserMessage.TYPE_SUCCESS);
};
MessageHint = function (msg) {
    return new UserMessage(msg, UserMessage.TYPE_HINT);
};
MessageError = function (msg) {
    return new UserMessage(msg, UserMessage.TYPE_ERROR);
};

Character = {
    playerId: 0,
    name: '',
    charSex: null,
    charClass: null,
    professionId: null,
    professionName: '',
    professionSkill: 0,
    health: 0,
    energy: null,
    experience: null,
    level: 0,
    healthRegen: 0,
    energyRegen: 0,
    healthDate: null,
    energyDate: null,
    lifePointPerHealthSkill: 0,
    lifePointPerHealthSkillBonus: 0,
    upb: null,
    veteranPoints: null,
    nuggets: null,
    money: null,
    deposit: null,
    homeTown: {town_id: 0, x: 0, y: 0, town_name: '', alliance_id: 0},
    forts: null,
    townRights: 0,
    defaultSpeed: 0,
    speed: 0,
    position: {x: 0, y: 0},
    dailyTasks: {
        playerduels: {required: 0, finished: 0},
        quests: {required: 0, finished: 0},
        crafts: {required: 0, finished: 0},
        npcduels: {required: 0, finished: 0}
    },
    finishedTasks: 0,
    duelsDone: 0,
    duelLevel: 0,
    duelWins: 0,
    duelLosts: 0,
    duelExp: 0,
    taskPointModifier: {job: 1.0, build: 1.0},
    sessionId: '',
    cooldown: 0.0,
    maxEnergy: 0,
    achievementSlots: {slot1: null, slot2: null, slot3: null, slot4: null},
    avatarConfig: 0,
    duelMotivation: 0,
    npcDuelMotivation: 0,
    maxHealth: 0,
    ticker: null,
    levelHealthFillup: false,
    levelEnergyFillup: false,
    itemLevelRequirementDecrease: {
        all: 0,
        right_arm: 0,
        left_arm: 0,
        body: 0,
        head: 0,
        foot: 0,
        animal: 0,
        neck: 0,
        yield: 0,
        recipe: 0
    },
    resetStatus: false,
    read: {},
    lowHealtNotifed: false,
    lowEnergyNotified: false,
    moneyNotified: false,
    lowMotivationNotifed: {},
    lastDied: -1,
    duelProtection: null,
    init: function (data) {
        CharacterSkills.init(data.skillData, data.buffs);
        Character.setPosition(data.pos.x, data.pos.y);
        Character.setName(data.name);
        Character.playerId = data.playerId;
        Character.setLevel(data.level);
        Character.healthDate = Game.getServerTime();
        Character.energyDate = Game.getServerTime();
        Character.cooldown = data.itemuseCooldown;
        Character.setExperience(data.experience);
        Character.setCharClass(data.charClass);
        Character.charSex = data.charSex;
        Character.lifePointPerHealthSkill = data.lpPerPoint;
        Character.lifePointPerHealthSkillBonus = data.lpPerPointBonus;
        Character.healthRegen = data.healthRegenFactor;
        Character.energyRegen = data.energyRegenFactor;
        Character.setHealth(data.health);
        Character.maxEnergy = data.maxEnergy;
        Character.setEnergy(data.energy);
        Character.levelHealthFillup = data.levelHealthFillup;
        Character.levelEnergyFillup = data.levelEnergyFillup;
        Character.setMoney(data.cash);
        Character.setDeposit(data.deposit);
        Character.setUpb(data.upb);
        Character.setVeteranPoints(data.veteranPoints);
        Character.setNuggets(data.nuggets);
        Character.setDefaultSpeed(data.playerSpeed);
        Character.setSpeed(data.charSpeed);
        if (data.town) {
            Character.setHomeTown(data.town.id, data.town.coords.x, data.town.coords.y, '', data.town.allianceId);
            Character.setTownRights(data.town.townRights);
        } else {
            Character.setHomeTown(null);
        }
        if (data.forts) {
            Character.setForts(data.forts);
        }
        Character.setProfession(data.professionId);
        Character.setProfessionSkill(data.professionSkill);
        Character.setDailyTasks(data.dailyActivityStatus);
        Character.setAvatar(data.avatarConfig, data.avatar);
        var decreases = data.itemLevelRequirementDecrease;
        for (var type in decreases) {
            Character.itemLevelRequirementDecrease[type] = decreases[type];
        }
        Character.taskPointModifier.build = data.taskPointModifierBuild;
        Character.startTicker4Character();
        Character.registerEventListener();
        Character.setToRead('messages', !data.read_messages_box);
        Character.setToRead('reports', !data.read_reports_box);
        Character.setToRead('townforum', !data.read_townforum_box);
        Character.setToRead('inventory', !data.read_inventory);
        Character.setLastDied(data.last_died);
        Character.setDuelProtection(data.duel_protection);
        if (data.duelLevel) {
            Character.setDuelLevel(data.duelLevel);
        }
        if (Config.get('tracking.achv')) {
            Character.trackAchievement(Config.get('tracking.achv'));
        }
    },
    setHealth: function (h, healthDate) {
        h = Math.floor(h);
        if (this.health == h)return false;
        this.calcMaxHealth();
        if (!this.lowHealtNotifed && (this.health / this.getMaxHealth() * 100) < 25 && this.health != 0) {
            this.lowHealtNotifed = true;
            WestUi.NotiBar.add(new OnGoingHintEntry("Если очки твоего здоровья упадут до нуля, ты потеряешь все наличные! Поспи в отеле или используй усилители из магазина Юнион Пасифик, чтобы восстановить здоровье."));
        }
        this.health = Math.min(h, this.getMaxHealth());
        if (healthDate != undefined) {
            this.healthDate = Game.getServerTime() + healthDate;
        } else {
            this.healthDate = Game.getServerTime();
        }
        EventHandler.signal('health', [this.health, this.maxHealth]);
    },
    addHealth: function (mod) {
        this.setHealth(Math.max(0, Math.min(this.health + mod, this.maxHealth)));
    },
    setEnergy: function (e, energyDate) {
        e = Math.floor(e);
        if (this.energy == e)return false;
        if (!this.lowEnergyNotified && (e / this.maxEnergy * 100) < 25 && this.energy != null) {
            this.lowEnergyNotified = true;
            WestUi.NotiBar.add(new OnGoingHintEntry("Ты не можешь начать работу, так как у тебя нет энергии! Поспи в отеле или используй усилители из магазина Юнион Пасифик, чтобы восстановить энергию."));
        }
        this.energy = e;
        if (energyDate != undefined) {
            this.energyDate = Game.getServerTime() + energyDate;
        } else {
            this.energyDate = Game.getServerTime();
        }
        EventHandler.signal('energy', [this.energy, this.maxEnergy]);
        return true;
    },
    addEnergy: function (mod_energy) {
        this.setEnergy(this.energy + mod_energy);
    },
    setLevel: function (l) {
        if (this.level == l)return false;
        var oldlevel = this.level;
        this.level = l;
        if (oldlevel) {
            CharacterSkills.setFreeAttrPoints(CharacterSkills.freeAttrPoints + 1);
            CharacterSkills.setFreeSkillPoints(CharacterSkills.freeSkillPoints + 3);
        }
        EventHandler.signal('character_level_up', [{level: l, init: oldlevel == 0 ? true : false, oldlevel: oldlevel}])
        if (this.levelHealthFillup)
            this.setHealth(this.maxHealth);
        if (this.levelEnergyFillup)
            this.setEnergy(this.maxEnergy);
        return true;
    },
    addExperience: function (e) {
        this.setExperience(e + this.experience);
    },
    setExperience: function (e) {
        if (this.experience !== null && this.experience == e)return false;
        this.experience = e;
        EventHandler.signal('character_exp_changed', [e]);
    },
    calcLowerExp: function (level) {
        var expfactor = 3.00, maxlevel = 150;
        level = Math.min(level, maxlevel);
        return Math.floor(((((level * (level + 1) * (2 * level + 1)) / 6 + ((level + 1) * 10)) - 21) * expfactor) + (level > 120 ? 1000 * Math.pow((level - 120), 2.9) : 0));
    },
    getExperience4Level: function () {
        return this.experience - Character.getMinExperience();
    },
    getMaxExperience4Level: function () {
        if (Character.getMinExperience() == Character.getMaxExperience())
            return '<img src="https://westrus.innogamescdn.com/images/xp_inf_000.png" />'; else
            return (Character.getMaxExperience() - Character.getMinExperience());
    },
    getMinExperience: function () {
        return this.calcLowerExp(this.level);
    },
    getMaxExperience: function () {
        return this.calcLowerExp(this.level + 1);
    },
    getDuelProtection: function (ms) {
        return (this.duelProtection + Game.duelProtectionHours * 3600) * (ms ? 1000 : 1);
    },
    getMandatoryDuelProtection: function (ms) {
        return (this.duelProtection + Game.duelProtectionEarly * 3600) * (ms ? 1000 : 1);
    },
    isDuelProtected: function () {
        return this.duelProtection !== null && this.getDuelProtection() > Game.getClientTime();
    },
    canDuel: function () {
        return this.duelProtection === null || this.getMandatoryDuelProtection() < Game.getClientTime();
    },
    setUpb: function (u) {
        if (this.upb == u)return false;
        u = Math.max(0, Math.min(Game.upbLimit, u));
        this.upb = u;
        EventHandler.signal('upb_changed', [this.upb]);
        return true;
    },
    addUpb: function (b) {
        if (b != 0)this.setUpb(parseInt(this.upb + b));
    },
    setVeteranPoints: function (p) {
        if (this.veteranPoints == p)return false;
        this.veteranPoints = p;
        EventHandler.signal('veteran_points_changed', [p]);
    },
    setNuggets: function (n) {
        if (this.nuggets == n || n < 0)return false;
        this.nuggets = ($.isNumeric(n) ? n : parseInt(n.replace(/[^0-9-]/, ""), 10));
        EventHandler.signal("char_nuggets_changed", [this.nuggets]);
        return true;
    },
    addNuggets: function (n) {
        if (n != 0)this.setNuggets(parseInt(this.nuggets + n));
    },
    setMoney: function (m) {
        if (this.money == m || m < 0)return false;
        this.money = m;
        if (!this.moneyNotified && this.money > 999) {
            this.moneyNotified = true;
            WestUi.NotiBar.add(new OnGoingHintEntry("У тебя в карманах скопилось много денег. Если ты лишишься сознания во время работы, дуэли или битвы — ты их потеряешь! Чтобы не потерять наличные деньги — положи их на счёт в банке."));
        }
        EventHandler.signal("char_money_changed", [m]);
        return true;
    },
    addMoney: function (m) {
        if (m != 0)this.setMoney(parseInt(this.money + m));
    },
    setDeposit: function (d) {
        if (this.deposit == d)return false;
        this.deposit = d;
        EventHandler.signal("char_deposit_changed", [d]);
        return true;
    },
    addDeposit: function (d) {
        if (d != 0)this.setDeposit(parseInt(this.deposit + d));
    },
    setTownRights: function (tr) {
        if ('undefined' !== typeof tr) {
            this.townRights = tr;
        }
    },
    setPosition: function (x, y) {
        if (this.position.x == x && this.position.y == y)return false;
        var old_pos = {x: this.position.x, y: this.position.y};
        this.position.x = x;
        this.position.y = y;
        if (old_pos.x && old_pos.y) {
            EventHandler.signal('position_change', [this.position.x, this.position.y, old_pos]);
        }
        return true;
    },
    setDefaultSpeed: function (ds) {
        this.defaultSpeed = ds;
    },
    setSpeed: function (s) {
        if (this.speed == s)return false;
        this.speed = s;
        EventHandler.signal('character_speed_changed', []);
        return true;
    },
    setProfession: function (p) {
        if (this.profession == p)return;
        var oldp = this.professionId;
        this.professionId = p;
        EventHandler.signal('char_profession_changed', [oldp, p]);
    },
    setProfessionSkill: function (ps) {
        this.professionSkill = ps;
    },
    setDuelLevel: function (dl) {
        this.duelLevel = dl;
    },
    setDuelWins: function (dw) {
        this.duelWins = dw;
    },
    addDuelWins: function (dw) {
        this.setDuelWins(parseInt(this.duelWins + dw));
    },
    setDuelLosts: function (dl) {
        this.duelLosts = dl;
    },
    addDuelLosts: function (dl) {
        this.setDuelLosts(parseInt(this.duelLosts + dl));
    },
    setDuelExp: function (de) {
        this.duelExp = de;
    },
    setFinishedTasks: function (ft) {
        this.finishedTasks = ft;
    },
    setDailyTasks: function (obj) {
        this.dailyTasks = obj;
        this.setFinishedTasks4CurrentDay();
    },
    setDailyTaskFinished: function (task, finished) {
        this.dailyTasks[task].finished = finished;
    },
    updateDailyTask: function (task, count) {
        if (count == undefined)count = 1;
        this.dailyTasks[task]['finished'] = parseInt(this.dailyTasks[task]['finished']) + count;
        EventHandler.signal('activity_changed', [task]);
        this.setFinishedTasks4CurrentDay();
    },
    setFinishedTasks4CurrentDay: function () {
        for (var k in this.dailyTasks) {
            if (parseInt(this.dailyTasks[k]['finished']) >= parseInt(this.dailyTasks[k]['required']))
                this.finishedTasks++;
        }
    },
    setName: function (n) {
        this.name = n;
        $('#character_name a').text(this.name);
    },
    setHomeTown: function (id, x, y, name, allianceId) {
        if (this.homeTown && this.homeTown.town_id == id)return;
        var oldTown = {town_id: this.homeTown.town_id, x: this.homeTown.x, y: this.homeTown.y}
        if (id === null) {
            this.homeTown = {town_id: 0, x: 0, y: 0, name: '', alliance_id: 0};
        } else {
            this.homeTown['town_id'] = id;
            this.homeTown['x'] = x;
            this.homeTown['y'] = y;
            this.homeTown['town_name'] = name;
            this.homeTown['alliance_id'] = allianceId || 0;
        }
        EventHandler.signal('char_home_town_changed', [oldTown, this.homeTown]);
        if (null === id)this.setForts([]);
    },
    setForts: function (forts) {
        var old = this.forts;
        this.forts = forts;
        EventHandler.signal('char_forts_changed', [old, forts]);
    },
    setDuelMotivation: function (dm) {
        this.duelMotivation = dm;
        EventHandler.signal('duelmotivation_changed', []);
    },
    setNPCDuelMotivation: function (dm) {
        this.npcDuelMotivation = dm;
        EventHandler.signal('duelmotivation_changed', []);
    },
    getPosition: function () {
        return this.position;
    },
    getNuggets: function (formatted) {
        return formatted ? format_money(this.nuggets) : this.nuggets;
    },
    getUpb: function (formatted) {
        return formatted ? format_money(this.upb) : this.upb;
    },
    getVeteranPoints: function (formatted) {
        return formatted ? format_money(this.veteranPoints) : this.veteranPoints;
    },
    getCapital: function () {
        return parseInt(this.deposit + this.money);
    },
    getMaxHealth: function () {
        return this.maxHealth;
    },
    getGender: function () {
        return this.charSex;
    },
    calcWidth: function (value, value_max) {
        return value_max === 0 ? '100%' : Math.min(100, Math.max(0, Math.floor(value / value_max * 100))) + '%';
    },
    calcMaxHealth: function () {
        this.maxHealth = parseInt(100 + ((this.level - 1) * this.lifePointPerHealthSkill) +
            CharacterSkills.getSkill('health').getPointsWithBonus() * (this.lifePointPerHealthSkill + this.lifePointPerHealthSkillBonus));
    },
    startTicker4Character: function () {
        if (!this.ticker || !this.ticker.active) {
            this.ticker = new Ticker(this.tick4Character, this);
            this.ticker.setPeriod(2000);
        }
        this.ticker.add2Queue4Loops('char_health_energy');
        this.ticker.start();
    },
    tick4Character: function () {
        var diff = Game.getServerTime() - this.energyDate;
        var newEnergy = Math.floor(this.energy + this.maxEnergy * this.energyRegen * diff / 3600);
        if (newEnergy > this.maxEnergy) {
            newEnergy = this.maxEnergy;
        }
        if (newEnergy != this.energy) {
            this.setEnergy(newEnergy);
        }
        diff = Game.getServerTime() - this.healthDate;
        var newHealth = Math.floor(this.health + this.maxHealth * this.healthRegen * diff / 3600);
        if (newHealth > this.maxHealth) {
            newHealth = this.maxHealth;
        }
        if (newHealth != this.health) {
            this.setHealth(newHealth);
        }
    },
    setAvatar: function (cfg, avatar) {
        Character.avatarConfig = cfg;
        Character.avatar = avatar;
        EventHandler.signal("char_avatar_changed", [avatar]);
    },
    registerEventListener: function () {
        EventHandler.listen('task-finish-way', function (task) {
            Character.setPosition(task.x, task.y);
        });
        EventHandler.listen('duel_finished', function () {
            Character.updateDailyTask('playerduels');
        });
    },
    isAtPos: function (x, y) {
        if (typeof(x) === 'object') {
            y = x.y;
            x = x.x;
        }
        return x == this.position.x && this.position.y
    },
    calcWayTo: function (x, y) {
        if (typeof(x) === 'object') {
            y = x.y;
            x = x.x;
        }
        return Map.calcWayTime(this.getPosition(), {'x': x, 'y': y});
    },
    setToRead: function (type, status) {
        if (Character.read[type] == status)return;
        Character.read[type] = status;
        if (status)EventHandler.signal('player-toread-' + type);
    },
    getFort: function (fortId) {
        for (var i in Character.forts) {
            if (!this.forts.hasOwnProperty(i))continue;
            if (this.forts[i]['fort_id'] == fortId) {
                return this.forts[i];
            }
        }
        return false;
    },
    setCharClass: function (charClass) {
        if (charClass.type == "greenhorn" && this.level > 14 && !Config.get("classchoose.seen")) {
            west.character.classchoose.ForceCharacterClassWindow.init();
        }
        this.charClass = charClass.type;
        var data = {};
        data.type = charClass.type;
        data.charge = 0;
        data.description = [];
        charClass.classbonus.each(function (bonus) {
            data.description.push(bonus.icon + "<span>" + bonus.desc + "</span>");
        });
        data.image = 'https://westrus.innogamescdn.com/images/window/character/buff_' + charClass.type + '.png';
        this.charClassInfo = data;
        BuffList.appendCharacterInfo();
    },
    setLastDied: function (lastDied) {
        var oldVal = this.lastDied, isInit, isFirstKO, isInit = -1 === oldVal;
        if (!isInit && oldVal > lastDied)return;
        this.lastDied = lastDied;
        if (this.lastDied && oldVal != this.lastDied) {
            isFirstKO = !oldVal;
            EventHandler.signal('character_died', [this.lastDied, oldVal, isInit, isFirstKO]);
        }
    },
    setDuelProtection: function (duelProtection) {
        this.duelProtection = duelProtection ? duelProtection : null;
    },
    trackAchievement: function (progress, update) {
        var params = progress.split('-');
        if (!update || params[2]) {
            var achvId = (params[2]) ? params[2] : params[0];
            Ajax.remoteCall('achievement', 'track', {achvid: achvId}, function (resp) {
                if (resp.error)return new MessageError(resp.msg).show();
                Character.setTrackingAchievement(resp);
            });
        } else {
            Character.setTrackingAchievement(params[1]);
        }
    },
    untrackAchievement: function () {
        Ajax.remoteCall('achievement', 'untrack', {}, function (resp) {
            if (resp.error)return new MessageError(resp.msg).show();
            Character.tracking = undefined;
            EventHandler.signal('character_tracking_achievement_changed');
        });
    },
    setTrackingAchievement: function (status) {
        if ("object" === typeof(status)) {
            this.tracking = status;
        } else if (!this.tracking) {
            return;
        } else {
            this.tracking.current = status;
        }
        EventHandler.signal('character_tracking_achievement_changed');
    },
    getTrackingAchievement: function () {
        return this.tracking;
    }
};
Character.initUsedPoints = function (attr, sk) {
    this.usedAttributes = attr;
    this.usedSkills = sk;
};

Attribute = function (key, points, bonus) {
    this.key = key;
    this.name = CharacterSkills.keyNames[key];
    this.description = CharacterSkills.attrDescriptions[this.key];
    this.points = points || 0;
    this.bonus = bonus || 0;
    this.skills = {};
    this.selectors = '';
    this.initSkills();
};
Attribute.prototype = {
    getKey: function () {
        return this.key;
    }, setPoints: function (p) {
        if (this.points == p)return false;
        var rev = 0;
        if ($.isNumeric(p) && p >= 0) {
            rev = p - this.points;
            this.points = p;
        }
        else {
            this.points = 0;
            if (p != 0)console.log('invalid attribute points(' + p + ') for ' + this.key);
        }
        this.updateAttributeViews();
    }, getPoints: function () {
        return this.points;
    }, setBonus: function (bonus) {
        if (this.bonus == bonus)return false;
        var rev = bonus - this.bonus;
        if ($.isNumeric(bonus) && bonus >= 0) {
            this.bonus = bonus;
            this.updateAttributeViews();
        }
        else {
            this.bonus = 0;
        }
    }, getBonus: function () {
        return this.bonus;
    }, getPointsWithBonus: function () {
        return parseInt(this.getPoints() + this.getBonus());
    }, addSkill: function (skill) {
        if ($.fn.isInArray(skill.key, CharacterSkills.allSkillKeys)) {
            skill.setAttrKey(this.key);
            CharacterSkills.skills[skill.key] = skill;
        }
    }, initSkills: function () {
        var that = this;
        var tmpKeys = CharacterSkills.getSkillKeys4Attribute(this.key);
        for (var i = 0; i < tmpKeys.length; i++) {
            that.addSkill(new Skill(tmpKeys[i]));
        }
    }, getSkill: function (key) {
        return this.skills[key];
    }, setName: function (name) {
        this.name = name;
    }, getName: function () {
        return this.name;
    }, setDescription: function (desc) {
        this.description = desc;
    }, getDescription: function () {
        return this.description;
    }, addSelector: function (sel) {
        if (this.selectors.length > 7)this.selectors += ', ' + sel; else this.selectors = sel;
    }, getAttributeIcon: function () {
        return $('<img class="attricon" title="' + ('<p class="text_bold">' + this.name + '</p>' + this.description).escapeHTML() + '" src="https://westrus.innogamescdn.com/images/window/skills/circle_' + this.key + '.png" />');
    }, getAttributeIconWithValue: function (value) {
        return $('<div class="attricon ' + this.key + '" />').append($('<span class="count" />').text(value != undefined ? value : this.getPoints()));
    }, updateAttributeViews: function () {
        $('#windows span.char_attr_' + this.key).text(this.getPointsWithBonus());
        if (wman.getById('playerskills')) {
            SkillsWindow.updatePMAttribute(this.key, this.getPoints(), this.getBonus());
        }
        if (this.selectors.length > 7)$(this.selectors).text(this.getPointsWithBonus());
    }
};
Skill = function (key) {
    this.key = key;
    this.name = CharacterSkills.keyNames[this.key];
    this.attr_key = '';
    this.description = CharacterSkills.skillDescriptions[this.key];
    this.points = 0;
    this.bonus = 0;
    this.selectors = '';
};
Skill.prototype = {
    getKey: function () {
        return this.key;
    }, setPoints: function (p) {
        if (this.points == p)return false;
        if ($.isNumeric(p)) {
            this.points = p;
        }
        else {
            this.points = 0;
            console.log('invalid skill points(' + p + ') for ' + this.key);
        }
        this.updateSkillViews();
    }, getPoints: function () {
        return this.points;
    }, setBonus: function (bonus) {
        if (this.bonus == bonus)return true;
        if ($.isNumeric(bonus)) {
            this.bonus = bonus;
        }
        else {
            this.bonus = 0;
        }
        this.updateSkillViews();
    }, getBonus: function () {
        return this.bonus;
    }, setDescription: function (desc) {
        this.description = desc;
    }, getDescription: function () {
        return this.description;
    }, setName: function (name) {
        this.name = name;
    }, getName: function () {
        return this.name;
    }, setAttrKey: function (attr) {
        this.attr_key = attr;
    }, getAttrKey: function () {
        return this.attr_key;
    }, getPointsWithBonus: function () {
        return parseInt(this.getPoints() + this.getBonus());
    }, addSelector: function (sel) {
        if (this.selectors.length > 7)this.selectors += ', ' + sel; else this.selectors = sel;
    }, getSkillIcon: function () {
        return $('<img class="skillicon" title="' + ('<p class="text_bold">' + this.name + '&nbsp;(' + this.getPoints() + ' / ' + (this.getBonus() ? '<span class="tw_green">' + this.getBonus() + '</span>' : this.getBonus()) + ')</p>' + this.description).escapeHTML() + '" src="https://westrus.innogamescdn.com/images/window/skills/skillicon_' + this.key + '.png" />');
    }, getSkillImage: function (id) {
        return $('<div class="skillbox skillbox_' + this.key + '"' + (id ? ' id="' + id + '"' : '') + '>' + '<img class="skillicon" title="' + ('<p class="text_bold">' + this.name + '&nbsp;(' + this.getPoints() + ' / ' + (this.getBonus() ? '<span class="tw_green">' + this.getBonus() + '</span>' : this.getBonus()) + ')</p>' + this.description).escapeHTML() + '" src="https://westrus.innogamescdn.com/images/window/skills/skillicon_' + this.key + '.png" />' + '<span class="char_skill_' + this.key + ' skillpoints_label' + (this.getBonus() ? ' text_green' : '') + '">' + this.getPointsWithBonus() + '</span>' + '</div>');
    }, getSkillPMBox: function (id, guiStorageObj, pmOptions) {
        var tmpJqObj;
        tmpJqObj = $('<div class="skillbox"' + (id ? ' id="' + id + '"' : '') + '>' + '<img class="skillicon" title="' + ('<p class="text_bold">' + this.name + '</p>' + this.description).escapeHTML() + '" src="https://westrus.innogamescdn.com/images/window/skills/skillicon_' + this.key + '.png" />' + '<div class="skill_plusminus"></div>' + '</div>');
        guiStorageObj = new west.gui.Plusminusfield(pmOptions.id, pmOptions.start_value, pmOptions.min_value, pmOptions.max_value, pmOptions.extra_points || 0, pmOptions.callbackPlus, pmOptions.callbackMinus).setWidth(80).togglePlus().setData({'key': this.key});
        $('div.skill_plusminus', tmpJqObj).append(guiStorageObj.getMainDiv());
        return tmpJqObj;
    }, updateSkillViews: function () {
        var sel = $('#windows div.skillbox_' + this.key);
        $('img.skillicon', sel).remove();
        sel.prepend(this.getSkillIcon());
        $('span.char_skill_' + this.key, sel).text(this.getPointsWithBonus());
        if (this.getBonus())
            $('span.char_skill_' + this.key, sel).addClass('text_green'); else
            $('span.char_skill_' + this.key, sel).removeClass('text_green');
        if (wman.getById('playerskills')) {
            SkillsWindow.updatePMSkillBox4Skill(this.key, this.getPoints(), this.getBonus());
        }
        if (this.selectors.length > 7)$(this.selectors).text(this.getPointsWithBonus());
    }
};
CharacterSkills = {
    attributes: {},
    skills: {},
    usedAttributes: 0,
    usedSkills: 0,
    freeAttrPoints: 0,
    freeSkillPoints: 0,
    buffs: null,
    skillDescriptions: {
        build: 'Увеличивает эффективность строительства зданий.<br/>\nТребуется для многих работ.',
        punch: 'Увеличивает урон, наносимый на дуэли оружием ближнего боя.<br/>\nТребуется для многих работ.',
        tough: 'Понижает урон, получаемый на дуэли от оружия ближнего боя.<br/>\nТребуется для многих работ.',
        endurance: 'Увеличивает уровень атаки и защиты в фортовых сражениях, если ты находишься на атакующей стороне.<br />\nТребуется для многих работ.',
        health: 'Повышает очки здоровья на 10.',
        ride: 'Увеличивает скорость передвижения по карте.<br />\nТребуется для многих работ.',
        reflex: 'Понижает урон, получаемый на дуэли от оружия дальнего боя.<br />\nТребуется для многих работ.',
        dodge: 'Увеличивает шанс уклонится на дуэли и в битве от любого вида оружия.<br />\nНе требуется для работ.',
        hide: 'Увеличивает уровень атаки и защиты в фортовых сражениях, если ты находишься на защищающей стороне.<br />\nТребуется для многих работ.',
        swim: 'Требуется для многих работ.',
        aim: 'Увеличивает шанс попасть на дуэли и в битве любым видом оружия.<br />\nНе требуется для работ.',
        shot: 'Увеличивает урон, наносимый на дуэли оружием дальнего боя.<br/>\nТребуется для многих работ.',
        pitfall: 'Требуется для многих работ.',
        finger_dexterity: 'Требуется для многих работ.',
        repair: 'Увеличивает эффективность строительства зданий.<br/>\nТребуется для многих работ.',
        leadership: 'Увеличивает шанс попасть и уклониться в фортовых сражениях, без разницы на какой ты стороне.<br/>\nУвеличивает эффективность строительства зданий.<br/>\nТребуется для многих работ.',
        tactic: 'Важна для защиты в дуэли. Если тактические навыки защищающегося превосходят умение нападающего блефовать, то защищающийся получает бонус к меткости.<br />Требуется для многих работ.',
        trade: 'Требуется для многих работ.',
        animal: 'Требуется для многих работ.',
        appearance: 'Важен для атаки в дуэли. Если умение нападающего блефовать превосходит тактические навыки защищающегося, то нападающий получает бонус к меткости.<br />Требуется для многих работ.'
    },
    attrDescriptions: {
        strength: 'Сила — это здоровье и мускулатура. Она особенно помогает в тяжёлом физическом труде. Очко этой характеристики увеличивает все красные навыки на 1:<br/>\n-Строительство<br/>\n-Удар<br/>\n-Стойкость<br/>\n-Выносливость<br/>\n-Здоровье',
        flexibility: 'Ловкость — это умение подчинять себе своё тело. Чем выше ловкость, тем лучше развит вестибулярный аппарат и реакция. Очко этой характеристики увеличивает все зелёные навыки на 1:<br/>\n-Верховая езда<br/>\n-Реакция<br/>\n-Увёртливость<br/>\n-Маскировка<br/>\n-Плавание',
        dexterity: 'Сноровка — это ловкость рук. Помогает при точных работах и метких выстрелах. Очко этой характеристики увеличивает все синие навыки на 1:<br/>\n-Меткость<br/>\n-Стрельба<br/>\n-Установка ловушек<br/>\n-Проворство<br/>\n-Ремонт',
        charisma: 'Шарм — это твое личное обаяние, умение убедить людей и повести их за собой. Очко этой характеристики увеличивает все жёлтые навыки на 1:<br/>\n- Руководство<br/>\n- Тактика <br/>\n- Торговля<br/>\n- Общение с животными<br/>\n- Блеф'
    },
    skillKeys4Attr: {
        'strength': ['build', 'punch', 'tough', 'endurance', 'health'],
        'flexibility': ['ride', 'reflex', 'dodge', 'hide', 'swim'],
        'dexterity': ['aim', 'shot', 'pitfall', 'finger_dexterity', 'repair'],
        'charisma': ['leadership', 'tactic', 'trade', 'animal', 'appearance']
    },
    keyNames: {
        strength: 'Сила',
        flexibility: 'Ловкость',
        dexterity: 'Сноровка',
        charisma: 'Шарм',
        build: 'Строительство',
        punch: 'Удар',
        tough: 'Стойкость',
        endurance: 'Выносливость',
        health: 'Здоровье',
        ride: 'Верховая езда',
        reflex: 'Реакция',
        dodge: 'Увёртливость',
        hide: 'Маскировка',
        swim: 'Плавание',
        aim: 'Меткость',
        shot: 'Стрельба',
        pitfall: 'Установка ловушек',
        finger_dexterity: 'Проворство',
        repair: 'Ремонт',
        leadership: 'Руководство',
        tactic: 'Тактика',
        trade: 'Торговля',
        animal: 'Обращение с животными',
        appearance: 'Блеф'
    }
}
CharacterSkills.prototype = CharacterSkills;
CharacterSkills.init = function (data, buffs) {
    CharacterSkills.initAttributes(data.attributes, data.attributeBonus);
    CharacterSkills.initSkills(data.skills, data.skillBonus);
    CharacterSkills.setFreeAttrPoints(data.freeAttribute);
    CharacterSkills.setFreeSkillPoints(data.freeSkill);
    CharacterSkills.setBuffs(buffs);
};
CharacterSkills.allAttrKeys = ['strength', 'flexibility', 'dexterity', 'charisma'];
CharacterSkills.allSkillKeys = ['build', 'punch', 'tough', 'endurance', 'health', 'ride', 'reflex', 'dodge', 'hide', 'swim', 'aim', 'shot', 'pitfall', 'finger_dexterity', 'repair', 'leadership', 'tactic', 'trade', 'animal', 'appearance'];
CharacterSkills.initUsedPoints = function (attr, sk) {
    this.usedAttributes = attr;
    this.usedSkills = sk;
}
CharacterSkills.getUsedAttributePoints = function () {
    return this.usedAttributes;
}
CharacterSkills.getUsedSkillPoints = function () {
    return this.usedSkills;
}
CharacterSkills.initAttributes = function (attrPointObj, attrBonusObj) {
    var that = this;
    for (var key in attrPointObj) {
        if ($.fn.isInArray(key, CharacterSkills.allAttrKeys))
            that.setAttribute(key, attrPointObj[key], attrBonusObj[key]); else
            console.log('initAttributes error, unknown key:' + k);
    }
}
CharacterSkills.updateAttributePoints = function (attrPointObj) {
    var that = this
    for (var key in attrPointObj) {
        var tmpAttr;
        if ($.fn.isInArray(key, CharacterSkills.allAttrKeys)) {
            tmpAttr = that.getAttribute(key);
            tmpAttr.setPoints(attrPointObj[key]);
        }
        else
            console.log('updateAttributePoints error, unknown key:' + k);
    }
}
CharacterSkills.updateAttributeBonuspoints = function (attrBonusObj) {
    var key;
    for (key in attrBonusObj) {
        if (!attrBonusObj.hasOwnProperty(key))continue;
        if ($.fn.isInArray(key, CharacterSkills.allAttrKeys)) {
            CharacterSkills.getAttribute(key).setBonus(attrBonusObj[key]);
        }
        else
            console.log('updateAttributeBonuspoints error, unknown key:' + key);
    }
}
CharacterSkills.setAttribute = function (key, points, bonuspoints) {
    if (this.attributes[key])this.attributes[key].setPoints(points).setBonus(bonuspoints); else this.attributes[key] = new Attribute(key, points, bonuspoints);
};
CharacterSkills.getAttribute = function (key) {
    if ($.fn.isInArray(key, CharacterSkills.allAttrKeys)) {
        return this.attributes[key];
    }
    else {
        console.log('error - attribute not exists, unknown key:' + key);
        return false;
    }
};
CharacterSkills.initSkills = function (skillPointObj, skillBonusObj) {
    var tmpSk;
    for (var k in skillPointObj) {
        if ($.fn.isInArray(k, CharacterSkills.allSkillKeys)) {
            tmpSk = this.getSkill(k);
            if (tmpSk) {
                tmpSk.setPoints(skillPointObj[k]);
                tmpSk.setBonus(skillBonusObj[k]);
            }
            else
                console.log('error - skill not exists, init attributes before you init skills!');
        }
    }
}
CharacterSkills.updateSkillPoints = function (skillPointObj) {
    var that = this;
    for (var k in skillPointObj) {
        var tmpSk;
        if ($.fn.isInArray(k, CharacterSkills.allSkillKeys)) {
            tmpSk = that.getSkill(k);
            tmpSk.setPoints(skillPointObj[k]);
        }
        else
            console.log('updateSkillPoints error, unknown key:' + k);
    }
}
CharacterSkills.updateSkillBonuspoints = function (skillBonusObj) {
    for (var k in skillBonusObj) {
        if (!skillBonusObj.hasOwnProperty(k))continue;
        if ($.fn.isInArray(k, CharacterSkills.allSkillKeys)) {
            CharacterSkills.getSkill(k).setBonus(skillBonusObj[k]);
        }
        else
            console.log('updateSkillBonuspoints error, unknown key:' + k);
    }
}
CharacterSkills.getSkill = function (key) {
    if ($.fn.isInArray(key, CharacterSkills.allSkillKeys)) {
        return this.skills[key];
    }
    else {
        console.log('error - skill not exists, unknown key:' + key);
        return false;
    }
}
CharacterSkills.getSkillKeys4Attribute = function (key) {
    return this.skillKeys4Attr[key];
};
CharacterSkills.getAttributeKey4Skill = function (key) {
    for (var attribute in CharacterSkills.skillKeys4Attr) {
        if ($.inArray(key, CharacterSkills.skillKeys4Attr[attribute]) !== -1)
            return attribute;
    }
    return false;
};
CharacterSkills.update = function (attr, skills, bonus_attr, bonus_skills) {
    if (attr)this.updateAttributePoints(attr);
    if (skills)this.updateSkillPoints(skills);
    if (bonus_attr)this.updateAttributeBonuspoints(bonus_attr);
    if (bonus_skills)this.updateSkillBonuspoints(bonus_skills);
    EventHandler.signal('char_skills_changed', []);
};
CharacterSkills.updateAllBonuspoints = function (bonusObj) {
    var that = this;
    for (var k in bonusObj) {
        var tmpObj;
        if ($.fn.isInArray(k, CharacterSkills.allSkillKeys)) {
            tmpObj = that.getSkill(k);
            tmpObj.setBonus(bonusObj[k]);
        }
        else if ($.fn.isInArray(k, CharacterSkills.allAttrKeys)) {
            tmpObj = that.getAttribute(k);
            tmpObj.setBonus(bonusObj[k]);
        }
        else {
            if (window.DEBUG)console.log('updateAllBonuspoints error, unknown key:' + k);
        }
    }
    EventHandler.signal("item_set_bonus_changed", []);
    EventHandler.signal('char_skills_changed', []);
}
CharacterSkills.calculateWorkPoints = function (jobId, keyArray) {
    var res = 0;
    for (var i = 0; i < keyArray.length; i++) {
        res += CharacterSkills.getSkill(keyArray[i]).getPointsWithBonus();
    }
    return res + parseInt(WearSet.getWorkPointAddition(jobId));
};
CharacterSkills.calcBonusSkillpoints = function () {
    var bonus_skills = {};
    for (var skkey in this.skills) {
        bonus_skills[skkey] = this.getSkill(skkey).getPointsWithBonus();
    }
    return bonus_skills;
};
CharacterSkills.setBuffs = function (buffs) {
    this.buffs = buffs;
    BuffList.replaceList(buffs);
    EventHandler.signal('item_buff_bonus_changed', []);
};
CharacterSkills.removeBuffCharge = function (type) {
    if (isDefined(this.buffs[type]) && this.buffs[type].charge > 0) {
        this.buffs[type].charge--;
        if (this.buffs[type].charge == 0) {
            this.buffs[type] = null;
        }
    }
};
CharacterSkills.setFreeAttrPoints = function (free_points) {
    this.freeAttrPoints = free_points;
    if (wman.getById('playerskills'))SkillsWindow.updateOpenPoints(this.freeAttrPoints, null);
    if (free_points > 0)EventHandler.signal('character_attrpoints_earned');
}
CharacterSkills.setFreeSkillPoints = function (free_points) {
    this.freeSkillPoints = free_points;
    if (wman.getById('playerskills'))SkillsWindow.updateOpenPoints(null, this.freeSkillPoints);
    if (free_points > 0)EventHandler.signal('character_skillpoints_earned');
}
CharacterSkills.addFreeSkillPoints = function (free_points) {
    this.freeSkillPoints += free_points;
    if (wman.getById('playerskills'))SkillsWindow.updateOpenPoints(null, this.freeSkillPoints);
    if (this.freeSkillPoints > 0)EventHandler.signal('character_skillpoints_earned');
}
CharacterSkills.addFreeAttrPoints = function (free_points) {
    this.freeAttrPoints += free_points;
    if (wman.getById('playerskills'))SkillsWindow.updateOpenPoints(this.freeAttrPoints);
    if (this.freeAttrPoints > 0)EventHandler.signal('character_attrpoints_earned');
}

Guidepost = {
    show: function (id, x, y, type) {
        var msg = 'Стрелка указывает дорогу к городу.';
        if (type == 'fort') {
            msg = 'Указатель показывает направление к форту.';
        }
        var template = '<div class="fingerboard_dialog">' + '<img src="https://westrus.innogamescdn.com/images/fingerboard/fingerboard.png" alt="' + 'Указатель' + '" style="vertical-align:top;margin-right:25px;float:left" />' + '<p>' + msg + '</p>' + '</div>' + '<p class="fingerboard_buttonlist">' + 'Расстояние:' + '<span class="way_time">' + Map.calcWayTime(Character.position, {
                x: x,
                y: y
            }).formatDuration() + '</span></p>';
        return new west.gui.Dialog('Указатель', template).addButton('Идти', function () {
            Guidepost.start_walk(id, type);
        }).addButton('cancel').show();
    }, start_walk: function (id, type) {
        TaskQueue.add(new TaskWalk(id, type));
    }
};

var WestUi = {
    init: function () {
        WestUi.BottomBar.init();
        WestUi.TopBar.init();
        WestUi.WindowBar.init();
        WestUi.NotiBar.init();
        WestUi.Chat.init();
        WestUi.CharBar.init();
        WestUi.TopLeftBar.init();
        WestUi.CssAnimations.observe();
        WestUi.Focus.init();
        EventHandler.listen('chat_init', WestUi.FriendsBar.init);
        if (Config.get("gui.animations")) {
            WestUi.CssAnimations.enable();
        }
        TaskQueueUi.init();
        EventHandler.listen("char_home_town_changed", this.createTownLinksOnTownChange.bind(this));
        EventHandler.listen("char_profession_changed", this.updateProfessionButton);
        EventHandler.listen("character_level_up", this.updateProfessionButton);
        EventHandler.listen("position_change", this.positionUpdate, this);
        EventHandler.listen('character_level_up', this.checkAddBookmark);
        EventHandler.listen("character_exp_changed", this.updateExpBar, this);
        EventHandler.listen("character_tracking_achievement_changed", this.updateExpBar, this);
        EventHandler.listen("character_level_up", this.updateLevelUp, this);
        EventHandler.listen("energy", this.updateEnergy, this);
        EventHandler.listen("health", this.updateHealth, this);
        EventHandler.listen("char_avatar_changed", this.setAvatar);
        this.initCenterButtons();
        this.initRefill();
        var blinkBottom = function (type, toRead, check) {
            toRead = toRead || type;
            check = check || Character.read;
            return function () {
                WestUi.Blinker.start(type, {
                    'start': function () {
                        if (Config.get("gui.animations")) {
                            $('.dock-highlight.' + type).animate({'opacity': 1}, {'queue': false, 'duration': 600});
                            if ('city' === type) {
                                $('#windows div.tow_forumhighlight').animate({'opacity': 1}, {
                                    'queue': false,
                                    'duration': 600
                                });
                            }
                        } else {
                            $('.dock-highlight.' + type).css('opacity', 1);
                            if ('city' === type)$('#windows div.tow_forumhighlight').css('opacity', 1);
                        }
                    }, 'stop': function (force) {
                        if (Config.get("gui.animations")) {
                            $('.dock-highlight.' + type).animate({'opacity': 0}, {'queue': false, 'duration': 600});
                            if ('city' === type) {
                                $('#windows div.tow_forumhighlight').animate({'opacity': 0}, {
                                    'queue': false,
                                    'duration': 600
                                });
                            }
                        } else if (force) {
                            $('.dock-highlight.' + type).css('opacity', 0);
                            if ('city' === type)$('#windows div.tow_forumhighlight').css('opacity', 0);
                        }
                    }, 'check': function () {
                        if (type == 'message')
                            return Character.read['messages'] || Character.read['reports'];
                        return typeof check === 'function' ? check() : check[toRead];
                    }
                });
            };
        };
        EventHandler.listen('player-toread-messages', blinkBottom('message', 'messages'));
        EventHandler.listen('player-toread-reports', blinkBottom('message', 'reports'));
        EventHandler.listen('player-toread-townforum', blinkBottom('city', 'townforum'));
        EventHandler.listen('player-toread-inventory', blinkBottom('inventory'));
        EventHandler.listen(['new-job', 'job-seen'], blinkBottom('jobs', 'jobs', JobList.hasNewJob));
        blinkBottom('jobs', 'jobs', JobList.hasNewJob)();
        setInterval(function () {
            $("#servertime").text("Время сервера:" + " " + get_server_date_string());
        }, 500);
    }, initRefill: function () {
        var el = $("#ui_character_container .energy_add");
        if (!Premium.buyable.energy) {
            el.remove();
            return;
        }
        el.click(Premium.showEnergy);
    }, initCenterButtons: function () {
        var el = $("#ui_right #ui_centerbuttons");
        $(".menulink.lcharacter").click(function () {
            Map.center(Character.position);
            EventHandler.signal('button-clicked', ['lcharacter']);
        }).show();
        var fl = $(".menulink.lfort").hide();
        EventHandler.listen("char_forts_changed", function (oldForts, newForts) {
            fl.hide();
            if (newForts.length > 0) {
                fl.click(function (e) {
                    WestUi.openForts(e);
                }).show();
            }
        });
        var tl = $(".menulink.ltown").hide();
        EventHandler.listen("char_home_town_changed", function (oldTown, newTown) {
            tl.hide();
            if (newTown.town_id) {
                tl.click(function () {
                    Map.center(newTown.x, newTown.y);
                }).show();
            }
        });
    }, showTip: function (id) {
        var tip = Game.InfoHandler.getGameTip(id);
        if (!tip)return;
        WestUi.NotiBar.add(new OnGoingTipEntry(tip));
    }, createSkillsWindowLink: function () {
        $('#ui_character_container div.skills').off('click').click(function () {
            SkillsWindow.open();
        }).removeClass("nonactive").attr('title', 'Навыки');
    }, createDailyWindowLink: function () {
        $('#ui_character_container div.daily').off('click').click(function () {
            DailyActivitiesWindow.open();
        }).removeClass("nonactive").attr('title', 'Ежедневные задания');
    }, createQuestbookWindowLink: function () {
        $('#ui_character_container div.questbook').off('click').click(function () {
            QuestWindow.open(true);
        }).removeClass("nonactive").attr('title', 'Квесты');
    }, unlockTownLinksOnLvlUp: function () {
        var city_button = $('div#ui_bottombar .button.city'), city_button_image = $('.dock-image', city_button), home_town = Character.homeTown;
        city_button.off('click');
        if (west.Feature.isUnlocked('city')) {
            city_button.addMousePopup('Город');
            city_button_image.removeClass('nonactive');
            if (home_town.town_id) {
                city_button.addClass('townoverview_' + home_town.x + '_' + home_town.y).on('click', function () {
                    TownWindow.toggleOpen(home_town.x, home_town.y);
                });
                this.BottomBar.addEventListenersForWindow('townoverview_' + home_town.x + '_' + home_town.y);
            } else {
                city_button.addClass('blackboard').on('click', function () {
                    west.window.Blackboard.toggleOpen();
                });
                this.BottomBar.addEventListenersForWindow('blackboard');
            }
        } else {
            city_button_image.addClass('nonactive');
        }
    }, createTownLinksOnTownChange: function (oldTown, newTown) {
        var city_button = $('div#ui_bottombar .button.city'), city_button_image = $('.dock-image', city_button);
        if (!west.Feature.isUnlocked('city')) {
            return this;
        }
        city_button.off('click').removeClass('minimized active');
        city_button_image.removeClass('nonactive');
        if (oldTown && oldTown.town_id) {
            city_button.removeClass('townoverview_' + oldTown.x + '_' + oldTown.y);
            this.BottomBar.removeEventListenersForWindow('townoverview_' + oldTown.x + '_' + oldTown.y);
        } else {
            city_button.removeClass('blackboard');
            this.BottomBar.removeEventListenersForWindow('blackboard');
        }
        if (newTown && newTown.town_id) {
            city_button.addClass('townoverview_' + newTown.x + '_' + newTown.y).on('click', function () {
                TownWindow.toggleOpen(newTown.x, newTown.y);
            });
            this.BottomBar.addEventListenersForWindow('townoverview_' + newTown.x + '_' + newTown.y);
        } else {
            city_button.addClass('blackboard').on('click', function () {
                west.window.Blackboard.toggleOpen();
            });
            this.BottomBar.addEventListenersForWindow('blackboard');
        }
    }, createDuelWindowLink: function () {
        $('#ui_bottombar .button.duels').off('click').on('click', function () {
            DuelsWindow.toggleOpen();
        }).children('.dock-image').removeClass("nonactive").addMousePopup('Дуэли');
    }, updateProfessionButton: function () {
        var title, active = true;
        if (Character.level < 20) {
            title = 'Ты сможешь выбрать профессию на 20 уровне.';
            active = false;
        } else if (Character.professionId && Character.level >= 20) {
            title = 'Профессия';
        } else if (Character.level >= 20) {
            title = 'Теперь ты можешь выбрать профессию!';
        }
        if (title) {
            $('div#ui_bottombar .crafting').removeClass(active ? 'nonactive' : 'active').attr('title', title);
        }
    }, createMultiplayerLink: function () {
        $('div#ui_bottombar .button.multiplayer').off('click').on('click', function () {
            west.window.multiplayer.toggleOpen();
        }).addMousePopup('Многопользовательские сражения').children('.dock-image').removeClass("nonactive");
    }, positionUpdate: function (x, y, oldpos) {
        if (oldpos.x == 0 && oldpos.y == 0)return;
        WestUi.NotiBar.add(new OnGoingWayFinishedEntry(x, y));
    }, updateLevelUp: function (data) {
        $('#ui_character_container > .level').text(data.level).attr('title', s('%1-й уровень', data.level));
        if (west.Feature.isUnlocked('skills')) {
            this.createSkillsWindowLink();
        }
        if (west.Feature.isUnlocked('daily')) {
            this.createDailyWindowLink();
        }
        if (west.Feature.isUnlocked('multiplayer')) {
            this.createMultiplayerLink();
        }
        this.unlockTownLinksOnLvlUp();
        if (!data.init) {
            WestUi.updateExpBar(Character.experience);
            $('#levelup').fadeIn(200).fadeOut(200, function () {
                new LevelUpWindow(data.level, data.oldlevel);
            });
        }
    }, animateCharatcerOnMap: function (className, delay, target) {
        var expEl = $('<div class="' + className + '" />');
        target = target || {'top': 80, 'left': 0};
        $('#map').append(expEl);
        expEl.css({'left': Character.position.x - 19, 'top': Character.position.y - 125});
        expEl.delay(delay).fadeIn(500).animate({
            top: ['+=' + target.top, 'easeInQuad'],
            left: ['+=' + target.left, 'easeOutQuad'],
            opacity: ['0', 'easeInQuad']
        }, 1500, 'linear', function () {
            expEl.remove();
        });
    }, updateExpBar: function () {
        var epEl = $("#ui_experience_bar"), glow = $(".fill_glow", epEl), fill = $('.fill_wrap > .fill', epEl), prog = (undefined === Character.getTrackingAchievement()) ? this.updateTrackXp(epEl) : this.updateTrackAchievement(epEl);
        var beginAnimate = function () {
            glow.show();
            fill.animate({width: prog.percent + '%'}, 500, function () {
                glow.hide();
            });
        };
        if (fill.data('val') && fill.data('val') > prog.percent) {
            fill.stop().clearQueue().animate({width: '100%'}, 500, function () {
                fill.width(0);
                beginAnimate();
            });
        } else {
            beginAnimate();
        }
        $('.label', epEl).hover(function () {
            $("span", this).empty().append(prog.percent + '%').show();
        }, function () {
            $("span", this).hide();
        });
        epEl.addMousePopup(s(prog.title, prog.current, prog.required));
        fill.data('val', prog.percent);
    }, updateTrackAchievement: function (barEl) {
        if (!barEl.hasClass('paragon')) {
            barEl.addClass('paragon');
            $('.fill_wrap', barEl).append($('<span class="remove" title="' + "Достижения более не отслеживать".escapeHTML() + '"></span>').on('click', Character.untrackAchievement));
        }
        var status = Character.getTrackingAchievement();
        return {
            percent: Math.min(100, Math.floor(status.current / status.required * 100)),
            title: status.title + ': %1 / %2',
            current: status.current,
            required: status.required
        };
    }, updateTrackXp: function (barEl) {
        WestUi.animateCharatcerOnMap("character_bonus exp", 0);
        barEl.removeClass('paragon');
        var percent = 0;
        if (Character.getMinExperience() == Character.getMaxExperience()) {
            percent = 100;
        } else {
            percent = Math.floor(Character.getExperience4Level() / Character.getMaxExperience4Level() * 100);
        }
        return {
            percent: percent,
            title: "Очки опыта для следующего уровня: %1 / %2",
            current: Character.getExperience4Level(),
            required: Character.getMaxExperience4Level()
        };
    }, updateEnergy: function (rawEnergy, maxEnergy) {
        var y = -13;
        if (Premium.hasBonus('regen')) {
            $('#ui_character_container > .energy_bar').addClass('energy_premium_bonus');
            y = -26;
        } else {
            $('#ui_character_container > .energy_bar').removeClass('energy_premium_bonus');
        }
        var el = $('#ui_character_container > .energy_bar');
        var timeDiff = Game.getServerTime() - Character.energyDate;
        var energy = Math.floor(Math.min(rawEnergy + maxEnergy * Character.energyRegen * timeDiff / 3600, maxEnergy));
        el.text(energy + ' / ' + maxEnergy).css('background-position', -137 + this.calcWidth(energy, maxEnergy, 137) + 'px' + ' ' + y + 'px').addMousePopup(s("Энергия: %1 / %2", energy, maxEnergy));
    }, calcWidth: function (value, maxValue, maxWidth) {
        return Math.min(maxWidth, Math.max(0, Math.ceil(maxWidth * (value / maxValue * 100) / 100)));
    }, updateHealth: function (rawHealth, maxHealth) {
        if (maxHealth == undefined)maxHealth = Character.maxHealth;
        var timeDiff = Game.getServerTime() - Character.healthDate;
        var health = Math.floor(Math.min(rawHealth + maxHealth * Character.healthRegen * timeDiff / 3600, maxHealth));
        $('#ui_character_container > .health_bar').text(Math.round(health) + ' / ' + maxHealth).css('background-position', -137 + this.calcWidth(health, maxHealth, 137) + 'px 0px').attr('title', s('Здоровье: %1 / %2', health, maxHealth));
    }, TopBar: {
        init: function () {
            EventHandler.listen("char_money_changed", this.redrawMoney);
            EventHandler.listen("char_nuggets_changed", this.redrawNuggets);
            EventHandler.listen("char_deposit_changed", this.redrawDeposit);
            EventHandler.listen("upb_changed", this.redrawUpb);
        }, redrawUpb: function (upb) {
            $("div#ui_topbar > #bonds > .bond_limit").text(" / " + format_money(Game.upbLimit));
            WestUi.TopBar._redraw($("div#ui_topbar > #bonds > .bond_value"), upb);
            WestUi.animateCharatcerOnMap("character_bonus bonds", 800);
        }, redrawDeposit: function (deposit) {
            WestUi.TopBar._redraw($("div#ui_topbar > #deposit"), deposit);
        }, redrawNuggets: function (nuggets) {
            WestUi.TopBar._redraw($("div#ui_topbar > #nuggets"), nuggets);
        }, redrawMoney: function (money) {
            WestUi.TopBar._redraw($("div#ui_topbar > #money"), money);
            WestUi.animateCharatcerOnMap("character_bonus dollar", 400);
        }, _redraw: function (el, to) {
            var from = "" != el.text() && deformat_money(el.text()) || 0, cb = function (val) {
                el.text(format_money(Math.ceil(val)));
            };
            west.common.countTo(el, to, from, cb);
        }
    }, checkAddBookmark: function (data) {
        if (data.level > 10 && !data.init && Player.emailValid && Game.Utilities.canSaveBookmark() && !Config.get('bookmark.shown')) {
            WestUi.showAddBookmark();
            Config.set('bookmark.shown', true);
        }
        if (data.level > 20 && !Config.get('facebook.shown')) {
            WestUi.showAddFacebook();
        }
    }, showAddFacebook: function () {
        if ($('#addBookmark').length)return;
        var el = $('<div id="addBookmark">' + '<span class="bookmark-desc shorten">' +
            'Поддержать на Facebook'.escapeHTML() + '</span>' + '<span class="bookmark-save shorten">' + '<img style="margin-top: -3px;padding-right:5px;" src="https://westrus.innogamescdn.com/images/icons/fb_connect.png" />' +
            'The West'.escapeHTML() + '</span>' + '<span class="bookmark-close"></span>' + '</div>');
        var remove = function () {
            el.animate({top: 0}, 200, 'swing', function () {
                el.remove();
            });
        };
        $('.bookmark-save', el).click(function () {
            var win = window.open(Game.facebookFanURL, '_blank');
            win.focus();
            remove();
        });
        $('.bookmark-close', el).html(new west.gui.Button('Закрыть', remove).getMainDiv());
        el.appendTo('#user-interface').animate({top: 32});
        Config.set('facebook.shown', true);
    }, showAddBookmark: function () {
        if ($('#addBookmark').length)return;
        var el = $('<div id="addBookmark">' + '<span class="bookmark-desc shorten">' +
            'Быстрый доступ к The West'.escapeHTML() + '</span>' + '<span class="bookmark-save shorten">' +
            'Сохранить'.escapeHTML() + '</span>' + '<span class="bookmark-close"></span>' + '</div>');
        var remove = function () {
            el.animate({top: 0}, 200, 'swing', function () {
                el.remove();
            });
        };
        $('.bookmark-save', el).click(function () {
            Game.Utilities.saveBookmark(Game.masterURL, 'The West');
            remove();
        });
        $('.bookmark-close', el).html(new west.gui.Button('Закрыть', remove).getMainDiv());
        el.appendTo('#user-interface').animate({top: 32});
    }, BottomBar: {
        links: [{
            id: "inventory", unlock: 'inventory', title: "Багаж", wuid: "inventory", click: function () {
                Wear.open();
            }, state: "normal", blinkable: true
        }, {id: "city", title: "Город", wuid: null, click: null, state: "nonactive", blinkable: true}, {
            id: "friends",
            title: "Друзья",
            wuid: "friendslist",
            click: function () {
                FriendslistWindow.toggleOpen();
            },
            state: "normal"
        }, {
            id: "duels", title: "Дуэли", wuid: "duels", click: function () {
                DuelsWindow.toggleOpen();
            }, state: "normal"
        }, {
            id: "shop", title: "Магазин", wuid: "new_item_shop", click: function (e) {
                west.window.shop.toggleOpen('bottom_bar');
            }, state: "normal", blinkable: true
        }, {
            id: "message", title: "Сообщения", wuid: "messages", click: function () {
                MessagesWindow.toggleOpen();
            }, state: "normal", blinkable: true
        }, {
            id: "crafting", title: "Профессия", wuid: "character", click: function () {
                CharacterWindow.toggleOpen("crafting");
            }, state: "nonactive"
        }, {
            id: "jobs", title: "Работа", wuid: 'jobs', click: function () {
                JobsWindow.toggleOpen();
            }, state: "normal", blinkable: true
        }, {
            id: "multiplayer", title: "Многопользовательские сражения", wuid: "multiplayer", click: function () {
                west.window.multiplayer.toggleOpen();
            }, state: 'nonactive'
        }], init: function () {
            var that = this;
            this.links.each(function (d) {
                var cin = function () {
                    that.handleMouseOver(this, d.id);
                }, cout = function () {
                    that.handleMouseLeave(this, d.id);
                }, el = $("<div "
                    + "class='button " + d.id + " " + (('shop' === d.id) ? 'background-shop' : 'background') + "'"
                    + "title='" + ((west.Feature.isUnlocked(d.id)) ? d.title : west.Feature.getInfo(d.id)) + "'>"
                    + ((d.blinkable) ? '<div class="dock-highlight ' + d.id + '" />' : '')
                    + (('shop' !== d.id) ? "<div class='dock-image " + (west.Feature.isUnlocked(d.id) ? "" : d.state + " ") + d.id + "'></div>" : "") + "</div>");
                var clk = function () {
                    if (west.Feature.isUnlocked(d.id) || (!$('.dock-image', el).hasClass("nonactive") && d.click))
                        d.click();
                };
                el.click(clk).hover(cin, cout).focusin(cin).focusout(cout);
                if (null != d.wuid) {
                    that.addEventListenersForWindow(d.wuid);
                }
                $("div#ui_bottombar .ui_bottombar_wrapper").append(el);
            });
            this.loaded = true;
            EventHandler.signal('ui_bottomBar_loaded');
        }, onEvent: {
            activate: function (e) {
                $('#ui_bottombar .button.' + e).addClass("active");
            }, minimize: function (e) {
                $('#ui_bottombar .button.' + e).removeClass("active").addClass('minimized');
            }, maximize: function (e) {
                $('#ui_bottombar .button.' + e).removeClass('minimized').addClass("active");
                ;
            }, close: function (e) {
                $('#ui_bottombar .button.' + e).removeClass("active minimized");
            }
        }, addEventListenersForWindow: function (wuid) {
            this.removeEventListenersForWindow.call(this, wuid);
            EventHandler.listen("window_opened_" + wuid, this.onEvent.activate);
            EventHandler.listen("window_reopen_" + wuid, this.onEvent.maximize);
            EventHandler.listen("window_minimize_" + wuid, this.onEvent.minimize);
            EventHandler.listen("window_closed_" + wuid, this.onEvent.close);
        }, removeEventListenersForWindow: function (wuid) {
            EventHandler.unlisten("window_opened_" + wuid, this.onEvent.activate);
            EventHandler.unlisten("window_reopen_" + wuid, this.onEvent.maximize);
            EventHandler.unlisten("window_minimize_" + wuid, this.onEvent.minimize);
            EventHandler.unlisten("window_closed_" + wuid, this.onEvent.close);
        }, blockForTutorial: function () {
            var menu = $('#ui_bottombar');
            this.links.each(function (d) {
                if ("duels" === d.id || "multiplayer" === d.id) {
                    $('div.button.' + d.id + ' div.dock-image', menu).addClass(d.state);
                    $('div.button.' + d.id, menu).addMousePopup(west.Feature.isUnlocked(d.id) ? d.title : west.Feature.getInfo(d.id)).off('click').off('hover').off('focusin').off('focusout');
                }
            });
        }, handleMouseOver: function (el) {
            if (!$(el).children().filter('.nonactive').length)
                $(el).addClass('hover');
        }, handleMouseLeave: function (el) {
            $(el).removeClass('hover');
        }
    }, Blinker: {
        timer: undefined, animation: {}, start: function (btn, animation) {
            if (!animation.start || !animation.stop)throw'no start / stop animation given';
            if (!WestUi.Blinker.animation[btn])
                WestUi.Blinker.animation[btn] = animation;
            WestUi.Blinker.animation[btn].active = true;
            if (!WestUi.Blinker.timer) {
                WestUi.Blinker.blink();
            }
        }, stop: function (btn) {
            if (WestUi.Blinker.animation[btn])
                WestUi.Blinker.animation[btn].active = false;
        }, blink: function () {
            var start = true;
            WestUi.Blinker.timer = window.setInterval(function () {
                var allStopped = true;
                for (var wid in WestUi.Blinker.animation) {
                    if (!WestUi.Blinker.animation.hasOwnProperty(wid))continue;
                    var animation = WestUi.Blinker.animation[wid];
                    if (animation.active && (!animation.check || animation.check())) {
                        if (start && !LinearQuestHandler.hasTutorialQuest())animation.start(); else animation.stop();
                        allStopped = false;
                    } else {
                        animation.stop(true);
                        WestUi.Blinker.stop(wid);
                    }
                }
                ;
                start = (start) ? false : true;
                if (allStopped) {
                    window.clearInterval(WestUi.Blinker.timer);
                    WestUi.Blinker.timer = undefined;
                    start = true;
                }
            }, 1000);
        }
    }, setAvatar: function (avatar) {
        $(avatar).appendTo($('#ui_char_avatar').empty());
    }, openForts: function (e) {
        if (Character.forts && Character.forts.length == 1) {
            return Map.center(Character.forts[0]);
        }
        var dropdown = new west.gui.Selectbox(true).setWidth(150).addListener(function (fort) {
            Map.center(fort.x, fort.y);
        });
        for (var i in Character.forts) {
            if (!Character.forts.hasOwnProperty(i))continue;
            dropdown.addItem(Character.forts[i], Character.forts[i].name);
        }
        dropdown.show(e);
    }, showInventoryChanged: function (type, item_id, count) {
        if (!Bag.loaded)return;
        var itemData = ItemManager.get(item_id);
        var item = new tw2widget.Item(itemData, 'item_popup_item_small').setCount(count);
        var itemDiv = item.getMainDiv();
        if (type == 'add') {
            $("#ui_inv_changed").append(itemDiv);
        } else {
            $("#ui_inv_changed").prepend(itemDiv);
        }
        itemDiv.animate({top: (type == 'add' ? '30px' : '-30px'), opacity: 0.2}, 800, 'linear', function () {
            $(this).remove();
        });
    }, showPremiumPurchaseButton: function (flashing) {
        var ctx = $('#user-interface'), button = $('.first-purchase', ctx), swing;
        if (button.length) {
            window.clearInterval(button.data('timer'));
            button.remove();
        }
        button = $(s('<div class="first-purchase" title="%1"><div class="animation"></div></div>', 'Бонус'.escapeHTML())).click(function () {
            new west.player.PremiumPurchase;
        });
        ctx.append(button);
        swing = function () {
            if (Math.floor(Math.random() * 100) >= 69) {
                button.addClass('balance').delay(5000).queue(function () {
                    $(this).removeClass('balance');
                    $(this).dequeue();
                });
            }
        };
        button.data('timer', window.setInterval(swing, 10000));
    }, hidePremiumPurchaseButton: function () {
        var button = $('.first-purchase', $('#user-interface'));
        window.clearInterval(button.data('timer'));
        button.remove();
    }, WindowBar: {
        init: function () {
            var minimized = true, state = $(".ui_windowbar_state.minimizeAll"), closeAll = $(".ui_windowbar_state.closeAll");
            state.click(function () {
                if (!minimized) {
                    wman.minimizeAll();
                    state.addClass("minimized").addMousePopup('Развернуть все окна');
                } else {
                    wman.reopenAll();
                    state.removeClass("minimized").addMousePopup('Свернуть все окна');
                }
                minimized = !minimized;
            });
            state.click();
            closeAll.on('click', function () {
                wman.closeAll();
            }).addMousePopup('Закрыть все окна');
        }, add: function (uid, win, close) {
            if ($(win.getMainDiv()).hasClass("dontminimize"))
                return false;
            var cl = $(win.getMainDiv()).attr("class");
            var title = $("<div class='windowframe_title' title='" + win.getMiniTitle() + "'/>").text(win.getMiniTitle().cutIt(20));
            var div = $("<div class='windowframe minimizer4" + uid + "' />").append(title.click(function () {
                if (div.hasClass('focus'))wman.minimize(uid); else wman.reopen(uid, cl);
            }), $("<div class='windowframe_right'>"
                + "<div class='windowframe_closer' />"
                + "</div>").click(function () {
                wman.close(uid);
            }));
            win.addEventListener(TWE("WINDOW_MINI_TITLE_CHANGED"), function (e, win, uid) {
                title.attr('title', win.getMiniTitle()).text(win.getMiniTitle().cutIt(20));
            });
            $('#ui_windowbar > div.windowbar_frames').append(div);
            return true;
        }, onWindowOpen: function (uid, win) {
            if (this.add(uid, win))
                $("#ui_windowdock").show();
        }, onWindowReopen: function (uid, win) {
            $('div.minimizer4' + uid).removeClass("minimized");
        }, onWindowMinimize: function (uid, win) {
            $('div.minimizer4' + uid).removeClass("focus");
        }, onWindowDestroy: function (uid) {
            $('div.minimizer4' + uid).empty().remove();
            if (0 == $("#ui_windowbar div.windowbar_frames").children().length)
                $("#ui_windowdock").hide();
        }, onWindowFocus: function (uid, win) {
            $('#ui_windowbar > div.windowbar_frames').children().removeClass("focus");
            $('div.minimizer4' + uid).addClass("focus");
        }
    }, Chat: {
        init: function () {
            var lw = $("#ui_chat > .container .listwrap");
            $("#ui_chat > .container").prepend(new west.gui.Scrollpane().appendContent(lw).getMainDiv());
        }
    }, NotiBar: {
        main: null, work: null, queue: [], initialised: false, init: function () {
            var i = 0, q_l = this.queue.length;
            this.main = new OnGoingUi(1, 4).setMaxSize(15);
            this.work = new OnGoingUi(1, 3).setMaxSize(15);
            $("#ui_notibar").append(this.main.getMainDiv(), this.work.getMainDiv());
            EventHandler.listen("linearquest_added", function (quest) {
                WestUi.NotiBar.add(quest.ongoingEntry);
                quest.open();
            });
            EventHandler.listen("linearquest_removed", function (quest) {
                WestUi.NotiBar.remove(quest.ongoingEntry);
            });
            this.initialised = true;
            if (q_l) {
                for (i; i < q_l; i++) {
                    this.add(this.queue[i]);
                }
                this.queue = [];
            }
        }, add: function (entry) {
            if (!entry instanceof OnGoingEntry)
                throw"No OnGoingEntry given.";
            if (this.initialised) {
                var ongoing = this.getBar(entry);
            } else {
                this.queue.push(entry);
                return this;
            }
            if (!entry.preAdd(ongoing))
                return;
            entry.getMainDiv().click(function () {
                var rem = true;
                if (entry.callback) {
                    var r = entry.callback();
                    if (undefined !== r)rem = r;
                }
                entry.clicked = true;
                if (rem)ongoing.removeEntry(entry);
            });
            ongoing.addEntry(entry);
        }, remove: function (entry) {
            this.getBar(entry).removeEntry(entry);
        }, getBar: function (entry) {
            var m = entry instanceof OnGoingReportReceivedEntry || entry instanceof OnGoingWayFinishedEntry;
            return m ? this.work : this.main;
        }
    }, CharBar: {
        init: function () {
            EventHandler.listen("character_level_up", function (nfo) {
                if (nfo.init)return;
                var link = $("#ui_character_container .character_link"), b = $("<div class='blink'/>"), e = $("<div class='notifylevel' title='" + "Распределить полученные навыки" + "'/>").append(b);
                var blink = function () {
                    b.fadeIn(d = 1000, cb = function () {
                        b.fadeOut(d, function () {
                            b.fadeIn(d, cb);
                        });
                    });
                };
                e.click(function () {
                    SkillsWindow.open();
                    e.remove();
                    return false;
                }).hover(function () {
                    b.stop().hide();
                }, function () {
                    b.show();
                    blink();
                });
                blink();
                link.append(e);
            });
        }
    }, TopLeftBar: {
        links: [{
            id: 'skills', title: 'Навыки', wuid: 'skills', click: function () {
                SkillsWindow.open();
            }, state: 'nonactive', blinkable: true
        }, {
            id: 'questbook', title: 'Квесты', wuid: 'questbook', click: function () {
                QuestWindow.open(true);
            }, state: 'nonactive'
        }, {
            id: 'achievements', unlock: 'achievements', title: 'Достижения', wuid: 'achievements', click: function () {
                AchievementWindow.open();
            }, state: 'normal'
        }, {
            id: 'ranking', unlock: 'ranking', title: 'Рейтинг', wuid: 'ranking', click: function () {
                RankingWindow.open();
            }, state: 'normal'
        }, {
            id: 'daily', title: 'Ежедневные задания', wuid: 'daily_activity', click: function () {
                DailyActivitiesWindow.open();
            }, state: 'nonactive'
        }], init: function () {
            var el = null;
            var menu = $('#ui_character_container');
            this.links.each(function (d) {
                el = $('<div class="char_links ' + d.id + ' ' + d.state + '" ' + 'title="' + ((west.Feature.isUnlocked(d.id)) ? d.title : west.Feature.getInfo(d.id)) + '"></div>');
                if (west.Feature.isUnlocked(d.id) || (!el.hasClass("nonactive") && d.click))
                    el.off('click').click(d.click);
                if (null != d.wuid) {
                    EventHandler.listen("window_opened_" + d.wuid, function () {
                        el.addClass("active");
                    });
                }
                menu.append(el);
            });
        }, blockForTutorial: function () {
            [this.links[0], this.links[1]].each(function (d) {
                $('#ui_character_container div.char_links.' + d.id).addClass(d.state).attr('title', ((west.Feature.isUnlocked(d.id)) ? d.title : west.Feature.getInfo(d.id))).off('click');
            });
        }
    }, CssAnimations: {
        animations: null, isAnimated: function () {
            return this.animations;
        }, observe: function () {
            Config.addChangeListener('gui.animations', function (state) {
                if (state) {
                    WestUi.CssAnimations.enable();
                } else {
                    WestUi.CssAnimations.disable();
                }
            });
        }, enable: function () {
            this.animations = true;
            $(document.body).addClass('animate');
        }, disable: function () {
            this.animations = false;
            $(document.body).removeClass('animate');
        }
    }, FriendsBar: {
        friendsBarUi: null, hidden: null, init: function () {
            if (!Game.ui.friendsbarEnabled)return;
            var FriendsBar = WestUi.FriendsBar, hidden;
            if (!(hidden = Config.get('friendsbar.hidden'))) {
                FriendsBar.hidden = true;
                FriendsBar.toggle();
            } else {
                FriendsBar.hidden = hidden;
            }
            $('.friendsbar-toggler').click(FriendsBar.toggle);
        }, toggle: function () {
            if (LinearQuestHandler.hasTutorialQuest())return;
            var FriendsBar = WestUi.FriendsBar;
            if (FriendsBar.hidden) {
                if (!FriendsBar.friendsBarUi) {
                    FriendsBar.friendsBarUi = new west.ui.FriendsBarUi();
                    FriendsBar.friendsBarUi.setType('friends');
                } else {
                    FriendsBar.friendsBarUi.show();
                }
            } else {
                FriendsBar.friendsBarUi.hide();
            }
            Config.set('friendsbar.hidden', FriendsBar.hidden = !FriendsBar.hidden);
        }
    }, resolutionChange: {
        current: false, handle: function () {
            if ($(window).height() < 700) {
                this.smallResolution();
            } else {
                this.largeResolution();
            }
        }, smallResolution: function () {
            this.current = 'small';
            $('body, #map-container, #ui_experience_bar, #ui_bottombar, #ui_bottomleft, #ui_bottomright, div.linear_quest, span.linear_quest_arrow').addClass('small-sized');
            EventHandler.signal('window.resolution_change', ['small']);
        }, largeResolution: function () {
            this.current = false;
            $('body, #map-container, #ui_experience_bar, #ui_bottombar, #ui_bottomleft, #ui_bottomright, div.linear_quest, span.linear_quest_arrow').removeClass('small-sized');
            EventHandler.signal('window.resolution_change', ['large']);
        }
    }, Focus: {
        visibility: true, prefix: null, init: function () {
            this.prefix = this.getPropertyPrefix();
            this.observe();
        }, getPropertyPrefix: function () {
            var prefixes = ['webkit', 'moz', 'ms', 'o'], i = prefixes.length;
            if ('hidden'in document)return '';
            while (i--) {
                if ((prefixes[i] + 'Hidden')in document)
                    return prefixes[i];
            }
            return null;
        }, observe: function () {
            var prefix = this.prefix;
            if (null !== prefix) {
                $(document).on(prefix + 'visibilitychange', this.handleVisibilityChange.bind(this));
            } else {
                $(document).on({focus: this.setVisible.bind(this), blur: this.setHidden.bind(this)});
            }
        }, isFocused: function () {
            return this.visibility;
        }, handleVisibilityChange: function () {
            this.setVisibility(!(document[this.prefix ? this.prefix + 'Hidden' : 'hidden']));
        }, setVisibility: function (bool) {
            this.visibility = !!bool;
            $('body').toggleClass('blured', !bool);
        }, setVisible: function () {
            this.setVisibility(true);
        }, setHidden: function () {
            this.setVisibility(false);
        }
    }
};

(function ($) {
    OnGoingEntry = function () {
        this._inited = false;
    };
    OnGoingEntry.prototype = OnGoingEntry;
    OnGoingEntry.prototype.parent = OnGoingEntry.prototype;
    OnGoingEntry.init = function (image, callback, priority) {
        this.element = $("<div class='ongoing_entry' />").append("<div class='border' />", "<div class='image' />", "<div class='extra'/>");
        this.setPriority(priority);
        this.clicked = false;
        this.tooltip = null;
        this.callback = callback || function () {
                return true;
            };
        this._inited = true;
        this.disabledPopup = false;
        if (image)
            this.setImage("<img src='" + image + "' width='44px' height='44px'/>");
    };
    OnGoingEntry.setTooltip = function (xhtml, disablebg) {
        if (xhtml) {
            var mousePopup = new MousePopup(xhtml, disablebg);
            this.element.addMousePopup(mousePopup);
            this.tooltip = mousePopup.getXHTML();
        }
    };
    OnGoingEntry.setPriority = function (prio) {
        this.priority = prio || 0;
    };
    OnGoingEntry.setImage = function (img) {
        $(".image", this.element).empty().append(img);
    };
    OnGoingEntry.setImageClass = function (name) {
        $(".image", this.element).addClass(name);
    };
    OnGoingEntry.highlightBorder = function () {
        $(".border", this.element).addClass("highlight");
        var self = this;
        $(".border", this.element).pulse(1000, function (el) {
            if (self.clicked) {
                $(".border", self.element).removeClass("highlight").css("opacity", "1.0");
            }
            return self.clicked;
        });
        return this;
    };
    OnGoingEntry.getMainDiv = function () {
        return this.element;
    };
    OnGoingEntry.preAdd = function (ongoing) {
        return this._inited && !LinearQuestHandler.hasTutorialQuest();
    };
    OnGoingTimerEntry = function (tooltip, timer, callback) {
        this.init(false, callback);
        this.timer = new ServerDate().getTime() + (timer * 1000);
        this.setTooltip(tooltip);
        this.setImageClass("sale");
        $(".extra", this.element).empty().css({
            'color': 'white',
            'text-align': 'center',
            'font-size': '11px',
            'top': '27px',
            'text-shadow': '#000 0px 0px 4px',
            'overflow': 'hidden'
        });
        this.timerInterval = window.setInterval(function () {
            this.tick();
        }.bind(this), 500);
        this.tick();
    }
    OnGoingTimerEntry.prototype = new OnGoingEntry;
    OnGoingTimerEntry.prototype.tick = function () {
        var t = new ServerDate().getTime();
        var dt = (this.timer - t) / 1000;
        if (dt > 0) {
            $(".extra", this.element).html(dt.formatDurationBuffWay());
        } else {
            window.clearInterval(this.timerInterval);
        }
    }
    OnGoingTipEntry = function (text) {
        this.init();
        this.setTooltip("<b>" + "Подсказка:" + "</b> " + text);
        this.setImageClass("tip");
    };
    OnGoingTipEntry.prototype = new OnGoingEntry;
    OnGoingTipEntry.prototype.preAdd = function (ongoing) {
        if (!Config.get("gametips.enabled"))return false;
        for (var i = 0; i < ongoing.list.length; i++) {
            var e = ongoing.list[i];
            if (e instanceof OnGoingTipEntry)ongoing.removeEntry(e);
        }
        return this.parent.preAdd.call(this, ongoing);
    };
    OnGoingWofEntry = function (callback, tooltip, className, highlight, days, free) {
        this.init("", function () {
            callback();
            return false;
        }, 10);
        this.setImageClass(className);
        this.setTooltip(tooltip);
        this.free = free;
        this.uid = className;
        if (highlight)this.highlightBorder();
        if (-1 != days && days <= 5) {
            $(".extra", this.element).empty().css({
                'color': 'white',
                'text-align': 'center',
                'font-size': '11px',
                'top': '27px',
                'text-shadow': '#000 0px 0px 4px',
                'overflow': 'hidden'
            }).append(s(ngettext("%1 день", new Array("%1 день", "%1 дня", "%1 дней"), days), days));
        }
        if (this.free) {
            this.element.append($('<span class="free">' + 'free' + '</span>'));
            EventHandler.listen('wof_used', function (uid, free) {
                if (uid != this.uid)return;
                this.free = free;
                if (!this.free) {
                    $(".free", this.element).remove();
                    return EventHandler.ONE_TIME_EVENT;
                }
            }, this);
        }
    };
    OnGoingWofEntry.prototype = new OnGoingEntry;
    OnGoingPermanentEntry = function (callback, tooltip, className, highlight) {
        this.init("", function () {
            callback();
            return false;
        }, 11);
        this.setImageClass(className);
        this.setTooltip(tooltip);
        if (highlight)
            this.highlightBorder();
    };
    OnGoingPermanentEntry.prototype = new OnGoingEntry;
    OnGoingHintEntry = function (text) {
        if (!Config.get("gamehints.enabled"))return false;
        this.init();
        this.setTooltip("<b>" + "Подсказка:" + "</b><br />" + text);
        this.setImageClass("hint");
    };
    OnGoingHintEntry.prototype = new OnGoingEntry;
    OnGoingWayFinishedEntry = function (x, y) {
        this.init();
        this.setTooltip("<b>" + "Ты на месте!" + "</b>");
        this.setImageClass("way");
    };
    OnGoingWayFinishedEntry.prototype = new OnGoingEntry;
    OnGoingFriendInvitationEntry = function (name) {
        this.init("", function () {
            FriendslistWindow.open('openrequests');
            return true;
        });
        this.setTooltip(s("Поступило предложение дружбы от игрока %1.", "<b>" + name + "</b>"));
        this.setImageClass("friend");
    };
    OnGoingFriendInvitationEntry.prototype = new OnGoingEntry;
    OnGoingReportReceivedEntry = function (msg) {
        switch (msg.type) {
            case"job":
                EventHandler.signal("job_report_received", []);
                className = "work";
                break;
            default:
                return;
        }
        this.init();
        this.setTooltip(msg.title + msg.data);
        this.setImageClass(className);
        EventHandler.signal("char_money_changed", [msg.money]);
    };
    OnGoingReportReceivedEntry.prototype = new OnGoingEntry;
    OnGoingAchievementEntry = function (popup) {
        this.init();
        this.disabledPopup = true;
        this.setTooltip(popup.html(), true);
        this.setImageClass("achievement");
    };
    OnGoingAchievementEntry.prototype = new OnGoingEntry;
    OnGoingLinearQuestEntry = function (quest) {
        if (!(quest instanceof LinearQuest))
            throw"No LinearQuest object given.";
        var tooltip = "<b>" + quest.employerName + "</b>";
        this.init(null, function () {
            return false;
        }, 10);
        this.setImageClass('saloon');
        if (!LinearQuestHandler.hasTutorialQuest())
            this.setTooltip(tooltip);
        this.element.addClass("linear_quest_ongoing quest_"
            + quest.groupId + "_" + quest.questId);
        this.setAccepted(quest.isAccepted);
    };
    OnGoingLinearQuestEntry.prototype = new OnGoingEntry;
    OnGoingLinearQuestEntry.prototype.setAccepted = function (state) {
        $(".extra", this.element).empty().removeClass("ico_bg");
        if (state)return;
        $(".extra", this.element).empty().addClass("ico_bg").append(new west.gui.Icon("exclamation").getMainDiv());
    };
    OnGoingLinearQuestEntry.prototype.preAdd = function (ongoing) {
        return true;
    };
    var uiAnimation = Config.get("gui.animations");
    Config.addChangeListener("gui.animations", function (v) {
        uiAnimation = v;
    });
    var ENTRY_SIZE = 45;
    OnGoingUi = function (minView, maxView) {
        this.arrUp = $("<div class='tw2gui_arrow_up_bottom' title='<b>"
            + "Показывать более новые уведомления".escapeHTML() + "</b>' />");
        this.arrDown = $("<div class='tw2gui_arrow_down_bottom' title='<b>"
            + "Показывать более старые уведомления".escapeHTML() + "</b>' />");
        var self = this;
        this.arrUp.click(function () {
            self.previous();
        });
        this.arrDown.click(function () {
            self.next();
        });
        this.content = $("<div class='ui_ongoing_content' />");
        this.element = $("<div class='ui_ongoing'/>").append(this.arrUp, this.content, this.arrDown);
        this.list = [];
        this.tooltip = new OnGoingTooltip(this);
        this.offset = 0;
        this.setMinView(minView || 3);
        this.setMaxView(maxView || 5);
        this.setMaxSize(-1);
    };
    OnGoingUi.prototype = OnGoingUi;
    OnGoingUi.addEntry = function (entry, avoidTool) {
        if (!(entry instanceof OnGoingEntry))
            throw"No OnGoingEntry object given.";
        if (-1 != jQuery.inArray(entry, this.list))
            throw"Entry already added.";
        this.list.push(entry);
        if (avoidTool)this.tooltip.add(entry);
        var el = entry.getMainDiv();
        this.content.prepend(el);
        el.css({"top": "-" + el.css("height"), display: "block"});
        this.offset = 0;
        this.list.sort(function (a, b) {
            return a.priority - b.priority;
        });
        var num = jQuery.inArray(entry, this.list);
        if (this.list.length > this.maxView && num < (this.list.length - this.maxView)) {
            this.highlight();
        }
        if (-1 != this.maxSize && this.list.length > this.maxSize) {
            for (var i = 0; i < this.list.length; i++) {
                if (this.list[i] == entry)continue;
                this.removeEntry(this.list[i]);
                if (this.list.length <= this.maxSize)break;
            }
        }
        this.update();
        return this;
    };
    OnGoingUi.removeEntry = function (entry) {
        if (!(entry instanceof OnGoingEntry))
            throw"No OnGoingEntry object given.";
        var idx = jQuery.inArray(entry, this.list);
        if (-1 == idx)
            return;
        this.list.splice(idx, 1);
        var self = this;
        var callback = function () {
            entry.getMainDiv().remove();
            if ((self.offset + self.maxView) > self.list.length) {
                if (self.offset - 1 >= 0)
                    self.offset--;
            }
            self.update();
        };
        if (uiAnimation)entry.getMainDiv().fadeOut("slow", callback); else callback();
        return this;
    };
    OnGoingUi.setMaxSize = function (size) {
        if (this.maxSize === size)return;
        this.maxSize = -1 === size ? -1 : Math.max(1, size);
        return this;
    }
    OnGoingUi.setMinView = function (size) {
        if (this.minView === size)return;
        this.minView = Math.max(1, size);
        this.update();
        return this;
    };
    OnGoingUi.setMaxView = function (count) {
        if (this.maxView === count)return;
        this.maxView = count;
        this.update();
        return this;
    };
    OnGoingUi.next = function () {
        if (this.maxView > this.list.length)return;
        if (((this.offset + this.maxView) + 1) > this.list.length)return;
        this.offset++;
        this.update();
        return this;
    };
    OnGoingUi.previous = function () {
        if (this.maxView > this.list.length || (this.offset - 1) < 0)return;
        this.offset--;
        this.update();
        return this;
    };
    OnGoingUi.update = function () {
        var top = -(ENTRY_SIZE * this.offset);
        if (uiAnimation) {
            if (0 == this.list.length) {
                this.element.fadeOut("slow");
            } else {
                this.element.fadeIn("slow");
            }
        } else {
            this.element.css("display", this.list.length > 0 ? "block" : "none");
        }
        this.arrUp.removeClass("inactive");
        this.arrDown.removeClass("inactive");
        if (0 == this.offset)
            this.arrUp.addClass("inactive");
        if (this.offset + this.maxView > this.list.length - 1)
            this.arrDown.addClass("inactive");
        var size = Math.max(this.minView, Math.min(this.maxView, this.list.length));
        this.content.css("height", ENTRY_SIZE * size);
        for (var i = this.list.length - 1; i >= 0; --i) {
            var e = $(this.list[i].getMainDiv());
            if (uiAnimation) {
                e.css('z-index', Math.abs(top)).animate({top: top + "px"}, 500, undefined, function () {
                    $(this).css('z-index', 1);
                });
            } else {
                e.css("top", top + "px");
            }
            top += ENTRY_SIZE;
        }
        return this;
    };
    OnGoingUi.highlight = function (up) {
        if (0 != this.arrDown.children().length)
            return;
        this.arrDown.append($("<div class='tw2gui_arrow_down_bottom highlight' />").pulse(1000).click(function (e) {
            this.remove();
        }));
    };
    OnGoingUi.getMainDiv = function () {
        return this.element;
    };
    OnGoingTooltip = function (ongoingUi) {
        if (!(ongoingUi instanceof OnGoingUi))
            throw"OnGoingUi Object required.";
        var element = $("<div class='ui_ongoing_tooltip mousepopup' />"), queue = [], isRunning = false, enabled = true;
        ongoingUi.getMainDiv().prepend(element);
        var tick = function () {
            if (!enabled || isRunning || queue.length <= 0)
                return;
            var entry = queue.splice(0, 1)[0];
            if (!entry || !entry.tooltip)return;
            isRunning = true;
            element.html(entry.tooltip).css({top: entry.getMainDiv().css("top")}).fadeIn(function () {
                element.delay(1500).fadeOut(function () {
                    isRunning = false;
                    element.empty();
                    tick();
                });
            });
        };
        return {
            add: function (entry) {
                if (!(entry instanceof OnGoingEntry))
                    throw"No OnGoingEntry object given.";
                if (!enabled || entry.disabledPopup || LinearQuestHandler.hasTutorialQuest())return;
                queue.push(entry);
                tick();
            }, getMainDiv: function () {
                return element;
            }
        }
    };
})(jQuery);

(function ($) {
    var questList = [];
    LinearQuestHandler = {};
    LinearQuestHandler.init = function (quests) {
        for (var i = 0; i < quests.length; ++i) {
            var quest = new LinearQuest(quests[i]);
            this.add(quest);
            if (quest.autoOpen && !quest.isAccepted)
                quest.open();
        }
        if (!this.hasTutorialQuest())
            EventHandler.signal("tutorial_finished");
    };
    LinearQuestHandler.hasQuests = function () {
        return questList.length > 0;
    };
    LinearQuestHandler.add = function (quest) {
        if (!(quest instanceof LinearQuest))
            throw"No LinearQuest object given.";
        questList.push(quest);
        EventHandler.signal("linearquest_added", [quest]);
    };
    LinearQuestHandler.remove = function (quest) {
        var idx = jQuery.inArray(quest, questList);
        if (-1 == idx)
            return;
        questList.splice(idx, 1);
        quest.close();
        quest.removeListener();
        EventHandler.signal("linearquest_removed", [quest]);
    };
    LinearQuestHandler.hasTutorialQuest = function () {
        var i = 0, l = questList.length;
        for (i; i < l; i++) {
            if (questList[i].isTutorial)
                return true;
        }
        return false;
    };
    var activateListener = function (quest) {
        questCallback.activate(quest, {update: quest.update.bind(quest), timeout: 2000});
    };
    var deactivateListener = function (quest) {
        questCallback.deactivate(quest);
    };
    LinearQuest = function (data) {
        this.view = null;
        this.init(data);
    };
    LinearQuest.prototype = LinearQuest;
    LinearQuest.init = function (data) {
        this.groupId = data.groupid;
        this.questId = data.questid;
        this.completionText = data.completionText;
        this.title = data.title;
        this.description = data.description;
        this.employerKey = data.employerid;
        this.employerName = data.employername;
        this.setRequirements(data.requirements || []);
        this.rewards = data.rewards || [];
        this.duel = data.duel || null;
        this.autoOpen = data.autoopen;
        this.autoClose = data.autoopen;
        this.animateFinish = (this.isFinishable == 0 && data.finishable) || false;
        this.isFinishable = data.finishable;
        this.isTutorial = data.istutorial;
        this.watched = true;
        if (!this.ongoingEntry)
            this.ongoingEntry = new OnGoingLinearQuestEntry(this);
        this.setAccepted(data.accepted);
        if (this.view)this.show();
    };
    LinearQuest.removeListener = function () {
        deactivateListener(this);
    };
    LinearQuest.setRequirements = function (requirements) {
        this.requirements = requirements;
        deactivateListener(this);
        activateListener(this);
    };
    LinearQuest.registerListener = function (jsInfo) {
        activateListener(this);
    };
    LinearQuest.setAccepted = function (state) {
        this.accepted = state;
        this.isAccepted = state;
        this.ongoingEntry.setAccepted(state);
    };
    LinearQuest.open = function () {
        var self = this;
        this.show();
    };
    LinearQuest.show = function () {
        if (null != this.view)
            this.view.close();
        this.view = new LinearQuestView(this);
        this.view.show();
    };
    LinearQuest.close = function () {
        if (null == this.view)
            return;
        this.view.close();
        this.view = null;
    };
    LinearQuest.accept = function () {
        var data = {groupid: this.groupId, questid: this.questId};
        var self = this;
        Ajax.remoteCall("linearquest", "accept_linear_quest", data, function (resp) {
            if (resp.error) {
                new UserMessage(resp.error, UserMessage.TYPE_ERROR).show();
                return;
            }
            self.setAccepted(true);
            self.update();
        });
    };
    LinearQuest.finish = function () {
        var data = {groupid: this.groupId, questid: this.questId};
        var self = this;
        this.view.actionButton.disable();
        Ajax.remoteCall("linearquest", "finish_linear_quest", data, function (resp) {
            if (resp.error) {
                new UserMessage(resp.error, UserMessage.TYPE_ERROR).show();
                return;
            }
            if (resp.report)
                ReportWindow.open(resp.report.report_id, resp.report.hash, undefined, undefined, undefined, true);
            eval(resp.eval);
            var nextclk = null;
            if (null != resp.nextQuest) {
                nextclk = function () {
                    LinearQuestHandler.remove(self);
                    LinearQuestHandler.add(new LinearQuest(resp.nextQuest));
                };
            } else {
                nextclk = function () {
                    self.close();
                    LinearQuestHandler.remove(self);
                    if (!LinearQuestHandler.hasTutorialQuest()) {
                        EventHandler.signal("tutorial_finished", [true]);
                    }
                };
            }
            self.view.onFinish(resp, nextclk);
            if (resp.trackEvent) {
                Game.trackExternal(resp.trackEvent);
            }
        });
    };
    LinearQuest.update = function () {
        var data = {groupid: this.groupId, questid: this.questId};
        var self = this;
        Ajax.remoteCallMode("linearquest", "update_linear_quest", data, function (resp) {
            if (resp.error) {
                new UserMessage(resp.error, UserMessage.TYPE_ERROR).show();
                return;
            }
            self.init(resp.quest);
            EventHandler.signal("linearquest_update", [self]);
        });
    };
    LinearQuestView = function (quest) {
        if (!(quest instanceof LinearQuest))
            throw"Hey i thought i told you!";
        this.quest = quest;
        this.element = null;
        this.content = null;
    };
    LinearQuestView.prototype = LinearQuestView;
    LinearQuestView.show = function () {
        var self = this, quest = this.quest, duelPicture = "", idx = quest.groupId + "_" + quest.questId;
        this.actionButton = new west.gui.Button();
        if (quest.isAccepted) {
            this.actionButton.setCaption("Завершить".escapeHTML()).click(function () {
                quest.finish();
            }).addClass("finish-linearquest");
            if (!quest.isFinishable)
                this.actionButton.disable();
        } else {
            this.actionButton.setCaption("Принять".escapeHTML()).click(function () {
                quest.accept();
            }).enable().addClass("accept-linearquest");
        }
        if (quest.isAccepted && quest.duel !== undefined && quest.duel.isNPCDuel) {
            var wantedTooltip = "<div class='wanted'><strong>" + "WANTED".escapeHTML() + "</strong>" + "<br/>" + quest.duel.npc_img + "<br />" + quest.duel.npc_name + "</div>";
            duelPicture = $('<img src="https://westrus.innogamescdn.com/images/premium/duel.png" alt="" width="30" '
                + 'height="30" title="' + wantedTooltip + '" />');
            this.actionButton.setCaption(s("%1, выходи!", quest.duel.npc_name)).click(function () {
                quest.finish();
            }).addClass("duel-linearquest").enable();
        }
        this.questContent = $("<div class='linear_quest_content'/>");
        this.element = $("<div id='linear_quest_" + idx + "' "
            + "class='linear_quest' />").append($("<span class='linear_quest_arrow' />"), $("<div class='linear_quest_wrapper'/>").append(new west.gui.Scrollpane().appendContent(this.questContent).getMainDiv()), $("<div class='linear_quest_footer'/>").append($('<div style="position: relative;" />').append(duelPicture, this.actionButton.getMainDiv()), "<div style='clear: both;'/>"));
        var img = 'https://westrus.innogamescdn.com/images/quest/employer/' + quest.employerKey + '.png';
        var help = [];
        var requirementsContainer = $("<div />").append("<p class='quest_devider' />", $("<span class='strong underline' />").text("Необходимо:"));
        var requirements = $('<ul class="requirement_container" />');
        for (var i = 0; i < quest.requirements.length; i++) {
            if (!quest.isFinishable)help.push(Quest.getRequirementHelp(quest.requirements[i]));
            requirements.append(Quest.renderRequirement(quest.requirements[i]));
        }
        this.questContent.append("<img src='" + img + "' width='80px' height='80px' />", "<b>" + quest.employerName + "</b><br/><br/>", $("<span />").append(quest.description, "<br />", requirementsContainer.append('<div class="questRequirementHelp">' + help.join("") + '</div>', requirements), Quest.getRewards(quest.rewards, null, false)));
        if (WestUi.resolutionChange.current) {
            this.element.addClass('small-sized');
            $('span.linear_quest_arrow', this.element).addClass('small-sized');
        }
        $("#windows").append(this.element);
        if (quest.animateFinish) {
            this.element.animate({opacity: 0.5}, 250).animate({opacity: 1}, 250);
            $('.quest_finished_img').css('height', '100px').animate({height: '15px'}, 500);
        }
    };
    LinearQuestView.onFinish = function (resp, nextclk) {
        var img = 'https://westrus.innogamescdn.com/images/quest/employer/' + this.quest.employerKey + '.png';
        this.questContent.empty().append("<img src='" + img + "' width='80px' height='80px' />", "<b>" + this.quest.employerName + "</b><br/><br/>", "<span>" + this.quest.completionText + "</span>");
        this.actionButton.setCaption("Дальше").click(nextclk);
        this.actionButton.enable();
    }
    LinearQuestView.close = function () {
        if (null === this.element)
            return;
        this.element.remove();
        this.element = null;
    };
})(jQuery);

GameLoader = function () {
    var obj = {}, asyncProgress = new west.gui.Progressbar(0, 0), Loader = null, messages = {}, progressMsg;
    var increaseProgress = function () {
        var v = asyncProgress.increase().getValue();
        if (undefined !== messages[v])
            obj.next(messages[v]);
    };
    Loader = function (callback, signal, max, current) {
        this.current = current || 0;
        this.max = max || 1;
        this.callback = callback;
        this.signal = signal;
        this.finished = false;
    };
    Loader.prototype.increase = function () {
        increaseProgress();
        this.current = this.current + 1;
        if (this.current >= this.max)this.finish();
    };
    Loader.prototype.start = function () {
        EventHandler.listen(this.signal, this.increase, this);
        this.callback();
        return this;
    };
    Loader.prototype.finish = function () {
        this.finished = true;
        EventHandler.unlisten(this.signal, this.increase, this);
        obj.checkFinished();
    };
    obj.started = false;
    obj.asyncs = [];
    obj.ticker = false;
    obj.timed = false;
    obj.hideScreen = function () {
        $('#ui-loader').fadeOut(function () {
            $('#progress .progress-bar').hide();
            $('#progress .version').css("opacity", 0);
            $('#ui-loader .ui-loader-wrap').css("background", "none");
            $('#ui-mapfade').fadeOut();
            $('#timeout').empty();
        });
        window.clearTimeout(obj.timed);
        obj.started = false;
        obj.timed = false;
    };
    obj.checkFinished = function () {
        if (false !== obj.ticker)
            return;
        obj.ticker = window.setInterval(function () {
            var allFinished = true;
            $.each(obj.asyncs, function (k, v) {
                if (!v.finished) {
                    allFinished = false;
                    return;
                }
            });
            if (allFinished) {
                window.clearInterval(obj.ticker);
                obj.hideScreen();
                obj.ticker = false;
                obj.submitStartupTime();
                obj.messages = {};
            }
        }, 500);
    };
    obj.submitStartupTime = function () {
        var startup_time = parseInt(readCookie('log_startup_starttime'));
        if (!startup_time)
            return;
        var startup_duration = (new Date().getTime()) - startup_time;
        Ajax.remoteCall("character", "track_startup_time", {
            time: startup_duration,
            first_login: Player.firstLogin
        }, null);
        var domain = window.location.hostname.split('.');
        for (var i = 0; i < domain.length - 1; i++) {
            document.cookie = 'log_startup_starttime=; domain=.' + domain.slice(i).join('.') + ';expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        }
    };
    obj.timeout = function () {
        if (false !== obj.timed)
            return;
        obj.timed = window.setTimeout(function () {
            if (obj.started) {
                $('#timeout').html($(new west.gui.Button("Скрыть", obj.hideScreen).setWidth(225).getMainDiv()).css("display", "none").fadeIn());
            }
        }, 10000);
    };
    obj.start = function (hideBar, hideLoader) {
        hideBar = hideBar || false;
        obj.started = true;
        if (!hideLoader) {
            if (false === hideBar) {
                $('#progress .progress-bar').append(asyncProgress.getMainDiv());
                $('#progress .progress-bar').fadeIn();
            }
            $('#ui-loader').fadeIn();
        }
        obj.timeout();
    };
    obj.next = function (message) {
        progressMsg = progressMsg || $('#progress .progress-message');
        if (typeof message === "object") {
            $.extend(messages, message);
            return;
        }
        progressMsg.html(message);
    };
    return {
        start: obj.start, next: obj.next, async: function (message, signal, callback, max, hideBar, hideLoader) {
            obj.start(hideBar, hideLoader);
            asyncProgress.setMaxValue(asyncProgress.maxValue + (max || 1));
            obj.asyncs.push(new Loader(callback, signal, max).start());
            obj.next(message);
        }
    }
}();

(function ($) {
    var util = {
        isQuestShown: function (tutorial) {
            var id = tutorial.id;
            if (!id)id = tutorial;
            return $("#linear_quest_" + id).length != 0;
        }, isQuestAccepted: function (tutorial) {
            return tutorial.quest.isAccepted;
        }, isWindowShown: function (cls) {
            return $("#windows .tw2gui_window" + cls).length != 0;
        }, windowNotShown: function (cls) {
            return $("#windows .tw2gui_window" + cls).length == 0;
        }, isDomReady: function (sel) {
            return $(sel + ':visible').length !== 0;
        }, isJobShown: function (cls) {
            return $(cls).length != 0;
        }, hasJob: function (id) {
            var tasks = TaskQueue.queue;
            var found = false;
            tasks.each(function (t) {
                if (t.type == "job")
                    found |= t.data.job.id == id;
            });
            return found;
        }, hasJobsInQueue: function (id, count) {
            var found = 0;
            TaskQueue.queue.each(function (t) {
                if (t.type == "job" && t.data.job.id == id)
                    found++;
            });
            return found >= count;
        }, getInWindow: function (cls, el) {
            return "#windows .tw2gui_window" + cls + " " + el;
        }, skilledInto: function (skill, points) {
            return (SkillsWindow.GUI['pmbut_skill_' + skill] || {}).current_value >= points;
        }, setAttrInto: function (attr, points) {
            return (SkillsWindow.GUI['pmbut_attr_' + attr] || {}).current_value >= points;
        }, getVisibleArea: function (currTutId, withoutAnimation) {
            for (var id in areas) {
                if (parseInt(id.split('_')[1]) > parseInt(currTutId.split('_')[1]))break;
                areas[id].each(function (coords) {
                    util.showArea(coords[0], coords[1], withoutAnimation);
                });
            }
            ;
        }, showArea: function (x, y, withoutAnimation) {
            var sel = $(s('.image.x-%1.y-%2', x, y));
            if (!sel.length) {
                setTimeout(function () {
                    util.showArea(x, y);
                }, 500);
            } else {
                sel.filter(function () {
                    return $(this).css('z-index') == 16;
                }).each(function (k, el) {
                    el = $(el);
                    areas[curTutorialId].push([x, y]);
                    if (withoutAnimation) {
                        el.remove();
                    } else {
                        el.animate({
                            left: parseInt(el.css('left')) - ((k % 2 == 0) ? +100 : -100),
                            opacity: 0
                        }, 2000, 'linear', function () {
                            el.remove();
                        });
                    }
                });
            }
        }
    };
    var areas = {};
    var tutorials = {};
    var curTutorialId = undefined;
    TutorialManager = {mapRestriction: {x: {min: 42750, max: 45700}, y: {min: 17000, max: 18400}}};
    TutorialManager.init = function () {
        var self = this;
        EventHandler.listen("linearquest_added", function (quest) {
            self.start(quest);
        });
        EventHandler.listen("linearquest_removed", function (quest) {
            self.finish(quest);
        });
        this.job_tutorial = 0;
        var showArea = function () {
            if (curTutorialId)util.getVisibleArea(curTutorialId, true);
        };
        EventHandler.listen(['map-drawed', 'map-center-changed'], showArea);
        EventHandler.listen("tutorial_finished", function () {
            WestUi.NotiBar.add(new OnGoingPermanentEntry(function () {
                QuestSaloonWindow.open();
            }, "Салун", "saloon"));
            $('#ui_minimap').click(function () {
                MinimapWindow.open();
            }).attr('title', 'Мини-карта');
            west.Feature.unlock('questbook');
            west.Feature.unlock('multiplayer');
            return EventHandler.ONE_TIME_EVENT;
        });
        this.add(new Tutorial("1_0", [{
            parallel: function () {
                $('#map-container').addClass('hide-jobgroupicon');
            }
        }, {
            exitcond: function () {
                return $('div.tw2gui_dialog.welcome').length === 0 && !CharacterWindow.window;
            }
        }, {
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {point: [".tw2gui_button.duel-linearquest", '.linear_quest']}, {
            exitcond: function () {
                return util.isWindowShown('.report');
            }
        }, {
            exitcond: {
                listen: 'duel_report_finished',
                maxdelay: 10000
            }
        }, {
            point: ['.tw2gui_window_buttons_close', '.report'], offset: -5, exitcond: function () {
                return !util.isWindowShown('.report');
            }
        }, {point: ['.finish-linearquest', '.linear_quest']}], [util.getInWindow(".report", ".report_xhtml"), 'Это <b>квестовая дуэль</b>.<br/><br />\nНа твоём пути ты встретишь много негодяев. Сами дуэли будут проходить автоматически, но их результат зависит от твоих навыков, тактики дуэли и снаряжения. Если в тебя попадут — потеряешь <b>очки здоровья</b>.<br /><br/>\nНе беспокойся, Бен Хиггс не представляет реальную опасность.']), [[173, 68], [174, 68], [173, 69], [174, 69]]);
        this.add(new Tutorial("1_1", [{
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {
            parallel: function () {
                west.Feature.unlock('duels');
            }
        }, {
            point: ["#ui_bottombar .duels"], exitcond: function () {
                return this.clicked || this.tutorial.quest.isFinishable;
            }
        }, {
            exitcond: function () {
                return util.isDomReady(util.getInWindow(".duels", ".dl_fightbutton")) || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [util.getInWindow(".duels", ".dl_fightbutton"), '.duels'],
            offset: 19,
            exitcond: {listen: 'duel_report_started'}
        }, {
            exitcond: {
                listen: 'duel_report_finished',
                maxdelay: 10000
            }
        }, {
            point: [util.getInWindow(".duels", ".dl_fightbutton"), '.duels'],
            exitcond: {listen: 'duel_report_started'}
        }, {
            point: ['.finish-linearquest', '.linear_quest'],
            maxdelay: 2000
        }, {point: ['.finish-linearquest', '.linear_quest']}], [util.getInWindow(".duels", ".duels-npcduel"), 'Это <b>дуэль с бандитом</b>.<br/><br />\nИсход дуэли будет зависеть от твоих навыков, тактики дуэли и снаряжения. Для дуэли с бандитом нужно 12 очков <b>энергии</b> и <b>мотивация</b>. Если ты победишь бандита — получишь <b>опыт</b> и <b>деньги</b>.']), [[173, 68], [174, 68], [173, 69], [174, 69]]);
        this.add(new Tutorial("1_2", [{
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {
            parallel: function () {
                west.Feature.unlock('skills');
                SkillsWindow.tutorial = {health: 2};
            }
        }, {
            point: ['.char_links.skills'], offset: -5, exitcond: function () {
                return this.clicked || util.isWindowShown(".playerskills") || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [".notifylevel"], exitcond: function () {
                return this.clicked || util.isWindowShown(".playerskills") || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [util.getInWindow(".playerskills", "#ske_skillbox-health"), '.playerskills'],
            offset: 10,
            exitcond: function () {
                return util.skilledInto("health", 2) || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [util.getInWindow(".playerskills", ".tw2gui_button.sk_button_accept"), '.playerskills'],
            exitcond: function () {
                return this.tutorial.quest.isFinishable;
            }
        }, {
            parallel: function () {
                SkillsWindow.freeSkills();
                if (util.isWindowShown(".playerskills"))
                    SkillsWindow.open();
            }
        }, {point: ['.finish-linearquest', '.linear_quest']}, {point: ['.finish-linearquest', '.linear_quest']}], [util.getInWindow(".playerskills", ".tw2gui_window_pane"), 'Это твои <b>навыки</b>.<br/><br />\nС каждым новым уровнем ты получаешь очки умений, которые можешь распределить на своё усмотрение. Таким образом, ты становишься лучше в разных элементах игры.']), [[173, 68], [174, 68], [173, 69], [174, 69]]);
        this.add(new Tutorial("1_3", [{
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {
            point: [".tw2gui_window_buttons_closeall", ".playerskills"], offset: -5, exitcond: function () {
                return !util.isWindowShown('.playerskills');
            }
        }, {
            parallel: function () {
                util.showArea(173, 69);
                util.showArea(174, 69);
                util.showArea(173, 70);
                util.showArea(174, 70);
                $('.jobgroupicon:hidden', Map.mapEl).fadeIn(800, 'linear', function () {
                    $(this).attr('style', '');
                    $('#map-container').removeClass('hide-jobgroupicon');
                });
            }
        }, {
            point: [".jobgroup-7"], delay: 1000, exitcond: function () {
                return this.clicked || util.isWindowShown('.wjob-128') || util.hasJob(128) || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [".job-128"], skipprev: true, exitcond: function () {
                return util.isWindowShown('.wjob-128') || util.hasJob(128) || this.tutorial.quest.isFinishable;
            }
        }, {
            exitcond: function () {
                return util.isDomReady(util.getInWindow(".wjob-128", ".job_jobtimes")) || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [".jobwindow.wjob-128 .job_startbutton", '.wjob-128'], exitcond: function () {
                return util.hasJob(128) || this.tutorial.quest.isFinishable;
            }
        }, {
            exitcond: function () {
                return this.tutorial.quest.isFinishable;
            }
        }, {point: [".finish-linearquest", '.linear_quest']}, {point: [".finish-linearquest", '.linear_quest']}], [util.getInWindow(".wjob-128", ".job_jobtimes"), s('Это <b>работа</b>.<br/><br/>\nНа работе ты можешь заработать опыт %1 и деньги %2. У тебя есть шанс найти вещь %3 и продукт — например, зуб.<br/><br />\nДля работы тебе понадобятся <b>время</b> и <b>энергия</b>. Энергия восстанавливается на 3 очка в час.', '<img class="job_xp_icon_big" src="https://westrus.innogamescdn.com/images/window/job/bigicon_xp.png" style="width:18px;height:18px;" title="' + 'Опыт' + '"/>', '<img class="job_money_icon_big" src="https://westrus.innogamescdn.com/images/window/job/bigicon_money.png" style="width:18px;height:18px;" title="' + 'Доллары' + '"/>', '<img class="job_luck_icon_big" src="https://westrus.innogamescdn.com/images/window/job/bigicon_luck.png" style="width:18px;height:18px;" title="' + 'Стоимость находок' + '"/>')], function () {
            return util.hasJob(128);
        }), [[173, 68], [174, 68], [173, 69], [174, 69]]);
        this.add(new Tutorial("1_4", [{
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {
            parallel: function () {
                util.showArea(172, 69);
                util.showArea(172, 70);
            }
        }, {
            point: [".jobgroup-12"], delay: 1000, exitcond: function () {
                return this.clicked || util.isWindowShown('.wjob-130') || util.hasJob(130) || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [".job-130"], skipprev: true, exitcond: function () {
                return util.isWindowShown('.wjob-130') || util.hasJob(130) || this.tutorial.quest.isFinishable;
            }
        }, {
            exitcond: function () {
                return util.isDomReady(util.getInWindow(".wjob-130", ".job_danger_motivation")) || this.tutorial.quest.isFinishable;
            }
        }, {
            parallel: function () {
                TutorialManager.job_tutorial = 2;
                $('.job_danger_motivation_disabled img').animate({
                    opacity: 0,
                    width: 100,
                    marginTop: -9
                }, 800, function () {
                    $(this).parent().remove();
                });
                $('.job_danger_motivation').animate({opacity: 1}, 500);
            }
        }, {
            point: [".jobwindow.wjob-130 .job-amount-selector", '.wjob-130'], offset: -5, exitcond: function () {
                return this.clicked || util.hasJobsInQueue(130, 2) || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [".jobwindow.wjob-130 .job_startbutton", '.wjob-130'], exitcond: function () {
                return util.hasJobsInQueue(130, 2) || this.tutorial.quest.isFinishable;
            }
        }, {
            exitcond: function () {
                return this.tutorial.quest.isFinishable;
            }
        }, {point: [".finish-linearquest", '.linear_quest']}, {point: [".finish-linearquest", '.linear_quest']}], [util.getInWindow(".wjob-130", ".job_jobtimes"), 'В самом низу ты видишь <b>мотивацию</b> к работе и степень её <b>опасности</b>.<br/><br />\nЭти значения меняются, если ты работаешь на одной и той же работе слишком часто. Высокая мотивация означает высокую награду, а высокая опасность — большой шанс получить травму.']), [[173, 68], [174, 68], [173, 69], [174, 69], [173, 70], [174, 70]]);
        this.add(new Tutorial("1_5", [{
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {
            parallel: function () {
                SkillsWindow.tutorial = {strength: 2};
                if (util.isWindowShown(".playerskills"))
                    SkillsWindow.open();
            }
        }, {
            point: ['.char_links.skills'], offset: -5, exitcond: function () {
                return this.tutorial.quest.isFinishable || this.clicked || util.isWindowShown(".playerskills");
            }
        }, {
            exitcond: function () {
                return this.tutorial.quest.isFinishable || util.isDomReady(util.getInWindow(".playerskills", ".sk_content_row_flexibility .sk_attr_arrow"));
            }
        }, {
            point: [util.getInWindow(".playerskills", ".sk_content_row_strength .sk_attr_arrow"), '.playerskills'],
            offset: 12,
            exitcond: function () {
                return this.tutorial.quest.isFinishable || util.setAttrInto("strength", 2);
            }
        }, {
            point: [util.getInWindow(".playerskills", ".tw2gui_button.sk_button_accept"), '.playerskills'],
            exitcond: function () {
                return this.tutorial.quest.isFinishable || this.clicked;
            }
        }, {
            parallel: function () {
                SkillsWindow.freeSkills();
                SkillsWindow.freeAttributes();
            }
        }, {
            point: ['.finish-linearquest', '.linear_quest'],
            delay: 1500
        }, {point: ['.finish-linearquest', '.linear_quest']}], [util.getInWindow(".playerskills", ".tw2gui_window_pane"), 'Слева ты видишь <b>характеристики</b>.<br/><br />\nТы получаешь очко характеристики, когда поднимаешь свой уровень, так же как и очки навыков. Если ты распределяешь очко характеристики, то все навыки, которые к ней относятся — тот же цвет — тоже увеличатся на одно очко.']), [[173, 68], [174, 68], [173, 69], [174, 69], [173, 70], [174, 70], [172, 69], [172, 70]]);
        this.add(new Tutorial("1_6", [{
            parallel: function () {
                TutorialManager.job_tutorial = 2;
            }
        }, {
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {
            point: [".tw2gui_window_buttons_closeall", ".playerskills"], offset: -5, exitcond: function () {
                return !util.isWindowShown('.playerskills');
            }
        }, {
            parallel: function () {
                util.showArea(171, 69);
                util.showArea(171, 70);
                util.showArea(170, 69);
                util.showArea(171, 68);
            }
        }, {
            point: [".jobgroup-3.x-171"], delay: 1000, exitcond: function () {
                return this.clicked || util.isWindowShown('.wjob-127') || util.hasJob(127) || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [".job-127"], skipprev: true, exitcond: function () {
                return util.isWindowShown('.wjob-127') || util.hasJob(127) || this.tutorial.quest.isFinishable;
            }
        }, {
            exitcond: function () {
                return util.isDomReady(util.getInWindow(".wjob-127", ".job_skills"));
            }
        }, {
            parallel: function () {
                TutorialManager.job_tutorial = 1;
                $('.job_jobstars_disabled img').animate({opacity: 0, width: 100, marginTop: -9}, 800, function () {
                    $(this).parent().remove();
                });
                $('.job_skills, .job_jobstars, .job_progress_jobstars').animate({opacity: 1}, 500);
            }
        }, {
            delay: 1500, point: [".jobwindow.wjob-127 .job_startbutton", '.wjob-127'], exitcond: function () {
                return util.hasJob(127) || this.tutorial.quest.isFinishable;
            }
        }, {
            exitcond: function () {
                return this.tutorial.quest.isFinishable;
            }
        }, {point: [".finish-linearquest", '.linear_quest']}, {point: [".finish-linearquest", '.linear_quest']}], [util.getInWindow(".wjob-127", ".job_jobtimes"), 'Сверху ты видишь <b>навыки</b>, которые необходимы для этой работы.<br/><br />\nДля каждой они свои. Все потраченные очки заполнят полоску под кирками.<br /><br />\nЧем больше заполнена эта полоска, тем выше награды от этой работы. Если кирки стали золотыми, то работа даёт максимально возможное вознаграждение.']), [[173, 68], [174, 68], [173, 69], [174, 69], [173, 70], [174, 70], [172, 69], [172, 70]], [170, 69], [171, 69], [171, 68], [171, 70]);
        this.add(new Tutorial("1_7", [{
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {point: [".finish-linearquest", '.linear_quest']}, {point: [".finish-linearquest", '.linear_quest']}]), [[173, 68], [174, 68], [173, 69], [174, 69], [173, 70], [174, 70], [172, 69], [172, 70], [170, 69], [171, 69], [171, 68], [171, 70]]);
        this.add(new Tutorial("1_8", [{
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {
            point: ["#ui_bottombar .inventory"], exitcond: function () {
                return this.clicked || util.isWindowShown(".inventory");
            }
        }, {
            exitcond: function () {
                return util.isDomReady('#bag') || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [".item_inventory:last", '.inventory'], offset: 10, exitcond: function () {
                return this.clicked || this.tutorial.quest.isFinishable;
            }
        }, {point: [".finish-linearquest", '.linear_quest']}, {point: [".finish-linearquest", '.linear_quest']}], [util.getInWindow(".tw2gui_window.inventory", ".tw2gui_window_pane"), 'Это твой <b>багаж</b>.<br /><br />\nЗдесь ты найдёшь свои вещи и снаряжение, такие как бандана. Ты можешь надевать вещи, нажав на них.<br /><br />\nТвоё снаряжение даёт дополнительные очки навыков.']), [[173, 68], [174, 68], [173, 69], [174, 69], [173, 70], [174, 70], [172, 69], [172, 70], [170, 69], [171, 69], [171, 68], [171, 70]]);
        this.add(new Tutorial("1_9", [{
            parallel: function () {
                TutorialManager.tutorial = 1;
            }
        }, {
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {
            point: [".tw2gui_window_buttons_closeall", ".inventory"], offset: -5, exitcond: function () {
                return !util.isWindowShown('.inventory');
            }
        }, {
            parallel: function () {
                util.showArea(171, 70);
                util.showArea(170, 70);
                util.showArea(169, 70);
            }
        }, {
            point: [".jobgroup-27"], delay: 1000, exitcond: function () {
                return this.clicked || util.isWindowShown('.wjob-129') || util.hasJob(129) || this.tutorial.quest.isFinishable;
            }
        }, {
            point: [".job-129"], skipprev: true, exitcond: function () {
                return util.isWindowShown('.wjob-129') || util.hasJob(129) || this.tutorial.quest.isFinishable;
            }
        }, {
            exitcond: function () {
                return util.isDomReady(util.getInWindow(".wjob-129", ".job_wear_generator")) || this.tutorial.quest.isFinishable;
            }
        }, {
            parallel: function () {
                TutorialManager.job_tutorial = 0;
                $('.job_wear_generator_disabled img').animate({
                    opacity: 0,
                    width: 100,
                    marginTop: -9
                }, 800, function () {
                    $(this).parent().remove();
                });
                $('.job_wear_generator').animate({opacity: 1}, 500);
            }
        }, {
            point: [".jobwindow.wjob-129 .job_startbutton", '.wjob-129'], exitcond: function () {
                return util.hasJob(129) || this.tutorial.quest.isFinishable;
            }
        }, {
            exitcond: function () {
                return this.tutorial.quest.isFinishable;
            }
        }, {point: [".finish-linearquest", '.linear_quest']}, {point: [".finish-linearquest", '.linear_quest']}], [util.getInWindow(".wjob-129", ".job_jobtimes"), 'Видишь кнопку «<b>Рабочая одежда</b>»?<br /><br />\nПри нажатии на неё ты увидишь самую лучшую одежду для этой работы из твоего багажа.<br /><br />\nЭто снаряжение даст тебе дополнительные трудовые очки, и тем самым — лучшее вознаграждение.']), [[173, 68], [174, 68], [173, 69], [174, 69], [173, 70], [174, 70], [172, 69], [172, 70], [170, 69], [171, 69], [171, 68], [171, 70]]);
        this.add(new Tutorial("1_10", [{
            point: [".accept-linearquest", '.linear_quest'], exitcond: function () {
                return util.isQuestAccepted(this.tutorial);
            }
        }, {point: [".finish-linearquest", '.linear_quest']}, {point: [".finish-linearquest", '.linear_quest']}, {
            parallel: function () {
                west.character.levelup.newFeatureUnlocked.showInfoForLevel();
                ServerInfoWindow.Announcements.next();
            }
        }]), [[173, 68], [174, 68], [173, 69], [174, 69], [173, 70], [174, 70], [172, 69], [172, 70], [170, 69], [171, 69], [171, 68], [171, 70], [170, 70], [169, 70]]);
    };
    TutorialManager.add = function (tutorial, area) {
        if (!(tutorial instanceof Tutorial))
            throw"No tutorial object is given.";
        tutorials[tutorial.id] = tutorial;
        if (area)areas[tutorial.id] = area;
    };
    var initTutorialStatus = function (currTutorialId) {
        west.Feature.skills = 0;
        west.Feature.questbook = 0;
        west.Feature.duels = 0;
        west.Feature.multiplayer = 0;
        WestUi.TopLeftBar.blockForTutorial();
        WestUi.BottomBar.blockForTutorial();
        $('#ui_minimap').attr('onclick', '').attr('title', 'Мини-карта станет доступной после завершения руководства.');
        TutorialManager.job_tutorial = 3;
        var tmp = currTutorialId.split('_');
        var stage = tmp[1];
        if (stage < 3) {
            SkillsWindow.blockSkills = true;
            SkillsWindow.blockAttributes = true;
        }
        else if (stage < 5)
            SkillsWindow.blockAttributes = true; else if (stage < 7) {
            TutorialManager.job_tutorial = 2;
        }
        else if (stage < 10)
            TutorialManager.job_tutorial = 1; else
            TutorialManager.job_tutorial = 0;
        if (stage > 1)
            west.Feature.unlock('duels');
        if (stage > 2)
            west.Feature.unlock('skills');
    };
    TutorialManager.start = function (quest) {
        if (!(quest instanceof LinearQuest))
            throw"Wrong initialization object.";
        curTutorialId = quest.groupId + "_" + quest.questId;
        initTutorialStatus(curTutorialId);
        var tutorial = tutorials[curTutorialId];
        if (undefined !== tutorial)
            tutorial.start(quest);
    };
    TutorialManager.finish = function (quest) {
        if (!(quest instanceof LinearQuest))
            throw"Wrong initialization object.";
        var tutorial = tutorials[quest.groupId + "_" + quest.questId];
        if (undefined !== tutorial)
            tutorial.finish(quest);
    };
    TutorialManager.removeClouds = function (useCssAnimations) {
        var clouds = $('.cloud');
        if (useCssAnimations) {
            clouds.filter(function (a) {
                return a % 2 === 0;
            }).css({'opacity': 0, 'margin-left': -100}).end().filter(function (a) {
                return a % 2 !== 0;
            }).css({'opacity': 0, 'margin-left': 100}).end().delay(2100).queue(function () {
                clouds.remove();
                Map.refresh(true);
                $(this).dequeue();
            });
        } else {
            clouds.each(function (k, el) {
                el = $(el);
                el.animate({
                    left: parseInt(el.css('left')) - ((k % 2 == 0) ? +100 : -100),
                    opacity: 0
                }, 2000, 'linear', function () {
                    el.remove();
                });
            });
            window.setTimeout(function () {
                Map.refresh(true);
            }, 2000);
        }
    };
    TutorialManager.animateStaticArrow = function (arrow, left) {
        if (!$.contains(document.documentElement, arrow[0]))return;
        left = left || parseInt(arrow.css('left'));
        arrow.animate({left: left + 10}, 500, function () {
            window.setTimeout(function () {
                arrow.animate({left: left - 10}, 500, TutorialManager.animateStaticArrow(arrow, left));
            }, 1000);
        });
    };
    TutorialManager.showArrowToSaloon = function () {
        var arrow = $('<div class="arrow" />');
        $('#user-interface').append(arrow);
        TutorialManager.animateStaticArrow(arrow);
        EventHandler.listen('destroy_saloon_pointarrow', function () {
            $('#user-interface div.arrow').remove();
            return EventHandler.ONE_TIME_EVENT;
        });
    };
    TutorialStep = function (id, tutorial, data) {
        if (!(tutorial instanceof Tutorial))
            throw"No Tutorial given.";
        this.id = id;
        this.tutorial = tutorial;
        this.point = data.point || [];
        this.delay = data.delay || 0;
        this.offset = data.offset || 0;
        this.x = data.x || -1;
        this.y = data.y || -1;
        this.prevSkip = data.prevskip || false;
        this.tip = data.tip;
        this.exitCondition = data.exitcond || function () {
                return this.clicked;
            };
        this.onCancel = data.oncancel || function () {
                this.tutorial.prev();
            };
        this.alreadyTracked = data.tracked || false;
        this.doParallel = data.parallel;
    };
    TutorialStep.start = function (onFinish) {
        this.clicked = false;
        if (this.doParallel) {
            this.doParallel();
            return this.tutorial.next();
        }
        var self = this, shouldEnd = false, shouldCancel = false, target = null, clickSpace = "click." + this.tutorial.id + "_" + this.id, eventExitCondition;
        if (typeof this.exitCondition === 'object') {
            if (this.exitCondition.maxdelay) {
                window.setTimeout(function () {
                    shouldEnd = true;
                }, this.exitCondition.maxdelay);
            }
            EventHandler.listen(this.exitCondition.listen, eventExitCondition = function () {
                shouldEnd = true;
                return EventHandler.ONE_TIME_EVENT;
            });
        }
        var refresh = function () {
            setTimeout(function () {
                if (self.tutorial.tip && !$('.tw2gui_gametip').length && !$('.tw2gui_gametip').hasClass('hide')) {
                    $(self.tutorial.tip[0]).append((new tw2widget.gametip(self.tutorial.tip[1], 'tutorial-' + self.tutorial.id)).getMainDiv());
                }
                if (!self.tutorial.started) {
                    return;
                } else if (!shouldEnd && !shouldCancel) {
                    refresh();
                } else {
                    if (shouldCancel)
                        self.onCancel.call(self); else if (undefined !== onFinish)
                        onFinish();
                    if (null !== target)
                        target.off(clickSpace);
                    if (eventExitCondition) {
                        EventHandler.unlisten(this.exitCondition, eventExitCondition);
                    }
                    return;
                }
                var result = $(self.point[0]);
                if (0 == result.length) {
                    self.tutorial.hidePointer();
                    if (null !== target)
                        shouldCancel = true;
                } else {
                    result = $(result[0]);
                    if (null != target && target != result)
                        target.off(clickSpace);
                    if (target != result) {
                        self.tutorial.showPointer(self.delay);
                        result.on(clickSpace, function () {
                            self.clicked = true;
                        });
                        target = result;
                    }
                    self.tutorial.movePointer(target, self.point[1] ? $(self.point[1], '#windows') : null, self.offset);
                }
                if (typeof self.exitCondition === 'object') {
                    shouldEnd = self.tutorial.quest.isFinishable;
                } else {
                    shouldEnd = self.exitCondition.call(self);
                }
                shouldEnd = shouldEnd || self.tutorial.exitCondition();
                if (shouldEnd)shouldCancel = false;
            }, 200);
        };
        refresh();
    };
    TutorialStep.prototype = TutorialStep;
    Tutorial = function (id, steps, tip, exitCondition) {
        this.id = id;
        this.lastTrackid = -1;
        this.exitCondition = exitCondition || function () {
                return false;
            };
        this.tip = tip;
        this.steps = [];
        for (var i = 0; i < steps.length; ++i)
            this.steps[i] = new TutorialStep(i, this, steps[i]);
    };
    Tutorial.prototype = Tutorial;
    Tutorial.start = function (quest) {
        if (!(quest instanceof LinearQuest))
            throw"I need an LinearQuest object.";
        this.started = true;
        this.current = -1;
        this.quest = quest;
        this.pointer = $("<div class='arrow' />");
        this.element = $("<div id='tutorial_"
            + this.id + "' class='tutorial-pointer'/>").hide().append(this.pointer);
        $("#windows").prepend(this.element);
        util.getVisibleArea(this.id);
        this.next();
    };
    Tutorial.prev = function () {
        if ((this.current - 1) < 0) {
            this.hidePointer();
            return;
        }
        this.current -= 2;
        var step = this.steps[this.current + 1];
        if (undefined !== step) {
            if (step.prevSkip) {
                this.current++;
                this.prev();
                return;
            }
        }
        this.next();
    };
    Tutorial.next = function () {
        this.current++;
        if (this.current < 0)
            return;
        var step = this.steps[this.current];
        if (undefined === step || this.exitCondition()) {
            this.finish();
            return;
        }
        var self = this;
        step.start(function () {
            self.track(step, function () {
                self.next();
            });
        });
    };
    Tutorial.track = function (step, callback) {
        if (step.alreadyTracked || this.lastTrackid >= this.current)
            return typeof callback === "function" && callback();
        var self = this, data = {id: this.id, step: this.current};
        Ajax.remoteCall("character", "track_tutorial", data, function (resp) {
            step.alreadyTracked = true;
            self.lastTrackid = resp.last_track_id;
            if (undefined !== callback)
                callback();
        });
    };
    Tutorial.showPointer = function (delay) {
        if (this.element) {
            var self = this;
            var panim = function () {
                if (null == self.element)
                    return;
                var dir = "none", off = 15, data = {}, cls = self.element.attr('class');
                if (cls.match(/(down|up)/))
                    dir = "top";
                if (cls.match(/(right|left)/))
                    dir = "left";
                data[dir] = off;
                if (null != self.pointer && dir != "none") {
                    self.pointer.animate(data, 500);
                    data[dir] -= 15;
                    self.pointer.animate(data, 500);
                }
                window.setTimeout(function () {
                    self.timeout = undefined;
                }, 2000);
            };
            if (this.timeout == undefined) {
                this.timeout = true;
                panim();
                if (this.element.css('display') === 'none')
                    window.setTimeout(function () {
                        self.element && self.element.show();
                    }, delay);
            }
        }
    };
    Tutorial.hidePointer = function () {
        if (this.element) {
            this.element.hide();
        }
    };
    Tutorial.movePointer = function (target, refWindow, offset) {
        if (null == target || !this.started)
            return;
        var arrow = this.element, curOffset = arrow.offset(), css = target.offset(), targetWidth = target.width(), arrowHeight = arrow.height(), arrowWidth = arrow.width(), classes = arrow.attr('class'), newClass = '', wW = Map.width, wH = Map.height;
        if (css.top + arrowHeight >= wH) {
            newClass = 'down';
            css.top -= arrowHeight;
        } else if (css.left + arrowWidth + targetWidth >= wW) {
            newClass = 'right';
            css.left -= arrowWidth;
        } else if (css.top < 0) {
            newClass = 'up';
        } else {
            css.top -= 10;
            css.left += targetWidth;
            newClass = 'left';
        }
        css.top = Math.max(10, Math.min(css.top, Map.height - arrowHeight - 15));
        css.left = Math.max(0, Math.min(css.left, Map.width - arrowWidth - 15));
        css.top += offset;
        css.zIndex = refWindow ? parseInt(refWindow.css('z-index')) + 1 : 16;
        if (curOffset.top != css.top || curOffset.left != css.left || arrow.css('z-index') != css.zIndex || !classes.match(new RegExp(newClass))) {
            arrow.css(css).removeClass('up down left right').addClass(newClass);
        }
    };
    Tutorial.finish = function () {
        var lastStep;
        if (!this.started)return;
        this.element.remove();
        this.element = null;
        this.pointer = null;
        this.started = false;
        if (this.steps.length > 0) {
            lastStep = this.steps[this.steps.length - 1];
            if (lastStep.doParallel) {
                lastStep.doParallel();
            }
            this.track(lastStep);
        }
    };
})(jQuery);
west.namespace('west.Feature', {
    city: 10,
    crafting: 20,
    charClass: 15,
    daily: 10,
    fortoverview: 25,
    windows: {
        crafting: {
            text: "На 20 уровне ты сможешь выбрать профессию и начать производить предметы.",
            windowClass: '.character-crafting',
            level: 20
        },
        classchoose: {
            text: "Когда достигнешь 15-го уровня, ты сможешь выбрать тип персонажа и получить бонусы.",
            windowClass: '.classoverviewbg',
            level: 15
        },
        duel: {
            text: "Чтобы иметь возможность проводить дуэли с другими игроками, необходимо быть жителем какого-либо города, а в городе должен быть могильщик. Возможность заселиться в город у тебя появится на 10-и уровне.",
            windowClass: '.active_tab_id_playerduel',
            level: 10
        },
        shaman: {
            text: "У шамана ты можешь перераспределить навыки. Заверши квест «Дедушка Вупи», чтобы он стал доступен.",
            windowClass: '.active_tab_id_shaman'
        }
    },
    questbook: 1,
    duels: 1,
    skills: 1,
    multiplayer: 1,
    isUnlocked: function (key) {
        if (this[key] != undefined) {
            return this[key] && this[key] <= Character.level || this[key] === 1;
        }
        return true;
    },
    getInfo: function (key) {
        if (this[key] != undefined && this[key]) {
            return s("Доступно с %1-го уровня", this[key]);
        }
        else if (this[key] === 0) {
            return "Станет доступно во время прохождения руководства.";
        }
        return '';
    },
    unlock: function (key) {
        if (west.Feature[key])return false;
        switch (key) {
            case'duels':
                WestUi.createDuelWindowLink();
                west.Feature.duels = 1;
                break;
            case'skills':
                WestUi.createSkillsWindowLink();
                west.Feature.skills = 1;
                break;
            case'questbook':
                WestUi.createQuestbookWindowLink();
                west.Feature.questbook = 1;
                break;
            case'multiplayer':
                WestUi.createMultiplayerLink();
                west.Feature.multiplayer = 1;
                break;
        }
    },
    lockScreen: function (name) {
        if (this.windows[name].level != undefined && Character.level >= this.windows[name].level)return;
        $(this.windows[name].windowClass).append($('<div class="lock_feature_shadow_bg">').append($('<img class="lock_feature" src="https://westrus.innogamescdn.com/images/tutorial/lock.png" />'), $('<span class="lock_feature_text" />').text(this.windows[name].text)));
    },
    removeLock: function (windowobj) {
        $('.lock_feature_shadow_bg', windowobj.divMain).remove();
    }
});

(function ($) {
    ItemUse = {
        use: function (itemId, bonuses, type) {
            var item = Bag.getItemByItemId(itemId);
            var title = "";
            var message = "";
            switch (type) {
                case'recipe':
                    title = 'Изучить?';
                    message = "<div style='text-align:center'>" + 'Ты научишься создавать новые предметы.' + "</div>";
                    break;
                default:
                    if (undefined != item.obj.level && item.obj.level > Character.level)
                        return new UserMessage(s('Этот предмет требует %1-й уровень', item.obj.level), UserMessage.TYPE_ERROR).show();
                    if (undefined != item.obj.duelLevel && item.obj.duelLevel > Character.duelLevel)
                        return new UserMessage(s('Для этого предмета требуется %1 дуэльный разряд!', item.obj.duelLevel), UserMessage.TYPE_ERROR).show();
                    title = 'Употребление предмета';
                    message = "<div style='text-align:center'>" + 'Точно использовать? Получишь:'
                        + "<br /><div style='margin:10px;font-size:12pt;font-weight:bold;'>"
                        + bonuses.join("<br />") + "</div>";
                    if (item.obj.usetype == "buff") {
                        message += "<div style='color: red;margin:10px;font-size:12pt;font-weight:bold;'>";
                        if (BuffList[item.obj.bufftype] != null)
                            message += 'Действующие усилители будут заменены.' + '<br />';
                        message += 'Ты потеряешь усиление, если отменишь задание.' + "</div>";
                    }
                    if ($.fn.isInArray(itemId, [21340, 21341, 21342, 21343]))
                        message += '<p>' + 'Внимание! Премиум будет продлеваться автоматически, пока будет хватать золотых самородков.' + '<br />' +
                            'Если ты не хочешь, чтобы эта функция была активирована, зайди в настройки премиума и отключи её.' + '</p>';
                    break;
            }
            new west.gui.Dialog(title, message, west.gui.Dialog.SYS_QUESTION).addButton("yes", function () {
                ItemUse.doIt(itemId);
            }).addButton("cancel", function () {
            }).show();
        }, doIt: function (itemId, callback) {
            Ajax.remoteCall("itemuse", "use_item", {item_id: itemId, lastInvId: Bag.getLastInvId()}, function (res) {
                if (res.error) {
                    if (res.error_data && res.error_data.usedup) {
                        delete Bag.itemCooldown[itemId];
                        EventHandler.signal('cooldown_changed');
                        EventHandler.signal('inventory_changed');
                    }
                    return new UserMessage(res.msg, UserMessage.TYPE_ERROR).show();
                }
                var i, info = [], m, ls, j, mm;
                var domid = 1;
                if (Character.cooldown != res.msg.cooldown) {
                    Character.cooldown = res.msg.cooldown;
                    EventHandler.signal("cooldown_changed");
                }
                if (res.msg.itemCooldown) {
                    Bag.itemCooldown[itemId] = res.msg.itemCooldown;
                    EventHandler.signal("cooldown_changed");
                }
                if (res.msg.itemLifetime) {
                    EventHandler.signal('item_lifetime_changed', [itemId, res.msg.itemLifetime]);
                }
                Bag.updateChanges(res.msg.changes);
                for (i = 0; i < res.msg.effects.length; i += 1) {
                    m = res.msg.effects[i];
                    switch (m.type) {
                        case'experience':
                            info.push(new tw2widget.reward.ExpReward(Math.ceil(m.experience)).toString());
                            break;
                        case'dollar':
                            info.push(new tw2widget.reward.DollarReward(Math.ceil(m.dollar)).toString());
                            break;
                        case'walk_time':
                            TaskQueue.init(m.walktime.tq);
                            info.push(s("Время в пути сокращено с %1 до %2.", m.walktime.oldd.formatDuration(), m.walktime.newd.formatDuration()));
                            break;
                        case'hitpoints':
                            Character.setHealth(m.hitpoints);
                            info.push(s("Здоровье восстановлено."));
                            break;
                        case'duel_motivation':
                            info.push(s("Твоя мотивация к дуэлям возросла и составляет теперь %1.", Math.round(m.duelmotivation * 100) + "%"));
                            if (m.duelmotivation_npc) {
                                info.push(s("Твоя мотивация к дуэлям с бандитами возросла и составляет теперь %1.", Math.round(m.duelmotivation_npc * 100) + "%"));
                                Character.setNPCDuelMotivation(m.duelmotivation_npc);
                            }
                            Character.setDuelMotivation(m.duelmotivation);
                            break;
                        case'work_motivation':
                            ls = [];
                            info.push("У тебя возросла мотивация для работы.");
                            info.push(ls.join("<br />"));
                            EventHandler.signal('jobmotivation_change');
                            break;
                        case'hitpoints':
                            Character.setHealth(m.hitpoints);
                            info.push(s(ngettext("Твоё здоровье улучшилось до %1 очка.", new Array("Твоё здоровье улучшилось до %1 очка.", "Твоё здоровье улучшилось до %1 очков.", "Твоё здоровье улучшилось до %1 очков."), Math.round(m.hitpoints)), Math.round(m.hitpoints)));
                            break;
                        case'buff':
                            if (m.buff.duration > 0) {
                                info.push(s("Следующие значения будет улучшены на %1:", m.buff.duration.formatDurationBuffWay()));
                            } else {
                                info.push(s(ngettext("Усилителя хватит на %1 действие.", new Array("Усилителя хватит на %1 действие.", "Усилителя хватит на %1 действия.", "Усилителя хватит на %1 действий."), m.buff.charge), m.buff.charge));
                            }
                            for (var w = 0; w < m.buff.description.length; w += 1) {
                                info.push(m.buff.description[w]);
                            }
                            Character.setSpeed(m.char_speed);
                            WearSet.setWorkPointBonus(m.workPointBonus);
                            CharacterSkills.setBuffs(m.all);
                            CharacterSkills.updateAllBonuspoints(m.bonus.allBonuspoints);
                            break;
                        case'energy':
                            Character.setEnergy(m.energy);
                            info.push(s(ngettext("У тебя %1 очко энергии.", new Array("У тебя %1 очко энергии.", "У тебя %1 очка энергии.", "У тебя %1 очков энергии."), Math.round(m.energy)), Math.round(m.energy)));
                            break;
                        case'lottery':
                        case'content':
                            ls = ["<div style='text-align:center'>"];
                            m.items.each(function (m) {
                                var id = domid++;
                                ls.push("<div class='bag_item' id='item_use_content_" + id + "'></div>");
                                var data = ItemManager.get(m.item_id);
                                var item = new tw2widget.Item(data, 'item_popup_item').setCount(m.count);
                                window.setTimeout(function () {
                                    (function ($) {
                                        $('#item_use_content_' + id).append(item.getMainDiv());
                                    })(jQuery);
                                }, 100);
                            });
                            info.push('Внутри:' + "<br />" + ls.join("") + "</div><br clear='all' />");
                            break;
                        case'learn_recipe':
                            var id = domid++;
                            var itemData = ItemManager.get(ItemManager.get(m.recipe).craftitem);
                            var item = new tw2widget.Item(itemData, 'item_popup_item');
                            ls = ["<div class='bag_item' id='item_use_content_" + id + "' style='left: 50%;margin-left: -36px;'></div>"];
                            window.setTimeout(function () {
                                (function ($) {
                                    $('#item_use_content_' + id).append(item.getMainDiv());
                                })(jQuery);
                            }, 100);
                            info.push('Сейчас ты можешь создавать предмет:' + "<br /><br />" + ls.join("") + "<br clear='all' />");
                            Crafting.addRecipe(itemData);
                            break;
                        case'reskill_skills':
                        case'reskill_attributes':
                        case'reskill_both':
                            if (m.type == "reskill_both" || m.type == "reskill_skills") {
                                info.push(s(ngettext("У тебя сейчас %1 нераспределённое очко навыка", new Array("У тебя сейчас %1 нераспределённое очко навыка", "У тебя сейчас %1 нераспределённых очка навыка", "У тебя сейчас %1 нераспределённых очков навыка"), m.free_skillpoints), m.free_skillpoints));
                                CharacterSkills.setFreeSkillPoints(m.free_skillpoints);
                            }
                            if (m.type == "reskill_both" || m.type == "reskill_attributes") {
                                info.push(s(ngettext("У тебя сейчас %1 нераспределённое очко характеристики", new Array("У тебя сейчас %1 нераспределённое очко характеристики", "У тебя сейчас %1 нераспределённых очка характеристики", "У тебя сейчас %1 нераспределённых очков характеристики"), m.free_attributepoints), m.free_attributepoints));
                                CharacterSkills.setFreeAttrPoints(m.free_attributepoints);
                                for (var l = 0; l < CharacterSkills.allAttrKeys.length; l++)
                                    CharacterSkills.getAttribute(CharacterSkills.allAttrKeys[l]).setPoints(0);
                            }
                            CharacterSkills.update(false, m.skills, false, false);
                            break;
                        case'premium':
                            info.push(m.title + ' ' + "закончится " + m.time + "<br/><br/><span style='font-size:11px;'>" + "Совет: Проверь настройки для автоматического продления премиума." + "</span>");
                            break;
                        case'coupons':
                            Character.setUpb(m.total);
                            info.push(s(ngettext("Получена %1 облигация", new Array("Получена %1 облигация", "Получены %1 облигации", "Получено %1 облигаций"), m.coupons), m.coupons));
                            break;
                        case'sleep':
                            info.push('Ты будешь спать' + ' (' + m.duration.formatDurationWorkProgress() + ')');
                            TaskQueue.pushToQueue(TaskFactory(m.task));
                            EventHandler.signal('taskqueue-updated', [TaskQueue.queue]);
                            break;
                        case'nuggets':
                            info.push(s(ngettext('Поступил %1 золотой самородок.', new Array('Поступил %1 золотой самородок.', 'Поступили %1 золотых самородка.', 'Поступило %1 золотых самородков.'), m.amount), m.amount));
                            Character.addNuggets(m.amount);
                            break;
                        case'ses':
                            info.push('Ты получаешь:' + ' <img src="https://westrus.innogamescdn.com/images/icons/' + m['event'] + '.png" title="' + m.data.name.escapeHTML() + '" /> ' + m.data.amount);
                            break;
                        case'duellevel':
                            Character.setDuelLevel(m.duelLevel);
                            info.push(new tw2widget.reward.SacrificeDuelLevelReward(m.removed).toString());
                            break;
                    }
                }
                EventHandler.signal('item_used', [itemId]);
                new west.gui.Dialog("Предмет использован").setIcon(west.gui.Dialog.SYS_OK).setText("<div>" + info.join("<br/>") + "</div>").addButton("ok").show();
            });
        }
    };
})(jQuery);

TheWestApi = (function () {
    var GameScript = function (key, scriptName, minVersion, maxVersion, author, website) {
        this.key = key.escapeHTML();
        this.scriptName = scriptName.escapeHTML();
        this.minVersion = minVersion.escapeHTML();
        this.maxVersion = maxVersion.escapeHTML();
        this.author = author ? author.escapeHTML() : '';
        this.website = website ? website.escapeHTML() : '';
        this.gui = null;
    };
    GameScript.prototype = GameScript;
    GameScript.isOutdated = function () {
        return TheWestApi.version != 'beta' && (this.minVersion > TheWestApi.version || this.maxVersion < TheWestApi.version);
    };
    GameScript.loadScript = function (src, stamp) {
        stamp = stamp || ("?" + new Date().getTime());
        var id = src.replace(/[^a-zA-Z]/g, "_");
        if ($('#' + id))$('#' + id).remove();
        $('head').append('<script id="' + id + '" type="text/javascript" src="' + (src + stamp) + '" />');
    };
    GameScript.loadStyle = function (src, stamp) {
        stamp = stamp || ("?" + new Date().getTime());
        var id = src.replace(/[^a-zA-Z]/g, "_");
        if ($('#' + id))$('#' + id).remove();
        $('head').append('<link id="' + id + '" type="text/css" href="' + (src + stamp) + '" rel="stylesheet" />');
    };
    GameScript.setGui = function (gui) {
        this.gui = gui;
    };
    var _scripts = [];
    return {
        version: '', register: function (key, name, minVersion, maxVersion, author, website) {
            var checkParam = function (key, value) {
                if (!value)throw'TheWestAPI: given parameter (\'' + key + '\') requires a value.';
            };
            checkParam('key', key);
            checkParam('name', name);
            checkParam('minVersion', minVersion);
            checkParam('maxVersion', maxVersion);
            this.checkRegistered(key);
            var api = new GameScript(key, name, minVersion, maxVersion, author, website);
            if (key === 'twdb_clothcalc' && api.isOutdated()) {
                if (TWDB && TWDB.Time)TWDB.Time.ready = true;
            }
            _scripts.push(api);
            $("#ui_scripts").show();
            return api;
        }, length: function () {
            return _scripts.length;
        }, checkRegistered: function (newkey) {
            for (var i = 0; i < _scripts.length; i++) {
                if (_scripts[i].key != newkey)continue;
                throw'TheWestAPI: given parameter (\'' + _scripts[i].key + '\') is already registered!';
            }
        }, isOutdated: function (api) {
            console.log("TheWestAPI: Use of deprecated 'isOutdated' method.");
            return api.isOutdated();
        }, displayOutdated: function () {
            if (0 == _scripts.length)return false;
            var i, outdated, title, html, currentVersionMsg, compatibleMsg, deactivateItMsg, followingMsg;
            outdated = [];
            for (i = 0; i < _scripts.length; i++) {
                if (_scripts[i].isOutdated())outdated.push(_scripts[i]);
            }
            if (0 == outdated.length)return false;
            compatibleMsg = 'Включённые скрипты могут быть несовместимы с этой версией игры.' + '<br />';
            deactivateItMsg = 'Если у тебя возникнут проблемы, отключи или обнови скрипты. Если проблемы остались, тогда можешь обратиться в службу поддержки.' + '<br />';
            currentVersionMsg = '<br />' + 'Текущая версия: $1'.replace('$1', '<strong>' + TheWestApi.version + '</strong>');
            followingMsg = '<br />' + ngettext('Это касается следующего скрипта:', new Array('Это касается следующего скрипта:', 'Это касается следующих скриптов:', 'Это касается следующих скриптов:'), outdated.length) + '<br />';
            var scriptHtml = function (api) {
                return ['<div class="scriptInfo" id="' + api.key + '">', '<div class="scriptInfoLeft">' + api.scriptName + '</div>', '<div class="scriptInfoRight">(', '(версии $1 — $2)'.replace('$1', '<strong>' + api.minVersion + '</strong>').replace('$2', '<strong>' + api.maxVersion + '</strong>'), (api.author ? ' | ' + 'Автор: $1'.replace('$1', api.author) : ''), (api.website ? ' | ' + (('<a href="' + api.website + '">' + 'Сайт' + '</a>')) : ''), ')</div>', '<div style="clear:both;"></div>', '</div>'].join('');
            };
            var inHtml = '';
            for (i = 0; i < outdated.length; i++) {
                if (outdated[i].website) {
                    outdated[i].website = Game.redirectLink + outdated[i].website;
                }
                inHtml += scriptHtml(outdated[i]);
            }
            title = ngettext('Несовместимый скрипт!', new Array('Несовместимый скрипт!', 'Несовместимые скрипты!', 'Несовместимые скрипты!'), outdated.length);
            html = ['<div id="outdatedScripts">', '<div id="outdatedInfo">', compatibleMsg, deactivateItMsg, currentVersionMsg, followingMsg, '</div>', inHtml, '</div>'].join('');
            new west.gui.Dialog(title, html, west.gui.Dialog.SYS_WARNING).addButton("ok").show();
            return true;
        }, loadscript: function (src, stamp) {
            console.log("TheWestAPI: Use of deprecated 'loadscript' method.");
            stamp = stamp || ("?" + new Date().getTime());
            var id = src.replace(/[^a-zA-Z]/g, "_");
            if ($('#' + id))$('#' + id).remove();
            $('head').append($('<script id="' + id + '" type="text/javascript" src="' + (src + stamp) + '" />'));
        }, loadcss: function (src, stamp) {
            console.log("TheWestAPI: Use of deprecated 'loadcss' method.");
            stamp = stamp || ("?" + new Date().getTime());
            var id = src.replace(/[^a-zA-Z]/g, "_");
            if ($('#' + id))$('#' + id).remove();
            $('head').append($('<link id="' + id + '" type="text/css" href="' + (src + stamp) + '" rel="stylesheet" />'));
        }, open: function () {
            var wnd = wman.open("scripts", null, "scripts");
            var showTab = function (id) {
                wnd.activateTab(id).$("div.tw2gui_window_content_pane").empty();
                for (var i = 0; i < _scripts.length; i++) {
                    if (_scripts[i].key == id) {
                        var script = _scripts[i];
                        wnd.setTitle(script.scriptName);
                        if (null == script.gui) {
                            wnd.appendToContentPane("<div class='plug_info'>"
                                + "На этой странице скрипт ещё не использовался."
                                + "</div>");
                        } else {
                            var fleft = $("<div class='script_bottom_left'/>"), fright = $("<div class='script_bottom_right'/>");
                            fleft.append("Версии:"
                                + "<b>" + script.minVersion + "</b>"
                                + " - <b>" + script.maxVersion + "</b>");
                            if (script.author) {
                                fleft.append(" | " + "Автор:" + " <b>" + script.author + "</b>");
                            }
                            if (script.website) {
                                fright.append(new west.gui.Button("Сайт", function () {
                                    showlink(script.website);
                                }).getMainDiv());
                            }
                            wnd.appendToContentPane($("<div class='script_content'/>").append(script.gui), $("<div class='script_bottom'/>").append(fleft, fright, "<div style='clear:both;'/>"));
                        }
                        break;
                    }
                }
            };
            var tabClick = function (win, id) {
                showTab(id);
            };
            wnd.setTitle("Скрипты").setMiniTitle("Скрипты").appendToContentPane("<div class='plug_info'>" + "Выбрать скрипт." + "</div>");
            for (var i = 0; i < _scripts.length; i++)
                wnd.addTab(_scripts[i].scriptName, _scripts[i].key, tabClick);
        }
    };
})();

EquipManager = {};
EquipManager.list = {};
EquipManager.showPopup = function () {
    Ajax.remoteCallMode('inventory', 'show_equip', {}, function (data) {
        EquipManager.list = data.data;
        EquipManager.max = data.max;
        EquipManager.premiumMax = data.premium_max;
        EquipManager.hasPremium = data.hasPremium;
        var el = $('<div/>');
        var maxEquip = $('<span id="max_equip_count"/>');
        maxEquip.html('<strong>' + 'Максимально наборов:' + ' ' + (EquipManager.hasPremium ? EquipManager.premiumMax : EquipManager.max) + '</strong>');
        el.append(maxEquip);
        if (!EquipManager.hasPremium) {
            var premium = $('<div id="equip_manager_buy_automation" style="float: right"/>');
            premium.addMousePopup("<strong>" + 'С помощью премиума «Автоматизация» ты сможешь сохранить до 20 наборов снаряжения.' + "</strong>");
            premium.click(function () {
                Premium.confirmUse('automation', 'Автоматизация', "Ты можешь ставить в очередь восемь заданий. Кроме того, ты сможешь сохранить 20 комплектов снаряжения.", data.price);
            });
            el.append(premium);
        }
        var equipList = $('<div id="equip_manager_list"/>');
        equipList.html(EquipManager.buildEquipList());
        el.append(equipList);
        var saveText = $('<span/>');
        saveText.html('<br /><span class="text_bold">' + 'Сохранить текущий набор?' + '</span><br />' + 'Название набора:');
        el.append(saveText);
        var inputName = new west.gui.Textfield('equip_name').setClass4Input('input_layout');
        var inputSubmit = new west.gui.Button('Сохранить', EquipManager.save);
        el.append(inputName.getMainDiv(), '<br/>', inputSubmit.getMainDiv());
        new west.gui.Dialog('Наборы снаряжения', el).addButton('cancel').show();
    });
};
EquipManager.view = function (equipId) {
    Ajax.remoteCall("inventory", "get_equip", {id: equipId}, function (data) {
        if (data.error !== undefined && data.error) {
            new UserMessage(data.error, UserMessage.TYPE_ERROR).show();
        } else {
            return data.equipList;
        }
    });
}
EquipManager.buildmouseover = function (id, type) {
    var back = '&lt;img style=&quot;position:absolute&quot; src=&quot;https://westrus.innogamescdn.com/images/inventory/';
    var type_class = 'foot_head_animal';
    back += type_class;
    back += '.png&quot; width=&quot;40&quot;/&gt;'
    if (id == null) {
        back += '&lt;img style=&quot;position:absolute&quot;src=&quot;https://westrus.innogamescdn.com/images/inventory/default/empty_' + type + '.png&quot; width=&quot;40&quot; &gt;';
    }
    else {
        var itemObj = Bag.getItemByItemId(id);
        if (itemObj != undefined)
            back += '&lt;img style=&quot;position:absolute&quot;src=&quot;' + itemObj.obj.image + '&quot; width=&quot;40&quot; &gt;'; else if ((Wear.get(type) != null) && (Wear.get(type).obj.item_id == id))
            back += '&lt;img style=&quot;position:absolute&quot;src=&quot;' + Wear.get(type).obj.image + '&quot; width=&quot;40&quot; &gt;'; else {
            back += '&lt;img style=&quot;position:absolute&quot;src=&quot;https://westrus.innogamescdn.com/images/inventory/default/empty_' + type + '.png&quot; width=&quot;40&quot; &gt;';
            back += '&lt;img style=&quot;position:absolute&quot;src=&quot;https://westrus.innogamescdn.com/images/inventory/highlight/x/bag.png&quot; width=&quot;40&quot; &gt;';
        }
    }
    return back;
};
EquipManager.buildEquipList = function () {
    var equip_list = "<table width='550px'>";
    for (var i = 0; EquipManager.list.length > i; i++) {
        var title = '&lt;div id=&quot;equipshow_' + EquipManager.list[i].equip_manager_id + '&quot; style=&quot;height: 120px; width: 160px; high&quot; &gt;';
        title += EquipManager.titlepart(i, 'neck', null, 105);
        title += EquipManager.titlepart(i, 'head', null, 65);
        title += EquipManager.titlepart(i, 'right_arm', 45, null);
        title += EquipManager.titlepart(i, 'body', 65, 65);
        title += EquipManager.titlepart(i, 'left_arm', 45, 145);
        title += EquipManager.titlepart(i, 'animal', 85, null);
        title += EquipManager.titlepart(i, 'pants', 105, 65);
        title += EquipManager.titlepart(i, 'belt', 65, 105);
        title += EquipManager.titlepart(i, 'yield', 85, 145);
        title += EquipManager.titlepart(i, 'foot', 105, 105);
        title += '&lt;/div&gt;';
        var color = '';
        var zahler = 0;
        ['body', 'neck', 'head', 'right_arm', 'left_arm', 'animal', 'pants', 'belt', 'yield', 'foot'].each(function (el) {
            if (Wear.get(el) == null && EquipManager.list[i][el] == null)
                zahler++; else if (Wear.get(el) != null && Wear.get(el).obj.item_id == EquipManager.list[i][el])
                zahler++; else
                zahler = 0;
        });
        if (zahler == 10)
            color = '&quot;#00C000&quot';
        equip_list += "<tr><td width='60%' title ='" + title + "'><font color=" + color + ">" + EquipManager.list[i].name + "</font></td>";
        var optarr = {};
        optarr['switchEquip'] = 'Надеть';
        optarr['replaceEquip'] = 'Сменить';
        optarr['deleteEquip'] = 'Удалить';
        for (k in optarr) {
            equip_list += "<td width='20%'><a href='javascript:EquipManager." + k + "(" + EquipManager.list[i].equip_manager_id + ");'>" + optarr[k] + "</a></td>";
        }
        equip_list += "</tr>";
    }
    equip_list += "</table>"
    return equip_list;
}
EquipManager.titlepart = function (i, type, top, left) {
    var titlebuff = '';
    var pos = '';
    if (!left && top)
        pos = 'top: ' + top + 'px;'; else if (left && top)
        pos = "left: " + left + "px;top: " + top + "px;"; else if (left && !top)
        pos = 'left: ' + left + 'px;';
    titlebuff += "&lt;div  style=&quot;position:absolute;" + pos + "&quot;&gt;";
    titlebuff += EquipManager.buildmouseover(EquipManager.list[i][type], type);
    titlebuff += "&lt;/div &gt;";
    return titlebuff;
}
EquipManager.save = function () {
    Ajax.remoteCall('inventory', 'save_equip', {name: $('#equip_name').val()}, function (data) {
        if (data.error) {
            new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
        } else {
            EquipManager.list.push(data.data);
            $("#equip_manager_list").html(EquipManager.buildEquipList());
        }
    });
}
EquipManager.switchEquip = function (equipId) {
    Ajax.remoteCall('inventory', 'switch_equip', {id: equipId, last_inv_id: Bag.getLastInvId()}, function (data) {
        if (data.error) {
            new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
        } else {
            var added = [], removed = [];
            WearSet.setUpBonus(data.setBonuses);
            WearSet.setUpItems(data.setItems);
            WearSet.workPointBonus = data.workPointBonus;
            for (k in Wear.wear) {
                removed.push(Wear.wear[k].obj);
                Wear.remove(k);
            }
            for (var i = 0; i < data.wear.length; i++) {
                added.push(ItemManager.get(data.wear[i]));
                Wear.add(data.wear[i]);
            }
            Bag.handleChanges(data.changes, 'wear');
            CharacterSkills.updateAllBonuspoints(data.bonus.allBonuspoints);
            Character.setSpeed(data.speed);
            Character.calcMaxHealth();
            EventHandler.signal('health', [Character.health, Character.maxHealth]);
            var weapon = ItemManager.get(data.weapon);
            EventHandler.signal('character_weapon_changed', [weapon]);
            $("#equip_manager_list").html(EquipManager.buildEquipList());
            Wear.renderWear();
            EventHandler.signal('wear_changed', [{added: added, removed: removed}]);
            return true;
        }
    });
}
EquipManager.replaceEquip = function (equipId) {
    new west.gui.Dialog().setTitle("Сменить набор").setText("Заменить набор на тот, что на тебе сейчас?").addButton('yes', function () {
        Ajax.remoteCall('inventory', 'replace_equip', {id: equipId}, function (data) {
            if (data.error) {
                new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
            }
            else {
                for (var i = 0; EquipManager.list.length > i; i++) {
                    if (EquipManager.list[i].equip_manager_id == equipId) {
                        (Wear.get('animal') !== undefined) ? EquipManager.list[i].animal = Wear.get('animal').obj.item_id : EquipManager.list[i].animal = null;
                        (Wear.get('belt') !== undefined) ? EquipManager.list[i].belt = Wear.get('belt').obj.item_id : EquipManager.list[i].belt = null;
                        (Wear.get('body') !== undefined) ? EquipManager.list[i].body = Wear.get('body').obj.item_id : EquipManager.list[i].body = null;
                        (Wear.get('foot') !== undefined) ? EquipManager.list[i].food = Wear.get('foot').obj.item_id : EquipManager.list[i].food = null;
                        (Wear.get('head') !== undefined) ? EquipManager.list[i].head = Wear.get('head').obj.item_id : EquipManager.list[i].head = null;
                        (Wear.get('left_arm') !== undefined) ? EquipManager.list[i].left_arm = Wear.get('left_arm').obj.item_id : EquipManager.list[i].left_arm = null;
                        (Wear.get('neck') !== undefined) ? EquipManager.list[i].neck = Wear.get('neck').obj.item_id : EquipManager.list[i].neck = null;
                        (Wear.get('pants') !== undefined) ? EquipManager.list[i].pants = Wear.get('pants').obj.item_id : EquipManager.list[i].pants = null;
                        (Wear.get('right_arm') !== undefined) ? EquipManager.list[i].right_arm = Wear.get('right_arm').obj.item_id : EquipManager.list[i].right_arm = null;
                        (Wear.get('yield') !== undefined) ? EquipManager.list[i].yield = Wear.get('yield').obj.item_id : EquipManager.list[i].yield = null;
                        $("equip_manager_list").innerHTML = EquipManager.buildEquipList();
                        break;
                    }
                }
                new UserMessage("Набор сохранён", UserMessage.TYPE_SUCCESS).show();
            }
        });
    }).addButton('no').show();
}
EquipManager.deleteEquip = function (equipId) {
    Ajax.remoteCall('inventory', 'delete_equip', {id: equipId}, function (data) {
        if (data.error) {
            new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
        }
        else {
            for (var i = 0; EquipManager.list.length > i; i++) {
                if (EquipManager.list[i].equip_manager_id == equipId) {
                    EquipManager.list.splice(i, 1);
                }
            }
            $("#equip_manager_list").html(EquipManager.buildEquipList());
        }
    });
}

Vector = function () {
    var obj = {};
    obj.calcDirectionVector = function (a, b) {
        return {x: b.x - a.x, y: b.y - a.y};
    };
    obj.calcDistanceVector = function (a, distance) {
        return {x: a.x * (distance / obj.calcAbsoluteVector(a)), y: a.y * (distance / obj.calcAbsoluteVector(a))};
    };
    obj.calcPointInDistance = function (a, d) {
        return {x: a.x + d.x, y: a.y + d.y};
    };
    obj.calcAbsoluteVector = function (a) {
        return Math.sqrt((a.x * a.x) + (a.y * a.y));
    };
    obj.calcAngle = function (a, b) {
        return Math.acos((a.x * b.x + a.y * b.y) / (obj.calcAbsoluteVector(a) * obj.calcAbsoluteVector(b))) * (360 / (2 * Math.PI));
    };
    obj.calcStraightLine = function (p1, p2) {
        var m = (p2.y - p1.y) / (p2.x - p1.x);
        return {
            "m": m, "func": function (x) {
                return x * m;
            }
        };
    };
    obj.getDirectionId = function (angle, upwards) {
        if (angle > 160)if (upwards)return 4; else return 4;
        if (angle > 113)if (upwards)return 5; else return 3;
        if (angle > 68)if (upwards)return 6; else return 2;
        if (angle > 23)if (upwards)return 7; else return 1;
        return 0;
    };
    return obj;
}();

WalkTheLine = function () {
    var PAST = 'past';
    var CURRENT = 'current';
    var FUTURE = 'future';
    var END = 'end';
    var obj = {GAP: 40};
    obj.init = function () {
        var started = false;
        var waypoints = undefined;
        var clearIntervals = function () {
            $('.walk-waypoint').remove();
            started = false;
            waypoints = undefined;
        };
        var handler = function (task) {
            task = obj.extractTask(task);
            if (!task.to.x || !task.to.y || (task.from.x == task.to.x && task.from.y == task.to.y))return false;
            if (started && waypoints) {
                obj.update(task, waypoints);
            }
            if (false === started) {
                started = true;
                waypoints = obj.start(task);
                if (waypoints.currentCoords() && waypoints.currentCoords().x) {
                    EventHandler.signal('walktheline-start', [waypoints.currentCoords(), waypoints.getDirectionId()]);
                }
            }
        };
        EventHandler.listen('task-start-way', handler);
        EventHandler.listen('taskqueue-updated', clearIntervals);
        EventHandler.listen('position_change', clearIntervals);
        EventHandler.listen('map-drawed', function () {
            started = false;
        });
    };
    obj.extractTask = function (task) {
        return {
            from: Character.position,
            to: {x: task.x, y: task.y},
            start: task.date_start / 1000,
            end: task.date_done / 1000
        };
    };
    obj.update = function (task, waypoints) {
        var newCurrent = obj.calcCurrentPoint(waypoints.length(), task.start, task.end);
        if (newCurrent >= waypoints.length())return;
        if (waypoints.current() != newCurrent) {
            waypoints.update(newCurrent, obj.switchPoints);
        }
    };
    obj.start = function (task) {
        var waypoints = obj.getPointsInBetween(task.from, task.to, obj.GAP);
        var newCurrent = obj.calcCurrentPoint(waypoints.length(), task.start, task.end);
        waypoints.drawLine(newCurrent, obj.drawPoint);
        return waypoints;
    };
    obj.drawPoint = function (point, pointnr, status, direction) {
        $('<div class="walk-waypoint walk-waypoint-' + pointnr + ' ' + status + '"></div>').css('left', point.x).css('top', point.y).appendTo('#map');
    };
    obj.switchPoints = function (point) {
        $('.walk-waypoint-' + (point - 1)).removeClass('current').addClass('past');
        $('.walk-waypoint-' + point).removeClass('future').addClass('current');
    };
    obj.calcCurrentPoint = function (points, start, end) {
        return Math.ceil((Math.round(+Game.getServerTime()) - start) / ((end - start) / points));
    };
    obj.getPointsInBetween = function (from, to, gap) {
        var direction = Vector.calcDirectionVector(from, to);
        var waylength = Vector.calcAbsoluteVector(direction);
        var angle = Vector.calcAngle({x: 1, y: 0}, direction);
        var points = [];
        var distance = Vector.calcDistanceVector(direction, gap);
        var waypoint = from;
        var marked = 0;
        while (marked < waylength) {
            marked = marked + gap;
            points.push(waypoint);
            waypoint = Vector.calcPointInDistance(waypoint, distance);
        }
        return obj.Waypoints(points, angle, (to.y - from.y > 0) ? false : true);
    };
    obj.Waypoints = function (points, angle, upwards) {
        var obj = {};
        var pointer = 0;
        obj.length = function () {
            return points.length;
        };
        obj.current = function () {
            return pointer;
        };
        obj.angle = function () {
            return angle;
        };
        obj.upwards = function () {
            return upwards;
        };
        obj.currentCoords = function () {
            return points[pointer];
        };
        obj.getDirectionId = function () {
            return Vector.getDirectionId(angle, upwards);
        };
        obj.status = function (pointnr) {
            if (pointnr > obj.current())return PAST;
            if (pointnr == obj.current())return CURRENT;
            if (obj.length() - 1 == obj.current())return END;
            return FUTURE;
        };
        obj.drawLine = function (pointnr, callback) {
            while (obj.hasNext())
                callback(obj.next(), pointer, obj.status(pointnr));
            pointer = pointnr;
        };
        obj.update = function (newCurrent, callback) {
            if (newCurrent == obj.current())return;
            for (var i = obj.current(); (i <= newCurrent && obj.hasNext()); i++) {
                pointer = i;
                callback(i);
            }
            if (points[pointer] && points[pointer].x) {
                EventHandler.signal('walktheline-update', [points[pointer], obj.getDirectionId()]);
            }
        };
        obj.hasNext = function () {
            if (pointer + 1 > points.length || undefined === points[pointer + 1])
                return false;
            return true;
        };
        obj.next = function () {
            pointer++;
            if (pointer > points.length || undefined === points[pointer])
                return false;
            return points[pointer];
        };
        return obj;
    };
    return obj;
}();

AnimationSprite = function (imageSrc, width, height, frames, offset) {
    this.imageSrc = imageSrc;
    this.width = width;
    this.height = height;
    this.frames = frames;
    this.offset = offset || 0;
};
AnimationSprite.prototype.getOffset = function (directionId) {
    return (directionId || 0) * this.height;
};
AnimationSprite.prototype.html = function (id) {
    id = id || 0;
    return $('<div class="animation-sprite" style="'
        + 'background-image:url(' + this.imageSrc + ');'
        + 'background-position:-0px -' + this.getOffset(id) + 'px;'
        + 'width:' + this.width + 'px;'
        + 'height:' + this.height + 'px;'
        + '"></div>');
};
Animation = function (name, config) {
    config = config || {};
    this.name = name;
    this.config = {
        speed: config.speed || 1,
        appendTo: config.appendTo || document.body,
        prependTo: config.prependTo || null
    };
    this.defaultSprite = undefined;
    this.raf = undefined;
    this.direction = undefined;
    this.element = $('<div class="animation-sprite-outer animation-' + this.name + '"/>');
};
Animation.prototype.setDefaultSprite = function (funcName, sprite, options) {
    this.defaultSprite = sprite;
    this.add(funcName, sprite, options);
    return this;
};
Animation.prototype.add = function (func, sprite, options) {
    this[func] = function (x, y, id) {
        this.stop();
        this.sprite = sprite;
        this.draw(x, y, id);
        this.start_(x, y, id, options || {});
    };
    return this;
};
Animation.prototype.getElement = function () {
    return this.element;
};
Animation.prototype.draw = function (x, y, directionId) {
    if (this.config.prependTo && !$.contains($(this.config.prependTo).get(0), this.element.get(0))) {
        this.element.prependTo(this.config.prependTo);
    } else if (this.config.appendTo && !$.contains($(this.config.appendTo).get(0), this.element.get(0))) {
        this.element.appendTo(this.config.appendTo);
    }
    if (undefined !== directionId)this.direction = directionId;
    this.setPosition(x, y);
    var sprite = this.sprite || this.defaultSprite;
    this.element.html(sprite.html(this.direction)).show();
    return this;
};
Animation.prototype.setPosition = function (x, y) {
    if (x != undefined && y != undefined) {
        this.element.css({top: y, left: x});
    }
    return this;
};
Animation.prototype.update = function (x, y, direction) {
    if (direction != undefined && direction !== this.direction) {
        this.draw(x, y, direction);
    } else {
        this.setPosition(x, y);
    }
    return this;
};
Animation.prototype.drawDefault = function () {
    cancelAnimationFrame(this.raf);
    this.sprite = this.defaultSprite;
    this.draw(null, null, this.direction);
    return this;
};
Animation.prototype.stop = function (x, y, id, hide) {
    cancelAnimationFrame(this.raf);
    if (undefined != id)this.direction = id;
    this.setPosition(x, y);
    if (this.sprite) {
        $('.animation-sprite', this.element).css({'background-position': '-0px -' + this.sprite.getOffset(this.direction) + 'px'});
    }
    if (hide)$(this.element).hide();
    return this;
};
Animation.prototype.start_ = function (x, y, id, options) {
    if (undefined !== id)this.direction = id;
    if (this.raf) {
        cancelAnimationFrame(this.raf);
        this.raf = null;
    }
    var that = this;
    var currentFrame = 0;
    var sprite_offset = this.sprite.offset;
    var fps = this.config.speed * (options.fps || this.sprite.frames);
    var lastCall;
    var fn;
    this.setPosition(x, y);
    fn = function (timestamp) {
        lastCall = lastCall || timestamp;
        var timeDelta = timestamp - lastCall, frameDelta = fps / 1000 * timeDelta, cancel = false, newFrame = currentFrame + frameDelta;
        if (newFrame >= that.sprite.frames) {
            newFrame = 0;
            if (options.onLoop) {
                cancel = options.onLoop.call(that);
            }
            ;
            if (options.once) {
                cancel = true;
                that.drawDefault();
            }
        }
        if (!cancel && ~~newFrame != ~~currentFrame) {
            $('.animation-sprite', that.element).css({'background-position': '-' + (sprite_offset + ~~newFrame) * that.sprite.width + 'px -' + that.sprite.getOffset(that.direction) + 'px'});
        }
        currentFrame = newFrame;
        lastCall = timestamp;
        if (!cancel)that.raf = requestAnimationFrame(fn);
    };
    this.raf = requestAnimationFrame(fn);
};


Buff = function (data, mousepopup) {
    this.initialize(data, mousepopup);
};
Buff.prototype = Buff;
Buff.initialize = function (data, mousepopup) {
    this.obj = data;
    var n = data.charge;
    if (n !== undefined && n > 0) {
        this.count = $('<div class="bag_item_count" />');
        this.count_text = $('<p></p>').text(n);
        this.count.append(this.count_text);
        this.count.css('cursor', 'default');
    }
    var xhtml = "<span style='font-weight:bold;text-decoration:underline'>";
    switch (data.type) {
        case'travel':
            xhtml += 'Усилитель передвижения';
            break;
        case'character':
            xhtml += 'Усилитель персонажа';
            break;
        case'items':
            xhtml += s('Усилитель (%1)', data.weapon_hand == 'left_arm' ? 'Битва за форт' : 'Дуэль');
            break;
        case'event':
            xhtml += 'Дополнительные бонусы';
            break;
        case'greenhorn':
            xhtml += 'Бонус чечако';
            break;
        case'soldier':
            xhtml += 'Бонусы солдата';
            break;
        case'duelist':
            xhtml += 'Бонусы дуэлянта';
            break;
        case'worker':
            xhtml += 'Бонусы трудяги';
            break;
        case'adventurer':
            xhtml += 'Бонусы авантюриста';
            break;
        case'vip':
            xhtml += 'Премиумы';
            break;
    }
    xhtml += "</span><br />";
    data.description.each(function (el) {
        xhtml += el + "<br />";
    });
    if (data.charge > 0) {
        xhtml += s(ngettext('Хватит на %1 действие', new Array('Хватит на %1 действие', 'Хватит на %1 действия', 'Хватит на %1 действий'), data.charge), data.charge);
    }
    this.img = $('<img src=' + (data.image == undefined ? "https://westrus.innogamescdn.com/images/buffs/" + data.type + ".jpg" : data.image) + ' alt="' + data.name + '" title="' + xhtml.escapeHTML() + '" width="43"/>');
    this.bag_item = $('<div class="bag_item_mini" />');
    this.bag_item.append(this.img);
    if (this.count != undefined) {
        this.bag_item.append(this.count);
    }
};
Buff.getDiv = function () {
    return this.bag_item;
};
var BuffList = {};
BuffList.cooldowns = {};
BuffList.types = ['character', 'travel', 'items', 'event'];
BuffList.replaceList = function (data) {
    var bufflist = $('#buffbars .buffbar_player');
    bufflist.html('');
    BuffList.types.each(function (el) {
        if (BuffList[el] && BuffList[el].timer)window.clearInterval(BuffList[el].timer);
        if (data[el] != undefined) {
            var buff = new Buff(data[el]);
            var div = $('<div style="float:right;width:50px" id="buff_div_' + el + '" />');
            var span = $('<span class="buffspan" id="timer_' + el + '" />');
            div.append(buff.getDiv());
            div.append(span);
            bufflist.append(div);
            BuffList[el] = {
                time: new ServerDate().getTime() + data[el].time * 1000,
                charge: data[el].charge,
                duration: data[el].duration
            };
            BuffList.setTime(el);
        }
    });
}
BuffList.appendCharacterInfo = function () {
    if (this.charClass == Character.charClass)return;
    var buff = new Buff(Character.charClassInfo);
    var div = $('<div style="float:left;width:50px" id="buff_div_' + Character.charClass + '" />');
    div.append(buff.getDiv());
    $('#buffbars .buffbar_class').empty().append(div);
    this.charClass = Character.charClass;
};
BuffList.appendPremiumInfo = function () {
    var desc = [], end, bonus, buff;
    for (bonus in Premium.endTimes) {
        end = new Date(Premium.endTimes[bonus] * 1000);
        if (end - new Date < 0)continue;
        desc.push(Premium.bonusTitles[bonus] + ' (' + s('до: %1', end.toLocaleString()) + ')');
    }
    if (desc.length) {
        buff = new Buff({
            type: 'vip',
            image: 'https://westrus.innogamescdn.com/images/buffs/vip.jpg',
            description: desc
        });
        $(function () {
            $('#buffbars .buffbar_vip').empty().append(buff.getDiv());
        });
    } else {
        $('#buffbars .buffbar_vip').fadeOut(500, function () {
            $(this).remove();
        });
    }
};
BuffList.updateTimer = function (el) {
    var timer = $('#timer_' + el);
    if (!timer)return;
    var t = new ServerDate().getTime();
    var dt = (BuffList[el].time - t) / 1000;
    if (dt > 0) {
        timer.html(dt.formatDurationBuffWay());
    } else if (BuffList[el].duration == null && BuffList[el].charge > 0) {
        window.clearInterval(BuffList[el].timer);
    }
    else {
        BuffList.refresh();
    }
};
BuffList.refresh = function () {
    Ajax.remoteCallMode('character', 'ajax_get_buffs', {}, function (data) {
        Character.setSpeed(data.speed);
        WearSet.workPointBonus = data.workPointBonus;
        CharacterSkills.setBuffs(data.msg);
    });
};
BuffList.setTime = function (el) {
    BuffList[el].timer = window.setInterval(function () {
        BuffList.updateTimer(el);
    }, 500);
}
BuffList.updateCooldownTimer = function (el_id) {
    var timer = Bag.getItemByItemId(el_id);
    if (!timer)return;
    var t = new ServerDate().getTime();
    var dt = (BuffList.cooldowns[el_id].time - t) / 1000;
    if (dt > 0) {
        timer.elCooldown.text(dt.formatDurationBuffWay());
    } else {
        window.clearInterval(BuffList.cooldowns[el_id].timer);
    }
}
BuffList.setCooldownTimer = function (el_id) {
    if (BuffList.cooldowns[el_id].timer)window.clearInterval(BuffList.cooldowns[el_id]);
    BuffList.cooldowns[el_id].timer = window.setInterval(function () {
        BuffList.updateCooldownTimer(el_id);
    }, 1000);
};
BuffList.clearCooldownTimer = function (el) {
    window.clearInterval((BuffList.cooldowns[el] || {}).timer);
};
EventHandler.listen('premium_changed', function (bonus) {
    if (bonus && !Premium.longtimers[bonus])return;
    BuffList.appendPremiumInfo();
});
EventHandler.listen('duel_finished', BuffList.refresh);

window.PreBattle = function (fortId, battleData, mapData) {
    this.fortId = fortId;
    this.battleData = battleData;
    this.mapData = mapData;
    this.setPlayerlist(battleData.playerlist, true, battleData.maneuver);
    this.battleData.privList = {};
    this.recruitlistVisibility = {};
    this.initTime();
};
PreBattle.prototype = PreBattle;
PreBattle.cellSize = 15;
PreBattle.initTime = function () {
    this.battleData.startTimestamp = new Date().getTime() + this.battleData.startTime * 1000;
    var fortId = this.fortId;
    var maneuver = this.battleData.maneuver;
    var session = this.battleData.sessionId;
    var playerlist = this.battleData.playerlist;
    window.setTimeout(function () {
        FortBattleWindow.open(fortId, maneuver, {
            startTime: 0,
            session: session,
            fort_id: fortId,
            playerpos: playerlist
        });
    }, this.battleData.startTime * 1000);
};
PreBattle.setPlayerlist = function (playerlist, setOwnPrivilege, setOwnPos) {
    var changed = true;
    if (this.playerlistStamp && this.battleData.playerlist) {
        changed = false;
        var oldList = this.battleData.playerlist;
        for (var i in playerlist) {
            if (!playerlist.hasOwnProperty(i))continue;
            var a = oldList[i], b = playerlist[i];
            if (!a || a.name != b.name || a.idx != b.idx || a.privilege != b.privilege || a.officername != b.officername || a.coords.x != b.coords.x || a.coords.y != b.coords.y) {
                changed = true;
                break;
            }
        }
    }
    if (!changed)return false;
    if (playerlist && playerlist.length) {
        for (var i in playerlist) {
            if (!playerlist.hasOwnProperty(i))continue;
            var player = playerlist[i];
            if (Character.playerId == player.player_id) {
                this.battleData.isDefender = player.defender;
                setOwnPrivilege && (this.battleData.selfPriv = player.privilege);
                setOwnPos && (this.battleData.selfIdx = player.idx);
            }
        }
    }
    this.playerlistStamp = new Date();
    this.battleData.playerlist = playerlist;
    return true;
};
PreBattle.getPrivilege = function (info) {
    var privlist = this.battleData.privList;
    return privlist[info.player_id] !== undefined ? privlist[info.player_id] : info.privilege
};
PreBattle.recruitSorting = {
    order: ['>town', '>name', '<level', '>class', '<rank', '<grader'],
    'name': function (a, b, eq) {
        a = a.name.toLowerCase();
        b = b.name.toLowerCase();
        return eq ? a == b : a < b
    },
    'town': function (a, b, eq) {
        a = (a.townname || '-').toLowerCase();
        b = (b.townname || '-').toLowerCase();
        return eq ? a == b : a < b
    },
    'level': function (a, b, eq) {
        return eq ? a.level == b.level : a.level < b.level
    },
    'class': function (a, b, eq) {
        a = a['class'];
        b = b['class'];
        return eq ? a == b : a < b
    },
    'status': function (a, b, eq, pa, pb) {
        return eq ? pa == pb : pa < pb
    },
    'grader': function (a, b, eq) {
        a = (a.officername || '').toLowerCase();
        b = (b.officername || '').toLowerCase();
        return eq ? a == b : a < b
    }
};
PreBattle.setSort = function (key) {
    var order = this.recruitSorting.order;
    var remove = function (item) {
        var i = 0, len = order.length;
        while (i < len) {
            if (order[i] === item) {
                order.splice(i, 1);
                len--;
            } else {
                i++;
            }
        }
    }
    remove('>' + key.substr(1));
    remove('<' + key.substr(1));
    order.unshift(key);
};
PreBattle.getSortedPlayerlist = function () {
    var simpleCopy = function (array, start, length) {
        start = start || 0;
        if (start < 0)start = array.length + start;
        length = length || (array.length - start);
        var newArray = [];
        for (var i = 0; i < length; i++)newArray[i] = array[start++];
        return newArray;
    };
    var list = simpleCopy(this.battleData.playerlist), rs = this.recruitSorting;
    var that = this;
    list.sort(function (a, b) {
        var i, k, cmp, op, eq, lt;
        var pa = that.getPrivilege(a), pb = that.getPrivilege(b);
        for (i = 0; i < rs.order.length; i++) {
            k = rs.order[i];
            op = k.charAt(0);
            cmp = rs[k.substr(1)];
            lt = cmp(a, b, false, pa, pb);
            if (lt)return op == '<' ? 1 : -1;
            eq = cmp(a, b, true, pa, pb);
            if (!eq)return op != '<' ? 1 : -1;
        }
        return a.player_id - b.player_id;
    });
    return list;
};
PreBattle.changePrivilege = function (player, grade) {
    this.battleData.privList[player.player_id] = grade;
};
PreBattle.resetPrivileges = function () {
    this.battleData.privList = {};
};
PreBattle.savePrivileges = function (cb) {
    var data = {fort_id: this.fortId, privileges: this.battleData.privList};
    var that = this;
    Ajax.remoteCall('fort_battlepage', 'updatePrivileges', data, function (response) {
        that.setPlayerlist(response.playerlist, true);
        cb && cb();
    });
};
PreBattle.isHidden = function (recClass, recPriv) {
    return (recClass != undefined && this.recruitlistVisibility[recClass]) || (recPriv != undefined && this.recruitlistVisibility[recPriv]);
};
PreBattle.toggleVisibility = function (key) {
    if (this.isHidden(key))
        delete this.recruitlistVisibility[key]; else
        this.recruitlistVisibility[key] = true;
};

QuestEmployer = function (employerId) {
    var classObj = this;
    this.id = employerId;
    this.employerName = '';
    this.coords = [];
    this.initFromBE = function (employerBeObj) {
        classObj.employerName = Quests.Employer.employerNames[classObj.id];
        for (var i = 0; i < employerBeObj.length; i++)
            classObj.addCoordinate(employerBeObj[i]);
    };
    this.getCoordinates = function () {
        return classObj.coords;
    };
    this.addCoordinate = function (coord) {
        if (coord[0] && coord[1])
            classObj.coords.push(coord); else {
            if (window.DEBUG)console.log('error in class QuestEmployer.addCoordinate', 'invalid coordinate for id: ' + classObj.id);
        }
    };
    this.getEmployer = function () {
        return classObj;
    };
};
QuestEmployer.prototype = QuestEmployer;
Quests = {};
Quests.Employer = {
    employerNames: {
        '1': 'Индейская деревня',
        '2': 'Резервация индейцев',
        '3': 'Огнище в пустыне',
        '4': 'Лагерь в пустыне',
        '5': 'Большое ранчо',
        '6': 'Небольшое ранчо',
        '7': 'Старый особняк',
        '8': 'Берег реки',
        '9': 'Пустая пещера',
        '10': 'Старый железный рудник',
        '11': 'Заваленная золотая шахта',
        '12': 'Гора предков',
        '13': 'Берхэм сити',
        '14': 'Джексонвилль',
        '15': 'Город-призрак',
        '16': 'Изолированная ферма',
        '17': 'Молочная ферма',
        '18': 'Западный перекрёсток',
        '19': 'Восточный перекрёсток',
        '20': 'Центральный перекрёсток',
        '21': 'Ритуальная поляна',
        '22': 'Таинственная поляна',
        '23': 'Заброшенный город в пустыне',
        '24': 'Руины в пустыне',
        '25': 'Величественный особняк',
        '26': 'Застава',
        '27': 'Каньон Гремучей Змеи',
        '28': 'Мастерская',
        '29': 'Ньюпорт',
        '30': 'Форт Менсер',
        '31': 'Сэд Хилл',
        '32': 'Город Кристалл',
        '33': 'Салтватер',
        '34': 'Миссия',
        '35': 'Дурные земли',
        '36': 'Новое поселение',
        '37': 'Большой Бурбон'
    }, employerObjects: {}, initEmployerCoordinatesFromBE: function (beObj) {
        for (var k in beObj) {
            Quests.Employer.setEmployer(k, beObj[k]);
        }
    }, setEmployer: function (id, be_obj) {
        var tmp = new QuestEmployer(id);
        tmp.initFromBE(be_obj);
        this.employerObjects[id] = tmp;
    }, getEmployer: function (id) {
        if (this.employerObjects.hasOwnProperty(id))
            return this.employerObjects[id];
        if (window.DEBUG)console.log('error - unknown employer id (' + id + ') in Quests.Employer.getEmployer');
        return {};
    }, getAllEmployer: function () {
        return this.employerObjects;
    }
};

Walker = function () {
    var obj = {interval: undefined, timeout: undefined, current: undefined, progressbar: new west.gui.Progressbar()};
    var shadow = function (cls) {
        var shadow = $('#character-shadow');
        if (0 === shadow.length) {
            shadow = $('<div id="character-shadow" />').appendTo('#map');
            obj.progressbar.getMainDiv().css({
                'margin-top': '-50px',
                'margin-left': '-25px',
                'width': '100px'
            }).appendTo(shadow);
        }
        return shadow.removeClass().addClass(cls);
    };
    var body = function (name, callback, id) {
        if (name === obj.current)return;
        obj.clear();
        obj.current = name;
        callback(shadow(name));
    };
    obj.init = function (animations) {
        obj.animations = animations;
    };
    obj.stop = function (x, y) {
        obj.animations.character.wait(x - 25, y - 36, 2);
        obj.animations.character.stop();
        obj.clear(x, y);
        obj.wait(x, y);
    };
    obj.clear = function (x, y) {
        window.clearInterval(obj.interval);
        window.clearTimeout(obj.timeout);
        ['dots', 'zzz', 'smoke'].each(function (val) {
            obj.animations[val].stop(undefined, undefined, undefined, true);
        });
        obj.current = undefined;
        obj.progressbar.getMainDiv().hide();
    };
    obj.work = function (x, y, start, done) {
        body('work', function (shadow) {
            shadow.css({'left': x - 20, 'top': y - 30});
            obj.animations.character.work(x - 19, y - 55, 2);
        });
        var time = (done - start) / 1000;
        obj.progressbar.setDifferentValue(time.formatDurationWorkProgress());
        obj.progressbar.setValue(start);
        obj.progressbar.setMaxValue(done);
        obj.progressbar.getMainDiv().show();
    };
    obj.wait = function (x, y) {
        body('wait', function (shadow) {
            shadow.css({'left': x - 33, 'top': y - 28});
            obj.interval = window.setInterval(function () {
                obj.animations.character.wait(x - 25, y - 36);
                obj.animations.dots.stop(undefined, undefined, undefined, true);
                obj.timeout = window.setTimeout(function () {
                    obj.animations.character.stop();
                    obj.animations.dots.wait(x - 15, y - 50);
                }, 1000);
            }, 3000);
        });
    };
    obj.sleep = function (x, y) {
        body('sleep', function (shadow) {
            shadow.remove();
            obj.animations.character.sleep(x - 25, y - 37);
            obj.animations.character.stop();
            obj.animations.zzz.zzz(x + 5, y - 57);
        });
    };
    obj.shoot = function (x, y) {
        body('shoot', function (shadow) {
            shadow.css({'left': x - 21, 'top': y - 27});
            obj.animations.character.shoot(x - 14, y - 50);
            obj.animations.smoke.smoke(x + 5, y - 60);
        });
    };
    obj.ride = function (x, y, id) {
        if ('ride' === obj.current) {
            obj.animations.character.update(x - 48, y - 71, id);
        } else {
            obj.clear(x, y);
            obj.current = 'ride';
            obj.animations.character.ride(x - 48, y - 71, id);
        }
        shadow('horse').addClass('dir-' + id).css({'left': x - parseInt(96 / 2), 'top': y - 72});
    };
    obj.walk = function (x, y, id) {
        if ('walk' === obj.current) {
            obj.animations.character.update(x - 34, y - 48, id);
        } else {
            shadow().remove();
            obj.clear(x, y);
            obj.current = 'walk';
            obj.animations.character.walk(x - 34, y - 48, id);
        }
    };
    return obj;
}();

var dataLayer = dataLayer || [];
var WestAnalytics = {
    trackPageview: function (page) {
        dataLayer.push({'event': 'page', 'pageName': page});
    }, trackEvent: function (category, action, opt_label) {
        dataLayer.push({'event': 'event', 'eventCategory': category, 'eventAction': action, 'eventLabel': opt_label});
    }, setUpEvents: function () {
        var track = function (cat, act, labelSuffix) {
            WestAnalytics.trackEvent(cat, act, labelSuffix);
        };
        var match = function (str, regex) {
            var m = str.match(regex);
            return m ? m[1] : 'unknown';
        };
        $('body').mousedown(function (e) {
            var found, params;
            [['#tour', ['teaser', 'tour', 'tour_v1']], ['#mediaButton', ['teaser', 'media', 'media_v1']], ['#featuresButton', ['teaser', 'features', 'features_v1']], ['#cookie', ['login_form', 'check_box', 'permanent_login']], ['#userOptions > a', ['login_form', 'link_click', 'change_password']], ['#agbAccept', ['registration_form', 'check_box', 'accept_terms']], ['#registCheckbox a[href*=agb]', ['registration_form', 'link_click', 'terms']], ['#registCheckbox a[href*=privacy]', ['registration_form', 'link_click', 'privacy']], ['#registrationButton', ['registration_form', 'button_click', 'register_button']], ['#acceptAGB_1c', ['registration_form_1click', 'check_box', 'accept_terms']], ['#inputAGBAccept_1c a[href*=agb]', ['registration_form_1click', 'link_click', 'terms']], ['#inputAGBAccept_1c a[href*=privacy]', ['registration_form_1click', 'link_click', 'privacy']], ['#registrationButton_1c', ['registration_form_1click', 'button_click', 'register_button']], ['.pb-flag', ['top_navigation', 'dropdown_market', function (el) {
                return match(el.id, /pb-flag-(\w+)/);
            }]], ['.pb-moregames-overview > li', ['top_navigation', 'game_bar', function (el) {
                return match(el.id, /pb_game_(\w+)$/);
            }]], ['.footlink', ['bottom_navigation', 'link_click', function (el) {
                return match(el.className, /footlink-(\w+)/);
            }]], ['#logo', ['game_logo', 'logo_click', 'west']], ['#logo .glow', ['game_logo', 'logo_click', 'west']], ['#playForFree', ['register_button', 'button_click', 'open_registration_form']], ['#show_distractor_button', ['news', 'link_click', 'show_news']], ['.news a[href*=showthread]', ['news', 'link_click', function (el) {
                return WestAnalytics.config.market + '_' + el.href.match(/showthread\.php\?p=(\d+)/)[1];
            }]]].each(function (trackEvent) {
                if (found || !$(e.target).is(trackEvent[0]))return;
                params = trackEvent[1].map(function (param) {
                    return typeof param === 'function' ? param.call(null, e.target) : param;
                });
                track.apply(null, params);
                found = true;
            });
        });
    }
};

Config.addChangeListener("marketcampaign.msg", function (data) {
    if ("" != data)GameGift.enqueue("marketcampaign", data);
    Config.set("marketcampaign.msg", "");
});
Config.addChangeListener("newInvitedPlayer", function () {
    GameGift.enqueue("sattlebag");
});
GameGift = function () {
    var queue = [];
    var next = function () {
        if (queue[0].payload[2])
            queue[0].payload[2]();
        queue.shift();
        if (queue[0])showPopup(queue[0]);
    };
    var showPopup = function (data) {
        var handler = types[data.type];
        if (undefined === handler)return null;
        var popup = new tw2widget.reward.RewardDialog("Особое вознаграждение:", undefined, next);
        if (!handler(popup, data.payload)) {
            next();
            return null;
        }
        popup.show();
    };
    var types = {
        marketcampaign: function (popup, payload) {
            var c = null;
            if (undefined !== payload.item_id)
                c = helpers.item(payload.item_id, payload.item_count); else if (undefined !== payload.nuggets)
                c = helpers.nugget(payload.nuggets);
            popup.setTitle(payload.title ? payload.title : "Привет!").setSubtitle(payload.message ? payload.message : "Твоё особое вознаграждение").setContent(c);
            return true;
        }, sattlebag: function (popup, payload) {
            popup.setSubtitle("Бонус за регистрацию").setContent(helpers.item(13711000));
            return true;
        }, wof: function (popup, payload) {
            popup.setTitle("Приз!").setSubtitle("Ты получаешь:").setContent($("<div class='wof-prize-section' style='margin-top:-10px;' />").append("<div class='section-border' />", "<div class='section-bg' style='background:" + payload[1] + "; '/>", $("<div class='section-content'>").append(helpers.item(payload[0]))));
            return true;
        }
    };
    var helpers = {
        item: function (itemid, itemcount) {
            var itemobj = ItemManager.get(itemid);
            if (undefined == itemobj)return false;
            var widget = new tw2widget.InventoryItem(itemobj);
            if (itemcount !== undefined && itemcount > 1)widget.setCount(itemcount);
            return $("<div />").append($(widget.getMainDiv()).css({
                display: "inline-block",
                'float': "none"
            })).css("text-align", "center");
        }, nugget: function (amount) {
            var ngtico = "<img src='https://westrus.innogamescdn.com/images/nuggets.png'/>";
            return $("<div style='padding: 10px;' />").append("<img src='https://westrus.innogamescdn.com/images/nuggets.png'/> ", "<b>" + s(ngettext("%1 самородок", new Array("%1 самородок", "%1 самородка", "%1 самородков"), amount), amount) + "</b>").css("text-align", "center");
        }
    };
    return {
        enqueue: function (type, payload) {
            queue.push({type: type, payload: payload});
            if (queue.length == 1) {
                if (!ItemManager.isLoaded()) {
                    EventHandler.listen("itemmanager_loaded", function () {
                        showPopup(queue[0]);
                    });
                } else {
                    showPopup(queue[0]);
                }
            }
        }
    };
}();

var AudioController = (function () {
    var storage = {}, dir = '/sounds/', codecs = {'ogg': 'audio/ogg', 'mp3': 'audio/mpeg'}, supported;

    function isSupported() {
        if (supported === undefined) {
            supported = !!getElement().canPlayType;
        }
        return supported;
    };
    function isMuted() {
        return Config.get('soundsOff');
    };
    function getSource(file, fileExt, codec) {
        var source = document.createElement('source');
        source.setAttribute('type', codec);
        source.setAttribute('src', dir + file + '.' + fileExt);
        return source;
    };
    function getElement() {
        return document.createElement('audio');
    };
    function Sound(file) {
        if (!isSupported())return;
        this.el = getElement();
        for (var fileExt in codecs)
            this.el.appendChild(getSource(file, fileExt, codecs[fileExt]));
    };
    Sound.prototype.play = function () {
        this.el && this.el.play();
    };
    return {
        SOUND_NEWMSG: 'newmsg', play: function (soundName) {
            if (!isSupported() || isMuted())return;
            if (!storage[soundName])
                storage[soundName] = new Sound(soundName);
            storage[soundName].play();
        }, get: function (soundName) {
            return new Sound(soundName);
        }
    };
})();
;
(function ($) {
    "use strict";
    window.Markers = function () {
        var obj = {'markers': {}};
        obj.MODE_ON = 1;
        obj.MODE_HOVER = 2;
        obj.init = function (list, mode) {
            obj.mode = mode || 2;
            if (!list)return;
            list.each(function (v) {
                obj.markers[v.marker_id] = new Marker(v.x, v.y, v.description, v.marker_id);
            });
            Config.addChangeListener('minimap.marker', function () {
                obj.mode = Config.get('minimap.marker');
                obj.each(function (marker) {
                    marker.init();
                });
            });
        };
        obj.get = function (id) {
            if (!obj.markers[id])return false;
            return obj.markers[id];
        };
        obj.each = function (cb) {
            if (!obj.markers)return;
            for (var id in obj.markers) {
                if (obj.markers.hasOwnProperty(id)) {
                    cb(obj.markers[id]);
                }
            }
        };
        obj.add = function (marker) {
            Ajax.remoteCall('map', 'addMarker', marker.post()).done(function (resp) {
                if (resp.error)return new MessageError(resp.msg).show();
                marker.id = resp.marker_id;
                obj.markers[marker.id] = marker.updateBtns();
                EventHandler.signal('marker-added', [marker]);
                new MessageSuccess(resp.msg).show();
            });
        };
        obj.update = function (marker) {
            Ajax.remoteCall('map', 'updateMarker', marker.post()).done(function (resp) {
                if (resp.error)return new MessageError(resp.msg).show();
                EventHandler.signal('marker-updated', [marker]);
                new MessageSuccess(resp.msg).show();
            });
        };
        obj.remove = function (marker) {
            if (marker.id) {
                Ajax.remoteCall('map', 'deleteMarker', marker.post()).done(function (resp) {
                    if (resp.error)return new MessageError(resp.msg).show();
                    var id = marker.id;
                    marker.remove();
                    delete obj.markers[marker.id];
                    EventHandler.signal('marker-deleted', [id]);
                    new MessageSuccess(resp.msg).show();
                });
            } else {
                marker.remove();
            }
        };
        return obj;
    }();
    var Marker = function (x, y, desc, id) {
        this.x = x;
        this.y = y;
        this.desc = desc;
        this.id = id;
        EventHandler.listen('map-drawed', this.init, this);
    };
    window.Marker = Marker;
    Marker.prototype.init = function () {
        if (this.divMain)this.divMain.remove();
        this.exported = false;
        this.popupCreated = false;
        this.divMain = $("<div class='pin collapsed'></div>").css({
            'left': ((this.x > (Map.mapWidth - 50)) ? this.x - 50 : this.x),
            'top': ((this.y > (Map.mapHeight - 50)) ? this.y - 50 : this.y)
        });
        this.divMain.appendTo(Map.mapEl);
        if (Markers.mode === Markers.MODE_HOVER) {
            this.divMain.on('mouseenter', this.show.bind(this)).on('mouseleave', this.hide.bind(this));
        } else {
            this.buildPopup();
        }
    };
    Marker.prototype.post = function () {
        return {'x': this.x, 'y': this.y, 'id': this.id, 'desc': this.desc};
    };
    Marker.prototype.remove = function () {
        EventHandler.unlisten('map-drawed', this.init, this);
        this.divMain.remove();
        this.divMain = undefined;
    };
    Marker.prototype.isValid = function () {
        var desc = this.getValue();
        return (desc.length >= 3 && desc.length < 20);
    };
    Marker.prototype.show = function () {
        this.buildPopup();
        this.divMain.addClass('extended');
        this.divMain.removeClass('collapsed');
        $('.marker-menu', this.divMain).show();
        $('.minimap-desc', this.divMain).focus();
    };
    Marker.prototype.hide = function () {
        if (false === this.exported && undefined != this.id) {
            this.divMain.removeClass('extended');
            this.divMain.addClass('collapsed');
            $('.minimap-desc', this.divMain).blur();
            $('.marker-menu', this.divMain).hide();
        }
    };
    Marker.prototype.getValue = function () {
        return $('input.minimap-desc', this.divMain).val();
    };
    Marker.prototype.buildPopup = function () {
        if (!this.popupCreated) {
            var iconDelete = new west.gui.Icon('abort minimap-delete', 'Удалить флажок');
            var iconSave = new west.gui.Icon('save minimap-save', 'Сохранить флажок');
            var iconExport = new west.gui.Icon('export minimap-export', 'Поделиться флажком');
            var input = new west.gui.Textfield(undefined, 'text', 'minimap-desc').addListener(function (event) {
                MarkerUi.Events.clickSave(event, this);
            }, this).setValue(this.desc).setSize(20);
            input.divMain.on('keyup', this.updateBtns.bind(this));
            new west.gui.Groupframe('marker-menu').appendToContentPane(input.getMainDiv(), iconDelete.getMainDiv(), iconSave.getMainDiv().css('display', 'none'), iconExport.getMainDiv().css('display', 'none')).divMain.css({
                'margin-left': (this.x > (Map.mapWidth - 250)) ? '-220px' : '34px',
                'margin-top': (this.y > (Map.mapHeight - 25)) ? '-30px' : '25px',
                'width': '300px'
            }).on('click', function (event) {
                MarkerUi.Events.delegate(event, this);
            }.bind(this)).on('mousedown', function (e) {
                e.stopPropagation();
            }).appendTo(this.divMain);
            this.popupCreated = true;
        }
        this.updateBtns();
        return this;
    };
    Marker.prototype.updateBtns = function () {
        if (this.isValid()) {
            $('.minimap-save', this.divMain).css('display', 'inline-block');
            if (this.id) {
                $('.minimap-export', this.divMain).css('display', 'inline-block');
            }
        } else {
            $('.minimap-save', this.divMain).css('display', 'inline-block');
        }
        return this;
    };
    Marker.prototype.showExportStr = function () {
        if (this.exported) {
            this.exported = false;
            $('.selectable', this.divMain).remove();
            $('.minimap-export', this.divMain).removeClass('tw2gui-icon-export-down').addClass('tw2gui-icon-export');
        } else {
            this.exported = true;
            $('.minimap-export', this.divMain).removeClass('tw2gui-icon-export').addClass('tw2gui-icon-export-down');
            $('<div style="width:250px;padding:5px;" class="selectable">' + MarkerUi.exportMarker(this) + '</div>').appendTo($('.tw2gui_groupframe_content_pane', this.divMain));
        }
    };
    window.MarkerUi = {
        importRegExp: /\[marker ([0-9]*) ([0-9]*) (.*?)\]/g, exportStr: '[marker %1 %2 %3]', activate: function () {
            var el = $('#ui_minimap_flag');
            if (el.hasClass('active')) {
                this.deactivate();
            } else {
                Map.ClickHandler.deactivate(Map.mapEl);
                el.addClass('active');
                Map.mapEl.on('click', MarkerUi.click).addClass('add-marker');
            }
        }, deactivate: function () {
            Map.mapEl.off('click').removeClass('add-marker');
            $('#ui_minimap_flag').removeClass('active');
            Map.ClickHandler.init(Map.mapEl);
        }, click: function (event) {
            MarkerUi.deactivate();
            var coords = Map.Helper.getPositionFromClick(event, Map.mapEl);
            new Marker(coords.x, coords.y).init();
        }, importMarker: function (x, y, desc) {
            new Marker(x, y, desc.unescapeHTML());
            Map.center(x, y);
        }, exportMarker: function (marker) {
            return s(MarkerUi.exportStr, marker.x, marker.y, marker.desc.escapeHTML());
        }, 'Events': {
            delegate: function (event, marker) {
                var el = $(event.target), matcher;
                matcher = el.attr('class').match(/minimap-(\w+)/);
                if (!matcher)return;
                switch (matcher[1]) {
                    case'desc':
                        MarkerUi.Events.clickDesc(event, marker);
                        break;
                    case'delete':
                        MarkerUi.Events.clickDelete(event, marker);
                        break;
                    case'export':
                        MarkerUi.Events.clickExport(event, marker);
                        break;
                    case'save':
                        MarkerUi.Events.clickSave(event, marker);
                        break;
                }
                ;
            }, 'clickDesc': function (event, marker) {
                $(event.target).focus();
            }, 'clickDelete': function (event, marker) {
                Markers.remove(marker);
            }, 'clickExport': function (event, marker) {
                marker.showExportStr();
            }, 'clickSave': function (event, marker) {
                if (!marker.isValid())
                    return new MessageError('Текст либо слишком короткий, либо слишком длинный.').show();
                marker.desc = marker.getValue();
                if (marker.id) {
                    Markers.update(marker);
                } else {
                    Markers.add(marker);
                }
            }
        }
    };
})(jQuery);

var Share = {
    image_size: 100, getFacebookButton: function (img, title, desc, uri) {
        return '<a title="' + 'Разместить на Facebook' + '" href="http://www.facebook.com/share.php?' + 's=100&amp;p[title]=' + title + '&amp;p[summary]=' + desc + '&amp;p[url]=' + uri + '&amp;p[images][0]=' + img + '" ' +
            getPopupWindowCode(600, 400) + '>' + '<img style="width:32px;height:32px;" alt="' + 'Делёж' + '" src="https://westrus.innogamescdn.com/images/icons/facebook_icon.png" /></a>';
    }, getGoogleplusButton: function (uri) {
        return '<a title="' + 'Разместить на Google+' + '" href="https://plus.google.com/share?url=' + uri + '" ' +
            getPopupWindowCode(600, 600) + '>' + '<img src="https://westrus.innogamescdn.com/images/icons/googleplus_icon.png" style="width:32px;height:32px;" alt="' + 'Делёж' + '"/></a>';
    }, getTwitterButton: function (message, uri) {
        var tweetlength = (uri ? uri.length : 0) + message.length;
        if (tweetlength > 140) {
            if (window.DEBUG)console.log('twitter message is too long (' + tweetlength + ' > 140 chars)');
            return '';
        }
        return '<a title="' + 'Разместить на Twitter' + '" href="http://twitter.com/share?text=' + message + (uri ? '&amp;url=' + uri : '') + '&amp;hashtags=browsergame" ' +
            getPopupWindowCode(600, 460) + '>' + '<img style="width:32px;height:32px;" alt="' + 'Отправить' + '" src="https://westrus.innogamescdn.com/images/icons/twitter_icon.png" /></a>';
    }
};

var JobCalculator = function (jobpoints, malus) {
    this.MAX_STAGE = 5;
    this.jobpoints = jobpoints;
    this.step = Math.ceil(malus / this.MAX_STAGE);
    this.malus = malus || 1;
    this.currPoints = parseInt(jobpoints % this.step);
    this.bonus = (jobpoints - this.malus) || 0;
    this.stage = 'bronze';
    this.stars = 0;
    this.nextstage = 'bronze';
};
JobCalculator.prototype.calcBronze = function () {
    this.stage = 'bronze';
    var tmp = this.malus + this.bonus;
    this.stars = parseInt(tmp / this.step);
    return true;
};
JobCalculator.prototype.getNextStarData = function () {
    this.nextstage = 'bronze';
    this.nextstagestar = 1;
    if (this.stars) {
        if (this.stars > 4 && this.stage == 'gold') {
            this.currPoints = this.step;
            this.nextstage = 'gold';
            this.nextstagestar = 5;
        }
        else if (this.stars > 4)
            this.nextstage = (this.stage == 'bronze' ? 'silver' : 'gold'); else {
            this.nextstage = this.stage;
            this.nextstagestar = parseInt(this.stars + 1);
        }
    }
    return {
        current: this.currPoints,
        nextstar: this.step,
        nextstage: this.nextstage,
        nextstagestar: this.nextstagestar
    };
};
JobCalculator.prototype.calcStars = function (beMalus) {
    if (beMalus < 1)return this.calcBronze();
    var stars = parseInt(this.jobpoints / this.step);
    if (this.jobpoints <= this.MAX_STAGE || (this.bonus - this.step) < 1)
        return this.calcBronze();
    stars = parseInt(this.bonus / this.step);
    if (stars <= this.MAX_STAGE) {
        this.stage = 'silver';
        this.stars = stars;
    }
    else {
        this.stage = 'gold';
        this.stars = stars > this.MAX_STAGE * 2 ? this.MAX_STAGE : stars - this.MAX_STAGE;
    }
    return true;
};
JobCalculator.prototype.getJobstarsValue = function () {
    if (this.stage == 'gold')
        return this.stars + 10; else if (this.stage == 'silver')
        return this.stars + 5; else
        return this.stars;
};

(function (global) {
    var Clip = west.createClass(null, {
        init: function (dt, role) {
            this.dt = dt;
            this.role = role;
        }, _mute: false, get: function (ctx, selector) {
            return $('.' + this.role + ' ' + (selector || ''), ctx);
        }, instantPlay: function (curIdx, movLen) {
            return false;
        }, setMute: function (val) {
            this._mute = val;
        }, getMute: function () {
            return this._mute;
        }
    });
    var DrawClip = west.createClass(Clip, {
        init: function (dt, role, addCls) {
            this.callParent(dt, role);
            this.addCls = addCls;
        }, play: function (ctx, fastForward) {
            this.get(ctx, '.pose').addClass(this.addCls);
        }
    });
    var HitClip = west.createClass(Clip, {
        init: function (dt, role, addCls, removeCls) {
            this.callParent(dt, role);
            this.addCls = addCls;
            this.removeCls = removeCls;
        }, play: function (ctx, fastForward) {
            if (fastForward)return;
            this.get(ctx).addClass(this.addCls).removeClass(this.removeCls);
        }
    });
    var RoundClip = west.createClass(Clip, {
        init: function (dt, role, dmg, aim, mute) {
            this.callParent(dt, role);
            this.dmg = dmg;
            this.aim = aim;
            this.setMute(mute);
            this.sound = AudioController.get('gunshot' + (Math.floor(Math.random() * 9) + 1));
        }, play: function (ctx, fastForward) {
            if (!fastForward && !this.getMute())this.playSound();
            var el = $('<div><div class="shot"></div></div>');
            if (!fastForward)this.smokeAnimation(this.get(ctx));
            if (this.dmg) {
                if (!fastForward)this.damageAnimation(ctx);
                this.updateTotalDamage(ctx);
                el.prepend('<span class="dmg">-' + this.dmg + '</span>').append('<div class="aimzone aimzone-' + this.aim + '"/>');
                $('.shot', el).addClass('shot-hit');
            }
            this.get(ctx, '.rounds').append(el);
        }, playSound: function () {
            this.sound.play();
        }, damageAnimation: function (ctx) {
            var el = $('<div>-' + this.dmg + '</div>');
            this.get(ctx, '.hit').append(el);
            el.animate({top: -20, opacity: 0.3}, 1300, 'linear', function () {
                $(this).remove();
            });
        }, updateTotalDamage: function (ctx) {
            var el = this.get(ctx, '.total-dmg-val');
            el.text(parseInt(el.text() || 0) - this.dmg);
        }, smokeAnimation: function (el) {
            var smoke = $('<div class="smoke"/>'), pos, opts = {};
            el.append(smoke);
            pos = smoke.position();
            if (smoke.css('background-size'))
                opts = {top: pos.top - 100, left: pos.left - 50, width: 200, height: 200, backgroundSize: 200}; else
                opts = {top: pos.top - 40, left: pos.left + 10};
            smoke.animate(opts, 700, 'linear', function () {
                smoke.remove();
            });
        }
    });
    var ResultClip = west.createClass(Clip, {
        init: function (won, ko, bounty, winner, loser) {
            this.won = won;
            this.ko = ko;
            this.bounty = bounty;
            this.winner = winner;
            this.loser = loser;
        }, dt: 9999999, instantPlay: function (curIdx, movLen) {
            return curIdx === movLen - 1;
        }, play: function (ctx, fastForward) {
            var l10n = {
                title: {won: 'Победа!', lost: 'Поражение!', ko: {won: 'Противник в коме!', lost: 'Ты в коме!'}},
                description: {
                    won: {
                        you: 'Ты получаешь:', enemy: function (player_gender, player_name) {
                            return s(sextext('%1 получает:', "%1 получает:", player_gender), player_name);
                        }
                    },
                    lost: {
                        you: 'Ты теряешь:', enemy: function (player_gender, player_name) {
                            return s(sextext('%1 теряет:', "%1 теряет:", player_gender), player_name);
                        }
                    },
                    bounty: {
                        you: s('Ты получаешь награду за голову в размере %1$ и', this.bounty),
                        enemy: function (player_gender, player_name) {
                            return s(sextext('%1 получает награду за голову в размере %2$ и', '%1 получает награду за голову в размере %2$ и', player_gender), player_name, this.bounty);
                        }
                    }
                },
                popup: {
                    perspective: {you: 'Твой результат', enemy: "Результат противника"},
                    image: {ko: {won: 'Противник лишился сознания.', lost: 'Лишаешься сознания.'}}
                }
            };
            var result_you = this.won ? 'won' : 'lost', result_enemy = this.won ? 'lost' : 'won', outcome_img = result_you, outcome_text, outcome_desc, outcome_el, displayRewards, show_enemy = false, that = this;
            if (this.ko) {
                outcome_img += '-ko';
                $('.result-img', ctx).attr('title', l10n.popup.image.ko[result_you]);
                outcome_text = l10n.title.ko[result_you];
            } else {
                outcome_text = l10n.title[result_you];
            }
            $('.result-img', ctx).addClass('result-img-' + outcome_img);
            $('.self', ctx).removeClass('cowboy-hit').addClass(result_you);
            $('.opp', ctx).removeClass('cowboy-hit').addClass(result_enemy);
            $('.result-short', ctx).text(outcome_text);
            outcome_el = $('.result-desc', ctx);
            displayRewards = function () {
                var side = '';
                if (show_enemy) {
                    side = that.won ? 'loser' : 'winner';
                    outcome_desc = that.bounty && !that.won ? l10n.description.bounty.enemy(that[side].gender, that[side].name) : l10n.description[result_enemy].enemy(that[side].gender, that[side].name);
                } else {
                    side = that.won ? 'winner' : 'loser';
                    outcome_desc = that.bounty && that.won ? l10n.description.bounty.you : l10n.description[result_you].you;
                }
                outcome_el.text(outcome_desc).removeAttr('style');
                $('.result-switch', ctx).removeClass('active').filter('.switch-' + (show_enemy ? 'enemy' : 'own')).addClass('active');
                $('.result-val-money', ctx).text(that[side].dollars || 0).toggleClass('deduct', that[side].dollars < 0);
                $('.result-val-exp', ctx).text(that[side].xp || 0).toggleClass('deduct', that[side].xp < 0);
                $('.result-val-duelexp', ctx).text(that[side].dxp || 0).toggleClass('deduct', that[side].dxp < 0);
                while (outcome_el.height() > 36) {
                    outcome_el.css('font-size', parseInt(outcome_el.css('font-size')) - 1);
                }
            };
            $('.switch-enemy', ctx).addMousePopup(l10n.popup.perspective.enemy).on('click', function () {
                show_enemy = true;
                displayRewards();
            });
            $('.switch-own', ctx).addMousePopup(l10n.popup.perspective.you).on('click', function () {
                show_enemy = false;
                displayRewards();
            });
            $('.fader, .result', ctx).fadeIn();
            displayRewards();
        }
    });
    west.define('west.duel.Animation', null, {
        init: function (options) {
            this.rounds = options.rounds;
            this.won = options.won;
            this.ko = options.ko;
            this.bounty = options.wanted;
            this.winner = options.winner;
            this.loser = options.loser;
            this.att = this.rounds[0].actor;
            this.def = this.att === 'self' ? 'opp' : 'self';
        }, _storageKey: 'west.duel.isMute', Clips: {
            drawClips: function (role, att) {
                var start = role === att ? 0 : 100;
                return [new DrawClip(start, role, 'pose1'), new DrawClip(30, role, 'pose2'), new DrawClip(30, role, 'pose3')];
            }, roundClips: function (rounds, att, def, mute) {
                var i, clips = [], rndtime = 1100, rnd, dt, passive;
                for (i = 0; i < rounds.length; i++) {
                    rnd = rounds[i];
                    if (i < 1) {
                        dt = 200;
                        passive = def;
                    } else {
                        if (i % 2 === 0) {
                            passive = def;
                            dt = rndtime;
                        } else {
                            passive = att;
                            dt = 100;
                        }
                    }
                    clips.push(new RoundClip(dt, rnd.actor, rnd.damage, rnd.aim, mute));
                    if (rnd.damage) {
                        clips.push(new HitClip(0, passive, 'cowboy-hit', null), new HitClip(150, passive, null, 'cowboy-hit'));
                    }
                }
                return clips;
            }, produce: function () {
                var clipsIdx, clips, i, start, clip, r = [];
                for (clipsIdx = 0; clipsIdx < arguments.length; clipsIdx++) {
                    clips = arguments[clipsIdx];
                    start = 0;
                    for (i = 0; i < clips.length; i++) {
                        clip = clips[i];
                        clip.dt = start + clip.dt;
                        start += clip.dt - start;
                        r.push(clip);
                    }
                }
                return r.sort(function (a, b) {
                    return a.dt - b.dt;
                });
            }
        }, DOM: {
            delegate: function (ev) {
                switch (ev.target.className) {
                    case'play':
                        this.play();
                        ev.target.className = 'pause';
                        break;
                    case'resume':
                        this.resume();
                        ev.target.className = 'pause';
                        break;
                    case'pause':
                        this.pause();
                        ev.target.className = 'resume';
                        break;
                    case'stop':
                        this.stop();
                        break;
                    case'showresult':
                        this.showResult();
                        break;
                    case'mute':
                        this.setMute(true);
                        ev.target.className = 'unmute';
                        break;
                    case'unmute':
                        this.setMute(false);
                        ev.target.className = 'mute';
                        break;
                }
            }, clear: function (context) {
                $('.pose', context).removeClass().addClass('pose');
                $('.rounds', context).empty();
                $('.total-dmg-val', context).text('');
                $('.fader, .result', context).hide();
                $('.won, .lost', context).removeClass('won lost');
                $('.cowboy-hit', context).removeClass('cowboy-hit');
                this.resetControls(context);
            }, resetControls: function (context) {
                $('.pause, .resume', context).removeClass().addClass('play');
            }, getHTML: function (mute) {
                var basic = '<div class="head"></div>' + '<div class="cowboy"></div>' + '<div class="pose"></div>' + '<div class="rounds"></div>' + '<div class="hit"></div>' + '<div class="total-dmg">' + '<div class="total-dmg-val"></div>' + '</div>';
                return '<div class="duel">' + '<div class="fader"></div>' + '<div class="controls">' + '<div class="play"></div>' + '<div class="stop"></div>' + '<div class="showresult"></div>' + '<div class="' + (mute ? 'un' : '') + 'mute"></div>' + '</div>' + '<div class="self">' + basic + '</div>' + '<div class="opp">' + basic + '</div>' + '<div class="result">' + '<div class="result-img"></div>' + '<div class="result-box">' + '<div class="result-switch switch-own"></div>' + '<div class="result-switch switch-enemy"></div>' + '<div class="result-short"></div>' + '<div class="result-desc"></div>' + '</div>' + '<div title="' + 'Доллары' + '" class="result-val result-val-money"></div>' + '<div title="' + 'Дуэльный разряд' + '" class="result-val result-val-duelexp"></div>' + '<div title="' + 'Опыт' + '" class="result-val result-val-exp"></div>' + '</div>' + '</div>';
            }
        }, getMovie: function (resume) {
            var mute = this.getStoredMute();
            if (resume && this._playing.length)return this._playing;
            return (this._mov || (this._mov = (this.Clips.produce(this.Clips.drawClips('self', this.att), this.Clips.drawClips('opp', this.att), this.Clips.roundClips(this.rounds, this.att, this.def, mute), [new ResultClip(this.won, this.ko, this.bounty, this.winner, this.loser)])))).slice();
        }, getStoredMute: function () {
            var r = false;
            if (window.localStorage) {
                r = window.localStorage.getItem(this._storageKey) === 'true';
            }
            return r;
        }, setStoredMute: function (val) {
            if (window.localStorage) {
                window.localStorage.setItem(this._storageKey, val);
            }
        }, setMute: function (val) {
            this.setStoredMute(val);
            var mov = this.getMovie(), i;
            for (i = 0, len = mov.length; i < len; i++) {
                mov[i].setMute(val)
            }
        }, reset: function () {
            this.fastForward = false;
            this.DOM.clear(this.context);
            return this;
        }, pause: function () {
            window.clearInterval(this.interval);
            return this;
        }, stop: function () {
            this.pause().reset();
        }, resume: function () {
            this.play(true);
            return this;
        }, play: function (resume) {
            if (!resume)this.pause().reset();
            EventHandler.signal('duel_report_started');
            var mov = this.getMovie(resume), interval, movStart = new Date().getTime(), me = this
            offset = resume ? mov[0].dt : 0;
            this._playing = mov;
            this.interval = interval = window.setInterval(function () {
                var clip, now = new Date().getTime(), i;
                for (i = 0; i < mov.length; i++) {
                    clip = mov[i];
                    if (now >= movStart + clip.dt - offset || clip.instantPlay(i, mov.length) || me.fastForward) {
                        mov.splice(i, 1)[0].play(me.context, me.fastForward);
                        i--;
                    } else {
                        break;
                    }
                }
                if (mov.length === 0) {
                    window.clearInterval(interval);
                    me.DOM.resetControls(me.context);
                    EventHandler.signal('duel_report_finished');
                }
            }, 16);
            return this;
        }, showResult: function () {
            this.play();
            this.fastForward = true;
            this.DOM.resetControls(this.context);
        }, appendTo: function (el) {
            this.context = $(this.DOM.getHTML(this.getStoredMute())).click(this.DOM.delegate.bind(this)).appendTo(el);
            return this;
        }
    });
})(window);

west.define('west.ui.FriendsBarUi', null, {
    friendsBar: null,
    dom: null,
    closingTimeoutId: null,
    closingTimeout: 2000,
    refreshIntervalId: null,
    refreshInterval: 300000,
    page: null,
    resultsPerPage_: {friends: 5, town: 6, alliance: 6, ses: 6},
    maxPlayerBoxes_: 6,
    events_: [{name: 'client_status_changed', callback: 'onClientStatusChanged_'}, {
        name: 'friend_added',
        callback: 'onFriendshipAccepted_'
    }, {name: 'friend_removed', callback: 'onFriendshipCancelled_'}, {
        name: 'char_home_town_changed',
        callback: 'onHomeTownChanged_'
    }],
    setType: function (type, searchTerm) {
        if (null == this.friendsBar) {
            this.friendsBar = new west.storage.FriendsBar(type, this.onPageSwitch_.bind(this), this.show.bind(this), this.showEventsNotifications.bind(this), searchTerm);
        } else {
            this.friendsBar.setSearchType(type, searchTerm);
        }
        this.friendsBar.setResultsPerPage(this.resultsPerPage_[type]);
    },
    show: function (players) {
        window.clearTimeout(this.closingTimeoutId);
        players = players || this.friendsBar.getCurrentPlayers();
        if (null === this.dom) {
            this.dom = $('#user-interface .friendsbar').html(this.prepareDom_(players));
            this.addDomEvents_();
            this.changeEvents_('listen');
            this.refreshIntervalId = window.setInterval(this.refresh_.bind(this), this.refreshInterval);
        } else {
            this.dom.html($(this.prepareDom_(players)).hide().fadeIn());
        }
        this.updateNavigation_();
        this.friendsBar.searchEventActivations();
        $('#user-interface').addClass('friendsbar-open');
    },
    hide: function () {
        var that = this;
        window.clearInterval(this.refreshIntervalId);
        $('#user-interface').removeClass('friendsbar-open');
        this.closingTimeoutId = window.setTimeout(function () {
            that.removeDomEvents_();
            that.dom.empty();
            that.dom = null;
            that.changeEvents_('unlisten');
        }, this.closingTimeout);
    },
    isVisible: function (playerId) {
        var players = this.friendsBar.getCurrentPlayers();
        for (var i = 0, len = players.length; i < len; i++) {
            if (players[i].player_id == playerId)return true;
        }
        return false;
    },
    prepareDom_: function (players) {
        var modes, actions, navigation, playerswrapper, townModeTitle, allyModeTitle, hasTown = !!Character.homeTown.town_id, hasAlly = hasTown && !!Character.homeTown.alliance_id, type = this.friendsBar.getType(), isSearch = type == 'search';
        var getIcon = function (cat) {
            return '<div class="tw2gui-iconset' + (type == cat ? ' active' : '') + '" />';
        };
        townModeTitle = hasTown ? 'Показать жителей города' : 'Ты не в городе'
        if (!hasTown) {
            allyModeTitle = 'Ты не в городе';
        } else if (!hasAlly) {
            allyModeTitle = 'Твой город не состоит в альянсе'
        } else {
            allyModeTitle = 'Показать участников альянса';
        }
        modes = '<div class="fbar-modes">' + '<div class="fbar-mode mode-friends enabled" data-mode="friends" title="' + 'Показать друзей'.escapeHTML() + '">' + getIcon('friends') + '</div>' + '<div class="fbar-mode mode-town' + (hasTown ? ' enabled' : '') + '" data-mode="town" title="' + townModeTitle.escapeHTML() + '">' + getIcon('town') + '</div>' + '<div class="fbar-mode mode-alliance' + (hasAlly ? ' enabled' : '') + '" data-mode="alliance" title="' + allyModeTitle.escapeHTML() + '">' + getIcon('alliance') + '</div>' + '</div>';
        actions = '<div class="fbar-actions">' + '<div class="fbar-action action-add" data-action="add" title="' + 'Добавить друга'.escapeHTML() + '"></div>' + '<div class="fbar-action action-invite" data-action="invite" title="' + 'Пригласить друга'.escapeHTML() + '"></div>' +
            (this.friendsBar.hasActiveFilter('name') ? '<div class="fbar-action action-cancel" data-action="reset" title="' + 'Сбросить поиск'.escapeHTML() + '"></div>' : '<div class="fbar-action action-search" data-action="search" title="' + 'Искать по'.escapeHTML() + '"></div>') + '</div>';
        navigation = '<div class="fbar-nav">' + '<div class="fbar-nav-item nav-far-left" data-nav="far-left"></div>' + '<div class="fbar-nav-item nav-left" data-nav="left"></div>' + '<div class="fbar-nav-item nav-right" data-nav="right"></div>' + '<div class="fbar-nav-item nav-far-right" data-nav="far-right"></div>' + '</div>';
        playerswrapper = '<div class="fbar-players-wrapper">' + this.preparePlayersDom_(players) + '</div>';
        if (this.resultsPerPage_[type] < this.maxPlayerBoxes_) {
            playerswrapper += this.prepareInvitePlayerDom_();
        }
        return modes + actions + navigation + playerswrapper;
    },
    preparePlayersDom_: function (players) {
        var playerbar = '<div class="fbar-players">', i, numPlayers, type = this.friendsBar.getType();
        for (i = 0, numPlayers = players.length; i < numPlayers; i++) {
            playerbar += this.preparePlayerDom_(players[i]);
        }
        for (i = numPlayers; i < this.resultsPerPage_[type]; i++) {
            playerbar += this.prepareInvitePlayerDom_();
        }
        return playerbar + '</div>';
    },
    preparePlayerDom_: function (player) {
        var client = Chat.Resource.Manager.getClient('client_' + player.player_id), stat = Chat.Formatter.getStatus(client ? client.statusId : -1), ownPlayerCls = player.player_id == Character.playerId ? 'fbar-player-self' : '';
        var $player = $('<div class="fbar-player inlineblock ' + ownPlayerCls + '" data-player-id="' + player.player_id + '">' + '<div class="fbar-player-bg"></div>' + '<div class="fbar-player-state"><img title="' + stat.label + '" src="https://westrus.innogamescdn.com/images/chat/status_' + stat.icon + '.png"></div>' + '<div class="fbar-player-name shorten">' + player.name + '</div>' + '<div class="fbar-player-avatar-wrapper"><div class="fbar-player-avatar-inner"></div></div>' + '<div class="fbar-player-class class-' + player['class'] + '"></div>' + '<div class="fbar-player-profession profession-' + (player.profession_id || 0) + '"></div>' + '<div class="fbar-player-level">' + player.level + '</div>' + '</div>');
        if (player.avatar.background) {
            tw2widget.avatarPicture($('.fbar-player-avatar-inner', $player), 'small', player.avatar);
        } else if (player.subclass) {
            $('.fbar-player-avatar-inner', $player).append("<img class='old-avatar' src='https://westrus.innogamescdn.com/images/avatars/" + player.subclass + "_small.png' alt='' />");
        }
        return jq2Html($player.remove());
    },
    showEventsNotifications: function (notifications_to_show, events_running) {
        var i;
        this.removeEventsNotifications();
        this.removeEventsFilters();
        if (!$.isEmptyObject(events_running)) {
            this.showEventsFilters(events_running);
        }
        if ($.isEmptyObject(notifications_to_show)) {
            return;
        }
        if (!~['friends', 'ses'].indexOf(this.friendsBar.getType())) {
            return;
        }
        var visible_players = $('.fbar-player:not(.fbar-player-self, .fbar-player-invite)', this.dom), notifications, player_id;
        $.each(visible_players, function (i, $player) {
            $player = $($player);
            var event_id, label;
            notifications = $('.fbar-player-event-notif', $player), player_id = $player.data('player-id');
            if (notifications_to_show[player_id]) {
                i = notifications_to_show[player_id].length;
                while (i--) {
                    event_id = notifications_to_show[player_id][i];
                    label = Game.sesData[event_id].friendsbar.label;
                    $player.append($('<div class="fbar-player-event-notif event_active ses_' + event_id + '"></div>').data('event-id', event_id).addMousePopup(label));
                }
            }
        });
    },
    removeEventsNotifications: function () {
        $('.fbar-player .fbar-player-event-notif', this.dom).remove();
    },
    showEventsFilters: function (events) {
        var $root = $('.fbar-modes', this.dom).addClass('with_ses'), type = this.friendsBar.getType(), term = this.friendsBar.getTerm();
        west.common.forEach(events, function (cooldown, event_id) {
            $('<div class="fbar-mode mode-ses ses_event_icon ' + event_id.toLowerCase() + ' enabled"></div>').data({
                'mode': 'ses',
                'event-id': event_id
            }).addMousePopup(s('Показать друзей, которым можно послать %1', west.events.Manager.getEvent(event_id).getCurrency().name)).appendTo($root);
        });
        if ('ses' === type) {
            $('.' + term.toLowerCase(), $root).addClass('active');
        }
    },
    removeEventsFilters: function () {
        $('.mode-ses', this.dom).remove();
        $('.fbar-modes', this.dom).removeClass('with_ses');
    },
    prepareInvitePlayerDom_: function () {
        return '<div class="fbar-player fbar-player-invite inlineblock">' + '<div class="fbar-player-bg"></div>' + '<div class="fbar-player-name shorten">' + 'Пригласить' + '</div>' + '<div class="fbar-player-avatar-wrapper"></div>' + '</div>';
    },
    addDomEvents_: function () {
        this.dom.on('click.friendsbar', '.fbar-mode', this.onModeClick_.bind(this)).on('click.friendsbar', '.fbar-nav-item', this.onNavigationClick_.bind(this)).on('click.friendsbar', '.fbar-player', this.onPlayerClick_.bind(this)).on('click.friendsbar', '.fbar-action', this.onActionClick_.bind(this)).on('click.friendsbar', '.fbar-player-event-notif', this.onEventClick_.bind(this)).on('mousewheel.friendsbar', this.onMouseWheel_.bind(this));
    },
    removeDomEvents_: function () {
        this.dom.off('.friendsbar');
    },
    changeEvents_: function (action) {
        var i, event;
        for (i = 0; i < this.events_.length; i++) {
            event = this.events_[i];
            EventHandler[action](event.name, this[event.callback], this);
        }
    },
    updateNavigation_: function () {
        if (this.friendsBar.hasPrev()) {
            $('.nav-far-left, .nav-left', this.dom).show();
        } else {
            $('.nav-far-left, .nav-left', this.dom).hide();
        }
        if (this.friendsBar.hasNext()) {
            $('.nav-far-right, .nav-right', this.dom).show();
        } else {
            $('.nav-far-right, .nav-right', this.dom).hide();
        }
    },
    refresh_: function () {
        this.friendsBar.refresh();
    },
    onPageSwitch_: function (players, page, previousPage) {
        var duration = 400, oldPlayerEl = $('.fbar-players', this.dom), newPlayerEl = $(this.preparePlayersDom_(players)).appendTo($('.fbar-players-wrapper', this.dom)), newStart, newEnd = 0, oldEnd;
        if (page > previousPage) {
            newStart = newPlayerEl.width();
            oldEnd = -oldPlayerEl.width();
        } else {
            newStart = -newPlayerEl.width();
            oldEnd = oldPlayerEl.width();
        }
        newPlayerEl.css('left', newStart).animate({left: newEnd}, duration);
        oldPlayerEl.animate({left: oldEnd}, duration, 'linear', function () {
            $(this).remove();
        });
        this.updateNavigation_();
        this.friendsBar.searchEventActivations();
    },
    onModeClick_: function (ev) {
        var target = $(ev.currentTarget), mode = target.data('mode'), term;
        if (target.hasClass('enabled')) {
            if ('ses' === mode) {
                term = target.data('event-id');
            }
            this.setType(mode, term);
        }
    },
    onNavigationClick_: function (ev) {
        var page;
        switch ($(ev.target).data('nav')) {
            case'far-left':
                page = 1;
                break;
            case'left':
                page = this.friendsBar.getCurrentPage() - 1;
                break;
            case'right':
                page = this.friendsBar.getCurrentPage() + 1;
                break;
            case'far-right':
                page = this.friendsBar.getMaxPages();
                break;
            default:
                page = 1;
        }
        this.friendsBar.getPage(page);
    },
    onPlayerClick_: function (ev) {
        var playerId = $(ev.currentTarget).data('player-id'), player, clientId, isFriend, chatClient, isOffline, selectbox;
        if (playerId == Character.playerId)return;
        selectbox = new west.gui.Selectbox();
        if (playerId) {
            player = this.friendsBar.getPlayer(playerId), clientId = 'client_' + playerId, isFriend = Chat.Friendslist.isFriend(clientId), chatClient = Chat.Resource.Manager.getClient(clientId), isOffline = !chatClient || chatClient.statusId === Chat.Resource.Client.STATUS_OFFLINE;
            if (!player)return;
            selectbox.setHeader(player.name).addListener(this.onPlayerMenuClick_.bind(this, player)).addItem(0, "Посмотреть профиль");
            if (!isOffline) {
                selectbox.addItem(1, 'Шепнуть');
            }
            selectbox.addItem(2, 'Написать письмо').addItem(3, 'Показать на карте');
            if (Game.mpi.enabled && (Game.mpi.groups || MultiplayerWindow.isCustomGameHost())) {
                selectbox.addItem(6, 'Пригласить для сражений');
            }
            if (isFriend) {
                selectbox.addItem(4, 'Расторгнуть дружбу');
                this.addEventItems_(playerId, selectbox);
            } else {
                selectbox.addItem(5, 'Пригласить друга')
            }
        } else {
            selectbox.setHeader('Новый друг').addListener(this.onPlayerInviteMenuClick_).addItem(0, 'Добавить друга').addItem(1, 'Пригласить друга');
        }
        selectbox.show(ev);
    },
    addEventItems_: function (friendId, selectbox) {
        var eventName, ev, actionLabel, lastActivation, diff, img;
        for (eventName in Game.sesData) {
            ev = Game.sesData[eventName];
            if (!ev.friendsbar)continue;
            if (buildTimestamp(ev.meta.end, true) <= new ServerDate().getTime())continue;
            actionLabel = ev.friendsbar.label;
            lastActivation = this.friendsBar.getEventActivation(eventName, friendId);
            diff = lastActivation + parseInt(ev.friendsbar.cooldown, 10) - new ServerDate().getTime() / 1000;
            if (diff > 0) {
                actionLabel += ' (' + diff.formatDurationBuffWay() + ')';
            }
            img = '<img class="fbar-event-img" src="https://westrus.innogamescdn.com/images/interface/friendsbar/events/' + eventName + '.png" />';
            selectbox.addItem(eventName, img + actionLabel);
        }
    },
    onPlayerMenuClick_: function (player, id) {
        var client, room;
        switch (id) {
            case 0:
                PlayerProfileWindow.open(player.player_id);
                break;
            case 1:
                if (Chat.IgnoreButler.contains(player.name)) {
                    new UserMessage("Ты игнорируешь этого игрока").show();
                } else {
                    client = Chat.Resource.Manager.getClient('client_' + player.player_id);
                    room = Chat.Resource.Manager.acquireRoom(client);
                    if (room)room.openClick();
                }
                break;
            case 2:
                MessagesWindow.open('telegram', {insert_to: player.name});
                break;
            case 3:
                Map.center(player.x, player.y);
                break;
            case 4:
                FriendslistWindow.deleteFromFriendList(player.player_id);
                break;
            case 5:
                FriendslistWindow.inviteIngameFriend(player.name);
                break;
            case 6:
                EventHandler.signal('mpi_invite', [player.name]);
                break;
            default:
                if (Game.sesData[id]) {
                    this.friendsBar.activateEvent(id, player.player_id);
                }
                break;
        }
    },
    onPlayerInviteMenuClick_: function (id) {
        switch (id) {
            case 0:
                FriendslistWindow.showAddDialog();
                break;
            case 1:
                FriendslistWindow.open();
                break;
        }
    },
    onActionClick_: function (e) {
        var action = $(e.target).data('action');
        switch (action) {
            case'add':
                FriendslistWindow.showAddDialog();
                break;
            case'invite':
                FriendslistWindow.open();
                break;
            case'search':
                var search;
                if ((search = $('.fbar-search', this.dom)).length) {
                    search.animate({top: 73}, function () {
                        search.remove();
                    });
                } else {
                    search = new west.gui.Textfield().addClass('fbar-search').setPlaceholder('Искать [Enter]').addListener(function (val) {
                        this.friendsBar.setFilter('name', val || null);
                    }, this).getMainDiv();
                    this.dom.append(search);
                    search.animate({top: 43}, function () {
                        $('input', search).focus();
                    });
                }
                break;
            case'reset':
                this.friendsBar.setFilter('name', null);
                break;
        }
    },
    onEventClick_: function (ev) {
        var player_id = $(ev.currentTarget).closest('.fbar-player').data('player-id'), event_id = $(ev.currentTarget).data('event-id');
        ev.stopImmediatePropagation();
        if (Game.sesData[event_id]) {
            this.friendsBar.activateEvent(event_id, player_id);
        }
    },
    onMouseWheel_: function (e, delta) {
        if (delta < 0) {
            this.friendsBar.next();
        } else {
            this.friendsBar.prev();
        }
    },
    onClientStatusChanged_: function (chatClient) {
        var currentPageChanged = this.friendsBar.refreshSort();
        if (currentPageChanged) {
            this.show(this.friendsBar.getCurrentPlayers());
        } else if (this.isVisible(chatClient.playerId)) {
            $('.fbar-player[data-player-id="' + chatClient.playerId + '"]').replaceWith(this.preparePlayerDom_(this.friendsBar.getPlayer(chatClient.playerId)));
        }
    },
    onFriendshipCancelled_: function (playerId) {
        if (this.friendsBar.getType() === 'friends' && this.friendsBar.hasPlayer(playerId)) {
            this.friendsBar.setSearchType('friends');
        }
    },
    onFriendshipAccepted_: function (chatClient) {
        if (this.friendsBar.getType() === 'friends' && !this.friendsBar.hasPlayer(chatClient.playerId)) {
            this.friendsBar.setSearchType('friends');
        }
    },
    onHomeTownChanged_: function () {
        this.show();
    }
});

$(function ($) {
    'use strict';
    var local_class_name = 'west.ui.topBar.customUnitCounter', model, view, controller;
    model = {
        class_parent: 'west.game.model',
        class_object: {
            _class_path: 'west.ui.topBar.customUnitCounter',
            data: {unit_name: '', icon_name: '', event_name: '', value: 0},
            l10n: {mouseover: 'This is your custom unit counter', show_log: 'Кликни, чтобы посмотреть журнал'},
            getUnitName: function () {
                return this.getData('unit_name');
            },
            setUnitName: function (unit_name) {
                this.setData('unit_name', unit_name);
                return this;
            },
            getEventName: function () {
                return this.getData('event_name');
            },
            setEventName: function (event_name) {
                this.setData('event_name', event_name);
                return this;
            },
            getValue: function () {
                return this.getData('value');
            },
            setValue: function (new_value) {
                this.setData('value', new_value);
                return this;
            },
            getIconName: function () {
                return this.getData('icon_name') || this.getData('unit_name');
            },
            setIconName: function (icon_name) {
                this.setData('icon_name', icon_name);
                return this;
            },
            getMouseOver: function () {
                return this.getL10n('mouseover');
            },
            setMouseOver: function (new_mouseover) {
                this.setL10n({'mouseover': new_mouseover});
                return this;
            },
            setHelpMouseOver: function (new_mouseover) {
                this.setL10n({'help_mouseover': new_mouseover});
                return this;
            },
            getHelpMouseOver: function () {
                return this.getL10n('help_mouseover');
            },
            setHelpClickHandler: function (new_click_handler) {
                this.setData('help_click_handler', new_click_handler);
                return this;
            },
            getHelpClickHandler: function () {
                return this.getData('help_click_handler');
            },
            hasHelpClickHandler: function () {
                return 'function' === typeof this.getHelpClickHandler();
            },
            setLogClickHandler: function (new_click_handler) {
                this.setData('log_click_handler', new_click_handler);
                return this;
            },
            getLogClickHandler: function () {
                return this.getData('log_click_handler');
            },
            hasLogClickHandler: function () {
                return 'function' === typeof this.getLogClickHandler();
            }
        }
    };
    view = {
        class_parent: 'west.game.view', class_object: {
            _class_path: 'west.ui.topBar.customUnitCounter', addCounter: function () {
                var controller = this.getController(), model = this.getModel(), mouseover = model.getMouseOver(), unit_name = model.getUnitName(), icon_name = model.getIconName(), value = model.getValue(), has_help = model.hasHelpClickHandler(), help_mouseover = model.getHelpMouseOver(), counter = $('<div class="custom_unit_counter ' + unit_name + '"></div>').append($('<div class="highlighter ' + icon_name + '"></div>'), $('<div class="icon ' + icon_name + '"></div>'), $('<span class="value">' + format_number(round_number(value, 6)) + '</span>'), (has_help ? $('<span class="icon help"></span>').addMousePopup(help_mouseover) : '')).addMousePopup(mouseover);
                if (value > 999999) {
                    $('.value', counter).addMousePopup(format_number(value));
                }
                controller.setRoot(counter);
                $('#user-interface').append(counter);
                return this;
            }, removeCounter: function () {
                this.getRoot().remove();
                return this;
            }, setValue: function (new_value) {
                var root = this.getRoot(), value = $('.value', root);
                value.text(format_number(round_number(new_value, 6)));
                if (new_value > 999999) {
                    value.addMousePopup(format_number(new_value));
                }
                return this;
            }, highlightIcon: function () {
                var root = this.getRoot();
                $(root).addClass('highlight').delay(3996).queue(function () {
                    $(this).removeClass('highlight').dequeue();
                });
                return this;
            }, animateCharacter: function () {
                var icon_name = this.getModel().getIconName(), counter_offset = this.getRoot().offset(), character_offset = Walker.animations.character.element.offset(), target_offset;
                target_offset = {
                    top: (counter_offset.top + 20 - character_offset.top),
                    left: (counter_offset.left + 40 - character_offset.left)
                };
                if (Math.abs(target_offset.top) > 1100 || Math.abs(target_offset.left) > 1600) {
                    target_offset = false;
                }
                WestUi.animateCharatcerOnMap("character_bonus " + icon_name, 400, target_offset);
                return this;
            }
        }
    };
    controller = {
        class_parent: 'west.game.controller', class_object: {
            _class_id: 'customUnitCounter',
            _namespace: 'west.ui.topBar.customUnitCounter',
            _class_path: 'west.ui.topBar.customUnitCounter',
            init: function (options) {
                this.callParent();
                this.defineCounter(options);
                return this;
            },
            defineCounter: function (options) {
                if (!options) {
                    return this;
                }
                var model = this.getModel();
                model.setEventName(options.event_name).setUnitName(options.unit_name).setIconName(options.icon_name).setMouseOver(options.mouseover).setValue(options.value).setHelpMouseOver(options.help_mouseover).setHelpClickHandler(options.help_click_handler).setLogClickHandler(options.log_click_handler);
                return this;
            },
            addCounter: function () {
                if (window !== this.getRoot()) {
                    return this;
                }
                var view = this.getView();
                view.addCounter();
                this.addEventListeners();
                return this;
            },
            removeCounter: function () {
                var view = this.getView();
                this.removeEventListeners();
                view.removeCounter();
                this.clearRoot();
                return this;
            },
            updateValue: function (new_value) {
                var model = this.getModel(), view = this.getView(), current_value = model.getValue();
                if ('string' !== typeof new_value) {
                    new_value = parseInt(new_value);
                }
                if ('number' !== typeof new_value || current_value === new_value) {
                    return this;
                }
                model.setValue(new_value);
                view.setValue(new_value).highlightIcon();
                if (new_value > current_value) {
                    view.animateCharacter();
                }
                return this;
            },
            addEventListeners: function () {
                var model = this.getModel(), event_name = model.getEventName(), has_help = model.hasHelpClickHandler(), has_log = model.hasLogClickHandler(), $root = this.getRoot();
                this.removeEventListeners();
                if (has_help) {
                    $root.on('click.counter', '.icon.help', model.getHelpClickHandler());
                }
                if (has_log) {
                    $root.on('click.counter', '.value', model.getLogClickHandler()).addClass('with_log');
                    $('.value', $root).addMousePopup({
                        'teaser': model.getMouseOver(),
                        'content': model.getL10n('show_log')
                    });
                }
                if (event_name) {
                    EventHandler.listen(event_name, this.updateValue, this);
                }
                return this;
            },
            removeEventListeners: function () {
                var event_name = this.getModel().getEventName(), root = this.getRoot();
                $(root).off('click.counter');
                if (event_name) {
                    EventHandler.unlisten(event_name, this.updateValue, this);
                }
                return this;
            }
        }
    };
    west.define(local_class_name + '.model', model.class_parent, model.class_object);
    west.define(local_class_name + '.view', view.class_parent, view.class_object);
    west.define(local_class_name + '.controller', controller.class_parent, controller.class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'west.notification.fortBattle', class_parent = null, class_object = {
        _timer: null, _DOM: null, _root: '#user-interface', _l10n: {
            mouseover: {
                ui_mouseover: function (fort_name) {
                    return s('Битва за форт %1', fort_name);
                }
            },
            tooltip: {
                'hour_1': {
                    message: 'Скоро начнётся сражение. Чтобы принять участие, нужно быть в форте. В противном случае тебя признают дезертиром.',
                    button: 'Идти в форт?'
                }, 'ongoing': {message: 'Начинается битва за форт. Хватай оружие!', button: 'В бой'}
            }
        }, _displayed_remiders: {}, getL10n: function () {
            return this._l10n;
        }, init: function () {
            this._DOM = $('<div class="game_notification_area"></div>').appendTo(this._root);
            this.addEventListeners();
        }, getRoot: function () {
            return this._DOM;
        }, addEventListeners: function () {
            var root = this.getRoot();
            EventHandler.listen('fort_battle_joined', this.handleFortBattleJoin, this);
            EventHandler.listen('fort_battle_end', this.handleFortBattleEnd, this);
            root.on('click.fort_battle_notification', '.fort_battle_notification', this.handleIconClick.bind(this)).on('click.fort_battle_notification', '.game_notification_tooltip', this.handleNotificationClick.bind(this));
            return this;
        }, handleFortBattleJoin: function (room) {
            var time_to_battle = Math.floor((room.battleData.start + Game.clientTimedrift) / 1000);
            this.addNotification(room.fortId, time_to_battle, room.title);
        }, handleFortBattleEnd: function (fortId) {
            this.removeNotification(fortId);
        }, handleIconClick: function (e) {
            var fort_id = parseInt($(e.currentTarget).data('fort_id'), 10);
            this.removeTooltip(fort_id);
            FortBattleWindow.open(fort_id);
        }, handleNotificationClick: function (e) {
            e.stopPropagation();
        }, setTimer: function () {
            if (!this._timer) {
                this._timer = new Ticker(this.handleTimer, this);
                this._timer.setPeriod(1000);
            }
            if (!this._timer.active) {
                this._timer.start();
            }
            return this;
        }, addTimer: function (fort_id, timestamp) {
            this.setTimer();
            this._timer.add2Queue(fort_id, timestamp);
            return this;
        }, getDisplayedReminders: function (fort_id) {
            var reminders = this._displayed_remiders[fort_id];
            if (!reminders) {
                reminders = this._displayed_remiders[fort_id] = {};
            }
            return reminders;
        }, setDisplayedReminders: function (fort_id, time) {
            var reminders = this.getDisplayedReminders(fort_id);
            reminders[time] = true;
            return this;
        }, hasDisplayedReminder: function (fort_id, time) {
            return !!this.getDisplayedReminders(fort_id)[time];
        }, handleTimer: function (fort_id, diff) {
            var l10n = this.getL10n().tooltip;
            if (diff <= 0) {
                this.hideTimer(fort_id).removeClassFromNotification(fort_id, 'hurry').addClassToNotification(fort_id, 'active');
                if (!FortBattleWindow.isWindowOpen(fort_id)) {
                    this.addTooltip(fort_id, [l10n.ongoing.message, '<br/><br />', new west.gui.Button(l10n.ongoing.button, this.openFort.bind(this, fort_id)).getMainDiv()]);
                }
            } else {
                if (diff < 3600) {
                    this.addClassToNotification(fort_id, 'with_icon');
                    if (diff > 3540 && !this.hasDisplayedReminder(fort_id, 'hour_1')) {
                        this.addTooltip(fort_id, [l10n.hour_1.message, '<br /><br />', new west.gui.Button(l10n.hour_1.button, this.goToFort.bind(this, fort_id)).getMainDiv()]);
                        this.setDisplayedReminders(fort_id, 'hour_1');
                    } else if (diff <= 10) {
                        this.addClassToNotification(fort_id, 'with_icon hurry');
                    }
                }
                this.showTimer(fort_id, diff.getTime2EndShort());
            }
        }, openFort: function (fort_id) {
            this.removeTooltip(fort_id);
            FortBattleWindow.open(fort_id);
            return this;
        }, goToFort: function (fort_id) {
            this.removeTooltip(fort_id);
            Guidepost.start_walk(fort_id, 'fort');
            return this;
        }, showTimer: function (fort_id, time) {
            var root = this.getRoot();
            $('.fort_battle_notification.battle_' + fort_id + ' > .timer', root).text(time);
            return this;
        }, hideTimer: function (fort_id) {
            var root = this.getRoot();
            $('.fort_battle_notification.battle_' + fort_id + ' > .timer', root).text('');
            return this;
        }, createNotification: function (fort_id) {
            return $('<div class="game_notification fort_battle_notification battle_' + fort_id + '"><div class="icon"></div><div class="overlayer"></div><div class="timer"></div></div>').data({'fort_id': fort_id});
        }, addNotification: function (fort_id, timestamp, fort_name) {
            var root = this.getRoot(), l10n = this.getL10n().mouseover, notification = this.getNotification(fort_id);
            this.addTimer(fort_id, timestamp);
            if (notification.length) {
                notification.removeClass('active');
                return this;
            }
            $(root).append(this.createNotification(fort_id).addMousePopup(l10n.ui_mouseover(fort_name)));
            return this;
        }, getNotification: function (fort_id) {
            var root = this.getRoot();
            return $('.fort_battle_notification.battle_' + fort_id, root);
        }, removeNotification: function (fort_id) {
            this.getNotification(fort_id).remove();
            return this;
        }, addClassToNotification: function (fort_id, class_name) {
            var root = this.getRoot();
            $('.fort_battle_notification.battle_' + fort_id, root).addClass(class_name);
            return this;
        }, removeClassFromNotification: function (fort_id, class_name) {
            var root = this.getRoot();
            $('.fort_battle_notification.battle_' + fort_id, root).removeClass(class_name);
            return this;
        }, addTooltip: function (fort_id, message) {
            var root = this.getRoot(), notification = $('.fort_battle_notification.battle_' + fort_id, root);
            notification.append(new tw2widget.gametip(message, 'game_notification_tooltip').getMainDiv());
            return this;
        }, removeTooltip: function (fort_id) {
            var root = this.getRoot();
            $('.fort_battle_notification.battle_' + fort_id + ' > .game_notification_tooltip', root).remove();
            return this;
        }
    };
    west.define(class_name, class_parent, class_object);
    west.notification.fortBattle = new west.notification.fortBattle;
});

$(function ($) {
    'use strict';
    var local_class_name = 'west.events.Manager', model, controller;
    model = {
        class_parent: 'west.game.model', class_object: {
            _class_path: 'west.events.Manager',
            data: {events: {}, running: [], timers: {}},
            l10n: {mouseover: 'This is your custom unit counter'},
            addEvent: function (ses_event_id, ses_event_model) {
                var event_object = {};
                event_object[ses_event_id] = ses_event_model;
                this.setData('events', event_object);
                return this;
            },
            getEvent: function (event_id) {
                return this.getData('events')[event_id];
            },
            getRunning: function () {
                return this.getData('running');
            },
            addRunning: function (event_id) {
                var running = this.getRunning();
                if (!!~running.indexOf(event_id)) {
                    return this;
                }
                running.push(event_id);
                return this;
            },
            removeRunning: function (event_id) {
                var running = this.getRunning(), e_i = running.indexOf(event_id);
                if (!!~e_i) {
                    running.splice(e_i, 1);
                }
                return this;
            },
            getTimers: function () {
                return this.getData('timers');
            },
            addTimer: function (event_id, timer_id, timer) {
                var timers = this.getTimers(), event_timers = timers[event_id];
                if (!event_timers) {
                    event_timers = timers[event_id] = {};
                }
                event_timers[timer_id] = timer;
                return this;
            },
            getTimer: function (event_id, timer_id) {
                var event_timers = this.getTimers()[event_id];
                if (timer_id && event_timers) {
                    return event_timers[timer_id];
                }
                return event_timers;
            },
            clearTimer: function (event_id) {
                this.getTimers()[event_id] = {};
                return this;
            }
        }
    };
    controller = {
        class_parent: 'west.game.controller', class_object: {
            _class_id: 'Events Manager',
            _namespace: 'west.events.Manager',
            _class_path: 'west.events.Manager',
            init: function () {
                this.callParent();
                this.initEvents();
                this.active = true;
                return this;
            },
            initEvents: function () {
                var that = this, events_data = {
                    ses: $.isPlainObject(Game.sesData) ? Game.sesData : false,
                    ce: $.isPlainObject(Game.ceData) ? Game.ceData : false
                }, model = this.getModel();
                if (!events_data.ses && !events_data.ce) {
                    return this;
                }
                $.each(events_data, function (event_type, events) {
                    $.each(events, function (event_id, event) {
                        that.addEvent(event_type, event_id, event);
                        var ses_event = that.getEvent(event_id), valid = ses_event.getState();
                        if (valid) {
                            if ('running' === valid) {
                                that.startEvent(event_id);
                                that.scheduleEvent(event_id);
                            } else if ('schedule' === valid) {
                                that.scheduleEvent(event_id);
                            }
                        }
                    });
                });
                return this;
            },
            addEvent: function (event_type, event_id, event_data) {
                var path = ('ses' === event_type ? 'ses' : 'community'), model = this.getModel(), Event = this._getClass('controller', 'west.game.event.' + path + '.' + event_id, 'west.game.event');
                Event = new Event({'data': $.extend(event_data, {'event_id': event_id, 'event_type': event_type})});
                model.addEvent(event_id, Event);
                return this;
            },
            startEvent: function (event_id) {
                var model = this.getModel(), event = model.getEvent(event_id);
                if (!event) {
                    return this;
                }
                event.start();
                model.addRunning(event_id);
                return this;
            },
            stopEvent: function (event_id) {
                var model = this.getModel(), event = model.getEvent(event_id), timers = model.getTimer(event_id);
                if (!event) {
                    return this;
                }
                event.stop();
                model.removeRunning(event_id);
                if (timers) {
                    $.each(timers, function (timer_id, timer) {
                        clearTimeout(timer);
                    });
                    model.clearTimer(event_id);
                }
                return this;
            },
            scheduleEvent: function (event_id) {
                var that = this, model = this.getModel(), event = model.getEvent(event_id), start, end, now, diff;
                if (!event) {
                    return this;
                }
                start = event.getModel().getStartDate();
                end = event.getModel().getEndDate();
                now = event.getModel().getNow();
                if (start) {
                    diff = start - now;
                    if (diff < 2147483647 && diff > 0) {
                        model.addTimer(event_id, 'start', setTimeout(function () {
                            that.startEvent(event_id);
                        }, diff));
                    }
                }
                if (end) {
                    diff = end - now;
                    if (diff < 2147483647 && diff > 0) {
                        model.addTimer(event_id, 'end', setTimeout(function () {
                            that.stopEvent(event_id);
                        }, diff));
                    }
                }
                return this;
            },
            getRunningEvents: function () {
                var model = this.getModel(), running = [];
                $.each(model.getRunning(), function (i, event_id) {
                    running.push(model.getEvent(event_id));
                });
                return running;
            },
            getRunningEventsCurrencies: function () {
                var model = this.getModel(), currencies = [], event;
                $.each(model.getRunning(), function (i, event_id) {
                    event = model.getEvent(event_id);
                    if (event.hasCurrency()) {
                        currencies.push(event.getCurrency());
                    }
                });
                return currencies;
            },
            getEvent: function (event_id) {
                return this.getModel().getEvent(event_id);
            }
        }
    };
    west.define(local_class_name + '.model', model.class_parent, model.class_object);
    west.define(local_class_name + '.controller', controller.class_parent, controller.class_object);
    west.instanciateSingle(local_class_name, 'controller');
});

west.define('west.EventEmitter', null, (function () {
    var add = function (name, listener, context, once) {
        if (!this.events[name])this.events[name] = [];
        this.events[name].push({listener: listener, context: context, once: once});
        return this;
    };
    var addOnce = function (name, listener, context) {
        this.addListener(name, listener, context, true);
        return this;
    };
    var remove = function (name, listener, context) {
        var listeners = this.events[name], i;
        if (!listeners || !listeners.length)return this;
        i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener && listeners[i].context === context) {
                listeners.splice(i, 1);
            }
        }
        return this;
    };
    var removeAll = function (name) {
        delete this.events[name];
        return this;
    };
    var emit = function (name) {
        var listeners = (this.events[name] || []).slice(0), listener, args, i;
        args = Array.prototype.slice.call(arguments, 1);
        for (i = 0; i < listeners.length; i++) {
            listener = listeners[i];
            listener.listener.apply(listener.context || null, args);
            if (listener.once)
                this.removeListener(name, listener.listener, listener.context);
        }
        return this;
    };
    var offByContext = function (context) {
        if (!context)return;
        $.each(this.events, function (name, listeners) {
            var i = listeners.length;
            while (i--) {
                if (listeners[i].context === context)
                    listeners.splice(i, 1);
            }
        }.bind(this));
    };
    return {
        events: null,
        init: function () {
            this.events = {};
        },
        addListener: add,
        on: add,
        once: addOnce,
        removeListener: remove,
        removeAllListeners: removeAll,
        emit: emit,
        offByContext: offByContext
    };
}()));

(function () {
    var class_name = 'west.item.Item', class_parent = null, class_object = {
        '_memo': null,
        'action': '',
        'active': true,
        'auctionable': true,
        'bonus': null,
        'bufftype': 0,
        'characterClass': null,
        'characterSex': null,
        'cooldown': null,
        'damage': null,
        'description': null,
        'dropable': true,
        'has_cooldown': false,
        'image': null,
        'item_id': null,
        'level': null,
        'limit': false,
        'name': null,
        'named': false,
        'premiumprice': false,
        'price': null,
        'sell_price': null,
        'sellable': true,
        'set': null,
        'short': null,
        'spec_type': 'none',
        'speed': null,
        'stackAmount': 2147483647,
        'sub_type': null,
        'tradeable': true,
        'traderlevel': null,
        'type': null,
        'ups_tab': false,
        'usebonus': null,
        'usetype': 'none',
        'wear_image': null,
        'item_base_id': null,
        'item_level': 0,
        'upgradeable': false,
        init: function (config, item_id) {
            var that = this;
            this._memo = {};
            this.item_id = parseInt(item_id, 10);
            this.item_level = parseInt(item_id.slice(-3), 10);
            if (this.item_level > 0) {
                config = clone(config);
            }
            west.common.forEach(config, function (config_value, config_id) {
                that[config_id] = config_value;
            });
            if (this.getItemLevel()) {
                this.handleItemUpgrade();
            }
        },
        handleItemUpgrade: function () {
            this.blockAuction();
            this.parseLvlUp(this.bonus).parseSpeed();
        },
        blockAuction: function () {
            this.auctionable = false;
            return this;
        },
        isAuctionable: function () {
            return !!this.auctionable;
        },
        parseLvlUp: function (data) {
            if (!data) {
                return;
            }
            var that = this;
            west.common.forEach(data, function (property, id) {
                if ($.isArray(property)) {
                    return;
                } else if ($.isPlainObject(property)) {
                    that.parseLvlUp(property);
                } else {
                    data[id] += that.calculateItemLevelBonus(property);
                }
            });
            return this;
        },
        parseSpeed: function () {
            if (!this.speed || this.speed === 1) {
                return this;
            }
            var speed = (1 / this.speed) - 1, ratio;
            speed = Math.round(speed * 10000);
            speed += this.calculateItemLevelBonus(speed);
            speed = speed / 10000;
            ratio = 1 / (speed + 1);
            this.speed = ratio;
            return this;
        },
        calculateItemLevelBonus: function (value) {
            return ItemManager.calculateItemLevelBonus(this.getItemLevel(), value);
        },
        exportBoni: function (charLevel) {
            charLevel = charLevel || Character.level;
            var bonusExtractor = new west.item.BonusExtractor({level: charLevel}, this.getItemLevel());
            var result = {};
            var _add = function (key, value) {
                result[key] = result[key] || 0;
                result[key] += value;
            }
            if (this.speed) {
                _add('speed', Math.round(1 / (this.speed) * 100 - 100));
            }
            if (this instanceof west.item.Weapon) {
                _add('damage_min', this.getDamage({level: charLevel}).min);
                _add('damage_max', this.getDamage({level: charLevel}).max);
            }
            if (typeof this.bonus.attributes === 'object' && countObjectKeys(this.bonus.attributes) > 0) {
                for (var k in this.bonus.attributes) {
                    if (this.bonus.attributes[k]) {
                        _add(k, this.bonus.attributes[k]);
                    }
                }
            }
            if (typeof this.bonus.skills === 'object' && countObjectKeys(this.bonus.skills) > 0) {
                for (var k in this.bonus.skills) {
                    if (this.bonus.skills[k]) {
                        _add(k, this.bonus.skills[k]);
                    }
                }
            }
            if (this.bonus.item.length) {
                for (k = 0; k < this.bonus.item.length; k++) {
                    var bonus = bonusExtractor.getExportValue(this.bonus.item[k]);
                    if (this instanceof west.item.Weapon && bonus.key === 'damage') {
                        continue;
                    } else if (bonus.key === 'speed') {
                        bonus.value *= 100;
                    }
                    _add(bonus.key, bonus.value);
                }
            }
            return result;
        },
        getValue: function (skills, jobId) {
            var value = 0, attributes = {}, skill, skillAddition = {}, skillArr, i, memo = JSON.stringify(skills), bonusExtractor, affectedSkills;
            if (this._memo[memo])return this._memo[memo];
            for (skill in skills) {
                if (!skills[skill])continue;
                attr = CharacterSkills.getAttributeKey4Skill(skill);
                attributes[attr] = (attributes[attr] || 0) + 1;
            }
            for (attr in this.bonus.attributes) {
                if (!attributes[attr])continue;
                skillArr = CharacterSkills.getSkillKeys4Attribute(attr);
                for (i = 0; i < skillArr.length; i++) {
                    if (skills[skillArr[i]])
                        skillAddition[skillArr[i]] = this.bonus.attributes[attr];
                }
            }
            if (this.hasItemBonus()) {
                bonusExtractor = new west.item.BonusExtractor(Character, this.getItemLevel());
                for (i = 0; i < this.bonus.item.length; i++) {
                    affectedSkills = bonusExtractor.getAffectedSkills(this.bonus.item[i]);
                    for (skill in affectedSkills) {
                        if (!(skill in skills))continue;
                        value += skills[skill] * affectedSkills[skill];
                    }
                    value += bonusExtractor.getWorkPointAddition(this.bonus.item[i], jobId);
                }
            }
            for (skill in skills) {
                if (this.bonus.skills[skill] || skillAddition[skill])
                    value += skills[skill] * ((this.bonus.skills[skill] || 0) + (skillAddition[skill] || 0));
            }
            this._memo[memo] = value;
            return value;
        },
        wearable: function () {
            if (this.characterSex && (this.characterSex !== Character.charSex || Character.charClass === 'greenhorn'))
                return false;
            if (this.characterClass && this.characterClass !== Character.charClass)
                return false;
            if (this.duelLevel && this.duelLevel > Character.duelLevel) {
                return false;
            }
            var charDecrease = Character.itemLevelRequirementDecrease;
            var decrease = charDecrease.all + (charDecrease[this.type] || 0);
            if (this.level && this.level - decrease > Character.level)
                return false;
            return true;
        },
        hasItemBonus: function () {
            return !!this.bonus.item.length;
        },
        clearCache: function () {
            this._memo = {};
            return this;
        },
        getId: function () {
            return this.item_id;
        },
        getItemBaseId: function () {
            return this.item_base_id;
        },
        getItemLevel: function () {
            return parseInt(this.item_level, 10);
        },
        getType: function () {
            return this.type;
        },
        isUpgradeable: function () {
            return !!this.upgradeable;
        }
    };
    west.define(class_name, class_parent, class_object);
})();

west.define('west.item.Factory', null, {
    create: function (data, item_id) {
        switch (data.type) {
            case'right_arm':
            case'left_arm':
                return new west.item.Weapon(data, item_id);
                break;
            default:
                return new west.item.Item(data, item_id);
                break;
        }
    }
});

west.define('west.item.BonusExtractor', null, {
    character: null,
    itemLevel: 0,
    keyDescMapping: {
        'luck': '+%1% к шансу найти предмет (не продукт)',
        'dollar': '+%1% Заработок на работах и дуэлях',
        'regen': '+%1% Восстановление сил',
        'speed': '+ %1% к скорости передвижения',
        'experience': '+%1% Опыт на работах, дуэлях и фортовых сражениях',
        'drop': '+%1% к шансу найти предмет'
    },
    init: function (character, level) {
        this.character = character;
        this.itemLevel = level || 0;
    },
    calculateItemLevelBonus: function (value) {
        return ItemManager.calculateItemLevelBonus(this.itemLevel, value);
    },
    getValue: function (bonus, _valueModifier, _roundingMethod) {
        var value = _valueModifier ? _valueModifier(bonus.value) : bonus.value;
        if (this.itemLevel) {
            value += this.calculateItemLevelBonus(value);
        }
        if (_roundingMethod) {
            value = this.getRoundedValue(value, _roundingMethod);
        }
        return value;
    },
    getDesc: function (bonus, _valueModifier, _roundingMethod) {
        switch (bonus.type) {
            case'character':
                return this.getCharacterItemDesc(bonus);
            case'attribute':
            case'skill':
                return this.getAttributeSkillDesc(bonus, _valueModifier, _roundingMethod);
            case'job':
                return this.getWorkPointsDesc(bonus, _valueModifier, _roundingMethod);
            case'pray':
                return this.getPrayDesc(bonus, _valueModifier, _roundingMethod);
            case'damage':
                return this.getDamageDesc(bonus, _valueModifier, _roundingMethod);
            case'fortbattle':
                return this.getFortbattleDesc(bonus, _valueModifier, _roundingMethod);
            default:
                return this.getDefaultDesc(bonus, _valueModifier, _roundingMethod);
        }
    },
    getExportValue: function (bonus) {
        var value, key;
        if (bonus.type === 'character') {
            value = this.getCharacterItemValue(bonus);
            bonus = bonus.bonus;
        } else {
            value = this.getValue(bonus);
        }
        switch (bonus.type) {
            case'skill':
            case'attribute':
                key = bonus.name;
                break;
            case'fortbattle':
                key = 'fort_' + bonus.name + (bonus.isSector ? '_sector' : '');
                break;
            default:
                key = bonus.type;
        }
        return {key: key, value: value}
    },
    getAffectedSkills: function (bonus, _valueModifier, _roundingMethod) {
        var skills = {}, value;
        if (bonus.type == 'skill') {
            skills[bonus.name] = this.getValue(bonus, _valueModifier, _roundingMethod);
        } else if (bonus.type == 'attribute') {
            value = this.getValue(bonus, _valueModifier, _roundingMethod);
            CharacterSkills.getSkillKeys4Attribute(bonus.name).each(function (skill) {
                skills[skill] = value;
            });
        } else if (bonus.type == 'character' && bonus.key == 'level') {
            return this.getAffectedSkills(bonus.bonus, function (val) {
                return this.getRoundedValue(val * this.character.level, bonus.roundingMethod);
            }.bind(this), bonus.roundingMethod);
        }
        return skills;
    },
    getWorkPointAddition: function (bonus, jobId, _valueModifier, _roundingMethod) {
        if (bonus.type == 'job' && (bonus.job == jobId || bonus.job == 'all')) {
            return this.getValue(bonus, _valueModifier, _roundingMethod);
        } else if (bonus.type == 'character' && bonus.key == 'level') {
            return this.getWorkPointAddition(bonus.bonus, jobId, function (val) {
                return this.getRoundedValue(val * this.character.level, bonus.roundingMethod);
            }.bind(this), bonus.roundingMethod);
        }
        return 0;
    },
    getAttributeSkillDesc: function (bonus, _valueModifier, _roundingMethod) {
        var value = this.getValue(bonus, _valueModifier, _roundingMethod);
        return ['+ ', value, ' ', CharacterSkills.keyNames[bonus.name]].join('');
    },
    getDefaultDesc: function (bonus, _valueModifier, _roundingMethod) {
        var value;
        if (bonus.type in this.keyDescMapping) {
            value = this.getValue(bonus, _valueModifier, _roundingMethod);
            return s(this.keyDescMapping[bonus.type], Math.round(value * 100));
        } else {
            return bonus.desc;
        }
    },
    getWorkPointsDesc: function (bonus, _valueModifier, _roundingMethod) {
        var value = this.getValue(bonus, _valueModifier, _roundingMethod), desc = s(ngettext('%1 трудовое очко', new Array('%1 трудовое очко', '%1 трудовых очка', '%1 трудовых очков'), value), value);
        if (bonus.job == new west.job.Build().id) {
            desc = s(ngettext('%1 трудовое очко для работы «%2»', new Array('%1 трудовое очко для работы «%2»', '%1 трудовых очка для работы «%2»', '%1 трудовых очков для работы «%2»'), value), value, 'Строить');
        } else if (bonus.job != 'all') {
            desc = s(ngettext('%1 трудовое очко для работы «%2»', new Array('%1 трудовое очко для работы «%2»', '%1 трудовых очка для работы «%2»', '%1 трудовых очков для работы «%2»'), value), value, JobList.getJobById(bonus.job).name);
        }
        return '+ ' + desc;
    },
    getPrayDesc: function (bonus, _valueModifier, _roundingMethod) {
        var value = this.getValue(bonus, _valueModifier, _roundingMethod);
        return '+' + value + ' ' + 'Молитва';
    },
    getDamageDesc: function (bonus, _valueModifier, _roundingMethod) {
        var value = this.getValue(bonus, _valueModifier, _roundingMethod);
        return '+' + value + ' ' + 'Урон';
    },
    getFortbattleDesc: function (bonus, _valueModifier, _roundingMethod) {
        var value = this.getValue(bonus, _valueModifier, _roundingMethod), sector = bonus.isSector ? 'Сектор форта' : 'Битвы и перестрелки', desc;
        switch (bonus.name) {
            case'damage':
                desc = 'Урон';
                break;
            case'defense':
                desc = 'Защита';
                break;
            case'offense':
                desc = 'Атака';
                break;
            case'resistance':
                desc = 'Сопротивление';
                break;
            default:
                desc = '';
                break;
        }
        return s('+%1 %2 (%3)', value, desc, sector);
    },
    getCharacterItemDesc: function (bonus) {
        if (!this.character) {
            return bonus.desc;
        }
        switch (bonus.key) {
            case'level':
                return this.getDesc(bonus.bonus, function (val) {
                    return this.getRoundedValue(val * this.character.level, bonus.roundingMethod);
                }.bind(this), bonus.roundingMethod);
            default:
                return bonus.desc;
        }
    },
    getCharacterItemValue: function (bonus) {
        if (bonus.type !== 'character') {
            return this.getValue(bonus);
        }
        if (!this.character) {
            return this.getValue(bonus.bonus);
        }
        switch (bonus.key) {
            case'level':
                return this.getValue(bonus.bonus, function (val) {
                    return this.getRoundedValue(val * this.character.level, bonus.roundingMethod);
                }.bind(this), bonus.roundingMethod);
                break;
            default:
                return this.getValue(bonus.bonus);
        }
    },
    getCharacterItemValueDifferenceToItemLevel: function (bonus, difflevel_to, difflevel_from) {
        difflevel_to = difflevel_to || 0;
        difflevel_from = difflevel_from || this.itemLevel;
        var lvl = this.itemLevel, current_value, new_value, diff;
        if (bonus.type !== 'character') {
            this.itemLevel = difflevel_from;
            current_value = this.getValue(bonus);
            this.itemLevel = difflevel_to;
            new_value = this.getValue(bonus);
            diff = current_value - new_value;
            this.itemLevel = lvl;
        } else if (!this.character || bonus.key !== 'level') {
            this.itemLevel = difflevel_from;
            current_value = this.getValue(bonus.bonus);
            this.itemLevel = difflevel_to;
            new_value = this.getValue(bonus.bonus);
            diff = current_value - new_value;
            this.itemLevel = lvl;
        } else {
            this.itemLevel = difflevel_from;
            current_value = this.getValue(bonus.bonus, function (val) {
                return this.getRoundedValue(val * this.character.level, bonus.roundingMethod);
            }.bind(this), bonus.roundingMethod);
            this.itemLevel = difflevel_to;
            new_value = this.getValue(bonus.bonus, function (val) {
                return this.getRoundedValue(val * this.character.level, bonus.roundingMethod);
            }.bind(this), bonus.roundingMethod);
            diff = Math.round((current_value - new_value) * 100) / 100;
            this.itemLevel = lvl;
        }
        return diff;
    },
    getRoundedValue: function (value, method) {
        switch (method) {
            case'round':
                return Math.round(value);
            case'ceil':
                return Math.ceil(value);
            case'floatceil':
                return Math.ceil(100 * value) / 100;
            case'floor':
                return Math.floor(value);
            default:
                return value;
        }
    }
});

west.define('west.item.Weapon', 'west.item.Item', {
    getDamage: function (character) {
        var min = this.damage.damage_min, max = this.damage.damage_max, bonus = this.getDamageBonus(character);
        if (this.getItemLevel() && this.isUpgradeable()) {
            min += this.calculateItemLevelBonus(min);
            max += this.calculateItemLevelBonus(max);
        }
        min += bonus;
        max += bonus;
        return {min: min, max: max};
    }, getDamageBonus: function (character) {
        var boni = this.bonus.item, bonus = 0, i, len;
        if (!boni.length || !character)return bonus;
        for (i = 0, len = boni.length; i < len; i++) {
            if (boni[i].type == 'character' && boni[i].bonus.type == 'damage') {
                bonus += Math.round(boni[i].bonus.value * character.level) + this.calculateItemLevelBonus(boni[i].bonus.value * character.level);
            }
        }
        return bonus;
    }, hasDamageBonus: function () {
        for (var i = 0, len = this.bonus.item.length; i < len; i++) {
            if (this.bonus.item[i].type == 'character' && this.bonus.item[i].bonus.type == 'damage')return true;
        }
        return false;
    }
});

west.define('west.item.ItemSet', null, {
    init: function (config) {
        this.key = config.key;
        this.items = config.items;
        this.bonus = config.bonus;
        this.name = config.name;
        this._mergedBonus = null;
        this._memo = {};
    }, getItems: function () {
        return this.items;
    }, getAvailableItems: function () {
        var items_ids = this.getItems(), available_items = [], i = items_ids.length, item;
        while (i--) {
            item = Bag.getItemsIdsByBaseItemId(items_ids[i]);
            if (item.length) {
                item = Bag.getItemByItemId(item[0]);
                if (item.obj.wearable()) {
                    available_items.push(item.getId());
                }
            } else if (Wear.carries(items_ids[i])) {
                available_items.push(Wear.getByBaseId(items_ids[i]).getId());
            }
        }
        return available_items;
    }, getWornItems: function () {
        var items_ids = this.getItems(), available_items = [], i = items_ids.length;
        while (i--) {
            if (Wear.carries(items_ids[i])) {
                available_items.push(items_ids[i]);
            }
        }
        return available_items;
    }, sortItems: function (skills) {
        var get = ItemManager.get;
        this.items.sort(function (a, b) {
            return get(b).getValue(skills) - get(a).getValue(skills);
        });
    }, isMergeable: function (set) {
        var i, j, items, get = ItemManager.get;
        if (set.containsSet(this))return false;
        items = set.getItems();
        for (i = 0; i < this.items.length; i++)
            for (j = 0; j < items.length; j++)
                if (get(this.items[i]).type === get(items[j]).type)
                    return false;
        return true;
    }, containsSet: function (set) {
        return this.key === set.key;
    }, merge: function (set) {
        return new west.item.ItemSetContainer(this, set);
    }, getMergedBonus: function () {
        if (this._mergedBonus)return this._mergedBonus;
        var bonus = {
            attribute: {},
            skill: {},
            job: {},
            speed: 0,
            regen: 0,
            luck: 0,
            pray: 0,
            fortbattle: {},
            experience: 0
        }, bonusObjects = this.getMergedStages(), i, b, bonusExtractor = new west.item.BonusExtractor(Character);
        var merge = function (b, value) {
            switch (b.type) {
                case'skill':
                case'attribute':
                case'fortbattle':
                    bonus[b.type][b.name] = (bonus[b.type][b.name] || 0) + value;
                    break;
                case'job':
                    bonus.job[b.job] = (bonus.job[b.job] || 0) + value;
                    break;
                case'speed':
                case'regen':
                case'luck':
                case'pray':
                case'experience':
                case'damage':
                case'dollar':
                    bonus[b.type] += value;
                    break;
                case'character':
                    merge(b.bonus, bonusExtractor.getCharacterItemValue(b));
                    break;
                default:
                    if (window.DEBUG)console.log('ItemSet: unknown bonus to merge: ', b.type);
                    break;
            }
        };
        for (i = 0; i < bonusObjects.length; i++) {
            b = bonusObjects[i];
            merge(b, b.value);
        }
        return (this._mergedBonus = bonus);
    }, getMergedStages: function (cnt) {
        var stage, bonus = [], bb, cnt = cnt !== undefined ? cnt : this.items.length, merge = function (b, value) {
            var found = false, bLen = bonus.length;
            while (bLen--) {
                bb = bonus[bLen];
                if (b.type !== bb.type)continue;
                if (b.type == 'character' && b.roundingMethod == bb.roundingMethod && b.key == bb.key && b.bonus.type == bb.bonus.type && b.bonus.name == bb.bonus.name) {
                    found = true;
                    bb.bonus.value += b.bonus.value;
                } else if (b.type == 'job' && b.job == bb.job) {
                    found = true;
                    bb.value += b.value;
                } else if (['speed', 'regen', 'luck', 'pray', 'experience', 'dollar', 'damage'].indexOf(b.type) !== -1) {
                    found = true;
                    bb.value += b.value;
                } else if (['skill', 'attribute', 'fortbattle'].indexOf(b.type) !== -1 && b.name == bb.name && bb.isSector == b.isSector) {
                    found = true;
                    bb.value += b.value;
                }
            }
            if (found)return;
            bonus.push(clone(b));
        };
        for (stage in this.bonus) {
            if (parseInt(stage, 10) > cnt)continue;
            for (i = 0; i < this.bonus[stage].length; i++) {
                b = this.bonus[stage][i];
                merge(b, b.value);
            }
        }
        return bonus;
    }, getValue: function (skills, jobId) {
        var boni = this.getSetValue(skills, jobId), i;
        if (skills) {
            for (i = 0; i < this.items.length; i++)
                boni += ItemManager.get(this.items[i]).getValue(skills);
        }
        return boni;
    }, getSetValue: function (skills, jobId) {
        var boni = 0, i, skill, attr, bonus = this.getMergedBonus(), memo = JSON.stringify(skills) + jobId;
        if (this._memo[memo])return this._memo[memo];
        if (skills) {
            for (skill in skills) {
                if (bonus.skill[skill])
                    boni += bonus.skill[skill] * skills[skill];
                attr = CharacterSkills.getAttributeKey4Skill(skill);
                if (bonus.attribute[attr])
                    boni += bonus.attribute[attr] * skills[skill];
            }
        }
        if (jobId) {
            boni += bonus.job.all || 0;
            boni += bonus.job[jobId] || 0;
        }
        return (this._memo[memo] = boni);
    }, getUsedSlots: function () {
        return this.items.map(function (id) {
            return ItemManager.get(id).type;
        });
    }
});

west.define('west.item.ItemSetContainer', west.item.ItemSet, {
    init: function () {
        this.sets = [];
        this.items = [];
        for (var i = 0; i < arguments.length; i++) {
            this.addSet(arguments[i]);
        }
    }, addItem: function (item) {
        this.items.push(item);
    }, addSet: function (set) {
        if (set instanceof west.item.ItemSetContainer) {
            for (var i = 0; i < set.sets.length; i++)
                this.sets.push(set.sets[i]);
        } else if (set instanceof west.item.ItemSet) {
            this.sets.push(set);
        }
    }, isMergeable: function (set) {
        var sets = set instanceof west.item.ItemSetContainer ? set.sets : [set], i, j;
        for (j = 0; j < sets.length; j++) {
            for (i = 0; i < this.sets.length; i++) {
                if (!this.sets[i].isMergeable(sets[j]))return false;
            }
        }
        return true;
    }, merge: function (set) {
        this.addSet(set);
        return this;
    }, containsSet: function (set) {
        var sets = set instanceof west.item.ItemSetContainer ? set.sets : [set], i, j;
        for (i = 0; i < sets.length; i++) {
            for (j = 0; j < this.sets.length; j++)
                if (this.sets[j].containsSet(sets[i]))return true;
        }
        return false;
    }, getItems: function () {
        var items = this.items.slice(0), i;
        for (i = 0; i < this.sets.length; i++) {
            items.push.apply(items, this.sets[i].getItems());
        }
        return items;
    }, getValue: function (skills, jobId) {
        var boni = 0, i, items = this.getItems();
        if (skills)
            for (i = 0; i < items.length; i++)
                boni += ItemManager.get(items[i]).getValue(skills);
        boni += this.getSetValue(skills, jobId);
        return boni;
    }, getSetValue: function (skills, jobId) {
        var boni = 0, i;
        for (i = 0; i < this.sets.length; i++)
            boni += this.sets[i].getSetValue(skills, jobId);
        return boni;
    }, getUsedSlots: function () {
        var slots = [], i;
        for (i = 0; i < this.sets.length; i++)
            slots.push.apply(slots, this.sets[i].getUsedSlots());
        for (i = 0; i < this.items.length; i++)
            slots.push(ItemManager.get(this.items[i]).type);
        return slots;
    }
})

west.namespace('west.item.Calculator', {
    filterUnavailableSets: function (sets) {
        var i, set, x, possibleSets = [], items, item;
        for (i = 0; i < sets.length; i++) {
            set = sets[i];
            items = set.getAvailableItems();
            if (items.length) {
                possibleSets.push(new west.item.ItemSet({key: set.key, items: items, bonus: set.bonus}));
            }
        }
        return possibleSets;
    }, filterUneffectiveSets: function (sets, skills, jobId) {
        var r = [], i, bestBySlots = {}, slots, setValue, value;
        for (i = 0; i < sets.length; i++) {
            setValue = sets[i].getSetValue(skills, jobId);
            if (setValue < 1)continue;
            slots = JSON.stringify(sets[i].getUsedSlots().sort());
            if (!bestBySlots[slots]) {
                bestBySlots[slots] = sets[i];
            } else {
                value = sets[i].getValue(skills, jobId);
                if (bestBySlots[slots].getValue(skills, jobId) < value)
                    bestBySlots[slots] = sets[i];
            }
        }
        for (i in bestBySlots) {
            r.push(bestBySlots[i]);
        }
        return r;
    }, createSubsets: function (fullSets, bestItems, skills, jobId, useApproximation) {
        var i, sets = [], set, j, permutations, k, l, tmpSet;
        for (i = 0; i < fullSets.length; i++) {
            set = fullSets[i];
            if (useApproximation)set.sortItems(skills);
            for (j = set.items.length; j > 0; j--) {
                if (!set.bonus.hasOwnProperty(j))continue;
                if (useApproximation)
                    permutations = [set.items.slice(0, j)]; else
                    permutations = this.createCombinations(set.items, j);
                for (k = 0, l = permutations.length; k < l; k++) {
                    if (!this.itemsCombineable(permutations[k]))continue;
                    tmpSet = new west.item.ItemSet({key: set.key, items: permutations[k], bonus: set.bonus});
                    if (!this.beatsBestItems(tmpSet, bestItems, skills, jobId))
                        continue;
                    sets.push(tmpSet);
                }
            }
        }
        return sets;
    }, beatsBestItems: function (set, bestItems, skills, jobId) {
        var setSlots = set.getUsedSlots(), bestItemsPoints = 0, i;
        for (i = 0; i < bestItems.length; i++) {
            if (setSlots.indexOf(bestItems[i].getType()) === -1)continue;
            bestItemsPoints += bestItems[i].getValue(skills);
        }
        return set.getValue(skills, jobId) > bestItemsPoints;
    }, itemsCombineable: function (items) {
        var slots = {}, i, slot;
        for (i = 0; i < items.length; i++) {
            slot = ItemManager.get(items[i]).type;
            if (slots[slot] === true)return false;
            slots[slot] = true;
        }
        return true;
    }, createCombinations: function (items, k) {
        var i, j, combs, head, tailcombs;
        if (k > items.length || k <= 0) {
            return [];
        }
        if (k == items.length) {
            return [items];
        }
        if (k == 1) {
            combs = [];
            for (i = 0; i < items.length; i++) {
                combs.push([items[i]]);
            }
            return combs;
        }
        combs = [];
        for (i = 0; i < items.length - k + 1; i++) {
            head = items.slice(i, i + 1);
            tailcombs = this.createCombinations(items.slice(i + 1), k - 1);
            for (j = 0; j < tailcombs.length; j++) {
                combs.push(head.concat(tailcombs[j]));
            }
        }
        return combs;
    }, combineSets: function (inputSets) {
        var sets = [], i, set, j, l, ll;
        for (i = 0, ll = inputSets.length; i < ll; ++i) {
            set = inputSets[i];
            sets[sets.length] = set.merge();
            for (j = 0, l = sets.length; j < l; ++j) {
                if (!set.isMergeable(sets[j]))continue;
                sets[sets.length] = set.merge(sets[j]);
            }
        }
        return sets;
    }, fillEmptySlots: function (sets, bestItems) {
        var usedSlots, container, pimpedSets = [], i, j;
        for (i = 0; i < sets.length; i++) {
            usedSlots = sets[i].getUsedSlots();
            container = new west.item.ItemSetContainer(sets[i]);
            for (j = 0; j < bestItems.length; j++) {
                if (usedSlots.indexOf(bestItems[j].getType()) !== -1)continue;
                container.addItem(bestItems[j].getId());
            }
            pimpedSets.push(container);
        }
        return pimpedSets;
    }, getBestSet: function (skills, jobId) {
        var bestItems, bestItemsContainer, sets, i, best, points = 0, tmp, availableSets;
        availableSets = this.filterUnavailableSets(west.storage.ItemSetManager.getAll());
        bestItems = this.getBestItems(skills, true);
        bestItemsContainer = new west.item.ItemSetContainer;
        for (i = 0; i < bestItems.length; i++)
            bestItemsContainer.addItem(bestItems[i].getId());
        sets = this.createSubsets(availableSets, bestItems, skills, jobId);
        if (window.__limitclothcalc && sets.length > 500) {
            sets = this.createSubsets(availableSets, bestItems, skills, jobId, true);
            console && console.log('using approximation...');
        }
        sets = this.filterUneffectiveSets(sets, skills, jobId);
        sets = this.fillEmptySlots(this.combineSets(sets), bestItems);
        sets.push(bestItemsContainer);
        for (i = 0; i < sets.length; i++) {
            tmp = sets[i].getValue(skills, jobId);
            if (tmp > points) {
                points = tmp;
                best = sets[i];
            }
        }
        return best;
    }, getBestItems: function (skills, onlyWearable) {
        var best_items = {}, result = [], items_by_base = Bag.getItemsIdsByBaseItemIds();
        west.common.forEach(items_by_base, function (items, base_id) {
            var item = ItemManager.get(items[0]), type = item.getType(), value = item.getValue(skills);
            best_items[type] = best_items[type] || [];
            if (value && (onlyWearable ? item.wearable() : true)) {
                best_items[type].push({item: item, id: item.getId(), base_id: base_id, value: value});
            }
        });
        west.common.forEach(best_items, function (items, type) {
            var wear_item = Wear.get(type);
            if (wear_item) {
                wear_item = ItemManager.get(wear_item.getId());
                items.push({
                    item: wear_item,
                    id: wear_item.getId(),
                    base_id: wear_item.getItemBaseId(),
                    value: wear_item.getValue(skills)
                });
            }
            best_items[type] = items.sort(function (a, b) {
                return b.value - a.value;
            });
            if (best_items[type].length) {
                result.push(best_items[type][0].item);
            }
        });
        return result;
    }
});

west.define('west.wof.WheelofFortune', null, {
    init: function (id, name, title, prizes, mode) {
        this.id = id;
        this.name = name;
        this.title = title;
        this.mode = mode;
        this.prizes = prizes;
    }, getId: function () {
        return this.id;
    }, getName: function () {
        return this.name;
    }, getTitle: function () {
        return this.title;
    }, getMode: function () {
        return this.mode;
    }, getPrizes: function () {
        return this.prizes;
    }, process: function (action, data, callback, context, window) {
        data = data || {};
        data.action = action;
        data.wofid = this.id;
        var that = this;
        Ajax.remoteCall("wheeloffortune", "gamble", data, function (resp) {
            if (resp.error) {
                return new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
            }
            EventHandler.signal("inventory_changed");
            typeof callback === "function" && callback.call(context || this, resp);
        }, window);
    }
});

west.define('west.wof.WofPayHandler', null, {
    init: function () {
        this.payOptions = {};
        this.enhancePayId = null;
        this.fallbackpay = null;
        this.title = null;
        this.message = null;
        this.selectedPayId = null;
        this.selectedEnhance = null;
        this.icon = null;
    }, setTitle: function (title) {
        this.title = title;
        return this;
    }, setMessage: function (message) {
        this.message = message;
        return this;
    }, setIcon: function (icon) {
        this.icon = icon;
        return this;
    }, getSelectedPayId: function () {
        return this.selectedPayId;
    }, getSelectedEnhance: function () {
        return this.selectedEnhance;
    }, addPayOption: function (payOption) {
        if (false === payOption) {
            return this;
        }
        if (!(payOption instanceof west.wof.WofPayOption))
            throw"IllegalArgumentException";
        this.payOptions[payOption.id] = payOption;
        return this;
    }, setEnhancePayOption: function (id) {
        if (!this.payOptions[id])throw"IllegalArgumentException";
        this.enhancePayId = id;
        return this;
    }, setFallbackPay: function (id, func) {
        if (!this.payOptions[id])throw"IllegalArgumentException";
        this.fallbackPay = {id: id, func: func};
        return this;
    }, toText: function (payId, enhance) {
        var sum = this.sumCost(payId, enhance), el = $("<div />").append("<b>" + "Необходимо:" + "</b> ");
        for (var id in this.payOptions) {
            var payOption = this.payOptions[id];
            if (0 == sum[id] || payOption.hideDisplay)continue;
            el.append($("<span title='" + payOption.label + "'/>").append(payOption.getIcon(), " " + sum[id] + " "));
        }
        return el;
    }, toCheckbox: function (elId, callback) {
        var container = $("<div id='" + elId + "'/>"), i = 0, chk = null;
        for (var id in this.payOptions) {
            var payOption = this.payOptions[id];
            if (payOption.hideDisplay)continue;
            chk = new west.gui.Checkbox(payOption.label).setValue(id).setRadiobutton().setCallback(callback);
            chk.getMainDiv().css("margin-right", "30px");
            container.append(chk.getMainDiv());
            if (0 == i)chk.setSelected();
            i++;
        }
        return container;
    }, sumCost: function (payId, enhance) {
        var sum = {};
        for (var id in this.payOptions) {
            sum[id] = payId == id ? this.payOptions[id].cost : 0;
            if (this.enhancePayId == id && enhance)sum[id] += parseInt(enhance);
        }
        return sum;
    }, checkPayable: function (payId, enhance) {
        var sum = this.sumCost(payId, enhance);
        if (payId != 1) {
            for (var id in sum) {
                if (!this.payOptions[id].isPayable(sum[id], enhance)) {
                    if (this.fallbackPay && payId != this.fallbackPay.id) {
                        this.offerFallback(id, enhance);
                    } else if (!this.payOptions[id].hasOwnResponse()) {
                        this.showNotPayable(id, sum[id]);
                    }
                    return false;
                }
            }
        }
        return true;
    }, offerFallback: function (wantedPayId, enhance) {
        var wantedPayOption = this.payOptions[wantedPayId];
        new west.gui.Dialog(s("Недостаточно %1", wantedPayOption.label), $("<div style='text-align: center;' />").append(s("У тебя недостаточно %1. Хочешь заплатить %2?", wantedPayOption.label, this.payOptions[this.fallbackPay.id].label), $("<div style='padding: 15px 0 0 0;'/>").append(this.toText(this.fallbackPay.id, enhance))), west.gui.Dialog.SYS_QUESTION).addButton("yes", function () {
            this.selectedPayId = this.fallbackPay.id;
            this.selectedEnhance = enhance;
            this.fallbackPay.func(enhance);
        }.bind(this)).addButton("no").show();
    }, showNotPayable: function (payId, cost) {
        var payOption = this.payOptions[payId];
        new west.gui.Dialog(s("Недостаточно %1", payOption.label), $("<div style='text-align: center;' />").append(s("У тебя не хватает %1.", payOption.label)), west.gui.Dialog.SYS_ERROR).addButton("ok").show();
    }, askUser: function (enhance, onAccept, opts) {
        this.selectedEnhance = enhance;
        var hasMultiple = 0;
        for (var k in this.payOptions) {
            this.selectedPayId = k;
            hasMultiple++;
        }
        hasMultiple = 1 != hasMultiple;
        if (!hasMultiple || enhance == 0) {
            var sum = this.sumCost(this.selectedPayId, enhance);
            if (0 == sum[this.selectedPayId])
                return onAccept();
        }
        var costEl = $("<div style='padding: 15px 0 0 0;' />"), payBox = "", text = "", self = this;
        if (opts && opts.free) {
            costEl.append(opts.text);
        } else {
            if (hasMultiple) {
                payBox = $("<div style='padding: 15px 0 0 0;' />").append(this.toCheckbox("", function () {
                    self.selectedPayId = this.getValue();
                    self.setEnhancePayOption(self.selectedPayId);
                    costEl.empty().append(self.toText(self.selectedPayId, self.selectedEnhance));
                }));
            }
            else {
                costEl.append(self.toText(self.selectedPayId, self.selectedEnhance));
            }
        }
        new west.gui.Dialog(this.title, $('<div style="text-align: center;"' + ((opts && opts.class_name) ? ' class="' + opts.class_name + '"' : '') + '/>').append(this.icon ? this.icon : '', this.message, costEl, payBox), this.icon ? undefined : west.gui.Dialog.SYS_QUESTION).addButton("yes", function () {
            if (!this.checkPayable(this.selectedPayId, this.selectedEnhance)) {
                return;
            }
            onAccept(this.selectedPayId);
        }.bind(this)).addButton("no").setModal(true, true, true).show();
    }
});

west.define('west.wof.WofPayOption', null, {
    id: null,
    label: null,
    cost: 0,
    iconName: null,
    hideDisplay: false,
    payCheckMethod: null,
    ownResponse: false,
    init: function (id, label) {
        this.id = id;
        this.label = label;
        this.cost = 0;
        this.iconName = null;
        this.hideDisplay = false;
        this.payCheckMethod = function (cost, enhance) {
            return true;
        };
    },
    setCost: function (cost) {
        this.cost = cost;
        return this;
    },
    setIcon: function (icon) {
        this.iconName = icon;
        return this;
    },
    setHideDisplay: function (state) {
        this.hideDisplay = state;
        return this;
    },
    setPayCheckMethod: function (callback) {
        this.payCheckMethod = callback;
        return this;
    },
    setHasOwnResponse: function (bool) {
        this.ownResponse = bool;
        return this;
    },
    hasOwnResponse: function () {
        return this.ownResponse;
    },
    getIcon: function () {
        return '<span class="tw-currency curr-' + this.iconName + '"></span>';
    },
    isPayable: function (cost, enhance) {
        return this.payCheckMethod(cost, enhance);
    }
});

west.define('west.wof.WofPayOptionNugget', west.wof.WofPayOption, {
    init: function (id, cost) {
        this.callParent(id, 'Самородки');
        this.setCost(cost).setIcon("nugget").setHasOwnResponse(true).setPayCheckMethod(function (cost, enhance) {
            return Premium.checkForBuy(cost);
        });
    }
});

west.define('west.wof.WofPayOptionBond', west.wof.WofPayOption, {
    init: function (id, cost) {
        this.callParent(id, 'Облигации');
        this.setCost(cost).setIcon("bond").setPayCheckMethod(function (cost) {
            return Character.getUpb() >= cost;
        });
    }
});

west.define('west.wof.WofPayOptionDollar', west.wof.WofPayOption, {
    init: function (id, cost) {
        this.callParent(id, 'Доллары');
        this.setCost(cost).setIcon("dollar").setPayCheckMethod(function (cost) {
            return Character.getCapital() >= cost;
        });
    }
});

west.define('west.wof.WofPayOptionVeteran', west.wof.WofPayOption, {
    init: function (id, cost) {
        this.callParent(id, 'Очки славы');
        this.setCost(cost).setIcon("veteran-glow").setPayCheckMethod(function (cost) {
            return Character.getVeteranPoints() >= cost;
        });
    }
});

west.define('west.wof.WofPayOptionSES', west.wof.WofPayOption, {
    init: function (id, cost, event_id) {
        var ses_manager = west.events.Manager, event = ses_manager.getEvent(event_id), currency_data;
        if (event_id) {
            if (!event || !event.isStarted() || !event.hasCurrency()) {
                return false;
            }
            currency_data = event.getCurrency();
        } else {
            currency_data = ses_manager.getRunningEventsCurrencies()[0];
            if (!currency_data) {
                return false;
            }
        }
        this.callParent(id, currency_data.name);
        this.setCost(cost).setIcon(currency_data.id.toLowerCase() + ' pay_icon ses_event_icon ' + currency_data.id.toLowerCase()).setPayCheckMethod(function (cost) {
            return true;
        });
    }
});

west.namespace('west.wof.WofManager', {
    load: function (id, onFinish, onFail) {
        var data = {wofid: id};
        Ajax.remoteCallMode("wheeloffortune", "init", data, function (resp) {
            if (resp.error) {
                if (typeof onFail === "function") {
                    onFail(resp);
                } else {
                    new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                }
                return;
            }
            var prizes = new west.wof.WofPrizes(resp.prizes.enhancements, resp.prizes.gamblePrizes, resp.prizes.winnerPrizes);
            var wof = new west.wof.WheelofFortune(id, resp.name, resp.title, prizes, resp.mode);
            typeof onFinish === "function" && onFinish(wof);
        });
    }, init: function (wofs, tutorial) {
        var eventClass, openFunc, wof;
        for (var i = 0; i < wofs.length; i++) {
            wof = wofs[i];
            openFunc = null;
            switch (wof.id) {
                case 1:
                    openFunc = west.wof.WofXmasWindow.open;
                    break;
                case 2:
                    openFunc = west.wof.WofEasterWindow.open;
                    break;
                case 3:
                    openFunc = west.wof.FairWindow.openGame.bind(west.wof.FairWindow);
                    break;
                case 6:
                    openFunc = function () {
                        new west.wof.WofHeartsWindow().show();
                    };
                    break;
                case 7:
                    openFunc = function () {
                        new west.wof.WofIndepWindow().show();
                    };
                    break;
                case 8:
                    openFunc = function () {
                        new west.wof.WofOctoberWindow().show();
                    };
                    break;
                case 9:
                    openFunc = west.wof.WofDotdCardgameWindow.open.bind(west.wof.WofDotdCardgameWindow);
                    break;
                case-1:
                    openFunc = west.wof.FairSiteWindow.open.bind(west.wof.FairSiteWindow);
                    break;
            }
            if (!tutorial) {
                WestUi.NotiBar.add(new OnGoingWofEntry(openFunc, wof.title, wof.name, true, wof.daysleft, wof.free), true);
            }
        }
    }
});

west.define('west.wof.WofPrizes', null, {
    enhancements: null,
    gamblePrizes: null,
    winnerPrizes: null,
    prizesOrder: null,
    init: function (enhancements, gamblePrizes, winnerPrizes) {
        this.enhancements = enhancements;
        this.gamblePrizes = gamblePrizes;
        this.winnerPrizes = winnerPrizes;
        var asort = function (a, b) {
            return a - b;
        };
        this.enhancements.sort(asort);
        if (this.gamblePrizes) {
            this.prizesOrder = [];
            for (var key in this.gamblePrizes)
                this.prizesOrder.push(key);
            this.prizesOrder.sort(asort);
            for (var color in this.gamblePrizes) {
                if (!this.gamblePrizes.hasOwnProperty(color))continue;
                this.gamblePrizes[color].sort(function (a, b) {
                    return a[1] - b[1];
                });
            }
        }
    },
    enhanceToText: function (i) {
        switch (i) {
            case 0:
                return "Обычные";
                break;
            case 1:
                return "Необычные";
                break;
            case 2:
                return "Редкие";
                break;
            case 3:
                return "Уникальные";
                break;
        }
        return "Unkown";
    },
    enhanceToColor: function (enhance) {
        for (var i = 0; i < this.enhancements.length; i++) {
            if (enhance == this.enhancements[i]) {
                switch (i) {
                    case 0:
                        return "grey";
                        break;
                    case 1:
                        return "green";
                        break;
                    case 2:
                        return "blue";
                        break;
                    case 3:
                        return "gold";
                        break;
                }
            }
        }
        return "grey";
    },
    show: function (selectedEnhance, withWinnerPrizes) {
        var element = $("<div id='wof-prizes'>"
            + "<div class='prizes-enhance' />"
            + "<div class='prizes-winner' />"
            + "</div>");
        var enhanceEl = $('.prizes-enhance', element), winnerEl = $('.prizes-winner', element), opacity = 0.2, title = "";
        var newSection = function (background, title) {
            return $("<div class='wof-prize-section'>"
                + "<div class='section-border' />"
                + "<div class='section-bg' style='background:" + background + ";' />"
                + "<div class='section-legend'>" + title + "</div>"
                + "<div class='section-content' />"
                + "</div>");
        };
        for (var i = 0; i < this.prizesOrder.length; i++) {
            var enhance = this.prizesOrder[i], section, prizesContainer;
            if (enhance == selectedEnhance)
                opacity = 1.0;
            section = newSection(this.enhanceToColor(enhance), this.enhanceToText(i));
            prizesContainer = $(".section-content", section);
            section.attr("title", opacity != 1.0 ? "Исключённые" : "Активен").css("opacity", opacity)
            items = this.gamblePrizes[enhance];
            for (var j = 0; j < items.length; j++) {
                prizesContainer.append(new tw2widget.TableRowItem(ItemManager.get(items[j])).getMainDiv());
            }
            if (i != 0)enhanceEl.append("<div class='wof-section-sepv' />");
            enhanceEl.append(section);
        }
        if (withWinnerPrizes && this.winnerPrizes.length) {
            var section = newSection('lightyellow', 'Приз за рекорд мира').attr('title', "Игрок с лучшей серией побед в мире в конце турнира получит эти предметы.")
            var fieldset = $('.section-content', section);
            for (var i = 0; i < this.winnerPrizes.length; i++) {
                fieldset.append(new tw2widget.TableRowItem(ItemManager.get(this.winnerPrizes[i])).getMainDiv());
            }
            winnerEl.append("<div class='wof-section-seph' />", section);
        }
        enhanceEl.append("<div style='clear: both;' />");
        element.append(enhanceEl, winnerEl);
        new west.gui.Dialog("Призы", element).addButton("ok").show();
    }
});

west.define('west.wof.WofBaseWindow', null, {
    window_: null, wof: null, name: null, title: null, failed: false, init: function (wofId, name, title) {
        this.name = name;
        this.title = title;
        west.wof.WofManager.load(wofId, this.onLoaded.bind(this), this.onFail.bind(this));
    }, show: function () {
        this.window_ = wman.open(this.name, null, 'wheeloffortune noreload').setTitle(this.title).setMiniTitle(this.title);
        if (this.notOpened)
            this.onFail();
    }, onLoaded: function (wof) {
        this.wof = wof;
    }, onFail: function () {
        this.failed = true;
        if (this.window_) {
            this.window_.appendToContentPane('<div class="not-opened">'
                + '<span>' + "Ты смотришь в пустоту." + '</span>'
                + '</div>');
        }
    }
});

west.namespace('west.wof.WofXmasWindow', {
    open: function () {
        var window = wman.open("xmas2012", null, "xmas2012").setTitle("Новогодняя лотерея").setMiniTitle("Новогодняя лотерея");
        var wof = null, payhandler = null, els = {};
        paymethod = null, animating = false;
        var update = function () {
            els.groupo.empty().append(s("Раунды лучшего игрока: %1", wof.mode.mostrounds), "<br />", s("Твои раунды: %1", wof.mode.ownrounds));
            els.paymethods.css("display", !wof.mode.freespin ? "block" : "none");
            els.spinbtn.setCaption(wof.mode.freespin ? "Бесплатный раунд" : "Играть");
            els.nextfree.text(s("Следующий бесплатный раунд: %1", wof.mode.freespin ? "сейчас" : "Завтра"));
        };
        var showGamble = function (method) {
            if (false !== animating)
                return animating();
            if (wof.mode.freespin)method = 0;
            var enhance = 0, content = $('<div id="gambledialog"/>').append($('<div class="enhancements"/>').attr("title", "Исключая худшие категории предметов, ты повышаешь свой шанс выиграть лучшие.").append("<div class='etitle'>" + "Повысь свой шанс" + "</div>"), $(new west.gui.Button("Подсказка", function () {
                wof.prizes.show(enhance);
            }).getMainDiv()).addClass('infobtn').attr("title", "Показывает категории призов."), '<div class="costs"/>');
            var enhcdiv = $(".enhancements", content);
            var callback = function () {
                enhance = this.getValue();
                var k = null;
                for (var i = 0; i < wof.prizes.enhancements.length; i++) {
                    if (enhance == wof.prizes.enhancements[i])k = i;
                    $("#enh-" + wof.prizes.enhancements[i]).css("opacity", null != k ? 1.0 : 0.2);
                }
                $(".costs", content).empty().append(payhandler.toText(method, enhance));
            };
            for (var i = 0; i < wof.prizes.enhancements.length; i++) {
                var k = wof.prizes.enhancements[i], label = $("<span>").append(k, " ", west.gui.Icon.get("nugget")), div = $("<div class='enh' />");
                var chk = new west.gui.Checkbox(0 == k ? "Ничего" : label, 'enhance').setValue(k).setRadiobutton().setCallback(callback);
                if (0 == i)chk.setSelected();
                var visual = $("<div id='enh-" + k + "' class='giftenh c" + i + "' />").click(function (e) {
                    return function () {
                        wof.prizes.show(e);
                    }
                }(k)).attr("title", wof.prizes.enhanceToText(i));
                div.append(chk.getMainDiv(), visual);
                enhcdiv.append(div);
            }
            new west.gui.Dialog("Играть", content).addButton("Начать", function () {
                doGamble(method, enhance);
            }).addButton("cancel").show();
        };
        var doAnimation = function (callback) {
            if (false !== animating)return;
            var maxLoops = 4, duration = 400, last = null, loop = 0;
            animating = function () {
                loop = maxLoops;
            };
            var start = function () {
                var r = null;
                do {
                    r = Math.floor(Math.random() * els.shoes.length);
                } while (r == last);
                last = r;
                els.shoes[r].fadeIn(duration, function () {
                    loop++;
                    if (loop < maxLoops) {
                        els.shoes[r].fadeOut(duration, start);
                    } else {
                        if (callback)callback();
                        els.shoes[r].fadeOut(duration);
                        animating = false;
                    }
                });
            };
            start();
        };
        var doGamble = function (payId, enhance) {
            if (!payhandler.checkPayable(payId, enhance))
                return;
            wof.process(null, {paymethod: payId, enhance: enhance}, function (resp) {
                doAnimation(function () {
                    GameGift.enqueue("wof", [resp.outcome.itemId, wof.prizes.enhanceToColor(resp.outcome.itemEnhance)]);
                    Character.setNuggets(parseInt(resp.nuggets));
                    wof.mode.freespin = false;
                    wof.mode.ownrounds++;
                    wof.mode.mostrounds = Math.max(wof.mode.ownrounds, resp.mostrounds);
                    update();
                });
            });
        };
        west.wof.WofManager.load(1, function (w) {
            wof = w;
            payhandler = new west.wof.WofPayHandler().addPayOption(new west.wof.WofPayOption(0, "Time").setHideDisplay(true)).addPayOption(new west.wof.WofPayOptionNugget(1, wof.mode.paymethods[1])).addPayOption(new west.wof.WofPayOptionBond(2, wof.mode.paymethods[2])).setEnhancePayOption(1).setFallbackPay(1, function (enhance) {
                return function () {
                    doGamble(1, enhance);
                }
            });
            els.groupo = $("<div class='gamblingtimes'/>").attr("title", "Лучший игрок по количеству раундов в конце игры получит все наборы доступные в этой лотерее.")
            els.nextfree = $("<div class='nextfree'/>");
            els.paymethods = payhandler.toCheckbox("paymethod", function () {
                paymethod = this.getValue();
            });
            var onClick = function () {
                showGamble(paymethod);
            }
            els.spinbtn = new west.gui.Button("Играть", onClick).setWidth(215).addClass("spinbtn");
            els.shoes = [$("<div class='shoe01' />"), $("<div class='shoe02' />"), $("<div class='shoe03' />")];
            els.clkarea = $("<div class='clkarea' />").click(onClick);
            update();
            window.appendToContentPane(els.nextfree, els.spinbtn.getMainDiv(), els.groupo, els.paymethods, els.clkarea);
            for (var i = 0; i < els.shoes.length; i++)
                window.appendToContentPane(els.shoes[i]);
        });
    }
});
;
(function () {
    var EasterOpponent = function (id, opponentName, enhance) {
        this.id = id;
        this.opponentName = opponentName;
        this.enhance = enhance;
        this.failed = false;
        this.cooldown = 0;
        this.prizesFunc = null;
        this.duelFunc = null;
        this.resetFunc = null;
        this.divMain = $("<div class='opponent n" + this.id + "'>"
            + "<div class='opponent-wrapper'>"
            + "<div class='opp-name'>" + opponentName + "</div>"
            + "<div class='opp-image' />"
            + "<div class='opp-prizes' />"
            + "<div class='opp-interaction'>"
            + "<div class='opp-cost'>" + (0 == enhance ? "Даром" : enhance) + "</div>"
            + "<div class='opp-duel' />"
            + "<div class='opp-cooldown'><span></span></div>"
            + "</div>"
            + "</div>"
            + "</div>");
        var self = this;
        var handleInteract = function () {
            if (self.hasCooldown()) {
                self.resetFunc && self.resetFunc(self.enhance);
            } else {
                self.duelFunc && self.duelFunc(self.enhance);
            }
        };
        var handlePrizes = function () {
            self.prizesFunc && self.prizesFunc(self.enhance);
        };
        this.$('.opp-prizes').click(handlePrizes).attr('title', "Призы");
        this.$('.opp-image').click(handleInteract).attr('title', opponentName);
        this.$('.opp-duel').click(handleInteract).attr('title', "Дуэль")
        this.clearCooldown();
    };
    EasterOpponent.prototype = new west.gui.Component({
        setFailed: function (state) {
            this.failed = state;
            this.$('.opp-cost').text((0 == this.enhance || this.failed) ? "Даром" : this.enhance);
        }, hasCooldown: function () {
            return 0 != this.cooldown;
        }, clearCooldown: function () {
            if (this._cooldownTicker) {
                window.clearInterval(this._cooldownTicker);
            }
            this.cooldown = 0;
            this._cooldownTicker = null;
            this.$('.opp-cooldown span').text('Ждёт'.escapeHTML());
            this.$('.opp-duel').removeClass('cooldown');
            return this;
        }, setCooldown: function (timestamp) {
            this.cooldown = timestamp;
            if (null == this._cooldownTicker) {
                var el = this.$('.opp-cooldown span'), self = this, cb;
                this.$('.opp-duel').addClass('cooldown');
                this._cooldownTicker = window.setInterval(cb = function () {
                    var timeLeft = (self.cooldown - (new ServerDate().getTime()) / 1000);
                    if (timeLeft < 0)self.clearCooldown(); else el.text(timeLeft.formatDuration());
                }, 1000);
                cb();
            }
        }
    });
    west.namespace('west.wof.WofEasterWindow', {
        open: function () {
            var window = wman.open("wofeaster", null, "wofeaster noreload").setTitle("Весенний турнир").setMiniTitle("Весенний турнир");
            var loader = $("<div class='loader' />");
            window.appendToContentPane(loader);
            window.showLoader = function () {
                loader.show();
            };
            window.hideLoader = function () {
                loader.hide();
            };
            var wof = null, resetPayHandler = null, sneakyPayHandler = null, streakEl = null, resetButton = null, opponents = {}, eggsPerNugget = west.get('Game.sesData.Easter.premium');
            var init = function () {
                resetPayHandler = new west.wof.WofPayHandler().addPayOption(new west.wof.WofPayOptionNugget(0, wof.mode.resetCost)).addPayOption(new west.wof.WofPayOptionSES(3, wof.mode.resetCost * eggsPerNugget, 'Easter')).setFallbackPay(0, function (enhance) {
                    return function () {
                        reset.exec(0);
                    }
                });
                sneakyPayHandler = new west.wof.WofPayHandler().addPayOption(new west.wof.WofPayOptionNugget(0, wof.mode.sneakyCost)).addPayOption(new west.wof.WofPayOptionSES(3, wof.mode.sneakyCost * eggsPerNugget, 'Easter')).setFallbackPay(0, function (enhance) {
                    return function () {
                        sneakyshot.exec(0);
                    }
                });
                var cooldowns = wof.mode.cooldowns, enhanceStates = wof.mode.enhanceStates, names = wof.mode.opponentNames, enhance, opponent;
                for (var i = 0; i < wof.prizes.enhancements.length; i++) {
                    enhance = wof.prizes.enhancements[i];
                    opponent = new EasterOpponent(i, names[enhance], enhance);
                    opponent.prizesFunc = function (enhance) {
                        wof.prizes.show(enhance, true)
                    };
                    opponent.duelFunc = duel.offer;
                    opponent.resetFunc = reset.offer;
                    if (enhanceStates[enhance])
                        opponent.setFailed(enhanceStates[enhance].failed);
                    if (cooldowns[enhance])
                        opponent.setCooldown(cooldowns[enhance].cdstamp);
                    opponents[enhance] = opponent;
                }
            };
            var initDOM = function () {
                for (var enhance in opponents) {
                    window.appendToContentPane(opponents[enhance].getMainDiv());
                }
                streakEl = $("<div class='gamblingtimes' />");
                streakEl.attr("title", "<h2 style='padding: 5px;'>" + "Серия побед" + "</h2>"
                    + "<ul style='padding: 0 0 0 25px;'>"
                    + "<li>" + "Если ты проиграешь дуэль, твоя текущая серия будет обнулена."
                    + "<li>" + "Твоя лучшая серия побед будет сохранена." + "</li>"
                    + "<li>" + "Игрок с лучшей в мире серией побед в конце турнира получит уникальный приз."
                    + "</ul>");
                summaryDiv = $("<div class='summary-reward'>"
                    + "<div class='summary-item' />"
                    + "<div class='summary-stage' />"
                    + "</div>");
                resetButton = new west.gui.Button("Сбросить время" + " <div class='dat_icon'></div>", reset.offer).addClass("resetbutton").setWidth(200);
                window.appendToContentPane(streakEl, resetButton.getMainDiv());
                window.appendToContentPane(summaryDiv, resetButton.getMainDiv());
                updateDOM();
            };
            var updateDOM = function () {
                var worldStreak = wof.mode.streak.worldStreak, topStreak = wof.mode.streak.topStreak, currentStreak = wof.mode.streak.streak;
                updateSummary();
                streakEl.empty().append("<div class='worldstreak_icon'></div>"
                    + "<div class='worldstreak'>"
                    + "<b>" + worldStreak + "</b>"
                    + "</div>"
                    + "<div class='yourtop_icon'></div>"
                    + "<div class='yourtop'>"
                    + "<b>" + topStreak + "</b>"
                    + "</div>"
                    + "<div class='current_icon'></div>"
                    + "<div class='current'>"
                    + "<b>" + currentStreak + "</b>"
                    + "</div>");
                var showReset = false;
                for (var enhance in opponents) {
                    showReset |= opponents[enhance].hasCooldown();
                }
                if (showReset)$(resetButton.getMainDiv()).show(); else $(resetButton.getMainDiv()).hide();
            };
            var duel = {
                offer: function (enhance) {
                    var costEl = $("<div style='padding: 15px 0 0 0;' />");
                    if (0 != enhance && opponents[enhance].failed) {
                        costEl.append("<b>" + "Последний поединок с этим противником был не в твою пользу, и теперь ты можешь вызвать его бесплатно." + "</b>");
                    } else {
                        costEl.append("<b>" + "Необходимо:" + "</b>" + " " + enhance + " ", west.gui.Icon.get("nugget"));
                    }
                    var infoEl = $("<ul style='text-align: left; font-weight: bold; padding: 5px 0 0 15px;'>"
                        + "<li>" + "На весеннем турнире ты не потеряешь здоровье." + "</li>"
                        + "<li>" + "Проигранные дуэли остаются бесплатными, пока ты не победишь." + "</li>"
                        + "<li>" + "После каждой дуэли противнику нужна передышка." + "</li>"
                        + "</ul>");
                    new west.gui.Dialog("Дуэль", $("<div style='text-align: center;' />").append("Бросай вызов! Если ты победишь, награда не заставит себя ждать. Проиграешь — серия побед начнётся заново. Но не волнуйся, здоровье ты не потеряешь.", infoEl, costEl), west.gui.Dialog.SYS_QUESTION).addButton("yes", function () {
                        duel.exec(enhance);
                    }).addButton("no").setModal(true, true, true).show()
                }, exec: function (enhance) {
                    var opponent = opponents[enhance];
                    if (opponent.hasCooldown()) {
                        return reset.offer();
                    }
                    wof.process("duel", {enhance: enhance}, function (resp) {
                        opponent.setFailed(null == resp.outcome);
                        opponent.setCooldown(resp.cdstamp);
                        Character.setNuggets(parseInt(resp.nuggets));
                        wof.mode.streak = resp.streak;
                        var popupDelay = 1 == Config.get('duel.viewtype') ? 12000 : 0;
                        if (resp.report) {
                            ReportWindow.open(resp.report.report_id, resp.report.hash, undefined, undefined, undefined, true);
                        }
                        var engagePopup = function () {
                            if (opponent.failed) {
                                sneakyshot.offer();
                            } else {
                                if (wof.mode.streak.streak > wof.mode.streak.topStreak && undefined !== wof.mode.summaryRewards[wof.mode.streak.streak]) {
                                    GameGift.enqueue("wof", [wof.mode.summaryRewards[wof.mode.streak.streak], "grey"]);
                                }
                                GameGift.enqueue("wof", [resp.outcome.itemId, wof.prizes.enhanceToColor(resp.outcome.itemEnhance)]);
                            }
                            $(document).off('click.wof');
                        };
                        var timeout = setTimeout(engagePopup, popupDelay);
                        $(document).on('click.wof', function () {
                            clearTimeout(timeout);
                            engagePopup();
                        })
                        updateDOM();
                    }, null, window);
                }
            };
            var reset = {
                offer: function () {
                    var payId = 0;
                    var cost = $("<div style='padding: 15px 0 0 0;'/>");
                    var box = resetPayHandler.toCheckbox("", function () {
                        payId = this.getValue();
                        cost.empty().append(resetPayHandler.toText(payId, 0));
                    });
                    new west.gui.Dialog("Открыть противников", $("<div style='text-align: center;' />").append("Ты точно хочешь открыть всех противников, чтобы можно было их вызвать на дуэль?", cost, $("<div style='padding: 15px 0 0 0;'/>").append(box)), west.gui.Dialog.SYS_QUESTION).addButton("yes", function () {
                        reset.exec(payId);
                    }).addButton("no").setModal(true, true, true).show()
                }, exec: function (payId) {
                    if (!resetPayHandler.checkPayable(payId, 0)) {
                        return;
                    }
                    wof.process("reset", {payid: payId}, function (resp) {
                        Character.setNuggets(parseInt(resp.nuggets));
                        for (var k in opponents)opponents[k].setCooldown(0);
                        updateDOM();
                        new west.gui.Dialog("Открыть противников", $("<div style='text-align: center;' />").append("Противники снова доступны", $("<div style='padding: 15px 0 0 0;'/>"))).setModal(true, true, true).addButton("ok", function () {
                        }).show();
                    }, null, window);
                }
            };
            var updateSummary = function () {
                var sr = $(".summary-reward", this.divMain);
                var currentStage = parseInt(wof.mode.streak.topStreak), nextStage = -1;
                for (var k in wof.mode.summaryRewards) {
                    k = parseInt(k);
                    if (currentStage < k || isNaN(currentStage)) {
                        nextStage = k;
                        break;
                    }
                }
                if (-1 == nextStage) {
                    $(".summary-item", sr).empty().append("<div class='winwin'></div>");
                    $(".summary-stage", sr).empty().append(s("Побед до рекорда мира: %1", wof.mode.streak.worldStreak - wof.mode.streak.topStreak)).addClass('no-rewards');
                } else {
                    var item = new tw2widget.InventoryItem(ItemManager.get(wof.mode.summaryRewards[nextStage]));
                    $(".summary-item", sr).empty().append(item.getMainDiv());
                    $(".summary-stage", sr).empty().append("<span class='reward-title'>" + s("Побед до следующего приза: %1", nextStage - wof.mode.streak.streak) + "</span>" + "<span class='reward-stage'></span>");
                }
            };
            var sneakyshot = {
                offer: function () {
                    var payId = 0;
                    var cost = $("<div style='padding: 15px 0 0 0;'/>");
                    var box = sneakyPayHandler.toCheckbox("", function () {
                        payId = this.getValue();
                        cost.empty().append(resetPayHandler.toText(payId, 0));
                    });
                    new west.gui.Dialog("Поражение", $("<div style='text-align: center;' />").append("Дуэль проиграна! Придётся начинать серию побед заново, но твой противник предлагает решить этот вопрос за небольшое… вознаграждение.", cost, $("<div style='padding: 15px 0 0 0;'/>").append(box)), west.gui.Dialog.SYS_QUESTION).addButton("Подкупить", function () {
                        sneakyshot.exec(payId);
                    }).addButton("no").setModal(true, false, true).show()
                }, exec: function (payId) {
                    if (!sneakyPayHandler.checkPayable(payId, 0)) {
                        return;
                    }
                    wof.process("sneakyshot", {payid: payId}, function (resp) {
                        Character.setNuggets(parseInt(resp.nuggets));
                        opponents[resp.enhance].setFailed(false);
                        wof.mode.streak = resp.streak;
                        if (wof.mode.streak.streak > wof.mode.streak.topStreak && undefined !== wof.mode.summaryRewards[wof.mode.streak.streak]) {
                            GameGift.enqueue("wof", [wof.mode.summaryRewards[wof.mode.streak.streak], "grey"]);
                        }
                        GameGift.enqueue("wof", [resp.outcome.itemId, wof.prizes.enhanceToColor(resp.outcome.itemEnhance)]);
                        updateDOM();
                    }, null, window);
                }
            };
            west.wof.WofManager.load(2, function (w) {
                wof = w;
                init();
                initDOM();
            });
        }
    });
})(jQuery);

var BuildingIcon = function (lvl, plural) {
    if (plural) {
        var txt = s(ngettext('Уровень', new Array('Уровень', 'Уровня', 'Уровней'), lvl), lvl);
        return s('<span class="building-lvl">%1 <img src="https://westrus.innogamescdn.com/images/window/wof/indep/building-icon.png" width="18px" height="18px"> %2</span>', lvl, txt);
    }
    return s('<span class="building-lvl">%1. %2 ' + 'Уровень' + '</span>', lvl, s('<img src="https://westrus.innogamescdn.com/images/window/wof/indep/building-icon.png" width="18px" height="18px" title="%1">', s('Блюд: %1', lvl)));
};
var ConstructionSite = west.createClass(west.gui.Component, {
    init: function (i, enhance, onClick, prizesFunc, finishFunc) {
        this.enhance = enhance;
        this.collected = true;
        this.finishFunc = finishFunc;
        this.stageMultiplier = i + 1;
        this.divMain = $("<div class='construction site0" + i + "'>");
        if (i != 0) {
            this.divMain.append("<div class='icon' />");
        }
        this.divMain.append("<div class='cost' />"
            + "<div class='interaction' />"
            + "<div class='stage'>" + s('%1 уровень', 0) + "</div>"
            + "<div class='prizes' />"
            + "</div>");
        this.$(".interaction").click(onClick.bind(this)).addMousePopup('Начни строительство и получи награду после того, как работа будет завершена.' + '<br />' + s('Одна постройка даст тебе %1.', BuildingIcon(this.stageMultiplier, true)));
        this.$('.prizes').click(prizesFunc.bind(this)).addMousePopup('Призы');
        this.$(".cost").text((enhance > 0) ? enhance : 'free');
    }, setBuildingStage: function (stage) {
        this.$(".stage").text(s("%1 уровень", stage * this.stageMultiplier));
        return this;
    }, setCollected: function (collected) {
        this.collected = collected;
        this.updateState();
        return this;
    }, clearBuildTime: function () {
        if (this._buildTicker)
            window.clearInterval(this._buildTicker);
        this.buildTime = 0;
        this._buildTicker = null;
        this.finishFunc();
        this.updateState();
        return this;
    }, setBuildTime: function (timestamp) {
        this.buildTime = timestamp;
        if (this.buildTime && null == this._buildTicker) {
            var el = this.$(".interaction").empty();
            this._buildTicker = window.setInterval(cb = function () {
                var timeLeft = (this.buildTime - (new ServerDate().getTime()) / 1000);
                if (timeLeft < 0)this.clearBuildTime(); else el.text(timeLeft.formatDuration());
            }.bind(this), 1000);
        }
        this.updateState();
        return this;
    }, updateState: function () {
        if (this.buildTime)return;
        var text = "";
        if (!this.collected) {
            text = "Взять";
        } else {
            text = "Строить";
        }
        this.$(".interaction").empty().append(text);
    }
});
west.define('west.wof.WofIndepWindow', west.wof.WofBaseWindow, {
    timePayHandler: null, buildPayHandler: null, constructions: [], fireworksPerNugget: null, init: function () {
        this.callParent(7, "indepwof", "День независимости");
        this.divMain = $("<div>"
            + "<div class='halvetime' />"
            + "<div class='summary-reward'>"
            + "<div class='summary-item' />"
            + "<div class='summary-stage' />"
            + "</div>"
            + "<div class='constructions' />"
            + "<div class='ranking'>"
            + "<div class='world-points'>"
            + "<h2>" + "Следующий игрок" + "</h2>"
            + "<span>-</span>"
            + "</div>"
            + "<div class='your-points'>"
            + "<h2></h2>"
            + "<span>-</span>"
            + "</div>"
            + "<div class='accuring-points'>"
            + "<h2>" + "Предыдущий игрок" + "</h2>"
            + "<span>-</span>"
            + "</div>"
            + "</div>"
            + "</div>");
        this.constructions = [];
        $('.ranking', this.divMain).addMousePopup("Здесь показан текущий уровень твоих построек, а также игроков, которые чуть лучше и чуть хуже тебя по рейтингу.");
    }, show: function () {
        this.callParent();
        this.window_.appendToContentPane(this.divMain);
        this.setBackground_(1);
    }, onLoaded: function (wof) {
        this.callParent(wof);
        this.fireworksPerNugget = west.get('Game.sesData.Independence.premium');
        this.buildPayHandler = new west.wof.WofPayHandler().setTitle("Строить").setMessage("Точно улучшить это здание?").addPayOption(new west.wof.WofPayOptionNugget(0, 0)).addPayOption(new west.wof.WofPayOptionSES(3, 0, 'Independence')).setEnhancePayOption(0).setFallbackPay(0, function (enhance) {
            self.doBuild();
        });
        this.timePayHandler = new west.wof.WofPayHandler().setTitle("Сократить время").setMessage("Точно сократить время строительства всех зданий на 2 часа?").addPayOption(new west.wof.WofPayOptionNugget(0, wof.mode.timeCost)).addPayOption(new west.wof.WofPayOptionSES(3, wof.mode.timeCost * this.fireworksPerNugget, 'Independence')).setFallbackPay(0, function (enhance) {
            self.doHalveTime();
        });
        this.btnHalve = new west.gui.Button("Ускорить строительство", function () {
            this.selectHalveTime();
        }.bind(this), undefined, undefined, 'Здесь ты можешь сократить время строительства всех зданий на 2 часа.').setWidth(200);
        if (!wof.mode.canHalveTime)this.btnHalve.disable();
        $(".halvetime", this.divMain).append(this.btnHalve.getMainDiv());
        this.updateSummary();
        this.updateRanking();
        this._initConstructions(wof);
    }, _initConstructions: function (wof) {
        var self = this;
        var onClick = function () {
            if (this.buildTime) {
                self.selectHalveTime(this.enhance);
            } else if (0 == this.buildTime && !this.collected) {
                self.doCollect(this.enhance);
            } else {
                self.selectConstruction(this.enhance);
            }
        };
        var prizesFunc = function () {
            wof.prizes.show(this.enhance, true);
        };
        var onFinish = function () {
            for (var i = 0; i < wof.prizes.enhancements.length; i++) {
                var ix = wof.prizes.enhancements[i];
                if (self.constructions[ix].buildTime) {
                    self.btnHalve.enable();
                    return;
                }
            }
            self.btnHalve.disable();
        };
        var constrEl = $(".constructions", this.divMain);
        var constr, state, enhance;
        for (var i = 0; i < wof.prizes.enhancements.length; i++) {
            enhance = wof.prizes.enhancements[i];
            constr = new ConstructionSite(i, enhance, onClick, prizesFunc, onFinish);
            if (wof.mode.states[enhance]) {
                state = wof.mode.states[enhance];
                if (state.being_built)constr.setBuildTime(state.finish_date); else constr.setBuildTime(0);
                constr.setBuildingStage(state.stage).setCollected(state.collected);
            } else {
                constr.updateState();
            }
            this.constructions[enhance] = constr;
            constrEl.append(constr.getMainDiv());
        }
    }, updateSummary: function () {
        var sr = $(".summary-reward", this.divMain);
        var currentStage = parseInt(this.wof.mode.summaryStage), nextStage = -1;
        for (var k in this.wof.mode.summaryRewards) {
            k = parseInt(k);
            if (currentStage < k || isNaN(currentStage)) {
                nextStage = k;
                break;
            }
        }
        if (-1 == nextStage) {
            $(".summary-item", sr).empty();
            $(".summary-stage", sr).empty().append("Наград больше нет").addClass('no-rewards');
            this.setBackground_(k);
        } else {
            var item = new tw2widget.InventoryItem(ItemManager.get(this.wof.mode.summaryRewards[nextStage]));
            $(".summary-item", sr).empty().append(item.getMainDiv());
            $(".summary-stage", sr).empty().append("<span class='reward-title'>" + "Подарок" + "</span>" + "<span class='reward-stage'>" + BuildingIcon(nextStage) + "</span>").addMousePopup(s('Построй здание и получи за свой вклад вознаграждение.<br /><br /><b>Твой текущий уровень:</b> %1<br /><b>Следующий подарок:</b> %2', ((this.wof.mode.ranking.your.points) ? BuildingIcon(this.wof.mode.ranking.your.points) : '-'), BuildingIcon(nextStage)));
            this.setBackground_(nextStage);
        }
    }, setBackground_: function (stage) {
        var bg = $('.tw2gui_inner_window_bg2', this.window_.getMainDiv());
        var oldStage = bg.attr('class').match(/indep-stage-(\d+)/);
        if (oldStage && oldStage[1]) {
            bg.removeClass('indep-stage-' + oldStage[1]);
        }
        bg.addClass('indep-stage-' + stage);
    }, updateRanking: function () {
        var ranking = this.wof.mode.ranking;
        if (ranking.world) {
            $(".world-points span", this.divMain).html(BuildingIcon(ranking.world.points));
        }
        if (ranking.your) {
            $(".your-points span", this.divMain).html(BuildingIcon(ranking.your.points));
        }
        if (ranking.accuring) {
            $(".accuring-points span", this.divMain).html(BuildingIcon(ranking.accuring.points));
        }
        $('.your-points h2', this.divMain).text(s("Твой ранг: %1", (ranking.your.rank) ? ranking.your.rank : '-'));
    }, selectConstruction: function (enhance) {
        this.buildPayHandler.payOptions[3].cost = (this.fireworksPerNugget * enhance) - enhance;
        this.buildPayHandler.askUser(enhance, this.doBuild.bind(this));
    }, selectHalveTime: function () {
        this.timePayHandler.askUser(null, this.doHalveTime.bind(this));
    }, doBuild: function () {
        var data = {payid: this.buildPayHandler.getSelectedPayId(), enhance: this.buildPayHandler.getSelectedEnhance()};
        this.wof.process("build", data, function (resp) {
            Character.setNuggets(parseInt(resp.nuggets));
            this.constructions[resp.construction_id].setCollected(false).setBuildTime(resp.finish_date);
            this.btnHalve.enable();
        }.bind(this), this.window_);
    }, doHalveTime: function (enhance) {
        var data = {payid: this.timePayHandler.getSelectedPayId()};
        this.wof.process("halvetime", data, function (resp) {
            Character.setNuggets(parseInt(resp.nuggets));
            Character.setUpb(parseInt(resp.coupons));
            for (var k in resp.stamps) {
                if (!resp.stamps.hasOwnProperty(k))continue;
                this.constructions[k].setBuildTime(resp.stamps[k].finish_date);
            }
        }.bind(this), this.window_);
    }, doCollect: function (enhance) {
        this.wof.process("collect", {enhance: enhance}, function (resp) {
            this.constructions[resp.construction_id].setBuildingStage(resp.stage).setCollected(true);
            this.wof.mode.summaryStage = resp.stagePoints;
            this.wof.mode.ranking = resp.ranking;
            this.updateSummary();
            this.updateRanking();
            var color = this.getColorByEnhance(resp.outcome.itemEnhance);
            GameGift.enqueue("wof", [resp.outcome.itemId, color, function () {
                var sumReward = this.wof.mode.summaryRewards[resp.stageOutcome.stage];
                if (sumReward) {
                    new tw2widget.reward.RewardDialog("Награда за строительство", s("Достигнут %1-й общий уровень", resp.stageOutcome.stage)).addReward(new tw2widget.reward.ItemReward(sumReward)).show();
                }
            }.bind(this)]);
        }.bind(this), this.window_);
    }, getColorByEnhance: function (enhance) {
        switch (enhance) {
            case 800:
                return 'yellow';
                break;
            case 150:
                return 'blue';
            case 25:
                return 'green';
                break;
            default:
                return 'gray';
                break;
        }
    }
});

west.define('west.wof.WofHeartsWindow', west.wof.WofBaseWindow, {
    animateCount: 0, animateSpeed: 100, fullRoundDone: false, paySpinHandler: null, init: function () {
        this.callParent(6, "heartswof", "День святого Валентина");
        this.divMain = $('<div />').append($('<div class="wof_description" />').text("Крути колесо фортуны и забирай призы! Один раз в день бесплатно, за небольшую плату — дополнительно. Ни пуха ни пера!"), $('<div class="reward_container top" />'), $('<div class="reward_container left" />'), $('<div class="reward_container right" />'), $('<div class="reward_container bottom" />'), $('<div class="first_purchaser" />'), $('<div class="next_spin" />'));
        if (!Player.premiumPurchase.hasFullBonus) {
            $(".first_purchaser", this.divMain).append((new west.gui.Button('Дополнительный бесплатный раунд', function () {
                new west.player.PremiumPurchase();
            })).getMainDiv());
        }
        var opts = {boundto: this.window_};
        EventHandler.listen('premium_purchase_claimed', function () {
            $(".first_purchaser", this.divMain).remove();
        }, this);
    }, show: function () {
        this.callParent();
        this.window_.appendToContentPane(this.divMain);
    }, onLoaded: function (wof) {
        this.callParent(wof);
        this.paySpinHandler = new west.wof.WofPayHandler().setTitle("Новая игра").setMessage("Точно сыграть?").addPayOption(new west.wof.WofPayOptionNugget(0, wof.mode.payDrawCost)).addPayOption(new west.wof.WofPayOptionBond(1, wof.mode.payDrawCost)).setFallbackPay(0, function (enhance) {
            self.doSpin();
        });
        this.paySpin = new west.gui.Button('', function () {
            this.selectDoSpin();
        }.bind(this), undefined, undefined, "Ты можешь сыграть и выиграть приз").setWidth(200);
        $(".next_spin", this.divMain).append(this.paySpin.getMainDiv());
        this._initRewards(this.wof.prizes.gamblePrizes[0]);
        this.initButton();
    }, initButton: function () {
        this.paySpin.setCaption((this.wof.mode.free > 0 ? 'Бесплатный раунд' : 'Новая игра'));
    }, selectDoSpin: function () {
        this.paySpinHandler.askUser(null, this.doSpin.bind(this), {
            free: this.wof.mode.free,
            text: "<b>" + s("Бесплатных игр: %1", this.wof.mode.free) + "</b>"
        });
    }, doSpin: function () {
        var data = {payid: this.paySpinHandler.getSelectedPayId()}
        this.wof.process("gamble", data, function (resp) {
            Character.setNuggets(parseInt(resp.nuggets));
            Character.setUpb(parseInt(resp.coupons));
            this.wof.mode.free = resp.free;
            this.initButton();
            this.animateRewards(resp.prize, resp.exchange_rewards ? resp.exchange_rewards[0] : false);
            EventHandler.signal('wof_used', ['heartswof', this.wof.mode.free]);
        }.bind(this), this.window_);
    }, animateRewards: function (prize, newPrizes) {
        this.paySpin.disable();
        var slot = this.getSlotByItemId(prize.itemId);
        this.animateCount = 0;
        var animation = function () {
            if (this.animateCount == 30) {
                this.animateCount = 0;
                this.fullRoundDone = true;
            }
            var reward = $(".reward_" + this.animateCount);
            var classChange = this.getColor(reward.data('itemId'));
            reward.addClass('overlay');
            reward.removeClass(classChange);
            if (this.animateCount == slot && this.fullRoundDone) {
                this.animateCount = 0;
                this.animateSpeed = 100;
                this.fullRoundDone = false;
                GameGift.enqueue("wof", [prize.itemId, this.wof.prizes.enhanceToColor(prize.itemEnhance)], function () {
                });
                if (newPrizes)this._initRewards(newPrizes);
                this.paySpin.enable();
                return;
            }
            if (this.animateCount + 5 >= slot && (this.fullRoundDone || (slot < 5 && this.animateCount > 25 + slot))) {
                this.animateSpeed += 150;
            }
            this.animateCount++;
            window.setTimeout(function () {
                reward.addClass(classChange);
                reward.removeClass('overlay');
                animation();
            }.bind(this), this.animateSpeed);
        }.bind(this);
        animation();
    }, getSlotByItemId: function (itemId) {
        result = [];
        for (var x = 0; x < this.rewards.length; x++) {
            if (itemId == this.rewards[x])result.push(x);
        }
        if (result.length < 1)throw new Error("Frontend / Backend not in sync.");
        return result[Math.floor(Math.random() * result.length)];
    }, getColor: function (id) {
        color = '';
        [42205, 41205, 40206, 11277, 10303, 43204].each(function (v) {
            if (v == id)color = 'blue';
        });
        [2561, 2562].each(function (v) {
            if (v == id)color = 'red';
        });
        [2560, 2559].each(function (v) {
            if (v == id)color = 'yellow';
        });
        [2137, 2138].each(function (v) {
            if (v == id)color = 'green';
        });
        return color;
    }, _initRewards: function (rewards) {
        rewards.shuffle();
        this.rewards = [];
        $(".top", this.divMain).empty();
        $(".right", this.divMain).empty();
        $(".bottom", this.divMain).empty();
        $(".left", this.divMain).empty();
        for (var i = 0; i < rewards.length; i++) {
            var rewardItem = new tw2widget.InventoryItem(ItemManager.get(rewards[i]));
            this.rewards[i] = rewards[i];
            rewardItem.getMainDiv().addClass("reward_" + i).addClass(this.getColor(rewards[i])).data('itemId', rewards[i]);
            if (i < 12) {
                $(".top", this.divMain).append(rewardItem.getMainDiv());
            } else if (i >= 12 && i <= 14) {
                $(".right", this.divMain).append(rewardItem.getMainDiv());
            } else if (i > 14 && i < 27) {
                $(".bottom", this.divMain).prepend(rewardItem.getMainDiv());
            } else {
                $(".left", this.divMain).prepend(rewardItem.getMainDiv());
            }
        }
    }
});

west.define('west.wof.FairBaseWindow', west.wof.WofBaseWindow, {
    clsGame_: '',
    gameType: '',
    payHandler: null,
    payId: null,
    paramId: null,
    resetted: true,
    init: function (clsGame, gameType) {
        this.clsGame_ = clsGame || '';
        this.gameType = gameType;
        this.callParent(3, 'fair', "Ярмарка");
        this.divMain = $("<div class='" + clsGame + "' />");
    },
    show: function () {
        this.callParent();
        EventHandler.listen(["char_nuggets_changed", "upb_changed"], function () {
            this.currency_.update(Character.nuggets, Character.upb);
        }, this, {boundto: this.window_});
        $('.tw2gui_window_inset', this.window_.divMain).append('<div class="fair-bg">'
            + '<div class="game ' + this.clsGame_ + '"></div>'
            + '<div class="base"></div>'
            + '</div>');
        this.window_.appendToContentPane('<div class="fair-content"></div>'
            + '<div class="fair-footer">'
            + '<div class="sep-hori"></div>'
            + '<div class="sep-vert left"></div>'
            + '<div class="sep-vert right"></div>'
            + '</div>');
        this.window_.$('.fair-content').append(this.buildBag_(), this.divMain);
        this.window_.$('.fair-footer').append(this.buildCurrency_());
    },
    onLoaded: function (wof) {
        this.callParent(wof);
        var self = this;
        this.payHandler = new west.wof.WofPayHandler().addPayOption(new west.wof.WofPayOptionNugget(0, wof.mode.payDrawCost)).addPayOption(new west.wof.WofPayOptionBond(1, wof.mode.payDrawCost)).setFallbackPay(0, function (enhance) {
            return function () {
                self.payId = 0;
                self.play();
            };
        });
        this.window_.$('.fair-footer').append(this.buildPayment_(wof.mode.payDrawCost), this.buildPlay_());
    },
    select: function (paramId) {
        this.paramId = paramId;
        var costEl = $("<div style='padding: 15px 0 0 0;' />"), text = "", self = this;
        if (this.wof.mode.free > 0) {
            text = s(ngettext("Бесплатных игр: %1", new Array("Бесплатных игр: %1", "Бесплатных игр: %1", "Бесплатных игр: %1"), this.wof.mode.free), this.wof.mode.free);
        } else {
            costEl.append(this.payHandler.toText(this.payId));
        }
        new west.gui.Dialog("Играть", $("<div style='text-align: center;' />").append(text + "<br />" + "Ты точно хочешь это выбрать?", costEl), west.gui.Dialog.SYS_QUESTION).addButton("yes", this.play.bind(this)).addButton("no", this.onFinish.bind(this)).setModal(true, this.onFinish.bind(this), true).show();
    },
    play: function () {
        if (this.wof.mode.free <= 0) {
            if (!this.payHandler.checkPayable(this.payId, 0))
                return;
        }
        this.btnPlay.setCaption('Ставки больше не принимаются!');
        this.btnPlay.disable();
        this.wof.process("draw", {payid: this.payId, cardid: this.paramId, gametype: this.gameType}, function (resp) {
            Character.setNuggets(parseInt(resp.nuggets));
            this.wof.mode.free = Math.max(0, this.wof.mode.free - 1);
            this.resetted = false;
            this.onPlayed && this.onPlayed.call(this, resp);
            EventHandler.signal('wof_used', ['fairwof', this.wof.mode.free]);
        }, this, this.window_);
    },
    prepare: function (card) {
        if (this.btnPlay.disabled)return;
        card = (typeof(card) == 'number') ? card : getRandomInt(0, this.wof.mode.cards - 1);
        if (!this.resetted) {
            this.onReset();
        }
        var interval = window.setInterval(function () {
            if (this.resetted) {
                window.clearInterval(interval);
                this.select(card);
            }
        }.bind(this), 100);
    },
    onPrize: function () {
        this.wof.prizes.show(0, false);
    },
    onFinish: function () {
        this.btnPlay.setCaption((this.wof.mode.free > 0) ? 'Бесплатный раунд' : 'Новая игра');
        this.btnPlay.enable();
    },
    onReset: function () {
        this.btnPlay.setCaption('Игру готовят');
        this.btnPlay.disable();
    },
    buildPayment_: function (price) {
        var that = this;
        return $('<div class="payment"></div>').append(this.payHandler.toCheckbox("fair-payment", function () {
            that.payId = this.getValue();
        }, -1));
    },
    buildPlay_: function () {
        this.btnPlay = new west.gui.Button((this.wof.mode.free > 0) ? 'Бесплатный раунд' : 'Играть', this.prepare, this).setWidth(180);
        ;
        return this.btnPlay.getMainDiv();
    },
    buildCurrency_: function () {
        this.currency_ = new tw2widget.currency(Character.nuggets, Character.upb);
        return this.currency_.getMainDiv();
    },
    buildBag_: function () {
        return $('<div class="prices">'
            + '<div class="bag" title="' + 'Показать призы'.escapeHTML() + '"></div>'
            + '</div>').on('click', this.onPrize.bind(this));
    }
});

var MentalistCard = west.createClass(west.gui.Component, {
    init: function (cardId, onClick) {
        this.cardId = cardId;
        this.cls = 'visual-' + this.cardId;
        this.flipped = false;
        this.spinned = false;
        this.divMain = $(''
            + '<div class="flipcard card ' + this.cls + '">'
            + '<div class="back"></div>'
            + '<div class="front">'
            + '<div class="content"></div>'
            + '<div class="highlight"></div>'
            + '</div>'
            + '</div>');
        this.divMain.on('click', function () {
            onClick(this.cardId);
        }.bind(this));
    }, flip: function (itemId) {
        if (this.flipped)return this;
        this.flipped = true;
        this.animate('shown', true);
        this.setItem(itemId);
        return this;
    }, spin: function (bool) {
        if (undefined !== bool) {
            this.spinned = bool;
        } else {
            this.spinned = !this.spinned;
        }
        this.animate('spin', this.spinned);
        return this;
    }, setItem: function (itemId) {
        if (itemId) {
            var item = new tw2widget.InventoryItem(ItemManager.get(itemId));
            $(".content", this.divMain).empty().append(item.getMainDiv());
        }
        return this;
    }, unflip: function () {
        this.flipped = false;
        this.animate('shown', false);
        return this;
    }, animate: function (from, bool) {
        this.divMain.toggleClass(from, bool);
        return this;
    }
});
west.define('west.wof.FairMentalistWindow', west.wof.FairBaseWindow, {
    cards: [], init: function () {
        this.callParent('mentalist', 'choose_card_game');
        this.divMain.addClass('cards');
    }, show: function () {
        this.callParent();
        this.window_.setTitle('Игра: Карты').setMiniTitle('Карты');
        this.window_.$('.fair-content').append(this.divMain);
    }, onLoaded: function (wof) {
        this.callParent(wof);
        for (var i = 0; i < wof.mode.cards; i++) {
            this.cards[i] = new MentalistCard(i, this.prepare.bind(this));
            this.divMain.append(this.cards[i].getMainDiv());
        }
    }, onPlayed: function (resp) {
        var self = this, currentCard = this.cards[this.paramId];
        currentCard.flip(resp.picked[0], this.wof.prizes.enhanceToColor(resp.picked[1]));
        setTimeout(function () {
            GameGift.enqueue("wof", [resp.picked[0], this.wof.prizes.enhanceToColor(resp.picked[1]), function () {
                for (var i = 0; i < this.cards.length; i++) {
                    if (currentCard.cardId == i)continue;
                    this.cards[i].flip(resp.outcome[i][0], this.wof.prizes.enhanceToColor(resp.outcome[i][1]));
                }
                this.onFinish();
            }.bind(this)]);
        }.bind(this), 1000);
    }, onReset: function () {
        this.callParent();
        for (var i = 0; i < this.cards.length; i++) {
            this.cards[i].unflip();
        }
        var that = this;
        window.setTimeout(function () {
            that.window_.$('.cards').animate({left: 650}, function () {
                that.window_.$('.cards').css('left', -630);
                that.window_.$('.cards').animate({left: 0}, function () {
                    that.resetted = true;
                });
            });
        }, 700);
    }
});

var RacingHorse = west.createClass(west.gui.Component, {
    init: function (horseId, onClick) {
        this.horseId = horseId;
        this.divMain = $("<div class='racing-row row-" + horseId + "'>"
            + "<div class='row-button'>"
            + "<div class='button-bgr' />"
            + "<div class='button-status' />"
            + "</div>"
            + "<div class='row-horse'>"
            + "<div class='horse' />"
            + "</div>"
            + "</div>");
        $('.row-button', this.divMain).click(function () {
            onClick(horseId);
        });
    }, run: function (speed) {
        this.move(speed);
        this.bounce();
        return this;
    }, move: function (speed) {
        var el = $(".horse", this.divMain);
        el.animate({left: $(".row-horse", this.divMain).width() - (el.width() / 2)}, speed, this.stop.bind(this));
    }, bounce: function () {
        var self = this;
        $(".row-horse", this.divMain).animate({top: '-10px'}, 500, function () {
            $(this).animate({top: 0}, 500, self.bounce.bind(self));
        });
        return this;
    }, stop: function () {
        $(".row-horse", this.divMain).stop().clearQueue();
        $(".horse", this.divMain).stop().clearQueue();
        return this;
    }, highlight: function () {
        this.divMain.addClass("selected");
        return this;
    }, reset: function () {
        this.stop();
        this.divMain.removeClass("selected");
        $(".row-horse", this.divMain).animate({top: 0}, 'slow');
        $(".horse", this.divMain).animate({'left': 0, 'top': 0}, 'slow');
        return this;
    }
});
west.define('west.wof.FairHorseRaceWindow', west.wof.FairBaseWindow, {
    horses: [], init: function () {
        this.callParent('horserace', 'horse_race');
    }, show: function () {
        this.callParent();
        this.window_.setTitle('Игра: Скачки').setMiniTitle('Скачки');
    }, onLoaded: function (wof) {
        this.callParent(wof);
        for (var i = 0; i < wof.mode.cards; i++) {
            this.horses[i] = new RacingHorse(i, this.prepare.bind(this));
            this.divMain.append(this.horses[i].getMainDiv());
        }
    }, onPlayed: function (resp) {
        AudioController.play('gunshot3');
        AudioController.play('horse_gallop');
        var speedRange = [2500, 2580], winnerRange = [20, 40], minSpeed = speedRange[1];
        for (var i = 0; i < this.horses.length; i++) {
            if (this.paramId == this.horses[i].horseId)
                continue;
            var speed = Math.random() * speedRange[1] + speedRange[0];
            minSpeed = Math.min(minSpeed, speed);
            this.horses[i].run(speed);
        }
        var winnerSpeed = minSpeed - (Math.random() * winnerRange[1] + winnerRange[0]);
        this.horses[this.paramId].run(winnerSpeed);
        setTimeout(function () {
            this.horses[this.paramId].highlight();
            GameGift.enqueue("wof", [resp.picked[0], this.wof.prizes.enhanceToColor(resp.picked[1])]);
            this.onFinish();
        }.bind(this), winnerSpeed);
    }, onReset: function () {
        this.callParent();
        for (var i = 0; i < this.horses.length; i++)
            this.horses[i].reset();
        window.setTimeout(function () {
            this.resetted = true;
        }.bind(this), 600);
    }
});

var Cup = west.createClass(west.gui.Component, {
    init: function (cardId, onClick, elCups) {
        this.elCups = elCups;
        this.cardId = cardId;
        this.flipped = false;
        this.cls = 'cup-position-' + cardId;
        this.divMain = $(''
            + '<div class="cup ' + this.cls + '">'
            + '<div class="highlight"></div>'
            + '</div>');
        this.divMain.on('click', function () {
            onClick(this.cardId);
        }.bind(this));
    }, flip: function (itemId) {
        if (this.flipped)return;
        this.flipped = true;
        this.animate(-50);
        this.elCups.append($('<div class="reward ' + this.cls + '" style="display:none"></div>').append(new tw2widget.InventoryItem(ItemManager.get(itemId)).getMainDiv()));
        $('.reward', this.elCups).fadeIn(800);
    }, unflip: function () {
        this.flipped = false;
        this.animate(50, function () {
            this.divMain.removeAttr('style');
        }.bind(this));
        $('.reward', this.elCups).fadeOut(400, function (el) {
            $('.reward', this.elCups).remove();
        }.bind(this));
    }, animate: function (value, onFinish) {
        var top = parseInt(this.divMain.css('top'));
        var left = parseInt(this.divMain.css('left'));
        this.divMain.animate({top: top + value}, 400, onFinish);
    }
});
west.define('west.wof.FairCupsWindow', west.wof.FairBaseWindow, {
    cups: [], init: function () {
        this.callParent('cups', 'shell_game');
    }, show: function () {
        this.callParent();
        this.window_.setTitle('Игра: Напёрстки').setMiniTitle('Напёрстки');
    }, onLoaded: function (wof) {
        this.callParent(wof);
        for (var i = 0; i < wof.mode.cards; i++) {
            this.cups[i] = new Cup(i, this.prepare.bind(this), this.divMain);
            this.divMain.append(this.cups[i].getMainDiv());
        }
    }, onPlayed: function (resp) {
        var currentCup = this.cups[this.paramId];
        currentCup.flip(resp.picked[0], this.wof.prizes.enhanceToColor(resp.picked[1]));
        setTimeout(function () {
            GameGift.enqueue("wof", [resp.picked[0], this.wof.prizes.enhanceToColor(resp.picked[1]), function () {
                for (var i = 0; i < this.cups.length; i++) {
                    if (currentCup.cardId == i)continue;
                    this.cups[i].flip(resp.outcome[i][0], this.wof.prizes.enhanceToColor(resp.outcome[i][1]));
                }
                this.onFinish();
            }.bind(this)]);
        }.bind(this), 800);
    }, onReset: function () {
        this.callParent();
        for (var i = 0; i < this.cups.length; i++) {
            this.cups[i].unflip(this.divMain);
        }
        window.setTimeout(function () {
            var runs = 0;
            var interval = window.setInterval(function () {
                if (runs > 3) {
                    window.clearInterval(interval);
                    window.setTimeout(function () {
                        this.resetted = true;
                    }.bind(this), 700);
                }
                var seq = getRandomSequence(0, this.cups.length - 1);
                this.cups.forEach(function (cup) {
                    cup.divMain.removeClass(cup.cls);
                    cup.cls = 'cup-position-' + seq.pop();
                    cup.divMain.addClass(cup.cls);
                });
                runs++;
            }.bind(this), 600);
        }.bind(this), 800);
    }
});

west.define('west.wof.FairWheelWindow', west.wof.FairBaseWindow, {
    init: function () {
        this.callParent('wheel', 'wheel_of_fortune');
        this.divMain.append("<div class='parts' />"
            + "<div class='buttons' />");
    }, show: function () {
        this.callParent();
        this.window_.setTitle('Игра: Колесо удачи').setMiniTitle('Колесо удачи');
    }, onLoaded: function (wof) {
        this.callParent(wof);
        var self = this, btns = $(".buttons", this.divMain), parts = $(".parts", this.divMain);
        for (var i = 0; i < wof.mode.cards; i++) {
            parts.append($("<div class='wheel-part visual-" + i + "'><div class='bgr'/></div>"));
            btns.append($("<div class='wheel-button visual-" + i + "' />").click(function (i) {
                return function () {
                    self.prepare(i);
                };
            }(i)));
        }
    }, onPlayed: function (resp) {
        var paramId = this.paramId;
        $(".wheel-button.visual-" + paramId).addClass("selected");
        var parts = $(".wheel-part .bgr"), times = 0, maxTimes = getRandomInt(2, 5), delay = 200;
        var showItems = function () {
            for (var i = 0; i < this.wof.mode.cards; i++) {
                var item = new tw2widget.InventoryItem(ItemManager.get(resp.outcome[i][0]));
                $(".wheel-part.visual-" + i).append(item.getMainDiv());
            }
        }.bind(this);
        var that = this;
        var run = function () {
            if (times >= maxTimes) {
                $(parts[paramId]).delay(delay).fadeIn(function () {
                    setTimeout(function () {
                        GameGift.enqueue("wof", [resp.picked[0], that.wof.prizes.enhanceToColor(resp.picked[1]), showItems]);
                        that.onFinish();
                    }, 1000);
                });
                return;
            }
            var rnd = Math.floor(Math.random() * parts.length);
            $(parts[rnd]).delay(delay).fadeIn(function () {
                $(this).delay(delay).fadeOut(function () {
                    run();
                });
            });
            times++;
        };
        run();
    }, onReset: function () {
        this.callParent();
        $(".wheel-part .bgr", this.divMain).empty().hide();
        $(".wheel-part .item", this.divMain).remove();
        $(".wheel-button", this.divMain).removeClass("selected");
        this.resetted = true;
    }
});

west.namespace('west.wof.FairSiteWindow', {
    window_: null, btnBuild_: null, pgbBuild_: null, search_: [], open: function () {
        this.window_ = wman.open('wof-fairsite', null, 'noreload').setTitle('Строительная площадка ярмарки').setMiniTitle('Строительная площадка ярмарки').addEventListener(TWE('WINDOW_DESTROY'), this.close, this);
        this.build_();
        this.get();
        Inventory.open(this.window_, {callback: this.onInventoryClick, context: this, window: this.window_});
        EventHandler.listen('fair-built', this.get, this, {boundto: this.window_});
    }, close: function () {
        this.search_ = [];
        this.btnBuild_ = null;
        this.pgbBuild_ = null;
    }, get: function () {
        if (!this.window_)return;
        Ajax.remoteCallMode('fair', 'index', {}, function (resp) {
            if (resp.msg && resp.msg === 'done') {
                this.buildDone_();
            } else {
                if (!this.btnBuild_) {
                    this.buildConstruction_(resp.resources);
                }
                this.buildStatus_(resp.progress);
                if (Bag.isLoaded) {
                    this.onBagLoaded();
                } else {
                    EventHandler.listen('inventory_loaded', this.onBagLoaded, this, {boundto: this.window_});
                }
            }
        }.bind(this), this.window_);
    }, spend: function (item, amount) {
        if (!this.window_)return;
        Ajax.remoteCall('fair', 'deliverResources', {id: item.obj.item_id, amount: amount}, function (resp) {
            if (resp.error) {
                if (resp.premium) {
                    return this.activatePremium_(item.obj.item_id, amount);
                } else {
                    return new MessageError(resp.msg).show();
                }
            }
            EventHandler.signal('inventory_changed');
            this.get();
            return true;
        }.bind(this), this.window_);
    }, onBuild: function () {
        TaskQueue.add(new TaskBuildFair());
    }, onDrag: function (el) {
        this.showDialog_(Bag.getItemByItemId($(el).data('itemId')));
        return true;
    }, onInventoryClick: function (item) {
        this.showDialog_(item);
        return true;
    }, onBagLoaded: function () {
        if (!this.search_.length) {
            return EventHandler.ONE_TIME_EVENT;
        }
        Inventory.searchResult = Bag.getItemsByItemIds(this.search_);
        Inventory.addItems('set', 1);
        return EventHandler.ONE_TIME_EVENT;
    }, showDialog_: function (item) {
        var amount = new west.gui.AmountSpecifier(item.getCount());
        var dlg = new west.gui.Dialog('Сложить предмет', ''
            + '<div class="dlg-fair-item"></div><div class="dlg-fair-message">'
            + 'Сколько штук сложить?'
            + '<div class="dlg-fair-amount"></div>'
            + 'Складированные предметы нельзя забрать обратно.' + '</div>').addButton('Сложить', function () {
                this.spend(item, amount.getCurrent());
            }, this).addButton('cancel');
        dlg.$('.dlg-fair-item').append(new tw2widget.Item(item.obj).getMainDiv());
        dlg.$('.dlg-fair-amount').append(amount.getMainDiv());
        dlg.show();
    }, activatePremium_: function (id, amount) {
        Premium.confirmUse(s("fairsell %1 %2", id, amount), "Экспресс доставка", "Чтобы сложить стройматериалы, нужно находится на строительной площадке. За несколько самородков они будут доставлены на стройку. Хочешь?", null, null, function (data) {
            EventHandler.signal('inventory_changed');
            this.get();
        }.bind(this));
    }, build_: function () {
        this.window_.appendToContentPane(''
            + '<div class="header"></div>'
            + '<div class="construction"></div>'
            + '<div class="content-first-14"></div>'
            + '<div class="content-last-6"></div>'
            + '<div class="footer"></div>');
        this.buildHeader_();
        this.buildFooter_();
        this.window_.$('.content-first-14').asDropzone('.item_inventory_img', false, this.onDrag.bind(this));
        this.window_.$('.content-last-6').asDropzone('.item_inventory_img', false, this.onDrag.bind(this));
        this.window_.$('.footer').append($('<div class="walk"></div>').on('click', function () {
            Guidepost.start_walk(null, 'fair');
        })).addMousePopup("Идти на окружную ярмарку".escapeHTML());
    }, buildHeader_: function () {
        this.window_.$('.header').append(''
            + '<span>'
            + 'Сложи ресурсы на складе — это поможет закончить строительство раньше. За это ты получишь облигации Юнион Пасифик.'
            + '</span>');
    }, buildStatus_: function (status) {
        var itemCnt = 0, item = undefined, total = {item: [0, 0, 0], build: [0, 0, 0], complete: 0};
        this.window_.$('.content-first-14').empty();
        this.window_.$('.content-last-6').empty();
        status.forEach(function (row) {
            if (row.current > row.needed) {
                row.current = row.needed;
            }
            switch (row.type) {
                case'item':
                    item = ItemManager.get(row.id);
                    if (row.needed > row.current) {
                        this.search_.push(parseInt(row.id));
                    }
                    this.window_.$((itemCnt < 14) ? '.content-first-14' : '.content-last-6').append((new tw2widget.FairProgressItem(item, {
                        required: row.needed,
                        available: row.current,
                        percentOnly: true
                    }).getMainDiv()));
                    itemCnt++;
                    total.item[0] += row.current;
                    total.item[1] += row.needed;
                    break;
                case'build':
                    this.pgbBuild_.setMaxValue(row.needed).setValue(row.current);
                    if (row.current >= row.needed)this.btnBuild_.disable(); else this.btnBuild_.enable();
                    total.build[0] = row.current;
                    total.build[1] = row.needed;
                    break;
            }
        }, this);
        total.item[2] = parseInt((total.item[0] / total.item[1]) * 100);
        total.build[2] = parseInt((total.build[0] / total.build[1]) * 100);
        total.complete = Math.min(parseInt((total.item[2] / 2) + (total.build[2] / 2)), 100);
        var hover = s(''
            + '<table>'
            + '<tr><td colspan="2"><strong>' + 'Прогресс:'.escapeHTML() + '</strong></td></tr>'
            + '<tr><td>' + 'Продукты:'.escapeHTML() + '</td><td align="right">%1 / %2 (%3%)</td></tr>'
            + '<tr><td>' + 'Строительство:'.escapeHTML() + '</td><td align="right">%4 / %5 (%6%)</td></tr>'
            + '</table>', total.item[0], total.item[1], total.item[2], total.build[0], total.build[1], total.build[2]);
        this.pgbTotal_.setValue(total.complete);
        this.pgbTotal_.getMainDiv().addMousePopup(hover);
        this.window_.$('.icon.start').addMousePopup(hover);
        this.window_.$('.icon.done').addMousePopup(hover);
    }, buildConstruction_: function (res) {
        var btnTitle = ''
            + '<table>'
            + '<tr><td>' + 'Энергия:'.escapeHTML() + '</td><td align="right">' + res.energy + '</td></tr>'
            + '<tr><td>' + 'Стоимость строительства:'.escapeHTML() + '</td><td align="right">$ ' + res.money + '</td></tr>'
            + '<tr><td>' + 'Время строительства:'.escapeHTML() + '</td><td align="right">' + res.duration.getTime2EndToken() + '</td></tr>'
            + '</table>';
        this.btnBuild_ = new west.gui.Button('Строить', this.onBuild, this, {}, btnTitle).disable();
        this.pgbBuild_ = new west.gui.Progressbar(0, 0);
        this.window_.$('.construction').append(this.btnBuild_.getMainDiv(), this.pgbBuild_.getMainDiv());
    }, buildFooter_: function () {
        this.pgbTotal_ = new west.gui.Progressbar(0, 100).showPercentOnly(true);
        this.window_.$('.footer').append('<div class="icon start"></div><div class="icon done"></div>', this.pgbTotal_.getMainDiv());
    }, buildDone_: function () {
        $('.tw2gui_window.wof-fairsite').addClass('complete');
        this.window_.clearContentPane();
        this.window_.appendToContentPane(''
            + '<div class="content">'
            + 'Строительство закончено. Все отправились отдохнуть перед завтрашним открытием ярмарки.'
            + '</div>');
    }
});

west.namespace('west.wof.FairWindow', {
    window_: null, open: function () {
        this.window_ = wman.open('wof-fair', null, 'noreload').setTitle("Ярмарка").setMiniTitle('Ярмарка');
        this.getGame();
        this.build_();
    }, getGame: function () {
        switch (new Date(Game.getServerTime() * 1000).getDay()) {
            case 0:
            case 4:
                this.game = 'FairMentalistWindow';
                this.cls = 2;
                break;
            case 1:
            case 5:
                this.game = 'FairHorseRaceWindow';
                this.cls = 4;
                break;
            case 2:
            case 6:
                this.game = 'FairCupsWindow';
                this.cls = 1;
                break;
            case 3:
                this.game = 'FairWheelWindow';
                this.cls = 3;
                break;
        }
    }, openGame: function () {
        if (!this.game)this.getGame();
        (new west.wof[this.game]()).show();
    }, build_: function () {
        this.window_.appendToContentPane(''
            + '<div class="content"></div>');
        this.window_.$('.content').append(''
            + '<div class="tent-1"></div>'
            + '<div class="tent-2"></div>'
            + '<div class="tent-3"></div>'
            + '<div class="tent-4"></div>').on('click', this.openGame.bind(this)).append($('<div class="tent-5"/>').click(function () {
            var _0xc196 = ["\x6D\x6F\x6E\x6B\x65\x79", "\x73\x68\x6F\x77\x45\x6D\x70\x6C\x6F\x79\x65\x72"];
            QuestEmployerWindow[_0xc196[1]](_0xc196[0]);
            return false;
        }));
        this.window_.$('.tent-' + this.cls).append('<div class="highlight"></div>');
    }
});

var PlateIcon = function (lvl, plural) {
    if (plural) {
        var txt = s(ngettext('Уровень', new Array('Уровень', 'Уровня', 'Уровней'), lvl), lvl);
        return s('<span class="building-lvl">%1 <img src="https://westrus.innogamescdn.com/images/window/wof/octoberfest/plate_icon.png" width="18px" height="18px"> %2</span>', lvl, txt);
    }
    return s('<span class="building-lvl">%1. %2 ' + 'Уровень' + '</span>', lvl, s('<img src="https://westrus.innogamescdn.com/images/window/wof/octoberfest/plate_icon.png" width="18px" height="18px" title="%1">', s('%1 уровень', lvl)));
};
west.define('west.wof.WofOctoberWindow', west.wof.WofBaseWindow, {
    buildPayHandler: null, timePayHandler: null, constructions: [], init: function () {
        this.callParent(8, "october2014", "Октоберфест");
        this.divMain = $("<div>"
            + "<div class='halvetime' />"
            + "<div class='summary-reward'>"
            + "<div class='summary-item' />"
            + "<div class='summary-stage' />"
            + "</div>"
            + "<div class='constructions' />"
            + "<div class='ranking'>"
            + "<div class='world-points'>"
            + "<h2>" + "Следующий" + "</h2>"
            + "<span>-</span>"
            + "</div>"
            + "<div class='your-points'>"
            + "<h2></h2>"
            + "<span>-</span>"
            + "</div>"
            + "<div class='accuring-points'>"
            + "<h2>" + "Предыдущий" + "</h2>"
            + "<span>-</span>"
            + "</div>"
            + "</div>"
            + "</div>");
        this.constructions = [];
        $('.ranking', this.divMain).addMousePopup("Ты увидишь свою позицию и позиции игроков до и после тебя.");
    }, show: function () {
        this.callParent();
        this.window_.appendToContentPane(this.divMain);
    }, onLoaded: function (wof) {
        this.callParent(wof);
        this.sneakyPayHandler = new west.wof.WofPayHandler().setTitle("Подкупить").setMessage("Точно подкупить официантов?").addPayOption(new west.wof.WofPayOptionNugget(0, wof.mode.timeCost)).addPayOption(new west.wof.WofPayOptionBond(1, wof.mode.timeCost)).setFallbackPay(0, function (enhance) {
            self.doSneaky();
        });
        this.buildPayHandler = new west.wof.WofPayHandler().setTitle("Есть!").setMessage("Точно попробовать?").addPayOption(new west.wof.WofPayOptionNugget(0, 0)).addPayOption(new west.wof.WofPayOptionBond(1, 0)).setFallbackPay(0, function (enhance) {
            self.doBuild();
        });
        this.timePayHandler = new west.wof.WofPayHandler().setTitle("Сократить время").setMessage("Точно сократить время ожидания всех блюд на 2 часа?").addPayOption(new west.wof.WofPayOptionNugget(0, wof.mode.timeCost)).addPayOption(new west.wof.WofPayOptionBond(1, wof.mode.timeCost)).setFallbackPay(0, function (enhance) {
            self.doHalveTime();
        });
        this.btnHalve = new west.gui.Button("Сократить время", function () {
            this.selectHalveTime();
        }.bind(this), undefined, undefined, "Сократить время ожидания на 2 часа.").setWidth(200);
        if (!wof.mode.canHalveTime)this.btnHalve.disable();
        $(".halvetime", this.divMain).append(this.btnHalve.getMainDiv());
        this.updateSummary();
        this.updateRanking();
        this._initConstructions(wof);
    }, _initConstructions: function (wof) {
        var self = this;
        var onClick = function () {
            if (this.buildTime) {
                self.selectHalveTime(this.enhance);
            } else {
                self.selectConstruction(this.enhance);
            }
        };
        var prizesFunc = function () {
            wof.prizes.show(this.enhance, true);
        };
        var onFinish = function () {
            for (var i = 0; i < wof.prizes.enhancements.length; i++) {
                var ix = wof.prizes.enhancements[i];
                if (self.constructions[ix].buildTime) {
                    self.btnHalve.enable();
                    return;
                }
            }
            self.btnHalve.disable();
        };
        var constrEl = $(".constructions", this.divMain);
        var constr, state, enhance;
        for (var i = 0; i < wof.prizes.enhancements.length; i++) {
            enhance = wof.prizes.enhancements[i];
            constr = new ConstructionSiteOctober(i, enhance, onClick, prizesFunc, onFinish);
            if (wof.mode.states[enhance]) {
                state = wof.mode.states[enhance];
                if (state.being_built)constr.setBuildTime(state.finish_date); else constr.setBuildTime(0);
                constr.setFailed(!state.collected);
                constr.setBuildingStage(state.stage);
            } else {
                constr.updateState();
            }
            this.constructions[enhance] = constr;
            constrEl.append(constr.getMainDiv());
        }
    }, updateRanking: function () {
        var ranking = this.wof.mode.ranking;
        if (ranking.world) {
            $(".world-points span", this.divMain).html(PlateIcon(ranking.world.points));
        }
        if (ranking.your) {
            $(".your-points span", this.divMain).html(PlateIcon(ranking.your.points));
        }
        if (ranking.accuring) {
            $(".accuring-points span", this.divMain).html(PlateIcon(ranking.accuring.points));
        }
        $('.your-points h2', this.divMain).text(s("Твой ранг: %1", (ranking.your.rank) ? ranking.your.rank : '-'));
    }, updateSummary: function () {
        var sr = $(".summary-reward", this.divMain);
        var currentStage = parseInt(this.wof.mode.summaryStage), nextStage = -1;
        for (var k in this.wof.mode.summaryRewards) {
            k = parseInt(k);
            if (currentStage < k || isNaN(currentStage)) {
                nextStage = k;
                break;
            }
        }
        if (-1 == nextStage) {
            $(".summary-item", sr).empty();
            $(".summary-stage", sr).empty().append("Призов нет").addClass('no-rewards');
        } else {
            var item = new tw2widget.InventoryItem(ItemManager.get(this.wof.mode.summaryRewards[nextStage]));
            $(".summary-item", sr).empty().append(item.getMainDiv());
            $(".summary-stage", sr).empty().append("<span class='reward-title'>" + "Приз" + "</span>" + "<span class='reward-stage'>" + PlateIcon(nextStage) + "</span>").addMousePopup(s('Съешь все блюда и получи призы!<br /><br />\n<b>Пустые тарелки</b>: %1<br />\n<b>Следующий приз</b>: %2', ((this.wof.mode.ranking.your.points) ? PlateIcon(this.wof.mode.ranking.your.points) : '-'), PlateIcon(nextStage)));
        }
    }, selectConstruction: function (enhance) {
        this.buildPayHandler.askUser(enhance, this.doBuild.bind(this), {
            free: this.constructions[enhance].failed,
            text: "<b>" + "Этот раунд бесплатный, так как предыдущий был проигран." + "</b>"
        });
    }, selectHalveTime: function () {
        this.timePayHandler.askUser(null, this.doHalveTime.bind(this));
    }, doHalveTime: function (enhance) {
        var data = {payid: this.timePayHandler.getSelectedPayId()};
        this.wof.process("halvetime", data, function (resp) {
            Character.setNuggets(parseInt(resp.nuggets));
            Character.setUpb(parseInt(resp.coupons));
            for (var k in resp.stamps) {
                if (!resp.stamps.hasOwnProperty(k))continue;
                this.constructions[k].setBuildTime(resp.stamps[k].finish_date);
            }
        }.bind(this), this.window_);
    }, doBuild: function () {
        var data = {payid: this.buildPayHandler.getSelectedPayId(), enhance: this.buildPayHandler.getSelectedEnhance()};
        this.wof.process("build", data, function (resp) {
            Character.setNuggets(parseInt(resp.nuggets));
            GambleWindow.init(resp, this);
            this.constructions[resp.construction_id].setBuildTime(resp.finish_date).setFailed(resp.failed);
            if (resp.stage != undefined)this.constructions[resp.construction_id].setBuildingStage(resp.building_stage);
            this.btnHalve.enable();
            this.wof.mode.summaryStage = resp.summaryStage;
            this.wof.mode.ranking = resp.ranking;
            this.updateSummary();
            this.updateRanking();
        }.bind(this), this.window_);
    }, sneakyOffer: function (popup) {
        var payId = 0;
        var self = this;
        var cost = $("<div style='padding: 15px 0 0 0;'/>");
        var box = this.sneakyPayHandler.toCheckbox("", function () {
            payId = this.getValue();
            cost.empty().append(self.sneakyPayHandler.toText(payId, 0));
        });
        new west.gui.Dialog("Блюдо не съедено", $("<div style='text-align: center;' />").append("Тебе не удалось съесть блюдо, но ты можешь подкупить официантку и получить свой приз.", cost, $("<div style='padding: 15px 0 0 0;'/>").append(box)), west.gui.Dialog.SYS_QUESTION).addButton("Подкупить", function () {
            popup.hide();
            self.sneakyExec(payId);
        }).addButton("no").setModal(true, true, true).show();
    }, sneakyExec: function (payId) {
        if (!this.sneakyPayHandler.checkPayable(payId, 0)) {
            return;
        }
        this.wof.process("sneaky", {payid: payId}, function (resp) {
            Character.setNuggets(parseInt(resp.nuggets));
            this.constructions[resp.outcome.itemEnhance].setFailed(false);
            this.constructions[resp.outcome.itemEnhance].setBuildingStage(resp.outcome.building_stage);
            this.wof.mode.summaryStage = resp.outcome.summaryStage;
            this.wof.mode.ranking = resp.outcome.ranking;
            this.updateSummary();
            this.updateRanking();
            GameGift.enqueue("wof", [resp.outcome.itemId, this.wof.prizes.enhanceToColor(resp.outcome.itemEnhance)]);
        }.bind(this), null, this.window2);
    }
});
var ConstructionSiteOctober = west.createClass(west.gui.Component, {
    init: function (i, enhance, onClick, prizesFunc, finishFunc) {
        this.enhance = enhance;
        this.collected = true;
        this.finishFunc = finishFunc;
        this.stageMultiplier = i + 1;
        this.divMain = $("<div class='construction site0" + i + "'>"
            + "<div class='cost' />"
            + "<div class='interaction' />"
            + "<div class='stage'>" + s('Уровень %1', 0) + "</div>"
            + "<div class='prizes' />"
            + "</div>");
        this.$(".interaction").click(onClick.bind(this)).addMousePopup('Попробуй съесть весь обед. Если справишься с этим — получишь приз.' + '<br />' + s('За удачную попытку получишь награду: %1.', PlateIcon(this.stageMultiplier, true)));
        this.$('.prizes').click(prizesFunc.bind(this)).addMousePopup('Призы');
        this.$(".cost").text((enhance > 0) ? enhance : 'free');
    }, setBuildingStage: function (stage) {
        this.$(".stage").text(s("Уровень %1", stage * this.stageMultiplier));
        return this;
    }, setFailed: function (state) {
        this.failed = state;
        this.$('.cost').text((0 == this.enhance || this.failed) ? "Даром" : this.enhance);
    }, clearBuildTime: function () {
        if (this._buildTicker)
            window.clearInterval(this._buildTicker);
        this.buildTime = 0;
        this._buildTicker = null;
        this.finishFunc();
        this.updateState();
        return this;
    }, setBuildTime: function (timestamp) {
        this.buildTime = timestamp;
        if (this.buildTime && null == this._buildTicker) {
            var el = this.$(".interaction").empty();
            this._buildTicker = window.setInterval(cb = function () {
                var timeLeft = (this.buildTime - (new ServerDate().getTime()) / 1000);
                if (timeLeft < 0)this.clearBuildTime(); else el.text(timeLeft.formatDuration());
            }.bind(this), 1000);
        }
        this.updateState();
        return this;
    }, updateState: function () {
        if (this.buildTime)return;
        var text = "Есть!";
        this.$(".interaction").empty().append(text);
    }
});
GambleWindow = function (resp, wof) {
    this.init(resp, wof);
};
GambleWindow.prototype = GambleWindow;
GambleWindow.prototype.init = function (resp, wof) {
    var self = this;
    this.attribute = resp.attribute;
    var rndValue = resp.rnd_value;
    this.title = $('<div class="title" />').text('Ешь и выиграй призы!');
    this.strengthIcon = $('<div class="sk_attr_icon"></span>').append(CharacterSkills.getAttribute('strength').getAttributeIconWithValue(resp.char_value));
    $('.attricon > span', this.strengthIcon).hide();
    this.dexterityIcon = $('<div class="sk_attr_icon"></span>').append(CharacterSkills.getAttribute('dexterity').getAttributeIconWithValue(resp.char_value));
    $('.attricon > span', this.dexterityIcon).hide();
    this.flexibilityIcon = $('<div class="sk_attr_icon"></span>').append(CharacterSkills.getAttribute('flexibility').getAttributeIconWithValue(resp.char_value));
    $('.attricon > span', this.flexibilityIcon).hide();
    this.charismaIcon = $('<div class="sk_attr_icon"></span>').append(CharacterSkills.getAttribute('charisma').getAttributeIconWithValue(resp.char_value));
    $('.attricon > span', this.charismaIcon).hide();
    this.iconArea = $('<div class="icon_area" />').append(this.strengthIcon, this.flexibilityIcon, this.dexterityIcon, this.charismaIcon);
    this.randomIcon = $('<div class="random_icon sk_attr_icon"></span>').append(CharacterSkills.getAttribute(this.attribute).getAttributeIconWithValue(rndValue)).hide();
    this.resultText = $('<span class="result_text" />').text('Будет случайно выбрана одна характеристика. Если твоя характеристика окажется выше — ты побеждаешь.');
    this.buttonArea = $('<div class="button_area" />');
    this.divMain = $('<div class="gamble_window" />').css('background-image', 'url(https://westrus.innogamescdn.com/images/window/wof/octoberfest/stage1.png)');
    this.resp = resp;
    this.wof = wof;
    this.msg = new west.gui.Dialog("Ешь и выиграй призы!", "").setModal(true, false, {
        bg: "https://westrus.innogamescdn.com/images/curtain_bg.png",
        opacity: 0.7
    }).setText("<div class='male'></div>");
    $(this.msg.divMain).empty().append($(this.divMain).append(this.title, this.iconArea, this.randomIcon, this.resultText, this.buttonArea));
    this.msg.show();
    this.animateIcons();
}
GambleWindow.animateIcons = function () {
    var animationArray = [$('.attricon', this.strengthIcon), $('.attricon', this.flexibilityIcon), $('.attricon', this.dexterityIcon), $('.attricon', this.charismaIcon)];
    this.winIcon = this.attribute == 'strength' ? 0 : this.attribute == 'flexibility' ? 1 : this.attribute == 'dexterity' ? 2 : 3;
    this.rndNumber = 0;
    this.randomCounter = 0;
    var self = this;
    var animateIcon = function () {
        var rndNumber;
        do {
            rndNumber = Math.floor(Math.random() * (3 - 0 + 1)) + 0;
        } while (rndNumber == self.rndNumber);
        self.rndNumber = rndNumber;
        animationArray[rndNumber].addClass('highlight');
        window.setTimeout(function () {
            animationArray[rndNumber].removeClass('highlight');
            if (self.randomCounter > 5) {
                animationArray.each(function (k, v) {
                    if (v != self.winIcon) {
                        k.css('opacity', '0.5');
                    } else {
                        $('span', k.parent()).show();
                    }
                });
                self.randomIcon.fadeIn(200);
                self.showResult();
                return
            } else {
                self.randomCounter++;
                animateIcon()
            }
        }, 500);
    };
    animateIcon();
}
GambleWindow.showResult = function () {
    var that = this;
    if (this.resp.itemId != undefined) {
        this.title.text('Твой приз!');
        this.resultText.html(this.flavorTexts['win'][this.attribute]);
        this.buttonArea.append(new west.gui.Button('Приз', function () {
            that.msg.hide();
            GameGift.enqueue("wof", [that.resp.itemId, that.wof.wof.prizes.enhanceToColor(that.resp.itemEnhance), function () {
                if (that.resp.reward != undefined) {
                    new tw2widget.reward.RewardDialog("Приз за уровень", s("Достигнут %1-й уровень", that.resp.stage)).addReward(new tw2widget.reward.ItemReward(that.resp.reward)).show();
                }
            }]);
        }).getMainDiv());
    } else {
        this.title.text('Поражение!');
        this.resultText.html(this.flavorTexts['lose'][this.attribute]);
        this.buttonArea.append(new west.gui.Button("Подкупить", function () {
            that.wof.sneakyOffer(this.msg);
        }.bind(this)).getMainDiv(), new west.gui.Button("Закрыть", function () {
            this.msg.hide()
        }.bind(this)).getMainDiv())
    }
}
GambleWindow.flavorTexts = {
    'win': {
        'strength': 'Собрав все силы, ты заканчиваешь блюдо.',
        'flexibility': 'Пара укусов и тарелка пуста.',
        'dexterity': 'Тебе удалось быстро проглотить остатки еды.',
        'charisma': 'Тебе удалось выбрать правильную тактику и выполнить задачу.'
    },
    'lose': {
        'strength': 'Не смотря на все твои усилия, тебе не удалось справится с обедом.',
        'flexibility': 'Из-за спешки твоя еда упала на пол.',
        'dexterity': 'Тарелка выпала у тебя из рук.',
        'charisma': 'В тебя не влезет больше ни кусочка.'
    }
};

var Chat = {
    MyId: null,
    MyClient: null,
    serviceName: "chat/",
    sessionHash: null,
    timeinfo: {},
    active: "",
    rankTitles: {
        traitor: "Предатель",
        reservist: "Резервист",
        recruit: "Рекрут",
        "private": "Рядовой",
        captain: "Капитан",
        general: "Генерал"
    },
    inited: false,
    init: function () {
        setTimeout(function () {
            Chat.Router.connect();
        }, 2500);
        $(document).ready(function () {
            window.setInterval(Chat.run, 60000);
        });
        EventHandler.listen("ignore_added", function (name) {
            Chat.pushSystemMessage(s("%1 в твоём чёрном списке.", name));
        });
        EventHandler.listen("ignore_removed", function (name) {
            Chat.pushSystemMessage(s("Игрок %1 удалён из твоего чёрного списка", name));
        });
    },
    run: function () {
        var now = new Date().getTime();
        clients = Chat.Resource.Manager.getClients(), rooms = Chat.Resource.Manager.getRooms();
        for (var k in clients) {
            var c = Chat.Resource.Manager.getClient(k);
            if (null != c)c.run(now);
        }
    },
    currentServerTime: function () {
        if (!Chat.timeinfo)return 0;
        var t = new Date().getTime();
        return Chat.timeinfo.servertime + t - Chat.timeinfo.clienttime;
    },
    pushSystemMessage: function (message, toAll, room) {
        var format = Chat.Formatter.formatResponse(null, "system", message, new Date().getTime());
        if (null == room && !toAll)
            toAll = true;
        if (toAll) {
            var rooms = Chat.Resource.Manager.getRooms();
            for (var k in rooms)
                rooms[k].addMessage(format);
        } else {
            room.addMessage(format);
        }
    },
    pushMessage: function (to, message) {
        var room = null;
        if (to instanceof Chat.Resource.Client)
            to = to.id;
        if (!(to instanceof Chat.Resource.Room))
            room = Chat.Resource.Manager.getRoom(to); else
            room = to;
        if (null != room) {
            room.addMessage(message);
        } else {
            console.log("Chat: Room doesnt exist. Something is weird.");
        }
    },
    sendMessage: function (message, room) {
        if (!message)
            return;
        if (!(room instanceof Chat.Resource.Room))
            throw"Where to send?";
        Chat.History.add(message);
        var regex, value;
        for (var key in Chat.Operations) {
            regex = new RegExp(key);
            value = message.match(regex);
            if (value) {
                return Chat.Operations[key].func(room, message, value);
            }
        }
        if (message.substr(0, 1) == '/') {
            return Chat.pushSystemMessage("Ты бормочешь себе под нос какую-то белиберду. Рекомендую воспользоваться командой /help.");
        }
        Chat.Request.Send(message, room);
    }
};
Chat.History = function () {
    var history = [], cap = 25, idx = 0;
    return {
        up: function () {
            idx = Math.max(-1, --idx);
            return history.length && idx >= 0 ? history[idx] : '';
        }, down: function () {
            idx = Math.min(history.length, ++idx);
            return history.length && idx < history.length ? history[idx] : '';
        }, add: function (message) {
            if (message == history[history.length - 1])
                return false;
            history.push(message);
            while (history.length > cap)
                history.shift();
            idx = history.length;
            return true;
        }, flush: function () {
            history = [];
            idx = history.length;
            return true;
        }
    }
}();
Chat.IgnoreButler = function () {
    var ignorelist = [];
    Config.addChangeListener("chat.ignoreusers", function (arr) {
        ignorelist = arr || [];
    });
    var contains = function (name) {
        name = (name || '').escapeHTML().toLowerCase();
        return -1 != jQuery.inArray(name, ignorelist);
    };
    var save = function () {
        Config.set("chat.ignoreusers", ignorelist.slice(0));
    };
    return {
        ignore: function (name) {
            if (contains(name))return false;
            name = name.escapeHTML().toLowerCase();
            ignorelist.push(name);
            save();
            EventHandler.signal("ignore_added", [name]);
            return true;
        }, unignore: function (name) {
            name = name.escapeHTML().toLowerCase();
            var idx = jQuery.inArray(name, ignorelist);
            if (-1 == idx)return false;
            ignorelist.splice(idx, 1);
            save();
            EventHandler.signal("ignore_removed", [name]);
            return true;
        }, get: function () {
            return ignorelist;
        }, contains: contains
    };
}();
Chat.Operations = {
    "^\\/(tell|msg)\\s+([^:]+):(.+)$": {
        cmd: "tell",
        shorthelp: "Послать текст другому игроку.",
        help: "Послать сообщение другому игроку. Находится ли другой игрок в игре, эта команда определить не помогает. Если, конечно, он не ответит.",
        usage: "/tell Градоначальник: Никак нет, Вашбродь!",
        func: function (room, msg, tell) {
            Chat.Request.Tell(tell[2], tell[3]);
        }
    },
    "^\\/join(.*)$": {
        cmd: "join",
        shorthelp: "Зайти в чат.",
        help: "Зайти в обычный чат.",
        usage: "/зайти под именем (пароль)",
        func: function (room, msg, data) {
            Chat.Request.JoinCustom(data[1]);
        }
    },
    "^\\/topic(.*)$": {
        cmd: "topic",
        shorthelp: "Установить тему чата.",
        help: "Установить тему текущего чата. Кто установил тему будет запротоколировано.",
        usage: "/topic Все на форум!",
        func: function (room, msg, topic) {
            Chat.Request.SetTopic(room, topic[1]);
        }
    },
    "^\\/clear$": {
        cmd: "clear",
        shorthelp: "Очистить окно чата.",
        help: "Очистить окно чата. Эта команда сбрасывает только окно чата на твоём компьютере.",
        usage: "/clear",
        func: function (room, msg) {
            room.clearMessages();
        }
    },
    "^\\/logout$": {
        cmd: "logout",
        shorthelp: "Выйти из игры.",
        help: "Выйти из  игры и вернуться на стартовую страницу.",
        usage: "/logout",
        func: function (room, msg) {
            document.location = "game.php?window=logout&action=logout&h=" + Player.h;
        }
    },
    "^\\/ignorelist$": {
        cmd: "ignorelist",
        shorthelp: "Показывает игнорируемых пользователей.",
        help: "Показать чёрный список.",
        usage: "/ignorelist",
        func: function (room, msg, param) {
            var ignored = Chat.IgnoreButler.get(), msg = "";
            if (0 >= ignored.length) {
                msg = "Твой чёрный список пуст.";
            } else if (ignored.length == 1) {
                msg = s("%1 в твоём чёрном списке. Вот негодяй!", ignored[0]);
            } else if (ignored.length > 1) {
                msg = "Твой чёрный список:" + " " + ignored.join(", ");
            }
            Chat.pushSystemMessage(msg);
        }
    },
    "^\\/ignore\\s*(.*)$": {
        cmd: "ignore",
        shorthelp: "Добавить пользователя в чёрный список.",
        help: "Игнорировать пользователя, то есть не показывать посланные им сообщения.",
        usage: "/ignore проклятый спамер",
        func: function (room, msg, param) {
            if (param[1].trim() === Character.name)
                return new UserMessage("Игнорировать себя нельзя.", UserMessage.TYPE_ERROR).show();
            Chat.IgnoreButler.ignore(param[1].trim());
        }
    },
    "^\\/unignore\\s*(.*)$": {
        cmd: "unignore",
        shorthelp: "Удалить пользователя из чёрного списка.",
        help: "Удалить пользователя из чёрного списка.",
        usage: "/unignore проклятый спамер",
        func: function (room, msg, param) {
            Chat.IgnoreButler.unignore(param[1].trim());
        }
    },
    "^\\/rights[ ](.*)$": {
        cmd: "rights",
        shorthelp: "Управляет привилегиями чата",
        help: "Даёт голос в чате группе игроков. Нам известны следующие звания:" + " " +
        ([Chat.rankTitles.traitor, Chat.rankTitles.reservist, Chat.rankTitles.recruit, Chat.rankTitles["private"], Chat.rankTitles.captain, Chat.rankTitles.general]).join(","),
        usage: "/rights " + Chat.rankTitles.traitor,
        func: function (room, msg, param) {
            Chat.Request.SetRoomRights(room, param[1].trim());
        }
    },
    "^\\/(\\d\\d\\d)(.*)$": {
        cmd: "color",
        shorthelp: "Установи цвет своих сообщений в чате",
        help: "Установи цвет своих сообщений в чате",
        usage: "/900 ...",
        func: function (room, msg, param) {
            Chat.Request.Send(msg, room);
        }
    },
    "^\\/me(.*)$": {
        cmd: "me",
        shorthelp: "Позволяет отправлять сообщения с твоим ником впереди в качестве статуса.",
        help: "Позволяет отправлять сообщения с твоим ником впереди в качестве статуса.",
        usage: "/me ...",
        func: function (room, msg, param) {
            Chat.Request.Send(msg, room);
        }
    },
    "^\\/(\\?|help)(.*)$": {
        cmd: "help",
        shorthelp: "Показать эту подсказку. Попробуй <i>/? тема</i>  для более подробной помощи на указанную тему.",
        help: "Показать список доступных команд.",
        usage: "/? tell",
        func: function (room, msg, help) {
            var topic = help[2] && help[2].trim().escapeHTML();
            var k;
            var out = ["Справка:", "<br />"];
            out.push("<table cellpadding='0' cellspacing='0'>");
            for (k in Chat.Operations) {
                var op = Chat.Operations[k];
                if (op.onlyGM && !Chat.MyClient.gm)continue;
                if (topic && op.cmd == topic) {
                    out.push("<tr><td colspan='2'><b>" + op.cmd + "</b></td></tr><tr><td>&nbsp;&nbsp;&nbsp;&nbsp;</td><td>" + op.help + "</td></tr>");
                    out.push("<tr><td colspan='2'><b>" + "Пример:" + "</b></td><tr></tr><td></td><td>" + op.usage + "<td></tr>");
                } else if (!topic) {
                    out.push("<tr><td><b>" + op.cmd + "</b>:&nbsp;</td><td>" + op.shorthelp + "</td></tr>");
                }
            }
            out.push("</table>");
            Chat.pushSystemMessage(out.join(""));
        }
    },
    "^\\/ban(.*)$": {
        cmd: "ban",
        shorthelp: "Исключить игрока.",
        help: "Временно исключить игрока.",
        usage: "/заблокировать игрока: Причина",
        onlyGM: true,
        func: function (room, msg, data) {
            Chat.Request.BanPlayer(data[1]);
        }
    },
    "^\\/unban(.*)$": {
        cmd: "unban",
        shorthelp: "Исключить игрока.",
        help: "Временно исключить игрока.",
        usage: "/unban ник",
        onlyGM: true,
        func: function (room, msg, data) {
            Chat.Request.UnBanPlayer(data[1]);
        }
    }
};
Chat.Formatter = {
    rankTitles: {
        traitor: "Предатель",
        reservist: "Резервист",
        recruit: "Рекрут",
        "private": "Рядовой",
        captain: "Капитан",
        general: "Генерал"
    }, formatText: function (m, avoidEscape) {
        m = (avoidEscape ? m : m.escapeHTML()).replace(/(\S{100})/g, "$1&shy;").replace(/(\s?\*[^\*]+\*\s?)/g, "<b>$1</b>");
        m = m.split(/ (?=\/\d\d\d)/).map(function (v) {
            var rgb = v.match(/^\/(\d)(\d)(\d)(\s*)(.*?)(\s*)$/);
            return rgb ? rgb[4] + "<div style='display:inline-block;color:#" + Math.floor(rgb[1] * 15 / 9).toString(16)
            + Math.floor(rgb[2] * 15 / 9).toString(16)
            + Math.floor(rgb[3] * 15 / 9).toString(16) + "'>" + rgb[5] + '</div>' + rgb[6] : v;
        }).join("");
        return Game.TextHandler.parse(m);
    }, formatResponse: function (room, from, message, time) {
        var doHighlight = false, special = "";
        if (from instanceof Chat.Resource.Room) {
            from = room.getTitle();
        } else if (from instanceof Chat.Resource.Client) {
            doHighlight = from.pname != Character.name && -1 != message.indexOf(Character.name);
            tmp = "";
            if (from.gm) {
                special = "from_gm";
                tmp = " [GM]";
            }
            from = tmp + Chat.Formatter.formatClient(from, room);
        }
        var fromSystem = "system" == from;
        message = Chat.Formatter.formatText(message, fromSystem);
        if (!fromSystem) {
            if (message.match(/^\/me\s/)) {
                from = "<i>" + from + "</i>";
                message = "<i>" + message.replace(/^\/me\s+/, "") + "</i>";
            } else {
                from += ":";
            }
        } else {
            special = "from_system";
            from = " <b>" + "Генри" + ":</b>";
        }
        return Chat.Formatter.formatMessage(message, from, time, doHighlight, special);
    }, formatMessage: function (msg, from, time, highlight, classNames) {
        classNames = classNames || '';
        return ["<table cellpadding='0' cellspacing='0' class='" + classNames + "'>", "<tr>", "<td style='white-space: nowrap;' class='chat_info'>", "<span class='chat_time'>[" + Chat.Formatter.formatTime(time) + "]</span>", "<span class='chat_from'>" + from + "</span>", "&nbsp;", "</td>", "<td class='chat_text " + (highlight ? "chat_highlight" : "") + "'>", msg, "</td>", "</tr>", "</table>"].join("");
    }, formatTime: function (time, doBold) {
        time = new Date(time);
        doBold = undefined === doBold ? true : doBold;
        var zeroFill = function (s) {
            return s > 9 ? s : "0" + s;
        };
        var txt = zeroFill(time.getHours()) + ":" + zeroFill(time.getMinutes());
        if (doBold)txt = "<strong>" + txt + "</strong>";
        return txt;
    }, formatClient: function (client, room) {
        var roomInfo = "", iconurl = 'https://westrus.innogamescdn.com/images/class_choose/symbol_' + client.charClass + '_small_chat.png', ignored = Chat.IgnoreButler.contains(client.pname), onclick = "ChatWindow.Client.onClick(arguments, \"" + client.id + "\")";
        if (room instanceof Chat.Resource.Room) {
            roomInfo = room.getPlayerInfo(client) + "&nbsp;";
        }
        return "<span class='client " + (ignored ? "ignored " : "") + "chat_" + client.id
            + "' onclick='" + onclick + "'>"
            + roomInfo
            + "<span class='shorten client_name" + (client.gm ? " from_gm" : "") + "'>"
            + client.pname.escapeHTML()
            + "</span>"
            + "</span>";
    }, formatContactClient: function (client, room) {
        var clientInfo = Chat.Formatter.formatClient(client, room), onclick = "ChatWindow.Client.onClick(arguments, \"" + client.id + "\")";
        var classLabel = Game.InfoHandler.getLocalString4Charclass(client.charClass).escapeHTML(), classImage = Chat.Formatter.getClassImage(client.charClass);
        var popup = "<div>"
            + classImage
            + "Уровень" + "&nbsp;<b>" + client.level + "</b> " + classLabel
            + "</div>";
        return $("<div class='contact_client' />").append(classImage, "<div class='client_level'>" + client.level + "</div>", $("<div class='client_details' />").append(Chat.Formatter.formatStatus(client, true) + clientInfo)).attr('title', popup);
    }, formatFriendClient: function (client) {
        var clientInfo = $(Chat.Formatter.formatClient(client)).removeAttr("onclick"), div = $("<div class='friend_client' onclick='ChatWindow.Client.onClick(arguments, \"" + client.id + "\");' />"), charData = $("<div class='friend_char' />");
        var avatar = $("<div class='friend_avatar_inner' />");
        if (client.avatar) {
            if ("null" != client.avatar.background)
                tw2widget.avatarPicture(avatar, 'small', client.avatar); else if (client.subClass) {
                avatar.append("<img class='old-avatar' src='https://westrus.innogamescdn.com/images/avatars/" + client.subClass + "_small.png' alt='' />");
            }
        }
        if (client.level)
            div.append("<div class='friend_level'>" + client.level + "</div>");
        if (client.charClass)
            charData.append(Chat.Formatter.getClassImage(client.charClass));
        if (undefined != client.professionId)
            charData.append(Chat.Formatter.getProfessionImage(client.professionId));
        return div.click(onclick).append($("<div class='friend_avatar' />").append(avatar, "<div class='friend_avatar_frame' />"), charData, $("<div class='friend_details' />").append(clientInfo, "<br />", Chat.Formatter.formatStatus(client)));
    }, formatStatus: function (client) {
        var stat = Chat.Formatter.getStatus(client.statusId);
        return "<span class='client_status " + client.id + "_status' title='" + stat.label + "'>"
            + "<img src=\'https://westrus.innogamescdn.com/images/chat/status_" + stat.icon + ".png?3\' /> "
            + "<span>" + stat.label + "</span>"
            + "</span>";
    }, getProfessionImage: function (professionId) {
        var label = Game.InfoHandler.getLocalString4ProfessionId(professionId).escapeHTML();
        return "<img src=\'https://westrus.innogamescdn.com/images/crafting/profsymbol_" + professionId + "_small.png' title='" + label + "' />";
    }, getClassImage: function (charClass) {
        var label = Game.InfoHandler.getLocalString4Charclass(charClass).escapeHTML(), url = 'https://westrus.innogamescdn.com/images/class_choose/class_' + charClass + '.png';
        return "<img class='client_class' src=\'" + url + "\?20' title='" + label + "' />";
    }, getStatus: function (statusId) {
        var obj = {icon: null, label: null};
        switch (statusId) {
            case Chat.Resource.Client.STATUS_OFFLINE:
                obj.icon = "offline";
                obj.label = "Оффлайн";
                break;
            case Chat.Resource.Client.STATUS_ONLINE:
                obj.icon = "online";
                obj.label = "Онлайн";
                break;
            case Chat.Resource.Client.STATUS_IDLE:
                obj.icon = "idle";
                obj.label = "отсутствует"
                break;
            case Chat.Resource.Client.STATUS_UNKNOWN:
            default:
                obj.icon = "unknown";
                obj.label = "Тайна";
                break;
        }
        obj.label = obj.label.escapeHTML();
        return obj;
    }
};
Chat.Friendslist = function () {
    var friends = {};
    var addFriend = function (data, init) {
        if (!data || !data.id)
            return false;
        var client = Chat.Resource.Manager.acquireClient(data);
        if (data.offline) {
            client.playerId = data.playerId;
            client.setStatus(Chat.Resource.Client.STATUS_OFFLINE);
        }
        else client.setActioned(new Date().getTime()).updateStatus();
        friends[data.id] = data.id;
        if (!init)EventHandler.signal("friend_added", [client]);
        return true;
    };
    var removeFriend = function (id) {
        var client;
        if (!id || !friends[id])
            return false;
        client = Chat.Resource.Manager.getClient(id);
        delete friends[id];
        EventHandler.signal("friend_removed", [client.playerId]);
        Chat.Resource.Manager.releaseClient(id);
    };
    var sync = function (newList) {
        var toAdd = [], toRemove = [], playerId, client, i;
        for (playerId in newList) {
            if (!friends[newList[playerId].id])toAdd.push(newList[playerId]);
        }
        for (clientId in friends) {
            client = Chat.Resource.Manager.getClient(clientId);
            if (!newList[client.playerId])toRemove.push(clientId);
        }
        for (i = 0; i < toAdd.length; i++) {
            addFriend(toAdd[i], true);
        }
        for (i = 0; i < toRemove.length; i++) {
            removeFriend(toRemove[i]);
        }
    };
    return {
        getFriends: function () {
            var cfr = [];
            for (var id in friends) {
                cfr.push(Chat.Resource.Manager.getClient(id));
            }
            return cfr;
        }, isFriend: function (client) {
            if (client instanceof Chat.Resource.Client)
                client = client.id;
            return undefined !== friends[client];
        }, addFriend: addFriend, removeFriend: removeFriend, flush: function () {
            for (var k in friends)
                removeFriend(k);
        }, sync: sync
    };
}();

Chat = Chat || {};
Chat.Resource = {};
Chat.Resource.Manager = function () {
    var rooms = {}, clients = {};
    var acquireRoom = function (roomData) {
        var room = rooms[roomData.id], created = false;
        if (undefined === room) {
            room = Chat.Resource.RoomFactory(roomData);
            rooms[roomData.id] = room;
            created = true;
        }
        room.update(roomData);
        if (created) {
            EventHandler.signal("chat_room_added", [room]);
        }
        return room;
    };
    var acquireClient = function (clientData) {
        var client = clients[clientData.id];
        if (undefined === client) {
            if (Chat.MyId == clientData.id)
                client = new Chat.Resource.LocalClient(clientData.id); else
                client = new Chat.Resource.Client(clientData.id);
            clients[client.id] = client;
        }
        client.update(clientData);
        return client;
    };
    var getRoom = function (id) {
        return rooms[id] || null;
    };
    return {
        acquireRoom: acquireRoom, getRoom: getRoom, getRooms: function (asObj) {
            var tmp = {};
            for (var k in rooms)tmp[k] = rooms[k];
            return tmp;
        }, getGeneralRoom: function () {
            for (var k in rooms) {
                if (rooms[k]instanceof Chat.Resource.RoomGeneral)
                    return rooms[k];
            }
            return null;
        }, releaseRoom: function (id) {
            if (id instanceof Chat.Resource.Room)
                id = id.id;
            if (undefined !== rooms[id]) {
                var room = rooms[id];
                if (0 != room.clients.length)
                    return false;
                delete rooms[id];
                EventHandler.signal("chat_room_removed", [room]);
            }
            return true;
        }, hasRoom: function (id) {
            return null != getRoom(id);
        }, acquireClient: acquireClient, getClient: function (id) {
            return clients[id] || null;
        }, getClients: function () {
            var tmp = {};
            for (var k in clients)tmp[k] = k;
            return tmp;
        }, releaseClient: function (id) {
            if (id instanceof Chat.Resource.Client)
                id = id.id;
            if (id == Chat.MyId || Chat.Friendslist.isFriend(id))
                return false;
            if (undefined !== clients[id]) {
                var client = clients[id];
                if (!$.isEmptyObject(client.rooms))
                    return false;
                delete clients[id];
                client.setStatus(Chat.Resource.Client.STATUS_OFFLINE);
                EventHandler.signal("chat_client_removed", [client]);
            }
            return true;
        }
    }
}();
Chat.Resource.Client = function (id) {
    this.id = id;
    this.rooms = {};
};
Chat.Resource.Client.STATUS_OFFLINE = 0;
Chat.Resource.Client.STATUS_UNKNOWN = 1;
Chat.Resource.Client.STATUS_IDLE = 2;
Chat.Resource.Client.STATUS_ONLINE = 3;
Chat.Resource.Client.prototype = {
    update: function (data) {
        if (this.id != data.id)
            throw"Chat.Resource.Client Identifier mismatch!";
        this.playerId = data.westid;
        this.level = data.level;
        this.duelLevel = data.duelLevel;
        this.gm = data.gm;
        this.pname = data.name;
        this.charClass = data.cclass;
        this.subClass = data.subclass;
        this.townRights = data.town_rights;
        this.townId = data.townId;
        this.allianceId = data.allianceId;
        this.avatar = data.avatar;
        this.professionId = data.professionId;
        this.mpi = !!data.mpi;
        this.myself = (data.myself !== undefined) ? data.myself : (this.playerId == Character.playerId);
        this.setActioned(data.actioned);
        if (undefined == this.statusId)this.updateStatus();
    }, run: function (timestamp) {
        if (this.statusId != Chat.Resource.Client.STATUS_OFFLINE)
            this.updateStatus();
    }, setActioned: function (actioned) {
        if (undefined == this.actioned)this.actioned = 0;
        this.actioned = Math.max(this.actioned, actioned || 0);
        return this;
    }, setStatus: function (statusId) {
        var oldStatus = this.statusId;
        this.statusId = statusId;
        if (oldStatus != this.statusId)
            EventHandler.signal("client_status_changed", [this]);
        return this;
    }, updateStatus: function () {
        if (this.isStranger()) {
            this.setStatus(Chat.Resource.Client.STATUS_UNKNOWN);
            return;
        }
        var idle = (new Date().getTime() - this.actioned) > 300000;
        this.setStatus(idle ? Chat.Resource.Client.STATUS_IDLE : Chat.Resource.Client.STATUS_ONLINE);
        return this;
    }, joined: function (room) {
        if (!(room instanceof Chat.Resource.Room))
            throw"No Chat.Resource.Room given.";
        if (-1 == jQuery.inArray(this.id, room.clients))
            return false;
        this.rooms[room.id] = true;
        return true;
    }, left: function (room) {
        if (!(room instanceof Chat.Resource.Room))
            throw"No Chat.Resource.Room given.";
        if (-1 != jQuery.inArray(this.id, room.clients))
            return false;
        delete this.rooms[room.id];
        if ($.isEmptyObject(this.rooms))
            Chat.Resource.Manager.releaseClient(this);
        return true;
    }, leaveAll: function () {
        var room;
        for (var k in this.rooms) {
            room = Chat.Resource.Manager.getRoom(k);
            if (room)room.leave(this);
        }
        this.rooms = {};
        Chat.Resource.Manager.releaseClient(this);
    }, setRoomState: function (roomid, state) {
        this.rooms[roomid] = state;
        EventHandler.signal("chat_room_state_changed_" + roomid, [roomid, state]);
    }, isRoomDisabled: function (roomid) {
        return undefined === this.rooms[roomid] || !this.rooms[roomid];
    }, isStranger: function () {
        if (Chat.MyId == this.id)return false;
        var my = Chat.MyClient;
        return !(Chat.Friendslist.isFriend(this) || (0 != this.townId && this.townId == my.townId) || (0 != this.allianceId && this.allianceId == my.allianceId));
    }
};
Chat.Resource.Client.prototype.parent = Chat.Resource.Client.prototype;
Chat.Resource.LocalClient = function (id) {
    this.id = id;
    this.rooms = {};
};
Chat.Resource.LocalClient.prototype = jQuery.extend(new Chat.Resource.Client, {
    update: function (data) {
        this.parent.update.call(this, data);
        this.avatar = data.avatar;
        this.x = data.x;
        this.y = data.y;
        this.townX = data.town_x;
        this.townY = data.town_y;
        this.experience = data.experience;
        this.rewardGranted = data.rewardGranted;
        this.money = data.money;
        this.coupons = data.coupons;
        this.deposit = data.deposit;
        this.veteranPoints = data.veteranPoints;
        this.energy = data.energy;
        this.energyDate = data.energy_date;
        this.energyRegen = data.energy_regen;
        this.health = data.health;
        this.healthDate = data.health_date;
        this.healthRegen = data.health_regen;
        this.lastDied = data.lastDied;
        this.duelProtection = data.duelProtection;
    }
});
Chat.Resource.RoomFactory = function (data) {
    var room = null;
    if (data instanceof Chat.Resource.Client) {
        room = new Chat.Resource.RoomClient(data);
    } else {
        switch (data.room) {
            case"town":
                room = new Chat.Resource.RoomTown(data.townid, data.x, data.y);
                break;
            case"general":
                room = new Chat.Resource.RoomGeneral(data.general_id);
                break;
            case"maneuver":
                room = new Chat.Resource.RoomManeuver(data.fortid, data.xy);
                break;
            case"fortbattle":
                room = new Chat.Resource.RoomFortBattle(data.fortid);
                break;
            default:
                room = new Chat.Resource.Room();
        }
    }
    room.init();
    return room;
};
Chat.Resource.Room = function (impl) {
    for (var prop in impl) {
        this[prop] = impl[prop];
    }
};
Chat.Resource.Room.prototype = {
    init: function () {
        this.clients = [];
        this.history = [];
        this.historyLimit = 10;
        this.listeners = [];
    }, update: function (data) {
        if (this.id && this.id != data.id)
            throw"Chat.Resource.Room update id mismatch.";
        this.id = data.id;
        if (!this.room)this.room = data.room;
        this.setTitle(data.title);
        this.setTopic(data.topic, data.topicSetter);
        this.v = data.v;
    }, join: function (client) {
        if (!(client instanceof Chat.Resource.Client))
            throw"No Chat.Resource.Client given.";
        if (-1 != jQuery.inArray(client.id, this.clients))
            return false;
        this.clients.push(client.id);
        client.joined(this);
        this.notify("ClientJoined", client);
        return true;
    }, leave: function (client) {
        if (!(client instanceof Chat.Resource.Client))
            throw"No Chat.Resource.Client given.";
        var idx = jQuery.inArray(client.id, this.clients);
        if (-1 == idx)
            return false;
        this.clients.splice(idx, 1);
        client.left(this);
        this.notify("ClientLeft", client);
        if (0 == this.clients.length)
            Chat.Resource.Manager.releaseRoom(this);
        if (client.id == Chat.MyId)
            this.dissolve();
        return true;
    }, dissolve: function () {
        if (this.clients.length == 0)return;
        var clients = this.clients;
        for (var i = 0; i < clients.length; i++) {
            var client = Chat.Resource.Manager.getClient(clients[i]);
            this.leave(client);
        }
        this.clients = [];
        Chat.Resource.Manager.releaseRoom(this);
    }, getType: function () {
        return this.room;
    }, getClientCount: function () {
        return this.clients.length;
    }, setTitle: function (title) {
        var changed = this.title != title;
        this.title = title;
        if (changed)
            this.notify("TitleChanged", title);
    }, getTitle: function () {
        return s('<strong>%1</strong>', this.title);
    }, setTopic: function (topic, setter) {
        var changed = this.topic != topic;
        this.topic = topic;
        this.topicSetter = setter;
        if (changed)
            this.notify("TopicChanged", topic, setter);
    }, getTopic: function () {
        return this.topic;
    }, getTopicSetter: function () {
        return this.topicSetter;
    }, send: function (message) {
        Chat.sendMessage(message, this);
    }, addMessage: function (message) {
        if (this.history.length > this.historyLimit)
            this.history.splice(0, this.historyLimit - this.history.length);
        this.history.push(message);
        this.notify("NewMessage", message);
    }, clearMessages: function () {
        this.history = [];
        this.notify("ClearMessages");
    }, addListener: function (callback, context) {
        if (typeof callback !== "function")
            throw"Invalid callback given.";
        this.listeners.push({callback: callback, context: context || this});
    }, removeListener: function (callback, context) {
        context = context || this;
        var newListeners = [], listener;
        for (var i = 0; i < this.listeners.length; i++) {
            listener = this.listeners[i];
            if (listener.callback != callback && listener.context != context) {
                newListeners.push(listener);
            }
        }
        this.listeners = newListeners;
    }, notify: function (name) {
        var args = [];
        for (var i = 1; i < arguments.length; i++)
            args.push(arguments[i]);
        for (var i = 0; i < this.listeners.length; i++) {
            this.listeners[i].callback.call(this.listeners[i].context, this, name, args);
        }
    }, read: function (state) {
        state = undefined === state ? true : state;
        this.notify("ReadStateChanged", state);
    }, getPlayerInfo: function (client) {
        return "";
    }, openClick: function () {
        if (Chat.MyClient && Chat.MyClient.isRoomDisabled(this.id))
            Chat.Request.SetOnlineState(this, true);
        ChatWindow.open(this);
    }, leaveClick: function () {
        Chat.Request.SwitchOnlineState(this);
    }
};
Chat.Resource.Room.prototype.parent = Chat.Resource.Room.prototype;
Chat.Resource.RoomTown = function (townId, x, y) {
    this.townId = townId;
    this.x = x;
    this.y = y;
};
Chat.Resource.RoomTown.prototype = new Chat.Resource.Room({
    getPlayerInfo: function (client) {
        var rights = [{key: "norights", name: "У тебя нет города"}, {
            key: "norights",
            name: "граждане"
        }, {key: "councillor", name: "горсовет"}, {key: "founder", name: "основатели"}];
        var right = rights[client.townRights];
        return "<img class='city_" + right.key + " city_rightsimg' style='width: 18px; height: 18px;'"
            + " src='https://westrus.innogamescdn.com/images/transparent.png'"
            + " title='<b>" + right.name.escapeHTML() + "</b>'>";
    }
});
Chat.Resource.RoomGeneral = function (generalId) {
    this.generalId = generalId;
};
Chat.Resource.RoomGeneral.prototype = new Chat.Resource.Room({
    getTitle: function () {
        return "<strong>" + s("Салун %1", this.generalId) + "</strong>";
    }
});
Chat.Resource.RoomFortBattle = function (fortId) {
    this.fortId = fortId;
    this.ranks = {};
    window.setTimeout(function () {
        if (this.battleData.isFinished)return;
        EventHandler.signal('fort_battle_joined', [this]);
    }.bind(this), 10);
};
Chat.Resource.RoomFortBattle.prototype = new Chat.Resource.Room({
    getPlayerInfo: function (client) {
        var titles = Chat.rankTitles, myrank = ((this.ranks[client.playerId] || {}).rank || 0) + 2, imgs = {
            0: ["traitor", titles.traitor],
            1: ["reservist", titles.reservist],
            2: ["recruit", titles.recruit],
            3: ["private", titles["private"]],
            4: ["captain", titles.captain],
            5: ["general", titles.general]
        };
        return '<img class="chat_servicegrade_' + imgs[myrank][0] + '" src="https://westrus.innogamescdn.com/images/transparent.png" title="<b>' +
            imgs[myrank][1] + '</b>"/>';
    }, update: function (data) {
        this.parent.update.call(this, data);
        this.battleData = {
            isFinished: data.battleFinished,
            defense: data.defense,
            start: data.start,
            x: data.x,
            y: data.y
        };
    }, updateRank: function (playerId, client, rank, position, isFreelancer) {
        if (this.ranks[playerId] && this.ranks[playerId].rank == rank) {
            this.ranks[playerId].position = position;
            return;
        }
        this.ranks[playerId] = {rank: rank, position: position, isfreelancer: isFreelancer};
        EventHandler.signal('chat_room_rank_changed', [this, client]);
        if (!client)return;
        this.join(client);
    }
});
Chat.Resource.RoomManeuver = function (fortId) {
    this.fortId = fortId;
};
Chat.Resource.RoomManeuver.prototype = new Chat.Resource.Room({
    leaveClick: function () {
        var time;
        if (this.started) {
            time = this.start - Chat.currentServerTime();
            ManeuverWindow.openBattleScreen(this.fortId, this.session, time);
        } else {
            ManeuverWindow.openManeuver(this.fortId);
        }
    }, update: function (data) {
        this.parent.update.call(this, data);
        this.fortMembers = data.fortmembers;
        this.joinRights = data.joinrights;
        this.attackerMax = data.attackermax;
        this.defenderMax = data.defendermax;
        this.fullHp = data.fullhp;
        this.session = data.session;
        this.started = data.started;
        this.start = data.startTime;
    }
});
Chat.Resource.RoomClient = function (client) {
    this.client = client;
    this.room = "client";
};
Chat.Resource.RoomClient.prototype = new Chat.Resource.Room({
    getTitle: function () {
        return "<strong>" + this.client.pname + "</strong>";
    }, leaveClick: function () {
        Chat.Resource.Manager.releaseRoom(this);
    }
});

Chat = Chat || {};
Chat.Request = function (operation, to, data) {
    this.op = operation;
    this.to = to || null;
    this.stamp = new Date().getTime();
    if (data) {
        var self = this;
        $.each(data, function (k, v) {
            self[k] = v;
        });
    }
};
Chat.Request.Nop = function () {
    Chat.Router.push(new Chat.Request("nop")).request();
};
Chat.Request.SwitchOnlineState = function (room) {
    Chat.Request.SetOnlineState(room, Chat.MyClient.isRoomDisabled(room.id));
};
Chat.Request.SetOnlineState = function (room, state) {
    if (!(room instanceof Chat.Resource.Room))
        room = Chat.Resource.Manager.getRoom(room);
    if (!room)return;
    if (!Chat.MyClient.isRoomDisabled(room.id) == state)
        return;
    Chat.MyClient.setRoomState(room.id, state);
    Chat.Router.push(new Chat.Request("setonlinestate", null, {room: room.id, state: state})).request();
}
Chat.Request.Send = function (message, room) {
    if (!message)
        return;
    if (!(room instanceof Chat.Resource.Room))
        room = Chat.Resource.Manager.getRoom(room);
    if (!room)return;
    if (room instanceof Chat.Resource.RoomClient)
        return Chat.Request.Tell(room.client.pname, message);
    Chat.Router.push(new Chat.Request("send", room.id, {message: message})).request();
};
Chat.Request.Tell = function (to, message) {
    Chat.Router.push(new Chat.Request("send", to, {message: message, tell: true})).request();
};
Chat.Request.SetTopic = function (room, topic) {
    Chat.Router.push(new Chat.Request("topic", room.id, {message: topic.trim()})).request();
};
Chat.Request.JoinCustom = function (data) {
    Chat.Router.push(new Chat.Request("join", null, {message: data})).request();
};
Chat.Request.BanPlayer = function (name) {
    Chat.Router.push(new Chat.Request("ban", null, {message: name})).request();
};
Chat.Request.UnBanPlayer = function (name) {
    Chat.Router.push(new Chat.Request("unban", null, {message: name})).request();
};
Chat.Request.SetRoomRights = function (room, grp) {
    if (!(room instanceof Chat.Resource.RoomFortBattle)) {
        return Chat.pushSystemMessage("К сожалению, участники не знают какое у них звание. Попробуй использовать эту возможность в чате битвы за форт.");
    }
    if (!grp)return;
    var g, k;
    grp = grp.toLowerCase();
    for (k in Chat.rankTitles) {
        if (Chat.rankTitles[k].toLowerCase() == grp) {
            g = k;
            break;
        }
    }
    if (!g) {
        return Chat.pushSystemMessage("В системе нет такого ранга.");
    }
    Chat.Router.push(new Chat.Request("setChannelRights", room.id, {message: g})).request();
};
Chat.Request.AffrontUser = function (affectedPlayerId, description) {
    if (undefined == affectedPlayerId)return;
    Chat.Router.push(new Chat.Request('affront', null, {
        affectedplayerid: affectedPlayerId,
        description: description
    })).request();
};
Chat.Request.MpiInvite = function (playerId, code, verify) {
    Chat.Router.push(new Chat.Request('mpi_invite', null, {playerid: playerId, code: code, verify: verify})).request();
};

(function () {
    Chat = Chat || {};
    var preinit = [], initStatus = 0, storageEnabled = undefined !== window.sessionStorage;
    if (storageEnabled) {
        var storeTypes = ['Text', 'TellReceived', 'TellConfirmed'], storeKey = null, storeMax = 20, storage = [];
        $(window).bind('beforeunload', function () {
            if (null == storeKey)return;
            var toSave = [], i, len, data = JSON.parse(sessionStorage.getItem(storeKey)) || [], roomId, payload;
            data = data.concat(storage);
            for (i = 0, len = data.length; i < len; i++) {
                payload = data[i].payload;
                if (typeof payload.to === 'string') {
                    roomId = payload.to;
                } else if (payload.to && payload.to.id) {
                    roomId = payload.to.id;
                } else if (payload.from && payload.from.id) {
                    roomId = payload.from.id;
                }
                if (ChatWindow.Tabs.opened[roomId]) {
                    toSave.push(data[i]);
                }
            }
            while (toSave.length > storeMax) {
                toSave.shift();
            }
            sessionStorage.setItem(storeKey, JSON.stringify(toSave));
        });
    }
    Chat.ResponseHandler = function (response) {
        if (!response && DEBUG)
            throw"No Message given.";
        if ("Status" !== response.id && !Chat.MyId) {
            if ("Text" === response.id || "RankingInfo" == response.id)
                preinit.push(response);
            return;
        }
        var handler = Response[response.id];
        if (undefined === handler)
            throw"Unkown Response Type: " + response.id;
        if (storageEnabled && 2 == initStatus && -1 != $.inArray(response.id, storeTypes)) {
            storage.push(response);
        }
        try {
            handler(response);
        } catch (e) {
            console.error(e.stack);
        }
        if (0 == initStatus && (initStatus = 1)) {
            if (storageEnabled) {
                storeKey = 'chat_' + Chat.MyId;
                preinit = JSON.parse(sessionStorage.getItem(storeKey)) || [];
            }
            for (var i = 0; i < preinit.length; i++)
                Chat.ResponseHandler(preinit[i]);
            preinit = null;
            initStatus = 2;
        }
    };
    var Response = {};
    Response.System = function (response) {
        var msg = "", toast = false;
        switch (response.payload) {
            case"MissingParameters":
                msg = "Ты бормочешь себе под нос какую-то белиберду. Рекомендую воспользоваться командой /help.";
                break;
            case"NoSuchPlayer":
                msg = "Нет такого игрока";
                break;
            case"TellsDisabled":
                msg = "Больше двух — говорить вслух!";
                break;
            case"InvalidCondition":
                msg = "Это не работает.";
                break;
            case"Success":
                msg = "Успех.";
                break;
            case"Shutdown":
            case"Restart":
                msg = "Сервер будет перезапущен";
                toast = true;
                break;
            case"Update":
                msg = "Ожидаются технические работы. Сервер будет недоступен некоторое время.";
                toast = true;
                break;
            default:
                msg = "Произошла ошибка."
                break;
        }
        Chat.pushSystemMessage(msg);
        if (toast)new west.notification.ToastServerNotification(msg).show();
    }
    Response.Status = function (response) {
        var data = response.payload, manager = Chat.Resource.Manager;
        Chat.sessionHash = data.sessionHash;
        if (Chat.MyId && Chat.MyClient) {
            Response.UserUpdate({payload: data.self});
        } else {
            Chat.MyId = data.self.id;
            Chat.MyClient = manager.acquireClient(data.self);
        }
        var oldClients = manager.getClients();
        for (var i = 0; i < data.clients.length; i++) {
            var c = manager.acquireClient(data.clients[i]);
            delete oldClients[c.id];
        }
        delete oldClients[Chat.MyClient.id];
        for (var k in oldClients) {
            var c = manager.getClient(k);
            if (c)c.leaveAll();
        }
        var oldRooms = manager.getRooms();
        for (var i = 0; i < data.rooms.length; i++) {
            var droom = data.rooms[i], room = manager.acquireRoom(droom.roomdescription);
            for (var j = 0; j < droom.members.length; j++)
                room.join(manager.getClient(droom.members[j]));
            delete oldRooms[room.id];
        }
        for (var i = 0; i < data.disabledrooms.length; i++)
            Chat.MyClient.setRoomState(data.disabledrooms[i], false);
        for (var k in oldRooms) {
            var r = manager.getRoom(k);
            if (r)r.dissolve();
        }
        Chat.Friendslist.sync(response.payload.friendlist);
        if (0 == initStatus) {
            Chat.inited = true;
            EventHandler.signal("chat_init", null, true);
        }
    };
    Response.ClientJoined = function (response) {
        var room = Chat.Resource.Manager.getRoom(response.payload.rid), client = Chat.Resource.Manager.acquireClient(response.payload.client);
        if (!room)return;
        room.join(client);
    };
    Response.ClientLeft = function (response) {
        var room = Chat.Resource.Manager.getRoom(response.payload.rid), client = Chat.Resource.Manager.getClient(response.payload.cid);
        if (!room || !client)return;
        room.leave(client);
        if (room instanceof Chat.Resource.RoomManeuver && Chat.MyClient && response.payload.id == Chat.MyClient.id) {
            ManeuverWindow.reset();
        }
    };
    Response.Text = function (response) {
        var from = Chat.Resource.Manager.getClient(response.payload.cid), to = Chat.Resource.Manager.getRoom(response.payload.to);
        if (!from || !to || Chat.IgnoreButler.contains(from.pname))return;
        if (2 == initStatus)from.setActioned(new Date().getTime()).updateStatus();
        to.addMessage(Chat.Formatter.formatResponse(to, from, response.payload.message, response.t));
        if (2 == initStatus)to.read(Character.playerId == from.playerId);
    };
    Response.Broadcast = function (response) {
        Chat.pushSystemMessage(response.payload, true);
        new west.notification.ToastServerNotification(response.payload).show();
    };
    Response.UserUpdate = function (response) {
        if (!Chat.MyId || !Chat.MyClient)return;
        if (Chat.MyClient.id != response.payload.id) {
            Chat.Resource.Manager.acquireClient(response.payload);
            return;
        }
        var upd = new Chat.Resource.LocalClient(response.payload.id), self = Chat.MyClient;
        upd.update(response.payload);
        if (upd.x != self.x || upd.y != self.x) {
            Character.setPosition(upd.x, upd.y);
            if (true == upd.rewardGranted) {
                Ajax.remoteCall('randomevent', 'get_random_event', {}, function (resp) {
                    if (resp.error)return;
                    new west.gui.Dialog().setTitle(resp.msg.title).setText("<div class='txcenter'>" + resp.msg.content + "</div>").addButton("ok").show();
                    return true;
                });
            }
        }
        if (Character.level < upd.level) {
            Character.setLevel(upd.level);
        }
        if (upd.duelLevel != Character.duelLevel) {
            Character.setDuelLevel(upd.duelLevel || Character.level);
        }
        if (self.experience < upd.experience && Character.experience < upd.experience)
            Character.setExperience(upd.experience);
        Character.healthRegen = upd.healthRegen;
        Character.setHealth(upd.health, upd.healthDate);
        Character.energyRegen = upd.energyRegen;
        Character.setEnergy(upd.energy, upd.energyDate);
        Character.setUpb(upd.coupons);
        Character.setVeteranPoints(upd.veteranPoints);
        Character.setDeposit(upd.deposit);
        Character.setMoney(upd.money);
        Character.setHomeTown(upd.townId, upd.townX, upd.townY);
        Character.setTownRights(upd.townRights);
        Character.setLastDied(upd.lastDied);
        Character.setDuelProtection(upd.duelProtection);
        var avaeq = true;
        ["avatar_cfg_background", "avatar_cfg_head", "avatar_cfg_eyes", "avatar_cfg_nose", "avatar_cfg_mouth", "avatar_cfg_hat", "avatar_cfg_hair", "avatar_cfg_cloth", "avatar_cfg_beard1", "avatar_cfg_beard2", "avatar_cfg_skin_1", "avatar_cfg_skin_2", "avatar_cfg_accessoires_1", "avatar_cfg_accessoires_2", "avatar_cfg_pose"].each(function (k) {
            if (upd.avatar[k] != self.avatar[k])avaeq = false;
        });
        if (!avaeq)EventHandler.signal("charavatar_changed_" + upd.playerId, [upd]);
        self.update(response.payload);
    };
    Response.CharDeathStateChanged = function (response) {
        EventHandler.signal('character_revived', [response.payload.itemSlot]);
    };
    Response.RankingInfo = function (response) {
        var room = Chat.Resource.Manager.getRoom(response.payload.rid);
        if (!(room instanceof Chat.Resource.RoomFortBattle))return;
        var codedRanks = response.payload.ranks, members = {};
        for (var i = 0; i < room.clients.length; i++) {
            var client = Chat.Resource.Manager.getClient(room.clients[i]);
            if (!client)continue;
            members[client.playerId] = client;
        }
        for (var i = 0; i < codedRanks.length; i += 2) {
            var userid = codedRanks[i], rankbits = codedRanks[i + 1], isFreelancer = rankbits & 1, rank = ((rankbits >> 1) & 15) - 3, position = (rankbits >> 6) - 1;
            room.updateRank(userid, members[userid], rank, position, isFreelancer);
        }
    };
    Response.RoomInfo = function (response) {
        var room = Chat.Resource.Manager.getRoom(response.payload.id);
        if (!room)return;
        room.setTitle(response.payload.title);
    };
    Response.NoTopicRights = function (response) {
        var room = Chat.Resource.Manager.getRoom(response.payload);
        if (!room)return;
        Chat.pushSystemMessage(s("Твои усилия задать тему чата «%1» были тщетными.", room.getTitle()));
    };
    Response.NoTalkRights = function (response) {
        var room = Chat.Resource.Manager.getRoom(response.payload);
        if (!room)return;
        Chat.pushSystemMessage(s("Тебе не положено говорить в чате «%1».", room.getTitle()));
    };
    Response.Topic = function (response) {
        var topic = response.payload.topic, setter = response.payload.topicsetter.escapeHTML(), room = Chat.Resource.Manager.getRoom(response.payload.id);
        if (!room)return;
        room.setTopic(topic, setter);
        var text = topic ? s("Игрок %1 поменял тему чата на: %2.", setter, topic) : s("Игрок %1 удалил тему чата.", setter);
        Chat.pushMessage(room, Chat.Formatter.formatResponse(room, room, text, response.t));
    };
    Response.Affront = function (response) {
        Suggestion.handleChatResponse(response);
    };
    Response.Pshop = function (response) {
        EventHandler.signal("pshop_item_changed", [response.payload]);
    };
    Response.PshopRemoved = function (response) {
        EventHandler.signal("pshop_item_removed", [response.payload.itemId]);
    };
    Response.ReportChanged = function (response) {
        if (!wman.getById('messages'))
            Character.setToRead('reports', true);
        WestUi.NotiBar.add(new OnGoingReportReceivedEntry(response.payload));
    };
    Response.ReadState = function (response) {
        Character.setToRead('reports', !response.payload.reports);
        Character.setToRead('messages', !response.payload.messages);
        Character.setToRead('townforum', !response.payload.town_forum);
        Character.setToRead('inventory', !response.payload.inventory);
    };
    Response.AchievementChanged = function (response) {
        var client = Chat.Resource.Manager.getClient(response.payload.cid);
        if (!client)return;
        if (Character.playerId == client.playerId)
            achieved_popup([response.payload.achievementId]);
        if (response.payload.worldsFirst) {
            var display = response.payload.achievementName;
            if (undefined == display)display = response.payload.achievementId;
            Chat.pushSystemMessage(s('%1 — первый игрок получивший достижение «%2».', client.pname, display));
        }
    };
    Response.TrackingAchievementChanged = function (response) {
        Character.trackAchievement(response.payload.progress, true);
    };
    Response.FriendInvitation = function (response) {
        WestUi.NotiBar.add(new OnGoingFriendInvitationEntry(response.payload));
    }
    Response.JoinFailed = function (response) {
        Chat.pushSystemMessage("Произошла ошибка! Возможные причины: в чате нет мест, у тебя уже открыт этот чат, введён неправильный пароль.");
    };
    Response.Intermediate = function (response) {
        for (var cid in response.payload.activity) {
            var c = Chat.Resource.Manager.getClient(cid);
            if (null != c)c.setActioned(response.payload.activity[cid]);
        }
        if (-1 != response.payload.tipid)
            WestUi.showTip(response.payload.tipid);
    };
    Response.GMChanged = function (response) {
        var client = Chat.Resource.Manager.getClient(response.payload.cid);
        if (!client)return;
        client.gm = response.payload.gmstate;
    };
    Response.Banned = function (response) {
        var bantill = parseInt(response.payload.bantill);
        if (bantill && -1 != bantill) {
            bantill = (bantill - new Date().getTime()) / 1000;
            Chat.pushSystemMessage(s("%1 блокировки за %2", bantill.getTime2EndString(), response.payload.reason));
        } else {
            Chat.pushSystemMessage(s("Тебя заблокировали за %1", response.payload.reason));
        }
    };
    Response.QuestDataChanged = function (response) {
        batch(QuestLog.updateQuestLog, 5000, 'questtracker-refresh');
    };
    Response.SesStatChanged = function (response) {
        for (var stat in response.payload) {
            EventHandler.signal('ses:' + stat, [response.payload[stat]]);
        }
    };
    Response.CommEventChanged = function (response) {
        resp = response.payload;
        EventHandler.signal("community_event_changed", [resp.event_id, resp.event_stage]);
    };
    Response.TellReceived = function (response) {
        if (Chat.IgnoreButler.contains(response.payload.from.name))return;
        var from = Chat.Resource.Manager.acquireClient(response.payload.from), room = Chat.Resource.Manager.acquireRoom(from);
        if (2 == initStatus)from.setActioned(new Date().getTime()).updateStatus();
        room.addMessage(Chat.Formatter.formatResponse(room, from, response.payload.message, response.t));
        room.read(false);
        EventHandler.signal("chat_tell_received", [room]);
    };
    Response.TellConfirmed = function (response) {
        var to = Chat.Resource.Manager.acquireClient(response.payload.to), room = Chat.Resource.Manager.acquireRoom(to);
        Chat.MyClient.setActioned(new Date().getTime()).updateStatus();
        room.addMessage(Chat.Formatter.formatResponse(room, Chat.MyClient, response.payload.message, response.t));
        EventHandler.signal("chat_tell_confirmed", [room]);
    };
    Response.TellFailed = function (response) {
        Chat.pushSystemMessage("Шепнуть можно только тем игрокам, которых видно в окне чата.");
    };
    Response.FriendAdded = function (response) {
        response.payload.actioned = new Date().getTime();
        Chat.Friendslist.addFriend(response.payload);
    };
    Response.FriendRemoved = function (response) {
        Chat.Friendslist.removeFriend('client_' + response.payload);
    };
    Response.FriendJoined = function (response) {
        if (Chat.Friendslist.addFriend(response.payload))
            new west.notification.ToastOnlineNotification(response.payload.name).show();
    };
    Response.FriendLeft = function (response) {
        var c = Chat.Resource.Manager.getClient(response.payload.id);
        if (null == c) {
            Chat.Friendslist.removeFriend(response.payload.id);
        } else {
            c.setStatus(Chat.Resource.Client.STATUS_OFFLINE);
            EventHandler.signal("friend_left", [c]);
        }
    };
    Response.Maneuver = function (response) {
        var payload = response.payload, room = Chat.Resource.Manager.getRoom('room_maneuver_' + payload.fortid);
        if (room && !room.started) {
            room.started = true;
            room.session = payload.maneuver_session;
            room.start = payload.time + 60000;
        }
        ManeuverWindow.openBattleScreen(payload.fortid, payload.maneuver_session, 60000 + payload.time - Chat.currentServerTime());
    };
    Response.ManeuverPlayerInfo = function (response) {
        ManeuverWindow.maneuverdata.playerinfo = response.payload.playerinfo;
        ManeuverWindow.updateMembers();
    };
    Response.FortBattleNoRightChangeRights = function (response) {
        var room = Chat.Resource.Manager.getRoom(response.payload);
        if (!room)return;
        Chat.pushSystemMessage(s("Тебе не положено управлять привилегиями чата «%1».", room.getTitle()));
    };
    Response.FortBattleRightsFailed = function (response) {
        var room = Chat.Resource.Manager.getRoom(response.payload);
        if (!room)return;
        Chat.pushSystemMessage(s("Такого звания мы пока что не знаем.", room.getTitle()));
    };
    Response.FortBattleRightsChanged = function (response) {
        Chat.pushSystemMessage(s("Право голоса — %1", Chat.rankTitles[response.payload]));
    };
    Response.FortBattleRoomClosing = function (response) {
        var room = Chat.Resource.Manager.getRoom(response.payload.id);
        if (!room)return;
        Chat.pushSystemMessage(s("Битва закончена, чат «%1» будет закрыт в %2.", room.getTitle(), get_server_date_string(true, response.payload.channelclose, true)));
        room.battleData.isFinished = true;
        EventHandler.signal('fort_battle_end', [room.fortId]);
    };
    Response.GameAnnouncement = function (response) {
        var onclick;
        if (response.payload.fortId) {
            onclick = response.payload.start + '>new Date().getTime() ? ' + 'FortBattleWindow.open(' + response.payload.fortId + ') : ' + 'new UserMessage(\'' + "Не надо было ждать до последней минуты. Битва началась без тебя.".escapeHTML() + '\').setTitle(\'' + "Время прошло".escapeHTML() + '\').show();';
            Chat.pushSystemMessage(s('Скоро состоится битва. Ты можешь предложить свою помощь и %1принять участие%2.', '<a href="javascript:void(0);" onclick="' + onclick.escapeHTML() + '">', '</a>'));
        }
    };
    Response.MpiInvite = function (response) {
        EventHandler.signal("mpi_invitation", [response.payload.player, response.payload.code]);
    };
    Response.CinemaConfirmed = function (response) {
        EventHandler.signal("cinema_confirmation", [response.payload.hash]);
    };
}());

Chat = Chat || {};
Chat.Router = function () {
    var invalidSid = false, openCnt = 0, lastRequestTime = null, lastMessageTime = null, lastActionedTime = null, requestDelay = 1000, messagesSent = 0, queue = [], running = false;
    var initTime = new Date().getTime(), clientConnectionId = ("abcdefghijklmnopqrstuvwxyz" + initTime).shuffle().substr(5, 18)
        + (("" + initTime).substr(-4));
    var updateLastActioned = function () {
        lastActionedTime = new Date().getTime();
    };
    $(document).click(updateLastActioned).keypress(updateLastActioned);
    var onError = function (error) {
        var cases = {
            "sid invalidated by login": function () {
                invalidSid = true;
                Player.forceLogout("Твоя идентификационная информация была изменена. Возможно, ты сам зашёл с другого компьютера. Чтобы продолжить игру с этого компьютера, тебе нужно снова зайти с главной страницы.");
                return true;
            }, "invalid sid": function () {
                invalidSid = true;
                Player.forceLogout("Чтобы продолжить игру, перезайди в неё с главной страницы.");
                return true;
            }, "admin login": function () {
                invalidSid = true;
                Chat.pushSystemMessage("Административный вход — чат отключён.");
                return true;
            }
        }
        var k;
        for (k in cases) {
            if (error.match(new RegExp(k))) {
                if (cases[k]())
                    return;
            }
        }
    };
    var onComplete = function (data) {
        if (invalidSid)
            return false;
        if (data.error)
            onError(data.error);
        if (!--openCnt)
            nop();
        if (data.error) {
            if (DEBUG)console.log(data.error);
            ErrorLog.log("Chat server error response: " + data.error);
            return false;
        }
        Chat.timeinfo = {servertime: data.timenow, clienttime: new Date().getTime()};
        data.batch.sort(function (a, b) {
            return a.t > b.t;
        });
        var t = null, b = null;
        for (var i = 0; i < data.batch.length; i++) {
            b = data.batch[i];
            if (b.t >= lastMessageTime)
                lastMessageTime = b.t; else if (DEBUG && null != lastMessageTime)
                console.log("Received data which i might already processed.");
            Chat.ResponseHandler(b);
        }
        setTimeout(function () {
            request();
        }, 10);
        return true;
    };
    var request = function () {
        if (!running || openCnt > 1 || invalidSid || queue.length == 0)
            return false;
        if (lastRequestTime && new Date().getTime() -
            lastRequestTime < requestDelay) {
            setTimeout(request, requestDelay / 2);
            return true;
        }
        lastRequestTime = new Date().getTime();
        openCnt++;
        var batch = flush();
        var onError = function (jqXHR, error, errorObject) {
            if (DEBUG && error === 'parsererror')
                console.log('java servers response seems to be invalid json: ', jqXHR.responseText);
            if (!--openCnt && !invalidSid) {
                merge(batch);
                setTimeout(function () {
                    nop();
                }, 30000);
            }
        };
        var data = {
            messageid: ++messagesSent,
            clid: clientConnectionId,
            stamp: new Date().getTime(),
            actioned: lastActionedTime,
            batch: batch
        };
        Ajax.request({
            url: Game.serviceURL + '/' + Chat.serviceName,
            data: encodeURIComponent(JSON.stringify(data).replace(/\n/g, "\\n"))
        }).done(onComplete).fail(onError);
    };
    var push = function (request) {
        if (!running)return this;
        if (!(request instanceof Chat.Request))
            throw"No Chat.Request Object given.";
        queue.push(request);
        return this;
    };
    var merge = function (data) {
        for (var i = 0; i < data.length; i++)
            push(data[i]);
        queue.sort(function (a, b) {
            return a.stamp > b.stamp;
        });
        return this;
    };
    var flush = function () {
        var tmp = queue;
        queue = [];
        return tmp;
    };
    var nop = function () {
        for (var i = 0; i < queue.length; i++) {
            if ("nop" == queue[i].op)
                return;
        }
        Chat.Request.Nop();
        return this;
    };
    return {
        connect: function () {
            running = true;
            nop();
        }, disconnect: function () {
            running = false;
            flush();
        }, request: request, push: push
    };
}();

Chat = Chat || {};
Chat.Layout = Chat.Layout || {};
Chat.Layout.Window = function (uid) {
    this.uid = uid;
    this.activeTab = "";
    this.tabs = {};
    this.tabsl = 0;
    this.window = wman.open('chat_' + uid, null, "chat noreload nocloseall nominimize dontminimize").setResizeable(true).setSize(440, 220).setMaxSize(3000, 3000).addEventListener(TWE('TAB_CLOSED'), this.onTabClose, this).addEventListener(TWE('WINDOW_TAB_SWITCHED'), this.onTabSwitch, this).addEventListener(TWE('WINDOW_RESIZED'), this.onResize, this).addEventListener(TWE('WINDOW_DESTROY'), this.onDestroy, this).appendToContentPane("<div class='no_chatrooms_opened' style='padding: 5px'>"
        + "У тебя нет открытых чатов." + "</div>");
    this.window.dontCloseAll = true;
    var el = $(this.window.getMainDiv()).data("uid", uid);
    $.each([".tw2gui_window_shadow_box div", ".tw2gui_window_inset div", ".tw2gui_window_inset_bottom", ".tw2gui_window_inset_right", ".tw2gui_window_border", ".tw2gui_inner_splitwindow_container", ".tw2gui_inner_window_title div", ".tw2gui_window_pane", ".tw2gui_window_tabbar_fadeleft", ".tw2gui_window_tabbar_faderight"], function (i, k) {
        $(k, el).remove();
    });
    this.updateSettings();
    var opts = new west.gui.Selectbox();
    this.autoopen = new west.gui.Checkbox("Открывать автоматически");
    this.autoopen.setSelected(ChatWindow.Settings.autoOpen(this.uid));
    opts.addItem(0, "Развернуть окно").addEmpty().addItem(-1, "Вид", new west.gui.Selectbox().addItem(1, "Сохранить", "Сохраняет текущие размеры и положение окна.").addItem(2, "Загрузить", "Загружает сохранённое расположение.").addItem(3, "Сбросить", "Восстанавливает настройки по умолчанию.").addListener(this.onAction, this)).addItem(-1, "Список чатов", new west.gui.Selectbox().addItem(4, "Сохранить", "Открытые в данный момент чаты будут восстановлены при следующем заходе в игру.").addItem(5, "Удалить", "Открытые чаты не будут восстановлены в этом окне.").addListener(this.onAction, this)).addItem(6, this.autoopen.getMainDiv(), "При следующем заходе в игру чаты будут открыты автоматически.").addEmpty().addItem(7, "Дополнительные настройки").addListener(this.onAction, this).setWidth(225);
    $(".tw2gui_window_buttons", el).prepend($("<div class='chat_window_id'>" + this.uid + " #</div>"), $("<div class='tw2gui_window_buttons_settings' title='" + "Настройки".escapeHTML() + "' />").click(function (e) {
        opts.show(e);
    }));
    this.loadAppearance();
};
Chat.Layout.Window.prototype = {
    getMainDiv: function () {
        return this.window.getMainDiv();
    }, updateSettings: function () {
        var wnd = this.window.getMainDiv(), css = {opacity: parseInt(Config.get("chat.opacity")) / 100};
        $(".tw2gui_window_inset", wnd).css(css);
        return this;
    }, hasAppearance: function () {
        return null != ChatWindow.Settings.appearance(this.uid);
    }, resetAppearance: function () {
        this.window.setSize(100, 100);
        var el = $(this.window.getMainDiv()), pos = {};
        if ($("ui_bottomleft").is(':visible')) {
            pos = $("#ui_bottomleft").offset();
        } else if ($("#mpi-playerinfo").is(':visible')) {
            pos = $("#mpi-playerinfo").offset();
        } else {
            pos = {left: 0, top: $(window).height()};
        }
        pos.left = 10;
        pos.top -= el.height() + 20;
        el.offset(pos);
        return this;
    }, maximizeAppearance: function () {
        $(this.window.getMainDiv()).offset({left: 0, top: 0});
        this.window.setSize($(window).width(), $(window).height());
        return this;
    }, saveAppearance: function () {
        ChatWindow.Settings.appearance(this.uid, this.window.saveAppearance());
    }, loadAppearance: function () {
        var apr = ChatWindow.Settings.appearance(this.uid);
        if (apr)this.window.restoreAppearance(apr); else this.resetAppearance();
    }, addTab: function (tab, avoidSwitch) {
        if (!(tab instanceof Chat.Layout.Tab))
            throw"No Chat.Layout.WindowTab given.";
        $("div.no_chatrooms_opened", this.window.getMainDiv()).remove();
        if (undefined == this.tabs[tab.id]) {
            var self = this;
            this.window.addTab(tab.getTabTitle(), tab.id, function () {
                self.switchTab(tab.id);
            }, null, null, true);
            this.window.appendToContentPane(tab.getMainDiv());
            this.tabs[tab.id] = tab;
            this.tabsl++;
            Chat.Layout.Dropper($('._tab_id_' + tab.id, this.window.getMainDiv()), {
                targets: ['body', '.tw2gui_window.chat'],
                dragClass: 'chat',
                distance: 40
            }, function (e, el) {
                var wnd = undefined, uid = el.data('uid');
                if (undefined !== uid) {
                    if (self.uid == uid)return false;
                    wnd = ChatWindow.get(uid);
                }
                if (undefined === wnd) {
                    if (self.tabsl == 1)return false;
                    wnd = ChatWindow.create();
                    if (null == wnd)return false;
                    if (!wnd.hasAppearance()) {
                        var d = $(wnd.getMainDiv());
                        d.offset({left: Math.max(0, e.clientX - (d.width() / 2)), top: Math.max(0, e.clientY)});
                    }
                }
                self.closeTab(tab.id, false);
                ChatWindow.Tabs.open(wnd, tab.room);
                return true;
            });
        }
        if (!avoidSwitch || this.tabsl == 1)self.switchTab(tab.id);
        this.onFocus();
        return this;
    }, closeTab: function (id, avoidClose) {
        if (undefined === avoidClose || false === avoidClose)this.window.closeTab(id);
        if (undefined === this.tabs[id])return this;
        delete this.tabs[id];
        this.tabsl--;
        ChatWindow.Tabs.release(id);
        return this;
    }, switchTab: function (id) {
        this.window.switchTab(id);
    }, onAction: function (id) {
        switch (id) {
            case 0:
                this.maximizeAppearance();
                return;
            case 1:
                this.saveAppearance();
                break;
            case 2:
                this.loadAppearance();
                break;
            case 3:
                this.resetAppearance();
                break;
            case 4:
                var tmp = [];
                for (var rid in this.tabs) {
                    if (this.tabs[rid].room instanceof Chat.Resource.RoomClient)continue;
                    tmp.push(rid);
                }
                ChatWindow.Settings.rooms(this.uid, tmp);
                break;
            case 5:
                ChatWindow.Settings.rooms(this.uid, []);
                break;
            case 6:
                ChatWindow.Settings.autoOpen(this.uid, this.autoopen.isSelected());
                break;
            case 7:
                OptionsWindow.open("settings", "interface");
                return;
        }
        new UserMessage("Изменения сохранены", UserMessage.TYPE_SUCCESS).show();
    }, onFocus: function () {
        $(this.window.getMainDiv()).css("opacity", "1");
        if (this.tabs[this.activeTab])
            this.tabs[this.activeTab].onFocus();
        return this;
    }, onBlur: function () {
        $(this.window.getMainDiv()).css("opacity", parseInt(Config.get("chat.fade")) / 100);
        if (this.tabs[this.activeTab])
            this.tabs[this.activeTab].onBlur();
        return this;
    }, onTabClose: function (e, id) {
        $('.' + id, this.window.getMainDiv()).remove();
        this.closeTab(id, true);
    }, onTabSwitch: function (e, data) {
        this.activeTab = data.tabId;
        var tab = this.tabs[this.activeTab];
        if (tab)tab.update().onFocus();
    }, onResize: function () {
        if (this.tabs[this.activeTab])
            this.tabs[this.activeTab].update();
    }, onDestroy: function () {
        for (var k in this.tabs)
            this.closeTab(this.tabs[k].id);
        this.tabs = {};
        this.activeTab = "";
    }
};
Chat.Layout.Dropper = function (el, options, onDrop) {
    if (!jQuery.isFunction(onDrop))return;
    options = jQuery.extend({targets: [], distance: 0, dragClass: "dr_dropper"}, options);
    var draggable, passed, srcEvt, srcPos, distance, off;
    jQuery(el).live("mousedown.draggable", function (e) {
        if (jQuery(this).hasClass(options.dragClass) || (draggable && passed) || e.metaKey || e.shiftKey || e.ctrlKey)return;
        draggable = $("<div />").addClass(options.dragClass).append(jQuery(this).clone()).css({
            position: "absolute",
            "z-index": 9999
        });
        off = jQuery(el).offset();
        var margins = {
            left: (parseInt(draggable.css("marginLeft"), 10) || 0),
            top: (parseInt(draggable.css("marginTop"), 10) || 0)
        };
        off = {top: e.pageY - off.top + margins.top, left: e.pageX - off.left + margins.left};
        srcPos = {top: e.pageY - off.top + "px", left: e.pageX - off.left + "px"};
        if (-1 == options.distance)
            options.distance = Math.max(draggable.width(), draggable.height());
        jQuery(document).on("mousemove.draggable", drag).on("mouseup.draggable", drop);
        srcEvt = e;
        e.preventDefault();
    });
    function drag(e) {
        if (!passed) {
            if (Math.max(Math.abs(srcEvt.pageX - e.pageX), Math.abs(srcEvt.pageY - e.pageY)) >= options.distance) {
                passed = true;
                draggable.appendTo("body");
            } else return;
        }
        draggable.css({top: e.pageY - off.top, left: e.pageX - off.left});
    };
    function drop(e) {
        jQuery(document).off("mousemove.draggable", drag).off("mouseup.draggable", drop);
        if (!passed)return;
        var target = locateTarget(e);
        if (!target || !onDrop(e, target)) {
            draggable.animate(srcPos, function () {
                jQuery(this).remove();
            });
            draggable = passed = startPos = srcEvt = off = null;
        } else {
            draggable.remove();
        }
    };
    function locateTarget(e) {
        var target, result, minZ = 0, curZ, a = draggable.offset(), b;
        for (var i = 0; i < options.targets.length; i++) {
            jQuery(options.targets[i]).each(function (i, target) {
                target = jQuery(target);
                curZ = parseInt(target.css('z-index'));
                b = target.offset();
                if (a.left >= b.left && a.left <= b.left + target.width() && a.top >= b.top && a.top <= b.top + target.height()) {
                    if (minZ < curZ)return;
                    minZ = curZ;
                    result = target;
                }
            });
        }
        return result;
    };
};

var Chat = Chat || {};
Chat.Layout = Chat.Layout || {};
Chat.Layout.Tab = function (wnd, room) {
    if (!(room instanceof Chat.Resource.Room))
        throw"No Chat.Resource.Room given.";
    this.id = room.id;
    this.wnd = wnd;
    this.room = room;
    this.isWhisper = room instanceof Chat.Resource.RoomClient;
    this.mainDiv = $("<div class='chat_room " + room.id + "'>"
        + "<div class='chat_side contact_open'>"
        + "<div class='chat_contacts' />"
        + "<div class='chat_side_resize_icon' />"
        + "<div class='chat_side_resize' title='" + "Скрыть/Показать список контактов".escapeHTML() + "' />"
        + "</div>"
        + "<div class='chat_main'>"
        + "<div class='chat_topic' />"
        + "<div class='chat_messages selectable' />"
        + "<div class='chat_input'>"
        + "<div class='cbg'>"
        + "<input type='text' placeholder='" + "Отправить сообщение [Enter]" + "' class='message' />"
        + "</div>"
        + "</div>"
        + "</div>"
        + "</div>");
    this.input = $(".message", this.mainDiv);
    this.contactList = new west.gui.Scrollpane();
    this.scrollpane = new west.gui.Scrollpane(null, false, true);
    $(".chat_contacts", this.mainDiv).append(this.contactList.getMainDiv());
    var chatSide = $(".chat_side", this.mainDiv), noClick = false;
    $(".chat_side_resize", chatSide).click(function () {
        if (noClick)return;
        if (chatSide.hasClass("contact_open")) {
            chatSide.css({width: 0});
        } else {
            chatSide.css({width: ''});
        }
        chatSide.toggleClass("contact_open");
    }).click();
    chatSide.jqResize('.chat_side_resize', {
        onStart: function (ev) {
            this.w = chatSide.width();
            this.initX = this.lastX = ev.clientX;
        }, onDrag: function (ev, css) {
            noClick = true;
            this.w = css.width = this.w - (this.lastX - ev.clientX) * -1;
            this.lastX = ev.clientX;
            if (this.w <= 20)chatSide.removeClass("contact_open"); else chatSide.addClass("contact_open");
        }, onStop: function (ev) {
            setTimeout(function () {
                noClick = false;
            }, 1);
            self.updateTopic();
        }
    });
    $(".chat_messages", this.mainDiv).append(this.scrollpane.getMainDiv());
    if (this.isWhisper)$(".chat_side", this.mainDiv).remove();
    var self = this;
    this.input.keyup(function (e) {
        switch (e.keyCode) {
            case 13:
                self.send();
                break;
            case 38:
                self.input.val(Chat.History.up());
                break;
            case 40:
                self.input.val(Chat.History.down());
                break;
        }
    });
    for (var i = 0; i < room.clients.length; i++) {
        var c = Chat.Resource.Manager.getClient(room.clients[i]);
        if (!c)continue;
        this.addClient(c);
    }
    for (var i = 0; i < room.history.length; i++)
        this.addMessage(room.history[i]);
};
Chat.Layout.Tab.prototype = {
    getMainDiv: function () {
        return this.mainDiv;
    }, getTabTitle: function () {
        var tabicon = "";
        if (this.room instanceof Chat.Resource.RoomClient) {
            tabicon = Chat.Formatter.formatStatus(this.room.client);
        } else {
            tabicon = "<div class='chat_icons white channelpic-" + this.room.room + "' />";
        }
        return "<div id='tab_title_" + this.id + "' class='chat_tab_title " + (this.isWhisper ? "client" : "") + "'>"
            + tabicon
            + "<span class='room_title'>" + this.room.getTitle() + "</span>"
            + "</div>";
    }, addMessage: function (message) {
        this.scrollpane.getContentPane().append(message);
        return this;
    }, addClient: function (client) {
        var clist = this.contactList.getContentPane(), a = $("<div class='contact_" + client.id + "'>").append(Chat.Formatter.formatContactClient(client, this.room)), an = client.pname.toLowerCase();
        var chlds = clist.children(), b, bn;
        for (var i = 0; i < chlds.length; i++) {
            b = $(chlds[i]);
            bn = $(".client_name", b).text().toLowerCase().trim();
            if (an <= bn) {
                a.insertBefore(b);
                return this;
            }
        }
        clist.append(a);
        return this;
    }, removeClient: function (clientId) {
        $(".contact_" + clientId, this.contactList.getContentPane()).remove();
        return this;
    }, send: function () {
        var val = this.input.val();
        this.input.val("");
        this.room.send(val);
        return this;
    }, read: function (state) {
        var el = $("#tab_title_" + this.id);
        if (!this._interval && !state) {
            var self = this;
            this._interval = setInterval(function () {
                if (el) {
                    var ico = $(".chat_icons", el);
                    if (!ico.hasClass("new"))ico.addClass("new");
                    el.toggleClass("hover");
                }
            }, 1000);
        } else if (this._interval && state) {
            clearInterval(this._interval);
            this._interval = undefined;
            this.room.read(true);
            if (el) {
                $(".chat_icons", el).removeClass("new");
                el.removeClass("hover");
            }
        }
        return this;
    }, update: function () {
        this.scrollpane.scrollToEnd();
        this.updateTopic();
        return this;
    }, clear: function () {
        this.scrollpane.getContentPane().empty();
        return this;
    }, updateTopic: function () {
        var topic = this.room.getTopic(), el = $(".chat_topic", this.mainDiv);
        if (topic) {
            el.text(topic).prepend("<b>" + "Тема:" + "</b> ");
            el.show();
        } else {
            el.hide();
        }
        $(".chat_messages", this.mainDiv).css("top", topic ? (15 + el.height()) + "px" : "2px");
        return this;
    }, updateTitle: function () {
        $("#tab_title_" + this.id).replaceWith(this.getTabTitle());
        return this;
    }, onFocus: function () {
        this.input.focus();
        this.room.read(true);
        return this;
    }, onBlur: function () {
        this.input.blur();
        return this;
    }, init: function () {
        if (undefined != this.changeListener)return;
        var tab = this;
        this.changeListener = function (room, type, data) {
            if (tab.id != room.id)throw"Something is weird!";
            switch (type) {
                case"ClientJoined":
                    tab.addClient(data[0]);
                    break;
                case"ClientLeft":
                    tab.removeClient(data[0].id);
                    break;
                case"NewMessage":
                    tab.addMessage(data[0]);
                    break;
                case"ClearMessages":
                    tab.clear();
                    break;
                case"ReadStateChanged":
                    tab.read(data[0]);
                    break;
                case"TitleChanged":
                    tab.updateTitle();
                    break;
                case"TopicChanged":
                    tab.updateTopic();
                    break;
            }
        };
        this.room.addListener(this.changeListener);
        return this;
    }, deinit: function () {
        this.room.removeListener(this.changeListener);
        this.changeListener = undefined;
        return this;
    }
};
;
(function ($) {
    window.FortOverviewWindow = {
        CurrentBattles: {},
        Maneuver: {},
        OwnForts: {},
        RecentBattles: {},
        FortSearch: {},
        DOM: null
    };
    FortOverviewWindow.toggleOpen = function (tab) {
        var wnd = wman.toggleOpen('fortoverview');
        if (wnd && 'open' === wnd.status) {
            FortOverviewWindow.open(tab, {win_open: wnd.win});
        }
    };
    FortOverviewWindow.open = function (tab, options) {
        if (tab === undefined)tab = "currentbattles";
        this.tab = tab;
        this.options = options || {};
        var tabclick = function (win, id) {
            FortOverviewWindow.showTab(id);
        }
        FortOverviewWindow.window = (this.options.win_open || wman.open("fortoverview")).setMiniTitle('Форты').addTab('Фронтовые сводки', 'currentbattles', tabclick).addTab('Учения', 'maneuver', tabclick).addTab('Свои форты', 'ownforts', tabclick).addTab('Свежие сводки', 'recentbattles', tabclick).addTab('Поиск', 'fortsearch', tabclick).appendToContentPane($('<div class="fortoverview-currentbattles" />'), $('<div class="fortoverview-maneuver"/>'), $('<div class="fortoverview-ownforts"/>'), $('<div class="fortoverview-recentbattles"/>'), $('<div class="fortoverview-fortsearch"/>'));
        FortOverviewWindow.DOM = $('div.fortoverview');
        FortOverviewWindow.createContent(tab);
    };
    wman.registerReloadHandler(/^fortoverview/, function () {
        FortOverviewWindow.open();
    });
    FortOverviewWindow.showTab = function (id) {
        if (!FortOverviewWindow.window)return;
        FortOverviewWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *', FortOverviewWindow.DOM).each(function (i, e) {
            if ($(e).hasClass('fortoverview-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'currentbattles':
                FortOverviewWindow.window.setTitle('Фронтовые сводки');
                FortOverviewWindow.CurrentBattles.init();
                break;
            case'maneuver':
                FortOverviewWindow.window.setTitle('Учения');
                FortOverviewWindow.Maneuver.init();
                break;
            case'ownforts':
                FortOverviewWindow.window.setTitle('Свои форты');
                FortOverviewWindow.OwnForts.init();
                break;
            case'recentbattles':
                FortOverviewWindow.window.setTitle('Свежие сводки');
                FortOverviewWindow.RecentBattles.init();
                break;
            case'fortsearch':
                FortOverviewWindow.window.setTitle('Поиск');
                FortOverviewWindow.FortSearch.init();
                break;
            default:
                FortOverviewWindow.window.setTitle('Фронтовые сводки');
                FortOverviewWindow.CurrentBattles.init();
                break;
        }
    };
    FortOverviewWindow.createContent = function (tab, options) {
        if (options !== undefined) {
            for (var el in options)this.options[el] = options[el];
        }
        Ajax.remoteCall('fort_overview', '', {offset: this.options.offset ? this.options.offset : 0}, function (json) {
            $('div.tw2gui_window_content_pane #fo_hiddenContent', FortOverviewWindow.DOM).remove();
            $('div.tw2gui_window_content_pane', FortOverviewWindow.DOM).append('<span id="fo_hiddenContent" style="display:none;">' + json["page"] + '</span>');
            $('img.fortOverviewIconScroll', FortOverviewWindow.DOM).attr('title', '<span class="text_bold">' + 'Показать форт на карте' + '</span>');
            $('img.fortOverviewIconScrollTown', FortOverviewWindow.DOM).attr('title', '<span class="text_bold">' + 'Показать на карте' + '</span>');
            if (json["js"]) {
                for (var i in json["js"]) {
                    var e = json["js"][i];
                    $('.wayTime' + e[0], FortOverviewWindow.DOM).each(function (k, el) {
                        el.innerHTML = Map.calcWayTime(Character.getPosition(), {x: e[1], y: e[2]}).formatDuration();
                    });
                    if (!e[3])continue;
                    $('.fortBattle' + e[0], FortOverviewWindow.DOM).each(function (k, el) {
                        $(el).css('cursor', 'help');
                        if (e[5])
                            $(el).attr('title', '<strong>' + s('Нападающий: %1 из %2', (e[4]).escapeHTML(), (e[5]).escapeHTML()) + '</strong>'); else
                            $(el).attr('title', '<strong>' + s('Нападающий: %1', (e[4]).escapeHTML()) + '</strong>');
                    });
                }
            }
            FortOverviewWindow.Maneuver.infoShown = false;
            FortOverviewWindow.OwnForts.infoShown = false;
            FortOverviewWindow.RecentBattles.infoShown = false;
            FortOverviewWindow.FortSearch.infoShown = false;
            FortOverviewWindow.showTab(tab);
        });
    }
    FortOverviewWindow.CurrentBattles.init = function () {
        FortOverviewWindow.CurrentBattles._initContent();
    };
    FortOverviewWindow.CurrentBattles._initContent = function () {
        var maindiv = $('<div class="fortoverv" class="fortoverv-currentbattles"></div>');
        maindiv.append($("#fo_hiddenContent #incomingbattle", FortOverviewWindow.DOM).html());
        FortOverviewWindow.window.$('div.fortoverview-currentbattles', FortOverviewWindow.DOM).empty().append(maindiv).show();
        $('a.fo_fort_name', FortOverviewWindow.DOM).attr('title', '<span class="text_bold">' + 'Показать форт' + '</span>');
        $('a.fo_town_name', FortOverviewWindow.DOM).attr('title', '<span class="text_bold">' + 'Показать город' + '</span>');
        $('div.fortOverviewBox', FortOverviewWindow.DOM).addClass('selectable');
    };
    FortOverviewWindow.Maneuver.init = function () {
        FortOverviewWindow.Maneuver._initContent();
    };
    FortOverviewWindow.Maneuver._initContent = function () {
        var maindiv = $('<div class="fortoverv" class="fortoverv-maneuver"></div>');
        maindiv.append($("#fo_hiddenContent #maneuverlist").html());
        FortOverviewWindow.window.$('div.fortoverview-maneuver').empty().append(maindiv).show();
        ManeuverWindow.updateOverview();
    };
    FortOverviewWindow.OwnForts.init = function () {
        FortOverviewWindow.OwnForts._initContent();
    };
    FortOverviewWindow.OwnForts._initContent = function () {
        var maindiv = $('<div class="fortoverv" class="fortoverv-ownforts"></div>');
        maindiv.append($("#fo_hiddenContent #ownforts", FortOverviewWindow.DOM).html());
        FortOverviewWindow.window.$('.fortoverview-ownforts').empty().append(maindiv).show();
        $('a.fo_fort_name', FortOverviewWindow.DOM).attr('title', '<span class="text_bold">' + 'Показать форт' + '</span>');
        $('a.fo_town_name', FortOverviewWindow.DOM).attr('title', '<span class="text_bold">' + 'Показать город' + '</span>');
    };
    FortOverviewWindow.RecentBattles.init = function () {
        FortOverviewWindow.RecentBattles._initContent();
    };
    FortOverviewWindow.RecentBattles._initContent = function () {
        var maindiv = $('<div class="fortoverv" class="fortoverv-recentbattles"></div>');
        maindiv.append($("#fo_hiddenContent #lastbattle", FortOverviewWindow.DOM).html());
        FortOverviewWindow.window.$('div.fortoverview-recentbattles', FortOverviewWindow.DOM).empty().append(maindiv).show();
    };
    FortOverviewWindow.FortSearch.init = function () {
        FortOverviewWindow.FortSearch._initContent();
    };
    FortOverviewWindow.FortSearch._initContent = function () {
        var maindiv = $('<div class="fortoverv-fortsearch"></div>');
        maindiv.append($("#fo_hiddenContent #searchfort", FortOverviewWindow.DOM).html());
        FortOverviewWindow.window.$('.fortoverview-fortsearch', FortOverviewWindow.DOM).empty().append(maindiv).show();
        $('#fort_search_text', FortOverviewWindow.DOM).keydown(function (e) {
            if (e.keyCode == 13) {
                FortOverviewWindow.searchFort();
            }
        });
    };
    FortOverviewWindow.searchFort = function () {
        var fortNames = $('input[name=fortsearch]', FortOverviewWindow.DOM).val();
        if (!fortNames) {
            new UserMessage("Название-то нужно ввести!", UserMessage.TYPE_ERROR).show();
        }
        else {
            var resultEl = $('#searchFortResult', FortOverviewWindow.DOM).empty();
            Ajax.remoteCall('fort_overview', 'search_fort', {fortNames: fortNames}, function (json) {
                if (json.error) {
                    new UserMessage('Не найдено ни одного форта.', UserMessage.TYPE_ERROR).show();
                }
                else {
                    var html = '';
                    if (json["0"]) {
                        for (var fo in json) {
                            if (json[fo].fort_id) {
                                html += FortOverviewWindow.fortSearchHtml(json[fo]);
                            }
                        }
                    }
                    else {
                        html = 'Не найдено ни одного форта.';
                    }
                    resultEl.html(html);
                    $('input[name=fortsearch]', FortOverviewWindow.DOM).val('');
                }
            }, FortOverviewWindow);
        }
    }
    FortOverviewWindow.fortSearchHtml = function (fortRes) {
        var fortNameLink = '<a onclick="Map.center(' + fortRes.fort_x + ', ' + fortRes.fort_y + ')" href="#">' + '<img class="fortOverviewIconScroll" src="https://westrus.innogamescdn.com/images/icons/center.png" title="<span class=\'text_bold\'>' + 'Показать форт на карте' + '</span>" /></a>' + '<a title="<span class=\'text_bold\'>' + 'Показать форт' + '</span>" href="javascript:void(FortWindow.open(' + fortRes.fort_id + ',' + fortRes.fort_x + ',' + fortRes.fort_y + '))">' + fortRes.name + '</a>';
        return '<div class="fortOverviewBox">' + '<div class="fortOverviewIcon"><img src="https://westrus.innogamescdn.com/images/fort/icon/fort-' + fortRes.type + '.png">&nbsp;</div>' +
            titleValue('Имя', fortNameLink) + '<br />' +
            titleValue('Очки', fortRes.fort_points) + '<br />' +
            titleValue('Всего городов', fortRes.member_count) + '<br />' +
            titleValue('Битвы', fortRes.battle_count) + '</div>';
    }
    var titleValue = function (title, value) {
        return '<span class="text_bold">' + title + '</span>: ' + value;
    }
})(jQuery);

(function ($) {
    BuildWindow = function (id, x, y, buildingKey, isFort) {
        this.id = id;
        this.x = x;
        this.y = y;
        this.building = buildingKey;
        this.isTownBuilding = isFort ? false : true;
        this.progressbar = null;
        this.isReady2Build = true;
        this.expCalc_min = {};
        this.expCalc_max = {};
        this.yieldCalc = {};
        this.requirements = null;
        this.uid = 'build-' + x + '-' + y + '-' + buildingKey;
        this.window = wman.open(this.uid, null, "buildwindow noreload").addEventListener("WINDOW_DESTROY", function () {
            delete instances[this.x + '_' + this.y + '_' + this.building];
        }, this);
        var self = this;
        this.isTownBuilding ? this.initData4Town(self) : this.initData4Fort(self);
    }
    BuildWindow.prototype = BuildWindow;
    var instances = {};
    BuildWindow.open = function (id, x, y, buildingKey, isFort) {
        if (!instances[x + '_' + y + '_' + buildingKey]) {
            instances[x + '_' + y + '_' + buildingKey] = new BuildWindow(id, x, y, buildingKey, isFort);
        }
        return instances[x + '_' + y + '_' + buildingKey];
    }
    BuildWindow.initData4Fort = function (wndContext) {
        Ajax.remoteCallMode("headquarter_build", "build", {
            fort_id: wndContext.id,
            x: wndContext.x,
            y: wndContext.y,
            fortbuilding: wndContext.building
        }, function (json) {
            if (json.error) {
                new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
                wndContext.window.destroy();
                return false;
            }
            wndContext.init(json);
            return true;
        }, BuildWindow);
    };
    BuildWindow.initData4Town = function (wndContext) {
        Ajax.remoteCallMode("cityhall_build", "build", {
            x: wndContext.x,
            y: wndContext.y,
            building: wndContext.building
        }, function (json) {
            if (json.error) {
                new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
                wndContext.window.destroy();
                return false;
            }
            wndContext.init(json);
            return true;
        }, BuildWindow);
    };
    BuildWindow.init = function (data) {
        var self = this, lowestDuration = 0, curDuration = 0;
        self.malus = data.build_skills.malus;
        self.canDo = false;
        var jobDurations = Object.keys(data.jobDurationData).sort(function (a, b) {
            return a - b;
        });
        if (data.hasOwnProperty('resourceReq') && data.resourceReq.length > 1) {
            var continueCalc = true;
            $.each(jobDurations, function (k, v) {
                curDuration = parseInt(v);
                $.each(data.resourceReq, function (x, y) {
                    if (data.yieldCalc[y.item_id][curDuration] > y.storage) {
                        self.isReady2Build = (k != 0);
                        return continueCalc = false;
                    }
                });
                if (false === continueCalc)return false;
                lowestDuration = curDuration;
            });
        } else {
            lowestDuration = parseInt(jobDurations[jobDurations.length - 1]);
        }
        self.progressbar = new west.gui.Progressbar(0, 0).setLabel("Трудовые очки", "hammer").setTextOnly(true);
        self.deposit = data.deposit;
        self.startbutton = new west.gui.Button("Начать", function () {
            self.startBuild();
        }).setMinWidth(248);
        var window_content = $('<img src="https://westrus.innogamescdn.com/images/jobs/build.png" class="build_icon" />' + '<div class="build_top_bg" /><div class="build_head" />' + '<div class="build_content">' + '<div class="build_content_left">' + '<div class="build_info" />' + '<div class="build_requirements">' +
            (data.resourceReq && data.resourceReq.length ? '<div class="build_itembox"></div>' : '') + '</div>' + '<div class="build_left_divider" />' + '<div class="build_skills" />' + '<div class="build_progress" title="' + 'Здесь ты видишь сколько тебе нужно трудовых очков и сколько из них у тебя уже есть.' + '">' + '<div class="build_progress_nfo_wrap">' + '<div class="build_progress_nfo_right" />' + '<div class="build_progress_nfo" />' + '<div class="build_progress_nfo_left" />' + '<div style="clear:both;" />' + '</div>' + '</div>' + '</div>' + '<div class="build_content_divider" />' + '<div class="build_content_right">' + '<div class="build_drops text_bold">' + 'С этой работы, увы, ничего не стыришь.' + '</div>' + '<div class="build_way text_bold">' + '<span>' + 'Расстояние:'.escapeHTML() + '</span>&nbsp;<span class="way_time">00:00:00</span>' + '</div>' +
            (self.isTownBuilding ? '<div class="build_pay"><span class="text_bold">' + 'Оплата:'.escapeHTML() + '</span>&nbsp;<span class="build_sel_pay" /></div>' : '') + '<div class="build_duration"><span class="text_bold">' + 'Время работы:'.escapeHTML() + '</span>&nbsp;<span class="duration" /></div>' + '</div>' + '</div>');
        this.window.setMiniTitle(data.build_name).setTitle('Строительство' + ' ' + data.build_name).appendToContentPane(window_content);
        this.initSkills(data.build_skills.skills);
        this.initInfo(data);
        this.setDescription(data.description);
        if (!this.isTownBuilding) {
            var item, available, required, tmpXhtml;
            this.requirements = data.resourceReq;
            this.reqYields = {};
            for (var i = 0; i < data.resourceReq.length; i++) {
                available = data.resourceReq[i].storage;
                required = data.resourceReq[i].amount;
                item = new tw2widget.FortItem(ItemManager.get(data.resourceReq[i].item_id))
                item.setRequired(available, required);
                this.reqYields[item.getId()] = item;
                $('div.build_itembox', window_content).append($('<span class="build_requirements_itemslot' + (i + 1) + '"></span>').html(item.getMainDiv()));
            }
            this.yieldCalc = data.yieldCalc;
        }
        if (this.isReady2Build) {
            var cbDuration = new west.gui.Combobox('build_cdDuration').addListener(this.cbDurationChanged.bind(this)).setWidth(110);
            for (var k in data.jobDurationData) {
                cbDuration.addItem(data.jobDurationData[k].calcduration, data.jobDurationData[k].formatted);
                this.expCalc_min[data.jobDurationData[k].calcduration] = data.jobDurationData[k].expCalc.min;
                this.expCalc_max[data.jobDurationData[k].calcduration] = data.jobDurationData[k].expCalc.max;
            }
            cbDuration.select(data.jobDurationData[lowestDuration].calcduration);
            $('div.build_duration', window_content).append(cbDuration.getMainDiv());
            if (this.isTownBuilding) {
                var cbPayment = new west.gui.Combobox('build_cdPayment').addListener(this.cbPaymentChanged.bind(this)).setWidth(110).addItem('town', 'Казна').addItem('player', 'Личный капитал').select('town');
                $('div.build_pay', window_content).append(cbPayment.getMainDiv());
            }
            $('div.build_content_right', window_content).append(self.startbutton.getMainDiv());
        } else {
            $('div.build_duration', window_content).addClass('text_bold').html('<p class="text_bold"><img style="width:22px;height:22px;" alt="" src="https://westrus.innogamescdn.com/images/icons/warn_circle.png" />&nbsp;'
                + 'Не хватает стройматериалов!'
                + '</p>');
        }
        $('div.build_progress', window_content).prepend(self.progressbar.getMainDiv());
        this.updateLaborPoints(data.jobPoints);
        this.updateWayTime();
        EventHandler.listen("char_position_changed", function () {
            for (var ins in instances) {
                instances[ins].updateWayTime();
            }
        }, this, {boundto: this.window});
    }
    BuildWindow.initSkills = function (skills) {
        var self = this;
        var div = this.window.$('div.build_skills').click(function (e) {
            if (!e.target.className.match(/skillicon/))return;
            Bag.searchBySkill(e.target.parentNode.className.match(/skillbox_(\w+)/)[1]);
        });
        $.each(skills, function (i, e) {
            var skill = CharacterSkills.getSkill(e.skill);
            for (var i = 0; i < e.coefficient; ++i)
                div.append(skill.getSkillImage());
        });
        EventHandler.listen("char_skills_changed", function (data) {
            var p = new west.job.Build().calcJobPoints();
            self.updateLaborPoints(p - self.malus);
        }, this, {boundto: this.window});
    }
    BuildWindow.initInfo = function (data) {
        var self = this;
        var addInfo = function (icon, title, value, tooltip) {
            var tmp = $('<div class="rp_row_jobdata row_build_' + icon + '" title="' + title + ':&nbsp;' + tooltip + '">' + '<span class="rp_jobdata_label_icon"><img src="https://westrus.innogamescdn.com/images/icons/' + icon + '.png" alt="" /></span>' + '<span class="rp_jobdata_label text_bold">' + title + '</span>' + '<span class="rp_jobdata_text text_bold"></span>' + '</div>');
            $('span.rp_jobdata_text', tmp).append(value);
            self.window.$('div.build_info').append(tmp);
        };
        addInfo("star", "Опыт".escapeHTML(), 0, 'Показывает, сколько очков опыта ты можешь заработать на этой работе.');
        addInfo("dollar", "Доллары".escapeHTML(), '$' + (data.deposit || 0), 'Показывает, сколько денег ты можешь заработать на этой работе.');
        addInfo("motivation", "Мотивация".escapeHTML(), new west.gui.Progressbar(data.motivation > 1 ? 100 : data.motivation * 100, 100).showPercentOnly(true).getMainDiv(), 'Мотивация показывает насколько ты сейчас расположен к этой работе. Чем выше мотивация, тем больше эффективность, а значит опыт, зарплата и удача. Если слишком часто выполнять одну и ту же работу, мотивация падает. Но со временем восстанавливается.');
    };
    BuildWindow.setDescription = function (desc) {
        if (desc.length > 150)
            desc = desc.cutIt(150);
        this.window.$('div.build_head').text(desc);
    };
    BuildWindow.updateLaborPoints = function (points) {
        var malus = this.malus + 1;
        var spoints = points + this.malus;
        var canDo = spoints >= malus;
        this.progressbar.setMaxValue(malus).setValue(canDo ? malus : spoints);
        var el = this.window.$("div.build_progress_nfo").removeClass("red");
        if (!canDo)
            el.addClass("red");
        this.progressbar.setColor(canDo ? 'green' : 'red');
        var v = +(spoints - malus);
        if (!canDo)v *= -1;
        el.html(canDo ? ngettext("+%d дополнительное очко", new Array("+%d дополнительное очко", "+%d дополнительных очка", "+%d дополнительных очков"), v).escapeHTML().replace('%d', '<span class="text_bold">' + v + '</span>') : "Не хватает %d очков.".escapeHTML().replace('%d', '<span class="text_bold">' + v + '</span>'));
        this.canDo = canDo;
    }
    BuildWindow.updateWayTime = function () {
        var wayTime = Map.calcWayTime(Character.position, {x: this.x, y: this.y});
        this.window.$("span.way_time").text(wayTime.formatDuration());
    }
    BuildWindow.startBuild = function () {
        var that = this;
        if (that.isTownBuilding) {
            TaskQueue.add(new TaskBuild(this.x, this.y, this.building, this.window.$('#build_cdDuration').data('value'), this.window.$('#build_cdPayment').data('value')));
        } else {
            TaskQueue.add(new TaskFortBuild(this.id, this.x, this.y, this.building, this.window.$('#build_cdDuration').data('value')));
        }
    };
    BuildWindow.setExperience = function (val) {
        var minExp = parseInt(this.expCalc_min[val] || 0), maxExp = parseInt(this.expCalc_max[val] || 0);
        this.window.$('div.row_build_star > span.rp_jobdata_text').text(minExp + " - " + maxExp);
    };
    BuildWindow.setYieldReqs = function (val) {
        for (var i = 0; i < this.requirements.length; i++) {
            var req = parseInt(this.yieldCalc[this.requirements[i].item_id][val] || 0);
            this.reqYields[this.requirements[i].item_id].setRequired(this.requirements[i].storage, req);
        }
    };
    BuildWindow.cbDurationChanged = function (val) {
        this.setExperience(val);
        if (!this.isTownBuilding) {
            this.setYieldReqs(val);
        }
    };
    BuildWindow.cbPaymentChanged = function () {
        if (this.window.$('#build_cdPayment').data('value') == 'player')
            this.window.$('div.row_build_dollar > span.rp_jobdata_text').text('$' + Character.getCapital(true)); else
            this.window.$('div.row_build_dollar > span.rp_jobdata_text').text('$' + this.deposit);
    };
})(jQuery);
;
(function ($) {
    window.AvatarMake = {}
    var avatar_data = window.avatar_72x72_data
    AvatarMake.backgroundx = 0;
    var blacklist = [];
    var dir_next = 0;
    AvatarMake._nonFreeTypes = ['head', 'nose', 'mouth', 'eyes', 'skin_1'];
    AvatarMake.config = {
        gender: !Character.avatarConfig ? Character.charSex : "male",
        skintone: "white",
        background: 0,
        head: 0,
        eyes: 0,
        nose: 0,
        mouth: 0,
        beards: -1,
        skin_1: -1,
        skin_2: -1,
        hair: 0,
        accessoires_1: -1,
        accessoires_2: -1,
        clothing: 0,
        hatsa: 0,
        hatsb: 0,
        wounds: 0,
        pose: 0
    };
    AvatarMake.randomize = function () {
        var key = [];
        for (k in AvatarMake.imageMapping) {
            key.push(k);
        }
        var rnd = Math.floor(Math.random() * key.length);
        var tiles = AvatarMake.imageMapping[key[rnd]];
        var test = key[rnd].split('_');
        var hasnew = Character.avatarConfig;
        if (Character.resetStatus)
            hasnew = 0;
        var gender = hasnew ? Character.charSex : AvatarMake.config.gender;
        var skintone = hasnew ? AvatarMake.config.skintone : test[1];
        var config = {};
        for (k in AvatarMake.config)config[k] = AvatarMake.config[k];
        AvatarMake.oldConfig = config;
        AvatarMake.config = {
            gender: gender,
            skintone: skintone,
            background: Math.floor(Math.random() * (tiles.background.length)),
            head: Math.floor(Math.random() * (tiles.head.length)),
            eyes: Math.floor(Math.random() * (tiles.eyes.length)),
            nose: Math.floor(Math.random() * (tiles.nose.length)),
            mouth: Math.floor(Math.random() * (tiles.mouth.length)),
            beards: test[0] == 'male' ? Math.floor(Math.random() * (tiles.beards1.length + tiles.beards2.length)) : -1,
            skin_1: Math.floor(Math.random() * (tiles.skin.length)),
            skin_2: -1,
            hair: Math.floor(Math.random() * (tiles.hair.length)),
            accessoires_1: Math.floor(Math.random() * (tiles.accessoires.length)),
            accessoires_2: -1,
            clothing: Math.floor(Math.random() * (tiles.clothing.length)),
            hatsa: Math.floor(Math.random() * (tiles.hatsa.length)),
            hatsb: Math.floor(Math.random() * (tiles.hatsb.length)),
            wounds: 0,
            pose: Math.floor(Math.random() * (tiles.pose.length))
        };
        if (hasnew) {
            AvatarMake._nonFreeTypes.each(function (k, v) {
                AvatarMake.config[k] = AvatarMake.oldConfig[k];
            });
        }
        var newconfig = {};
        for (k in AvatarMake.config)newconfig[k] = AvatarMake.config[k];
        AvatarMake.newConfig = newconfig;
        $('#avatar_undo', CharacterWindow.AvatarMake.DOM).addClass('hover_undo').click(function () {
            AvatarMake.previousConfig();
        });
        $('#avatar_forward', CharacterWindow.AvatarMake.DOM).removeClass('hover_forward').off('click');
        AvatarMake.update();
    }
    AvatarMake.previousConfig = function () {
        $('#avatar_undo', CharacterWindow.AvatarMake.DOM).removeClass('hover_undo').off('click');
        $('#avatar_forward', CharacterWindow.AvatarMake.DOM).addClass('hover_forward').click(function () {
            AvatarMake.nextConfig();
        });
        AvatarMake.config = AvatarMake.oldConfig;
        AvatarMake.update();
    }
    AvatarMake.nextConfig = function () {
        $('#avatar_forward', CharacterWindow.AvatarMake.DOM).removeClass('hover_forward').off('click');
        $('#avatar_undo', CharacterWindow.AvatarMake.DOM).addClass('hover_undo').click(function () {
            AvatarMake.previousConfig();
        });
        AvatarMake.config = AvatarMake.newConfig;
        AvatarMake.update();
    }
    AvatarMake.makeConfig = function (c) {
        var cfg = {}
        var notdone = false;
        var map = AvatarMake.imageMapping[c.gender + "_" + c.skintone];
        if (map.beards1) {
            c.beards %= map.beards1.length + map.beards2.length;
            var tmp = c.beards < 0 ? (-c.beards) : c.beards;
            c.beards1 = tmp < map.beards1.length ? tmp : -1;
            c.beards2 = tmp < map.beards1.length ? -1 : tmp - map.beards1.length;
        }
        for (var i = 0; i < avatarLayers.length; i += 1) {
            var k = avatarLayers[i];
            var arr = map[k.match(/[^_]+/)[0]];
            if (!arr)continue;
            var n = c[k] || 0;
            if (k == "eyes" || k == "nose" || k == "mouth" || k == "hair" || k == "clothing")n = (n < 0 ? arr.length - 1 : 0) + n % arr.length; else n = (n < 0 ? arr.length + 1 : 0) + n % (arr.length);
            if (((arr[n] || {}).k != null))
                $.each(blacklist, function (key) {
                    if (arr[n] != null && (arr[n] || {}).k.match(key)) {
                        if (dir_next == 0)
                            dir_next = 1;
                        if ("beards2" == k || "beards1" == k)
                            k = "beards";
                        AvatarMake.config[k] = AvatarMake.config[k] + dir_next;
                        notdone = true;
                        return;
                    }
                });
            cfg[k] = (arr[n] || {}).k;
        }
        cfg.background = map.background[c.background];
        if (cfg.hatsa) {
            cfg.hatsb = cfg.hatsa.replace(/hatsa/, "hatsb").replace(/a$/, "b")
        } else cfg.hatsb = undefined;
        if (notdone)
            return 0;
        return cfg;
    }
    AvatarMake.readConfig = function (cfg) {
        var c = AvatarMake.config;
        var genskin = cfg.head.split(/[_\/]/);
        c.gender = genskin[0];
        c.skintone = genskin[1];
        var map = AvatarMake.imageMapping[c.gender + "_" + c.skintone];
        var setidx = function (t) {
            var k = cfg[t];
            var mt = t.match(/[^_]+/)[0];
            if (map[mt]) {
                for (var i = 0; i < map[mt].length; i++)
                    if (map[mt][i].k == k || map[mt][i] == k)return c[t] = i;
            }
            return c[t] = -1;
        };
        for (var i = 0; i < avatarLayers.length; i++)
            setidx(avatarLayers[i]);
        c.beards = cfg.beards2 ? map.beards1.length + c.beards2 : c.beards1;
        delete c.head;
        setidx('background');
        AvatarMake.update();
        return c;
    }
    AvatarMake.update = function () {
        var conf = AvatarMake.makeConfig(AvatarMake.config);
        while (conf == 0) {
            conf = AvatarMake.makeConfig(AvatarMake.config);
        }
        tw2widget.avatarPicture(window.CharacterWindow.window.$('#avatar_preview'), 'large', conf);
        AvatarMake.setGenerator();
        return this;
    }
    AvatarMake.setGender = function (g) {
        g == 'female' ? $('div.avatar_beards_select', CharacterWindow.AvatarMake.DOM).children().addClass('none') : $('.avatar_beards_select', CharacterWindow.AvatarMake.DOM).children().removeClass('none');
        AvatarMake.config.gender = g;
        return AvatarMake.update();
    }
    AvatarMake.setSkin = function (s) {
        AvatarMake.config.skintone = s;
        return AvatarMake.update();
    }
    AvatarMake.switchThing = function (div, dir) {
        dir_next = dir;
        var cls = $(div.parentNode).attr("class");
        var part = cls.match(/avatar_(.*)_select/)[1];
        AvatarMake.config[part] = AvatarMake.config[part] + dir;
        return AvatarMake.update();
    }
    AvatarMake.checkChange = function () {
        var cfg = {};
        var c = AvatarMake.config;
        var map = AvatarMake.imageMapping[c.gender + "_" + c.skintone];
        var changed = false;
        var premium_changed = false;
        if (map["background"][c.background] != Character.avatarConfig.background)
            changed = true;
        for (var i = 0; i < avatarLayers.length; i++) {
            var k = avatarLayers[i];
            var arr = map[k.match(/[^_]+/)[0]];
            if (!arr)continue;
            var n = c[k] || 0;
            if (k == "eyes" || k == "nose" || k == "mouth" || k == "hair" || k == "clothing")n = (n < 0 ? arr.length - 1 : 0) + n % arr.length; else n = (n < 0 ? arr.length + 1 : 0) + n % (arr.length);
            cfg[k] = (arr[n] || {}).k;
            if (cfg[k] != Character.avatarConfig[k]) {
                changed = true;
                if ($.fn.isInArray(k, AvatarMake._nonFreeTypes)) {
                    premium_changed = true;
                    break;
                }
            }
        }
        if (changed) {
            CharacterWindow.AvatarMake.save.enable();
            CharacterWindow.AvatarMake.reset.enable();
        } else {
            CharacterWindow.AvatarMake.save.disable();
            CharacterWindow.AvatarMake.reset.disable();
        }
        if (Character.resetStatus) {
            return;
        }
        if (premium_changed) {
            CharacterWindow.AvatarMake.save.setCaption("Купить");
            CharacterWindow.AvatarMake.save.onclick = function () {
                CharacterWindow.AvatarMake._showPremiumSave()
            };
        } else {
            CharacterWindow.AvatarMake.save.setCaption("Сохранить");
            CharacterWindow.AvatarMake.save.onclick = function () {
                AvatarMake.save()
            };
        }
    }
    AvatarMake.save = function (sure) {
        if (Character.avatarConfig == 0 && !sure) {
            new west.gui.Dialog("Подтверждение сохранения").setText("<div class='txcenter'>" + 'Обрати внимание на цвет кожи и пол, поскольку это единственные особенности, которые позже нельзя будет изменить.<br /><br />\nСохранить твой портрет?' + "</div>").addButton('yes', function () {
                AvatarMake.save(1);
            }).addButton('no').show();
        } else {
            Ajax.remoteCall('character', 'change_avatar', AvatarMake.getStripConf(), function (json) {
                if (json.error) {
                    return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
                }
                $('#avatar_picture', CharacterWindow.AvatarMake.DOM).children().remove();
                $('#avatar_picture', CharacterWindow.AvatarMake.DOM).append(json.avatar.small);
                $('#fadeavater', CharacterWindow.AvatarMake.DOM).remove();
                Character.setAvatar(AvatarMake.makeConfig(AvatarMake.config), json.avatar.big);
                if (CharacterWindow.onlyAvatar) {
                    CharacterWindow.window.destroy();
                } else {
                    CharacterWindow.open();
                    CharacterWindow.showTab('avatarmake');
                }
            });
        }
    }
    AvatarMake.getStripConf = function () {
        var avatar_config = {};
        var config = AvatarMake.makeConfig(AvatarMake.config);
        for (var i = 0; i < avatarLayers.length; i += 1) {
            var part = avatarLayers[i];
            var path = config[part];
            if (!path)continue;
            path = path.replace(/.png$/, "");
            avatar_config[part] = path;
        }
        avatar_config['background'] = config.background;
        avatar_config['sex'] = AvatarMake.config.gender;
        avatar_config['color'] = AvatarMake.config.skintone;
        return avatar_config;
    }
    AvatarMake.reset = function () {
        AvatarMake.config = {
            gender: !Character.avatarConfig ? Character.charSex : "male",
            skintone: "white",
            background: 0,
            head: 0,
            eyes: 0,
            nose: 0,
            mouth: 0,
            beards: -1,
            skin_1: -1,
            skin_2: -1,
            hair: 0,
            accessoires_1: -1,
            accessoires_2: -1,
            clothing: 0,
            hatsa: 0,
            hatsb: 0,
            wounds: 0,
            pose: 0
        };
        $('#avatar_forward', CharacterWindow.AvatarMake.DOM).removeClass('hover_forward').on('click');
        $('#avatar_undo', CharacterWindow.AvatarMake.DOM).removeClass('hover_undo').on('click');
        if (Character.resetStatus)
            AvatarMake.togglepremium();
        if (Character.avatarConfig)
            AvatarMake.readConfig(Character.avatarConfig); else
            AvatarMake.update();
    }
    AvatarMake.switchBackground = function (dir) {
        AvatarMake.config["background"] = dir;
        return AvatarMake.update();
    }
    AvatarMake.toggleBackground = function (x) {
        AvatarMake.backgroundx = AvatarMake.backgroundx + x;
        AvatarMake.setGenerator();
    }
    AvatarMake.setGenerator = function () {
        $('#avatarmake_background', CharacterWindow.AvatarMake.DOM).children().remove();
        var config = {}
        var types = AvatarMake.imageMapping;
        for (k in AvatarMake.config)config[k] = AvatarMake.config[k];
        config.gender == 'female' ? $('div.avatar_beards_select', CharacterWindow.AvatarMake.DOM).children().addClass('none') : $('div.avatar_beards_select', CharacterWindow.AvatarMake.DOM).children().removeClass('none');
        ['male', 'female'].each(function (el) {
            el == config.gender ? $('#pick_' + el, CharacterWindow.AvatarMake.DOM).addClass('pick_' + el) : $('#pick_' + el, CharacterWindow.AvatarMake.DOM).removeClass('pick_' + el);
        });
        ['white', 'black', 'brown'].each(function (el) {
            el == config.skintone ? $('#pick_' + el, CharacterWindow.AvatarMake.DOM).addClass('pick_something') : $('#pick_' + el, CharacterWindow.AvatarMake.DOM).removeClass('pick_something');
        });
        if (types[config.gender + "_" + config.skintone].background.length > AvatarMake.backgroundx + 5) {
            $('#bg_forward', CharacterWindow.AvatarMake.DOM).off('click').click(function () {
                AvatarMake.toggleBackground(1);
            });
        } else {
            $('#bg_forward', CharacterWindow.AvatarMake.DOM).off('click');
        }
        if (0 < AvatarMake.backgroundx) {
            $('#bg_backward', CharacterWindow.AvatarMake.DOM).off('click').click(function () {
                AvatarMake.toggleBackground(-1);
            });
        } else {
            $('#bg_backward', CharacterWindow.AvatarMake.DOM).off('click');
        }
        var x = AvatarMake.backgroundx;
        for (var y = 0; y < 5; y++) {
            var img = $("<img style='margin-right:7px;' onclick='AvatarMake.switchBackground(" + x + ")' src='https://westrus.innogamescdn.com/images/avatargen/background/" + types[config.gender + "_" + config.skintone].background[x] + ".jpg' alt='' width='61' />");
            img.appendTo($('#avatarmake_background', CharacterWindow.AvatarMake.DOM));
            x++;
        }
        if (Character.avatarConfig)
            AvatarMake.checkChange();
    }
    AvatarMake.init = function () {
        var types = {};
        for (var k in avatar_data) {
            if (!avatar_data.hasOwnProperty(k))continue;
            var splits = k.split(/\//);
            var charType = splits[0];
            var part = splits[1];
            if (part.match(/\.png/))part = "head";
            if (!types[charType])types[charType] = {};
            types[charType][part] = types[charType][part] || [];
            types[charType][part].push(avatar_data[k]);
            avatar_data[k].k = k.match(/([^.]*)(\.png|)$/)[1];
        }
        for (k in types)for (part in types[k])types[k][part].sort(function (a, b) {
            return a.k < b.k ? -1 : 1
        });
        var bglist = [];
        Ajax.remoteCallMode("character", "get_avatar_blacklist", {}, function (data) {
            blacklist = data.blacklist;
            var block;
            for (k in avatar_backgrounds) {
                block = false;
                $.each(blacklist, function (key) {
                    if (k == key) {
                        block = true;
                        return;
                    }
                });
                if (!block)
                    bglist.push(k);
            }
            bglist.sort();
            for (k in types)types[k].background = bglist;
            AvatarMake.imageMapping = types;
            AvatarMake.reset();
        });
    }, AvatarMake.togglepremium = function () {
        Character.resetStatus = !Character.resetStatus;
        window.CharacterWindow.window.$('div.avatar_right_top', CharacterWindow.AvatarMake.DOM).toggle();
        window.CharacterWindow.window.$('div.premium_newbutton', CharacterWindow.AvatarMake.DOM).toggle();
    }
})(jQuery);
;
(function ($) {
    window.RankingWindow = {
        Experience: {},
        DOM: '*',
        page: 0,
        tab: 'experience',
        Duels: {},
        Cities: {},
        Skills: {},
        HallofFame: {}
    };
    wman.registerReloadHandler(/^ranking/, function (uid) {
        RankingWindow.open();
    });
    RankingWindow.open = function (tab) {
        var tabclick = function (win, id) {
            RankingWindow.showTab(id);
        }
        RankingWindow.window = wman.open("ranking").setMiniTitle('Рейтинг').addTab('Опыт', 'experience', tabclick).addTab('Дуэли', 'duels', tabclick).addTab('Города', 'cities', tabclick).addTab('Навыки', 'skills', tabclick).addTab('Зал славы', 'halloffame', tabclick).appendToContentPane($('<div class="ranking-experience"/>'), $('<div class="ranking-duels"/>'), $('<div class="ranking-cities"/>'), $('<div class="ranking-skills"/>'), $('<div class="ranking-halloffame"/>'));
        $(RankingWindow.window.getContentPane()).addClass('selectable');
        RankingWindow.DOM = $('div.ranking');
        RankingWindow.tab = "experience";
        RankingWindow.Experience.init();
        RankingWindow.tab = "duels";
        RankingWindow.Duels.init();
        RankingWindow.tab = "cities";
        RankingWindow.Cities.init();
        RankingWindow.tab = "skills";
        RankingWindow.Skills.init();
        RankingWindow.HallofFame.init();
        RankingWindow.showTab("experience");
        if (tab) {
            RankingWindow.showTab(tab);
        }
    };
    RankingWindow.showTab = function (id) {
        RankingWindow.page = 0;
        RankingWindow.tab = id;
        if (!RankingWindow.window)return;
        RankingWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *', RankingWindow.DOM).each(function (i, e) {
            if ($(e).hasClass('ranking-' + id)) {
                $(e).children().fadeIn();
                $(e).show()
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        RankingWindow.window.removeClass("tabbg");
        RankingWindow.window.removeClass("tabbghalloffame");
        switch (id) {
            case'experience':
                RankingWindow.window.setTitle('Опыт');
                RankingWindow.Experience.initData();
                break;
            case'duels':
                RankingWindow.window.setTitle('Дуэли');
                RankingWindow.Duels.initData();
                break;
            case'cities':
                RankingWindow.window.setTitle('Города');
                RankingWindow.Cities.initData();
                break;
            case'skills':
                RankingWindow.window.addClass("tabbg");
                RankingWindow.window.setTitle('Навыки');
                RankingWindow.Skills.initData();
                break;
            case'halloffame':
                RankingWindow.window.addClass("tabbghalloffame");
                RankingWindow.window.setTitle('Зал славы');
                RankingWindow.HallofFame.initData();
                break;
            default:
                RankingWindow.window.setTitle('Опыт');
                RankingWindow.Experience.init();
                break;
        }
    };
    RankingWindow.buildFooter = function (town) {
        var footer = $('<div class="ranking_table_foot"><div id="rl_player_search" /><div id="rl_rank_search" /><div id="rl_button_search" /></div>');
        $('#rl_player_search', footer).append(new west.gui.Textfield("rl_player_search_" + RankingWindow.tab).setSize(18).getMainDiv());
        $('#rl_rank_search', footer).append(new west.gui.Textfield("rl_rank_search_" + RankingWindow.tab).setSize(5).getMainDiv());
        $('#rl_button_search', footer).append(new west.gui.Button('Найти', RankingWindow.search).getMainDiv());
        var searchlb = (town) ? 'Город' : 'Имя';
        $("#rl_player_search span.tw2gui_textfield span", footer).append("<span class='search_lable_span' >" + searchlb + "</span>");
        var select_plabel = $("#rl_player_search span.tw2gui_textfield span span", footer);
        $("#rl_player_search_" + RankingWindow.tab, footer).focus(function () {
            select_plabel.hide();
        });
        $("#rl_player_search_" + RankingWindow.tab, footer).focusout(function () {
            if ($('#rl_player_search_' + RankingWindow.tab, RankingWindow.DOM).val() == "")
                select_plabel.show();
        });
        select_plabel.click(function () {
            $("#rl_player_search_" + RankingWindow.tab, footer).focus();
        });
        $("#rl_rank_search span.tw2gui_textfield span", footer).append("<span class='search_lable_span' >" + 'Ранг' + "</span>");
        var select_rlabel = $("#rl_rank_search span.tw2gui_textfield span span", footer);
        $("#rl_rank_search_" + RankingWindow.tab, footer).focus(function () {
            select_rlabel.hide();
        });
        $("#rl_rank_search_" + RankingWindow.tab, footer).focusout(function () {
            if ($('#rl_rank_search_' + RankingWindow.tab, RankingWindow.DOM).val() == "")
                select_rlabel.show();
        });
        $("#rl_player_search_" + RankingWindow.tab, footer).keydown(function (e) {
            if (e.keyCode == 13) {
                RankingWindow.search();
                $("#rl_player_search_" + RankingWindow.tab, footer).blur();
            }
        });
        $("#rl_rank_search_" + RankingWindow.tab, footer).keydown(function (e) {
            if (e.keyCode == 13) {
                RankingWindow.search();
                $("#rl_rank_search_" + RankingWindow.tab, footer).blur();
            }
        });
        select_rlabel.click(function () {
            $("#rl_rank_search_" + RankingWindow.tab, footer).focus();
        });
        footer.append($('<div class="rl_pagebar_ranking" />'));
        return footer;
    };
    RankingWindow.Experience.init = function () {
        var maindiv = $('<div></div>');
        var footer = RankingWindow.buildFooter();
        RankingWindow.Experience.Table = new west.gui.Table().setId('ranking_exptable').createEmptyMessage('Рейтинг ещё пуст!').appendTo(maindiv).addColumn("exp_rank").addColumn("exp_playername").addColumn("exp_level").addColumn("exp_exp").addColumn("exp_class").addColumn("exp_town").appendToThCell("head", "exp_rank", 'Ранг', 'Ранг').appendToThCell("head", "exp_playername", 'Имя персонажа', 'Имя персонажа').appendToThCell("head", "exp_level", 'Ур.', 'Ур.').appendToThCell("head", "exp_exp", 'Опыт', 'Опыт').appendToThCell("head", "exp_class", 'Тип', 'Тип').appendToThCell("head", "exp_town", 'Город', 'Город').appendToFooter('exp_rank', footer);
        $('div.ranking-experience', RankingWindow.DOM).empty().append(maindiv);
    };
    RankingWindow.Experience.initData = function () {
        Ajax.remoteCallMode('ranking', 'get_data', {page: RankingWindow.page, tab: RankingWindow.tab}, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            RankingWindow.Experience.updateTable(json);
        }, RankingWindow);
    };
    RankingWindow.Experience.updateTable = function (be_data) {
        RankingWindow.Experience.Table.clearBody();
        var tmpCells = {};
        var highlight_row;
        RankingWindow.page = be_data.page;
        var data = be_data.ranking;
        $('div.ranking-experience div.rl_pagebar_ranking', RankingWindow.DOM).empty().append(new west.gui.Pagebar(RankingWindow.page, be_data.pages, jump2Page).getMainDiv());
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var name_title = (rd.title) ? rd.title + rd.name : rd.name;
            var name_link = '<a href="javascript:void(PlayerProfileWindow.open(' + rd.player_id + '));">' + name_title + '</a>';
            var town = '<a href="javascript:Map.center(' + rd.town_x + ',' + rd.town_y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.town_x + ',' + rd.town_y + ');\' > ' + rd.town_name + '</a>';
            tmpCells['exp_rank'] = rd.counter;
            tmpCells['exp_playername'] = "<span title='" + name_title.escapeHTML() + "'>" + name_link + "</span>";
            tmpCells['exp_level'] = rd.level;
            tmpCells['exp_exp'] = rd.experience;
            tmpCells['exp_class'] = (rd['class']) ? '<img title="' + Game.InfoHandler.getLocalString4Charclass(rd["class"]) + '" src="https://westrus.innogamescdn.com/images/class_choose/class_' + rd['class'] + '.png" />' : '';
            tmpCells['exp_town'] = (rd.town_name) ? town : '-';
            highlight_row = rd.highlight;
            RankingWindow.Experience.Table.buildRow('exp_rank_' + rd.counter, tmpCells, (highlight_row) ? function (row) {
                row.addClass("highlight_row");
                return row;
            } : null);
        }
    };
    RankingWindow.search = function (tab, search_string, search_rank) {
        if ('string' === typeof tab) {
            if (wman.isWindowCreated('ranking')) {
                if (tab !== RankingWindow.tab) {
                    RankingWindow.showTab(tab);
                }
            } else {
                RankingWindow.open(tab);
            }
        }
        var rank = parseInt($('#rl_rank_search_' + RankingWindow.tab, RankingWindow.DOM).val(), 10) || parseInt(search_rank, 10);
        var player = $('#rl_player_search_' + RankingWindow.tab, RankingWindow.DOM).val() || search_string;
        Ajax.remoteCallMode('ranking', 'get_data', {
            rank: rank,
            search: player,
            tab: RankingWindow.tab
        }, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            $('#rl_player_search_' + RankingWindow.tab, RankingWindow.DOM).val("").focusout();
            $('#rl_rank_search_' + RankingWindow.tab).val("").focusout();
            RankingWindow.loadTab(json);
        }, RankingWindow);
    };
    RankingWindow.loadTab = function (data) {
        switch (RankingWindow.tab) {
            case'experience':
                RankingWindow.Experience.updateTable(data);
                break;
            case'duels':
                RankingWindow.Duels.updateTable(data);
                break;
            case'cities':
                RankingWindow.Cities.updateTable(data);
                break;
            case'skills':
                RankingWindow.Skills.updateTable(data);
                break;
            case'halloffame':
                RankingWindow.HallOfFame.updateTable(data);
                break;
        }
    };
    var jump2Page = function (page) {
        if (RankingWindow.page == parseInt(page))return;
        RankingWindow.page = parseInt(page);
        switch (RankingWindow.tab) {
            case'experience':
                RankingWindow.Experience.initData();
                break;
            case'duels':
                RankingWindow.Duels.initData();
                break;
            case'cities':
                RankingWindow.Cities.initData();
                break;
            case'skills':
                RankingWindow.Skills.initData();
                break;
            case'halloffame':
                RankingWindow.HallofFame.initData();
                break;
        }
    };
    RankingWindow.Duels.init = function () {
        var maindiv = $('<div></div>');
        var footer = RankingWindow.buildFooter();
        RankingWindow.Duels.Table = new west.gui.Table().setId('ranking_duel').createEmptyMessage('Рейтинг ещё пуст!').appendTo(maindiv).addColumn("duel_rank").addColumn("duel_playername").addColumn("duel_exp").addColumn("duel_win").addColumn("duel_loss").addColumn("duel_diff").addColumn("duel_town").appendToThCell("head", "duel_rank", 'Ранг', 'Ранг').appendToThCell("head", "duel_playername", 'Имя персонажа', 'Имя персонажа').appendToThCell("head", "duel_exp", 'Дуэльный опыт', 'Опыт').appendToThCell("head", "duel_win", 'Победы на дуэлях', 'Поб.').appendToThCell("head", "duel_loss", 'Поражения на дуэлях', 'Пор.').appendToThCell("head", "duel_diff", 'Разница побед и поражений на дуэлях', 'Разн.').appendToThCell("head", "duel_town", 'Город', 'Город').appendToFooter('duel_rank', footer);
        $('div.ranking-duels', RankingWindow.DOM).empty().append(maindiv);
    };
    RankingWindow.Duels.initData = function () {
        Ajax.remoteCallMode('ranking', 'get_data', {page: RankingWindow.page, tab: RankingWindow.tab}, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            RankingWindow.Duels.updateTable(json);
        }, RankingWindow);
    };
    RankingWindow.Duels.updateTable = function (be_data) {
        RankingWindow.Duels.Table.clearBody();
        var tmpCells = {};
        var highlight_row;
        RankingWindow.page = be_data.page;
        var data = be_data.ranking;
        $('div.ranking-duels div.rl_pagebar_ranking', RankingWindow.DOM).empty().append(new west.gui.Pagebar(RankingWindow.page, be_data.pages, jump2Page).getMainDiv());
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var name_title = (rd.title) ? rd.title + rd.name : rd.name;
            var name_link = '<a href="javascript:void(PlayerProfileWindow.open(' + rd.player_id + '));">' + name_title + '</a>';
            var town = '<a href="javascript:Map.center(' + rd.town_x + ',' + rd.town_y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.town_x + ',' + rd.town_y + ');\' > ' + rd.town_name + '</a>';
            tmpCells['duel_rank'] = rd.counter;
            tmpCells['duel_playername'] = "<span title='" + name_title.escapeHTML() + "'>" + name_link + "</span>";
            tmpCells['duel_exp'] = rd.experience;
            tmpCells['duel_win'] = rd.duel_win
            tmpCells['duel_loss'] = rd.duel_loss
            tmpCells['duel_diff'] = rd.difference
            tmpCells['duel_town'] = (rd.town_name) ? town : '-';
            highlight_row = rd.highlight;
            RankingWindow.Duels.Table.buildRow('duel_rank_' + rd.counter, tmpCells, (highlight_row) ? function (row) {
                row.addClass("highlight_row");
                return row;
            } : null);
        }
    };
    RankingWindow.Cities.init = function () {
        var maindiv = $('<div></div>');
        var footer = RankingWindow.buildFooter(true);
        RankingWindow.Cities.Table = new west.gui.Table().setId('ranking_cities').createEmptyMessage('Рейтинг ещё пуст!').appendTo(maindiv).addColumn("town_rank").addColumn("town_name").addColumn("town_points_sum").addColumn("town_points").addColumn("town_fort_points").addColumn("town_member_points").addColumn("town_duel_points").addColumn("town_member_count").addColumn("town_member_lvl").appendToThCell("head", "town_rank", 'Ранг', 'Ранг').appendToThCell("head", "town_name", 'Город', 'Город').appendToThCell("head", "town_points_sum", 'Суммарные очки', 'Очки').appendToThCell("head", "town_points", 'Очки города', '&nbsp;').appendToThCell("head", "town_fort_points", 'Очки фортов', '&nbsp;').appendToThCell("head", "town_member_points", 'Очки жителей', '&nbsp;').appendToThCell("head", "town_duel_points", 'Дуэльные очки', '&nbsp;').appendToThCell("head", "town_member_count", 'Жители', '&nbsp;').appendToThCell("head", "town_member_lvl", 'Средний уровень жителей', '&nbsp;').appendToFooter('town_rank', footer);
        $('div.ranking-cities', RankingWindow.DOM).empty().append(maindiv);
    };
    RankingWindow.Cities.initData = function () {
        Ajax.remoteCallMode('ranking', 'get_data', {page: RankingWindow.page, tab: RankingWindow.tab}, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            RankingWindow.Cities.updateTable(json);
        }, RankingWindow);
    };
    RankingWindow.Cities.updateTable = function (be_data) {
        RankingWindow.Cities.Table.clearBody();
        var tmpCells = {};
        var highlight_row;
        RankingWindow.page = be_data.page;
        var data = be_data.ranking;
        $('div.ranking-cities div.rl_pagebar_ranking', RankingWindow.DOM).empty().append(new west.gui.Pagebar(RankingWindow.page, be_data.pages, jump2Page).getMainDiv());
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var town = '<a href="javascript:Map.center(' + rd.town_x + ',' + rd.town_y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.town_x + ',' + rd.town_y + ');\' > ' + rd.town_name + '</a>';
            tmpCells['town_rank'] = rd.counter;
            tmpCells['town_name'] = (rd.town_name) ? town : '-';
            tmpCells['town_points_sum'] = rd.sum_points;
            tmpCells['town_points'] = rd.points;
            tmpCells['town_fort_points'] = rd.fort_points;
            tmpCells['town_member_points'] = rd.member_level_points;
            tmpCells['town_duel_points'] = rd.duel_diff_points;
            tmpCells['town_member_count'] = rd.member_count;
            tmpCells['town_member_lvl'] = rd.mean_level;
            highlight_row = rd.highlight;
            RankingWindow.Cities.Table.buildRow('cities_rank_' + rd.counter, tmpCells, (highlight_row) ? function (row) {
                row.addClass("highlight_row");
                return row;
            } : null);
        }
    };
    RankingWindow.Skills.init = function () {
        var maindiv = $('<div></div>');
        RankingWindow.Skills.skill = "strength";
        RankingWindow.Skills.menue = $('<ul class="submenu"></ul>').appendTo(maindiv);
        RankingWindow.Skills.Table = new west.gui.Table().setId('ranking_skills').createEmptyMessage('Рейтинг ещё пуст!').appendTo(maindiv).addColumn("skill_rank").addColumn("skill_playername").addColumn("skill_pointss").addColumn("skill_level").addColumn("skill_town").appendToThCell("head", "skill_rank", 'Ранг', 'Ранг').appendToThCell("head", "skill_playername", 'Имя персонажа', 'Имя персонажа').appendToThCell("head", "skill_pointss", 'Суммарные очки', 'Очки').appendToThCell("head", "skill_level", 'Уровень', 'Уровень').appendToThCell("head", "skill_town", 'Город', 'Город');
        $('div.ranking-skills', RankingWindow.DOM).empty().append(maindiv, '<div class="illegal_skill"></div>');
        var tmpA = [];
        for (var attribute in CharacterSkills.skillKeys4Attr) {
            var skills = CharacterSkills.skillKeys4Attr[attribute];
            var tmpArr = [];
            for (var x = 0; x < skills.length; x++) {
                tmpArr.push($("<li id='rank_subbutton_" + CharacterSkills.skillKeys4Attr[attribute][x] + "' class='skill_button'></li>").append(new west.gui.Button(CharacterSkills.keyNames[skills[x]], RankingWindow.Skills.subClick, skills[x]).setWidth(162).getMainDiv()));
            }
            tmpA.push($("<li id='rank_button_" + attribute + "'></li>").append(new west.gui.Button(CharacterSkills.keyNames[attribute], RankingWindow.Skills.subClick, attribute).setWidth(185).getMainDiv()).append($("<ul class='subsubmenu' id='rank_sub_" + attribute + "'></ul>").appendArray(tmpArr)));
        }
        RankingWindow.Skills.menue.appendArray(tmpA);
    };
    RankingWindow.Skills.subClick = function (data) {
        if ($('#rank_button_' + data.context, RankingWindow.DOM).length > 0) {
            $('.expanded', RankingWindow.Skills.menue).removeClass("expanded");
            $('#rank_button_' + data.context, RankingWindow.DOM).addClass("expanded");
        }
        if (RankingWindow.Skills.skill == data.context)return;
        RankingWindow.Skills.skill = data.context;
        RankingWindow.Skills.initData();
    };
    RankingWindow.Skills.initData = function () {
        Ajax.remoteCallMode('ranking', 'get_data', {
            page: RankingWindow.page,
            tab: RankingWindow.tab,
            skill: RankingWindow.Skills.skill,
            entries_per_page: 10
        }, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            RankingWindow.Skills.updateTable(json);
        }, RankingWindow);
    };
    RankingWindow.Skills.updateTable = function (data) {
        RankingWindow.Skills.Table.clearBody();
        var sel = $('div.ranking-skills .illegal_skill', RankingWindow.DOM);
        if (data.msg == "illegal_skill") {
            sel.empty().append('<img src="https://westrus.innogamescdn.com/images/icons/warn_circle.png" alt="Warn" />');
            sel.append("<strong>" + s("Навык «%1» не может быть показан.", CharacterSkills.keyNames[data.skill]) + "</strong><br />")
            sel.append("<div>" + s("Навык «%1» не может быть показан, поскольку играет стратегическую роль.", CharacterSkills.keyNames[data.skill]) + "</div>");
            sel.show();
            return false;
        }
        sel.hide();
        var tmpCells = {};
        var highlight_row;
        data = data.ranking;
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var name_title = (rd.title) ? rd.title + rd.name : rd.name;
            var name_link = '<a href="javascript:void(PlayerProfileWindow.open(' + rd.player_id + '));">' + name_title + '</a>';
            var town = '<a href="javascript:Map.center(' + rd.town_x + ', ' + rd.town_y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.town_x + ',' + rd.town_y + ');\' > ' + rd.town_name + '</a>';
            tmpCells['skill_rank'] = rd.counter;
            tmpCells['skill_playername'] = "<span title='" + name_title.escapeHTML() + "'>" + name_link + "</span>";
            tmpCells['skill_pointss'] = rd.skill_level;
            tmpCells['skill_level'] = rd.level;
            tmpCells['skill_town'] = (rd.town_name) ? town : '-';
            highlight_row = rd.highlight;
            RankingWindow.Skills.Table.buildRow('skill_rank_' + rd.counter, tmpCells, (highlight_row) ? function (row) {
                row.addClass("highlight_row");
                return row;
            } : null);
        }
    };
    RankingWindow.HallofFame.init = function () {
        var maindiv = $('<div></div>');
        RankingWindow.HallofFame.level = 150;
        RankingWindow.HallofFame.menue = $('<ul class="submenu"></ul>').appendTo(maindiv);
        $('<div class="halloffamecontent"></div>').appendTo(maindiv).append('<div class="bgpage"></div>');
        $('<div id="rl_pagebar_ranking_halloffame" />').appendTo(maindiv);
        $('div.ranking-halloffame', RankingWindow.DOM).empty().append(maindiv);
    };
    RankingWindow.HallofFame.subClick = function (data) {
        if (RankingWindow.HallofFame.level == data.context)
            return false;
        RankingWindow.page = 1;
        RankingWindow.HallofFame.level = data.context;
        RankingWindow.HallofFame.initData();
    };
    RankingWindow.HallofFame.initData = function () {
        Ajax.remoteCallMode('ranking', 'get_hof', {
            page: RankingWindow.page - 1,
            level: RankingWindow.HallofFame.level
        }, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            RankingWindow.HallofFame.updateTable(json);
        }, RankingWindow);
    };
    RankingWindow.HallofFame.updateTable = function (data) {
        var sub = [150, 120, 100, 80, 60];
        $.each(data.valid_level, function (k, l) {
            if (!$.fn.isInArray(l, sub)) {
                sub.push(l);
            }
        });
        sub.sort(function (a, b) {
            return parseInt(b) - parseInt(a);
        });
        RankingWindow.HallofFame.menue.empty();
        RankingWindow.HallofFame.button = [];
        var tmpA = [];
        for (var x = 0; x < sub.length; x++) {
            RankingWindow.HallofFame.button[sub[x]] = (new west.gui.Button(s("%1 уровень", sub[x]), RankingWindow.HallofFame.subClick, sub[x]).setWidth(190));
            tmpA.push($("<li id='rank_button_" + sub[x] + "'></li>").append(RankingWindow.HallofFame.button[sub[x]].disable().getMainDiv()));
        }
        RankingWindow.HallofFame.menue.appendArray(tmpA);
        for (var i = 0; i < data.valid_level.length; i++) {
            RankingWindow.HallofFame.button[data.valid_level[i]].enable();
        }
        RankingWindow.page = data.page;
        $('#rl_pagebar_ranking_halloffame', RankingWindow.DOM).empty().append(new west.gui.Pagebar(RankingWindow.page, data.pages, jump2Page).getMainDiv());
        $('div.halloffamecontent .bgpage', RankingWindow.DOM).hide();
        $('div.halloffamecontent', RankingWindow.DOM).append('<div class="rl_hof_playerlist"/>');
        $('div.halloffamecontent .rl_hof_playerlist', RankingWindow.DOM).empty();
        var tmpArr = [];
        if (RankingWindow.page > 1) {
            $('div.halloffamecontent .bgpage', RankingWindow.DOM).show();
            for (var x = 0; x < data.ranking.length; x++) {
                tmpArr.push(RankingWindow.HallofFame.buildplayer(data.ranking[x], x));
            }
        }
        else {
            tmpArr.push(RankingWindow.HallofFame.buildTopplayer(data.ranking[0]));
            for (var x = 1; x < data.ranking.length; x++) {
                tmpArr.push(RankingWindow.HallofFame.buildplayer(data.ranking[x], x + 1));
            }
        }
        $('div.halloffamecontent .rl_hof_playerlist', RankingWindow.DOM).appendArray(tmpArr);
    };
    RankingWindow.HallofFame.buildplayer = function (data, index) {
        var playerdiv = $('<div class="ranking_halloffame_player_' + index + '" title="' + RankingWindow.HallofFame.buildTitle(data).escapeHTML() + '" ></div>');
        var avatar = $('<div class="player_pic" id="ranking_halloffame_player_' + data.player_id + '" >' + data.avatar + '<div/>');
        var name = $('<div class="ranking_halloffame_playername"><a href="javascript:void(PlayerProfileWindow.open(' + data.player_id + '));">' + data.name + '</a></div>');
        playerdiv.append(avatar, name);
        return playerdiv;
    };
    RankingWindow.HallofFame.buildTopplayer = function (data) {
        var playerdiv = $('<div class="ranking_halloffame_player_top" title="' + RankingWindow.HallofFame.buildTitle(data).escapeHTML() + '" ></div>');
        var avatar = $('<div  id="ranking_halloffame_player_' + data.player_id + '"> ' + data.avatar + '<div/>');
        var name = '<div class="ranking_halloffame_playername_top"><a href="javascript:void(PlayerProfileWindow.open(' + data.player_id + '));">' + data.name + '</a></div>';
        playerdiv.append(avatar, name);
        return playerdiv;
    };
    RankingWindow.HallofFame.buildTitle = function (data) {
        var title = '<div  style="text-align:center;"><div style="width:72px; margin:0px auto">' + data.avatar + '</div><strong>' + data.name + '</strong><br />' +
            'Имя высечено в зале славы %1.'.replace('%1', data.reached) + '</div>';
        return title;
    };
})(jQuery);
;
(function ($) {
    window.TownWindow = {DOM: $('*')};
    var townObj = {};
    var animated = false;
    var isNPC = false;
    TownWindow.toggleOpen = function (coordX, coordY, town_type) {
        var wnd = wman.toggleOpen("townoverview_" + coordX + "_" + coordY, 'Город', "townoverview noreload");
        if (wnd && 'open' === wnd.status) {
            TownWindow.open(coordX, coordY, town_type, wnd.win);
        }
    }, TownWindow.open = function (coordX, coordY, town_type, win_open) {
        isNPC = town_type === 'npc';
        if (LinearQuestHandler.hasTutorialQuest() && !isNPC) {
            return false;
        }
        initData(coordX, coordY, win_open);
    };
    var initData = function (x, y, win_open) {
        var request_data;
        if ('undefined' === typeof y && x) {
            request_data = {'town_id': x};
        } else {
            request_data = {x: x, y: y};
        }
        Ajax.remoteCallMode('town', 'get_town', request_data, function (json) {
            if (json.error) {
                return new UserMessage(json.msg).show();
            }
            if ('Town' !== json.towntype && TownWindow.window) {
                TownWindow.window.destroy();
            }
            switch (json.towntype) {
                case'Town':
                    TownWindow.init(json, win_open);
                    break;
                case'GhosttownTakeOver':
                    GhosttownTakeOverWindow.open(json);
                    break;
                case'GhosttownVisit':
                    GhosttownVisitWindow.open(json);
                    break;
                case'NpcTown':
                    NpcTownWindow.open(json);
                    break;
                case'NoTown':
                    NoTownWindow.open();
                    break;
                case'FoundTown':
                    FoundTownWindow.open(json);
                    break;
                default:
                    break;
            }
        }, TownWindow);
    };
    TownWindow.init = function (data, win_open) {
        townObj = {
            x: data.town_x,
            y: data.town_y,
            own_town: data.is_own_town,
            name: data.town_name,
            townId: data.town_id
        };
        TownWindow.window = (win_open || wman.open("townoverview_" + townObj.x + "_" + townObj.y, 'Город', "townoverview noreload"));
        if (!$('#townwindow-overview_' + townObj.x + '_' + townObj.y).length)
            wman.getById("townoverview_" + townObj.x + '_' + townObj.y).setMiniTitle(townObj.name).appendToContentPane($('<div id="townwindow-overview_' + townObj.x + '_' + townObj.y + '" />'));
        TownWindow.DOM = $('div.townoverview_' + townObj.x + '_' + townObj.y);
        TownWindow.window.setTitle(townObj.name + '&nbsp;<img id="tow_' + townObj.townId + '_showonmap" title="' + 'Показать на карте' + '" style="cursor: pointer;" src="https://westrus.innogamescdn.com/images/icons/scrollto.png" />');
        var maindiv = $('<div class="town-overview"><img class="citybg_left" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_le.png" /><img class="citybg_top" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_to.jpg" /><img class="citybg_right" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_ri.png" /></div>');
        var map_img = '<img class="empty" src="https://westrus.innogamescdn.com/images/transparent.png" alt="" usemap="#map_town_' + townObj.x + '_' + townObj.y + '" />';
        var map = '<div class="tow_town_background">' + map_img + generateMap(data.allBuildings) + '</div>';
        var info_citizenbox = $('<div class="tow_citizen linklike">' + s(ngettext('%1 житель', new Array('%1 житель', '%1 жителя', '%1 жителей'), data.member_count), data.member_count) + '</div>').on('click', function () {
            CityhallWindow.open(townObj.townId, 'residents');
        });
        var info_forumlink = data.is_own_town ? $('<div class="tow_forumlink"><div class="tow_forumhighlight"></div><span class="tow_forumlinktext linklike">' + 'Сплетни' + '</span></div>').on('click', ForumWindow.open) : '';
        var info_buildpointsbox = $('<div class="tow_buildpoints linklike">' + s(ngettext('%1 очко', new Array('%1 очко', '%1 очка', '%1 очков'), data.town_points), data.town_points) + '</div>').on('click', function () {
            RankingWindow.search('cities', data.town_name);
        });
        maindiv.append(map, info_citizenbox, info_forumlink, info_buildpointsbox);
        $('#townwindow-overview_' + townObj.x + '_' + townObj.y, TownWindow.DOM).empty().append(maindiv);
        createTownProfile(data);
        $('#tow_' + townObj.townId + '_showonmap', TownWindow.DOM).click(butScroll2TownClicked(townObj.x, townObj.y));
    };
    var generateMap = function (arrBuildings) {
        var map = '<map name="map_town_' + townObj.x + '_' + townObj.y + '" id="map_town_' + townObj.x + '_' + townObj.y + '">';
        var imgs = '';
        for (var b in arrBuildings) {
            var tmp = arrBuildings[b];
            if (tmp.imgMap && tmp.stage)
                map += generateArea(b, tmp);
            if (tmp.imgName && tmp.imgPos)
                imgs += '<img class="tow_building_image" src="https://westrus.innogamescdn.com/images/town/' + tmp.imgName + '" style="left:' + tmp.imgPos[0] + 'px; top:' + tmp.imgPos[1] + 'px;" alt="" />';
        }
        if (!LinearQuestHandler.hasTutorialQuest()) {
            map += '<area class="imagemap_area" shape="poly" title="' + buildTooltip({
                    name: 'Почта',
                    description: 'Здесь ты можешь отправлять сообщения другим игрокам.'
                }).escapeHTML() + '" coords="369,87,426,88,427,140,368,142" href="javascript:MessagesWindow.open();" />';
        }
        map += '<area class="imagemap_area" shape="poly" title="' + buildTooltip({
                name: 'Указатель',
                description: 'Идти в город'
            }).escapeHTML() + '" coords="314,319,383,324,380,374,313,373" href="javascript:void(Guidepost.show(' + townObj.townId + ', ' + townObj.x + ', ' + townObj.y + ', \'town\'));" />';
        map += '</map>';
        return map + imgs;
    };
    var generateArea = function (buildingKey, buildingObj) {
        var area = '<area shape="poly" title="' + buildTooltip(buildingObj).escapeHTML() + '" coords="' + buildingObj.imgMap + '" class="imagemap_area imagemap_' + buildingKey + '" href="#" ';
        if (LinearQuestHandler.hasTutorialQuest() && buildingKey != 'saloon')return area += ' />';
        switch (buildingKey) {
            case'cityhall':
                area += 'onclick="CityhallWindow.open(' + townObj.townId + '); return false;" />';
                break;
            case'market':
                area += 'onclick="MarketWindow.open(' + townObj.townId + ', ' + buildingObj.stage + '); return false;" />';
                break;
            case'gunsmith':
            case'general':
            case'tailor':
                area += 'onclick="Trader.open(\'' + buildingKey + '\',' + townObj.townId + ',' + townObj.x + ',' + townObj.y + '); return false;" />';
                break;
            case'church':
                area += 'onclick="ChurchWindow.open(' + townObj.townId + '); return false;" />';
                break;
            case'bank':
                area += 'onclick="BankWindow.open(' + townObj.townId + '); return false;" />';
                break;
            case'sheriff':
                area += 'onclick="SheriffWindow.open(' + townObj.townId + '); return false;" />';
                break;
            case'mortician':
                area += 'onclick="MorticianWindow.open(' + townObj.townId + '); return false;" />';
                break;
            case'hotel':
                area += 'onclick="HotelWindow.open(' + townObj.townId + '); return false;" />';
                break;
            case'saloon':
                area += 'onclick="' + ((townObj.own_town || isNPC) ? 'QuestSaloonWindow.open();' : 'SaloonWindow.open(' + townObj.townId + ');') + ' return false;" />';
                break;
            case'cinema':
                area += 'onclick="CinemaWindow.open(' + townObj.townId + '); return false;" />';
                break;
            default:
                area += ' />';
        }
        return area;
    };
    var buildTooltip = function (buildingObj) {
        return '<h4><span class="text_bold">' + buildingObj.name + '</span> ' +
            (buildingObj.stage ? '(' + s('%1-й уровень', buildingObj.stage) + ')' : '') + '</h4>' + '<p>' + buildingObj.description + '</p>';
    };
    var createTownProfile = function (town_data) {
        if ($('div.tw2gui_window_extension_box', TownWindow.DOM).length)return false;
        var sideMenu = new west.gui.Window.extension.box(TownWindow.window), isOwn = town_data.is_own_town;
        var header = '<div class="tow_profileheader">' +
            (isOwn ? ('<img title="' + 'Казна' + '" style="width: 14px; height: 14px;" src="https://westrus.innogamescdn.com/images/bank/cash.png" />&nbsp;' + format_money(town_data.town_bank) + '&nbsp;&nbsp;') : "") + '<img title="' + 'Свои форты' + '" style="width: 14px; height: 14px;" src="https://westrus.innogamescdn.com/images/fort/fort_mini_icon.png" />&nbsp;' + town_data.forts_owning + '&nbsp;&nbsp;' + '<img title="' + 'Форты альянса' + '" style="width: 14px; height: 14px;" src="https://westrus.innogamescdn.com/images/fort/fort_mini_icon.png" />&nbsp;' + town_data.forts_membering + '&nbsp;&nbsp;' + '</div>';
        var townimage = town_data.show_image ? '<img src="img.php?type=town_logo&amp;id=' + town_data.town_id + '"/><br />' : '';
        var body = '<div class="tow_profiletext selectable">' + townimage + Game.TextHandler.parse(town_data.town_description) + '</div>';
        sideMenu.setHead(header).setContent(body).setVisible(false);
    };
    var butScroll2TownClicked = function (x, y) {
        return function () {
            Map.center(x, y);
        }
    };
})(jQuery);
;
(function ($) {
    var getDistance2Town = function (x, y) {
        return Map.calcWayTime(Character.position, {x: x, y: y}).formatDuration();
    };
    (function () {
        window.GhosttownTakeOverWindow = {DOM: $('*')};
        var townnameInput = null;
        var townObj = {townId: 0, x: 0, y: 0};
        var found_cost = 0;
        GhosttownTakeOverWindow.open = function (data) {
            townObj.townId = data.town_id;
            townObj.x = data.town_x;
            townObj.y = data.town_y;
            GhosttownTakeOverWindow.window = wman.open("ghosttowntakeover_" + townObj.x + "_" + townObj.y).setMiniTitle('Город-призрак').appendToContentPane($('<div id="ghosttown-takeover_' + townObj.x + '_' + townObj.y + '" />'));
            GhosttownTakeOverWindow.DOM = $('#ghosttown-takeover_' + townObj.x + '_' + townObj.y);
            GhosttownTakeOverWindow.window.setTitle('Занять покинутый город');
            GhosttownTakeOverWindow.init(data);
        };
        wman.registerReopenHandler("/^ghosttowntakeover_" + townObj.x + "_" + townObj.y + "/", GhosttownTakeOverWindow.open);
        GhosttownTakeOverWindow.init = function (data) {
            var maindiv = $('<div class="ghostt-takeover"></div>');
            found_cost = data.found_cost;
            var textbox = '<div class="gtto_textbox"><h3>' + 'Описание' + '</h3><p>' + s('Ты можешь восстановить этот заброшенный город. Казна пуста, но городские постройки останутся на том же уровне, на котором были когда жители его покидали. Для восстановления города тебе понадобится %1$ и %2 очков энергии. Если ты займёшь этот город, ты станешь его мэром и сможешь приглашать других игроков.', data.found_cost, data.found_energy) + '</p></div>';
            townnameInput = new west.gui.Textfield("gtto_townname").setSize(25).addListener(butTakeOverTownClicked, this);
            var butOk = new west.gui.Button('ОК', butTakeOverTownClicked, null, null).setMinWidth(50);
            var formbox = $('<div class="gtto_formbox">' + '<h4 class="center">' + 'Подходящее место для основания города' + '</h4><br />' + '<p>' + 'Текущее количество строительных очков' + ': <span class="gtto_buildPoints">' + data.build_points + '</span></p><br />' + '<p class="gtto_newtownname">' + 'Город' + ':&nbsp;</p><br />' + '<p>' + 'Расстояние' + ':&nbsp;<span>' + getDistance2Town(data.town_x, data.town_y) + '</span></p>' + '<p>' + 'Время' + ':&nbsp;' + "%1 часов".replace("%1", data.found_duration) + '</p><br />' + '<p class="gtto_okbutton"></p>' + '</div>');
            $('p.gtto_newtownname', formbox).append(townnameInput.getMainDiv());
            $('p.gtto_okbutton', formbox).append(butOk.getMainDiv());
            var buttonbox = $('<div class="gtto_buttonbox">' + '<img id="gtto_butgototown" title="' + 'Идти в город-призрак' + '" src="https://westrus.innogamescdn.com/images/fingerboard/fingerboard_btn.png" />' + '</div>');
            if (data.market_offers >= 1) {
                buttonbox.prepend('<img id="gtto_butgetmarketoffers" title="' + 'Заказать доставку' + '" src="https://westrus.innogamescdn.com/images/market/fetch-circle.png" />&nbsp;');
            }
            maindiv.append(textbox, formbox, buttonbox);
            GhosttownTakeOverWindow.DOM.empty().append(maindiv);
            $('#gtto_butgetmarketoffers', maindiv).click(butGetMarketOffersClicked);
            $('#gtto_butgototown', maindiv).click(butGotoTownClicked);
        };
        var butTakeOverTownClicked = function () {
            if (Character.getCapital() < found_cost) {
                return new UserMessage('У тебя не хватает денег').show();
            }
            TaskQueue.add(new TaskRefound(townObj.x, townObj.y, townnameInput.getValue()));
        };
        var butGetMarketOffersClicked = function () {
            MarketWindow.fetchAll(townObj.townId);
        };
        var butGotoTownClicked = function () {
            Guidepost.show(townObj.townId, townObj.x, townObj.y, 'town');
        };
    })();
    (function () {
        window.GhosttownVisitWindow = {DOM: $('*')};
        var townObj = {townId: 0, x: 0, y: 0};
        GhosttownVisitWindow.open = function (data) {
            townObj.townId = data.town_id;
            townObj.x = data.town_x;
            townObj.y = data.town_y;
            GhosttownVisitWindow.window = wman.open("ghosttownvisit_" + townObj.x + "_" + townObj.y, "Город-призрак", "ghosttownvisit").setMiniTitle('Город-призрак').appendToContentPane($('<div id="ghosttown-visit_' + townObj.x + '_' + townObj.y + '" />'));
            GhosttownVisitWindow.DOM = $('#ghosttown-visit_' + townObj.x + '_' + townObj.y);
            GhosttownVisitWindow.window.setTitle('Посетить покинутый город');
            GhosttownVisitWindow.init(data);
        };
        wman.registerReopenHandler("/^ghosttownvisit_" + townObj.x + "_" + townObj.y + "/", GhosttownVisitWindow.open);
        GhosttownVisitWindow.init = function (data) {
            var maindiv = $('<div class="ghostt-visit"><img class="citybg_left" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_le.png" /><img class="citybg_top" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_to.jpg" /><img class="citybg_right" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_ri.png" /></div>');
            var picbox = $('<div class="gtv_picbox"><img src="https://westrus.innogamescdn.com/images/town/ghostcity.jpg" /></div>');
            var textbox = $('<div class="gtv_textbox"><p>' + 'Этот город давно заброшен. Все здания пусты.' + '</p>' + '<p>' + 'Текущее количество строительных очков' + ': <span class="gtto_buildPoints">' + data.build_points + '</span></p><br />' + '</div>');
            var buttonbox = $('<div class="gtv_buttonbox">' + '<img id="gtv_butgototown" title="' + 'Идти в город-призрак' + '" src="https://westrus.innogamescdn.com/images/fingerboard/fingerboard_btn.png" />' + '</div>');
            if (data.market_offers >= 1) {
                buttonbox.prepend('<img id="gtv_butgetmarketoffers" title="' + 'Заказать доставку' + '" src="https://westrus.innogamescdn.com/images/market/fetch-circle.png" />&nbsp;');
            }
            maindiv.append(picbox, textbox, buttonbox);
            GhosttownVisitWindow.DOM.empty().append(maindiv);
            $('#gtv_butgetmarketoffers', maindiv).click(butGetMarketOffersClicked);
            $('#gtv_butgototown', maindiv).click(butGotoTownClicked);
        };
        var butGetMarketOffersClicked = function () {
            MarketWindow.fetchAll(townObj.townId);
        };
        var butGotoTownClicked = function () {
            Guidepost.show(townObj.townId, townObj.x, townObj.y, 'town');
        };
    })();
    (function () {
        window.FoundTownWindow = {DOM: $('*')};
        var townObj = {x: 0, y: 0};
        var townnameInput;
        var found_cost;
        FoundTownWindow.open = function (data) {
            townObj.x = data.x;
            townObj.y = data.y;
            found_cost = data.found_cost;
            FoundTownWindow.window = wman.open("foundtown_" + townObj.x + "_" + townObj.y, null, "foundtown").setMiniTitle('Подходящее место для основания города').appendToContentPane($('<div id="found-town_' + townObj.x + '_' + townObj.y + '" />'));
            FoundTownWindow.DOM = $('#found-town_' + townObj.x + '_' + townObj.y);
            FoundTownWindow.DOM.append('<img src="https://westrus.innogamescdn.com/images/jobs/found.png" class="job_icon" /><div class="job_top_bg"></div>' + '<div class="job_head">' + "В этом месте ты можешь основать город." + '</div><div class="foundtown_bg"></div><div class="foundtown_divider"></div><div class="job_content"></div>');
            FoundTownWindow.window.setTitle('Подходящее место для основания города');
            FoundTownWindow.init(data);
        };
        wman.registerReopenHandler("/^foundtown_" + townObj.x + "_" + townObj.y + "/", FoundTownWindow.open);
        FoundTownWindow.init = function (data) {
            var textbox = '<div>' + s('Здесь ты можешь основать город. Для этого требуется %1$ и %2 очков энергии. Основав город, ты сможешь приглашать игроков и вы будете вместе его развивать.', data.found_cost, data.found_energy) + '</div><div class="info">' + 'Расстояние' + ': ' + getDistance2Town(data.x, data.y) + ' - ' + 'Время' + ': ' + s("%1 часов", data.found_duration) + '</span>';
            townnameInput = new west.gui.Textfield("townname").setSize(41).addListener(foundtown, this);
            var buttonfound = new west.gui.Button('Строительство', foundtown, null, null).setMinWidth(135);
            var formbox = $('<div class="formbox"></div>');
            var tn_lable = $('<span class="tn_lable">' + 'Город' + '</span>');
            formbox.append(townnameInput.getMainDiv(), buttonfound.getMainDiv(), tn_lable);
            $("#townname", formbox).focus(function () {
                $('.job_content .tn_lable', FoundTownWindow.DOM).hide();
            });
            tn_lable.click(function () {
                $("#townname", formbox).focus();
            });
            $("#townname", formbox).focusout(function () {
                if (townnameInput.getValue() == "")
                    $('.job_content .tn_lable', FoundTownWindow.DOM).show();
            });
            $('.job_content', FoundTownWindow.DOM).empty().append(textbox, formbox);
            EventHandler.listen("char_position_changed", function () {
                $('.job_content .info', FoundTownWindow.DOM).text('Расстояние' + ': ' + getDistance2Fort(data.x, data.y) + ' - ' + 'Время' + ': ' + data.foundDuration);
            });
        };
        var foundtown = function () {
            if (Character.getCapital() < found_cost) {
                return new UserMessage('У тебя не хватает денег').show();
            }
            TaskQueue.add(new TaskFound(townObj.x, townObj.y, townnameInput.getValue()));
        };
    })();
})(jQuery);
;
(function ($) {
    window.Trader = {};
    Trader.types = {
        'item_trader': 'item_trader',
        'gunsmith': 'building_gunsmith',
        'tailor': 'building_tailor',
        'general': 'building_general'
    };
    Trader.name = {'item_trader': 'Магазин', 'gunsmith': 'Оружейник', 'tailor': 'Портной', 'general': 'Магазин'};
    Trader.inv = {};
    Trader.type = '';
    Trader.invMaxLength = 12;
    Trader.buy_popup_xhtml = '<div class="bag_item float_left"><img src="%buy_img%" /></div>' + '<span class="item_popup_sell_value">' + 'Стоимость:'.escapeHTML() + '$ %buy_popup_price%</span><br />' + '<span style="font-size:12px;">' + 'Точно покупаешь?'.escapeHTML() + '</span>';
    Trader.checkType = function (type) {
        var available = false;
        for (var k in Trader.types) {
            if (type == k)available = true;
        }
        return available;
    };
    Trader.open = function (type, town_id, coordX, coordY) {
        if (!Trader.checkType(type))return false;
        if (type != "item_trader" && town_id == undefined)return false;
        if (window.Trader.window)window.Trader.window.destroy();
        Trader.type = type;
        Trader.id = type == 'item_trader' ? Character.playerId : town_id;
        Trader.window = wman.open(type, Trader.name[type], 'trader noreload').setMiniTitle("Магазин");
        Trader.window.appendToContentPane($('<div id="trader_bag"></div><div id="arrow_right"></div><div id="arrow_left"></div><div id="trader_bag_pages"></div>'));
        $('#trader_bag').mousewheel(function (e, d) {
            Trader.wheelHandler(e, d);
        });
        if (type == "item_trader") {
            var btn = new west.gui.Button('<img src="https://westrus.innogamescdn.com/images/window/trader/nugget.png" alt="" />' + 'Сменить товар', function () {
                Premium.confirmUse('itemtraderrefill', 'Коммивояжёр готовит новый товар.', 'Точно сменить ассортимент?', Premium.price["itemtraderrefill"])
            });
            var refill = $('<div id="item_trader_refill"></div>').append(btn.getMainDiv());
            Trader.window.appendToContentPane(refill, $('<div id="div_item_trader_timer"></div>'));
            $('#div_item_trader_timer').text('Поставки через').append($('<span id="item_trader_timer" style="padding-left: 5px;"></span>'));
        }
        Inventory.open(Trader.window, {callback: this.onInventoryClick, context: this, window: this.window});
        Ajax.remoteCallMode(Trader.types[type] + (type != "item_trader" ? "&town_id=" + Trader.id : ''), (type == "item_trader" ? 'index' : ''), {}, function (json) {
            Trader.inv = {};
            Trader.charge = json.charge != undefined ? json.charge : 1;
            for (var i = 0; i < json.trader_inv.length; i++) {
                Trader.addItemToInv(json.trader_inv[i].item_id);
            }
            Trader.drawInventory(1);
            if (json.time) {
                Trader.setTime(json.time, json.actual_time);
            }
            if (json.level) {
                Trader.window.appendToContentPane($('<img src="https://westrus.innogamescdn.com/images/buildings/' + json.image + '" alt="' + type + '" style="height:60px;margin-left:25px;" />'), $('<div id="town_desc">(' + 'Уровень' + ' ' + json.level + ')<br/><a href="#" onclick="TownWindow.open(' + coordX + ',' + coordY + ');">' + json.town_name + '</a></div>'), $('<div id="town_sign" onclick="Guidepost.show(' + town_id + ', ' + coordX + ', ' + coordY + ', \'town\');" title="' + 'Идти в город' + '"></div>'));
            }
        });
    };
    Trader.onInventoryClick = function (item) {
        this.sellDialog(item.obj.item_id);
        return true;
    };
    Trader.setTime = function (time, servertime) {
        Trader.time = time * 1000;
        Trader.timediff = new Date().getTime() - servertime * 1000;
        if (Trader.timer)window.clearInterval(Trader.timer);
        Trader.timer = window.setInterval(Trader.updateTimer, 500);
    };
    Trader.updateTimer = function () {
        var time = $('#item_trader_timer');
        if (!time)return;
        var t = new Date().getTime() - Trader.timediff;
        var dt = (Trader.time - t) / 1000;
        if (dt > 0) {
            time.html(dt.formatDuration());
        } else {
            window.clearInterval(Trader.time);
            Ajax.remoteCall('item_trader', 'refresh', {}, function (json) {
                if (json.error != true) {
                    Trader.open("item_trader");
                }
            });
        }
    }
    Trader.getItemByItemId = function (item_id) {
        for (k in Trader.inv) {
            if (k == item_id)return Trader.inv[k];
        }
        return false;
    };
    Trader.sell = function (source) {
        Trader.sellDialog($(source).data('itemId'));
    };
    Trader.buy = function (source) {
        Trader.buyDialog($(source).data('itemId'));
    };
    Trader.buyDialog = function (item_id) {
        var buy_popup;
        if ($('#buy_popup')) {
            $('#buy_popup').remove();
        }
        buy_popup = $('<div id="buy_popup" style="opacity: 0.9;"></div>');
        var item = Trader.getItemByItemId(item_id);
        if (item) {
            var html = Trader.buy_popup_xhtml.fillValues({
                buy_img: item.getImgEl()[0].src,
                buy_popup_price: item.getBuyPrice(),
                buy_popup_item_name: item.getName()
            });
            var coords = $(Trader.window.divMain).position();
            new west.gui.Dialog(item.getName(), html).setX(coords.left).setY(coords.top).addButton('yes', function () {
                Trader.buyItem(item);
            }).addButton('no', function () {
                Trader.cancelBuy();
            }).setModal(true, true).show();
        }
    };
    Trader.buyItem = function (item) {
        item.getImgEl().css('opacity', '0.3');
        Ajax.remoteCall(Trader.types[Trader.type], 'buy', {
            item_id: item.obj.item_id,
            town_id: Trader.id,
            last_inv_id: Bag.getLastInvId()
        }, function (json) {
            if (json.error) {
                return new UserMessage(json.error, UserMessage.TYPE_ERROR).show();
            } else {
                if (json.expressoffer) {
                    Premium.confirmUse(json.expressoffer + " " + Bag.getLastInvId(), 'Экспресс-доставка', "Ты сейчас не в этом городе. Но за несколько самородков ты можешь заказать доставку.", json.price);
                } else {
                    Trader.handleBuyResponse(json);
                    if (Trader.type == "item_trader") {
                        item.divMain.remove();
                    }
                }
            }
            item.getImgEl().css('opacity', '1.0');
        });
        Trader.cancelBuy();
    };
    Trader.handleBuyResponse = function (json) {
        Bag.updateChanges(json.changes);
        Character.setMoney(json.money.barrows);
        Character.setDeposit(json.money.deposit);
    };
    Trader.cancelBuy = function () {
        $('#buy_popup').css('display', 'none');
    };
    Trader.sellItem = function (item) {
        Trader.checkMaxSellCount(item, $('#sell_popup'));
        item.getImgEl().css('opacity', '0.3');
        $('#sell_popup').hide();
        var item_count = $('#item_popup_input').val() == undefined ? 1 : $('#item_popup_input').val();
        var dataObject = {
            inv_id: item.inv_id,
            town_id: Trader.id,
            item_id: item.obj.item_id,
            count: item_count,
            last_inv_id: Bag.getLastInvId()
        };
        Ajax.remoteCall(Trader.type == 'item_trader' ? 'item_trader' : Trader.types[Trader.type], 'sell', dataObject, function (json) {
            if (json.error) {
                new UserMessage(json.error, UserMessage.TYPE_ERROR).show();
            } else {
                Character.setMoney(json.money);
                Bag.updateChanges(json.changes);
                EventHandler.signal("trader_item_selled", [item.obj["short"]]);
            }
            item.getImgEl().css('opacity', '1.0');
        });
    };
    Trader.sellDialog = function (item_id) {
        var sell_popup;
        if ($('#sell_popup')) {
            $('#sell_popup').remove();
        }
        var xhtml = '';
        var item = Bag.getItemByItemId(item_id);
        if (item.count > 1) {
            xhtml = '<div class="bag_item float_left"><img src="' + item.getImgEl()[0].src + '" /><br /><br /></div>' + '<span class="item_popup_title" id="sell_popup_item_name"></span><span style="font-size:9pt;">' +
                'Сколько ты хочешь продать?' + '</span><p><input class="item_popup_input" type="text" id="item_popup_input" value="1"/>' + '<span class="item_count_scrolls"><img src="https://westrus.innogamescdn.com/images/scrollbar/scroll_up.png" id="sell_rise_count" alt="' + 'Выше' + '"><img src="https://westrus.innogamescdn.com/images/scrollbar/scroll_down.png" id="sell_lower_count" alt="' + 'Ниже' + '"></span>' + '<span class="item_popup_max_count" id="sell_max_item">(99)</span></p><br />' + '<span class="item_popup_sell_value">' + 'Продажа' + ': $<span id="sell_popup_price"></span>,&nbsp;' + 'Сумма' + ':' + '<span class="item_popup_max_money" id="item_popup_max_money">  2</span></span>';
        } else {
            xhtml = '<div class="bag_item float_left"><img src="' + item.getImgEl()[0].src + '" /><br /><br /></div>' + '<span class="item_popup_title" id="sell_popup_item_name"></span><span style="font-size:9pt;">' +
                'Точно хочешь продать?' + '</span><br /><br />' + '<span class="item_popup_sell_value">' + 'Продажа' + ': $<span id="sell_popup_price"></span></span>';
        }
        var position = $(Inventory.window.divMain).position();
        var pos = {
            'left': Math.min($(window).width() - 210, position.left + 55) + 'px',
            'top': Math.min($(window).height() - 150, position.top + 236) + 'px'
        };
        new west.gui.Dialog(item.getName(), xhtml).setId('sell_popup').setX(pos.left).setY(pos.top).addButton('yes', function () {
            Trader.sellItem(item);
        }).addButton('no', function () {
            Trader.cancelSell(item);
        }).setModal(true, true).show();
        var context = $('#sell_popup');
        $('#sell_popup_price', context).text(item.getSellPrice());
        $('#sell_popup_item_name', context).text(item.getName());
        if (item.count > 1) {
            $('#item_popup_max_money', context).addClass('text_bold').text("$" + item.getSellPrice());
            $('#sell_max_item', context).text('(' + item.count + ')').on('click', function () {
                Trader.maxSellCount(item, context)
            });
            $('#sell_rise_count', context).on('click', function () {
                Trader.riseSellCount(item, context)
            });
            $('#sell_lower_count', context).on('click', function () {
                Trader.lowerSellCount(item, context)
            });
        }
        EventHandler.signal("trader_item_sell_dialog", [item.obj["short"]]);
    };
    Trader.maxSellCount = function (item, context) {
        $('#item_popup_input', context).val(item.count);
        $('#item_popup_max_money', context).text("$" + item.getSellPrice() * item.count);
    };
    Trader.checkMaxSellCount = function (item, context) {
        var count = parseInt($('#item_popup_input', context).val());
        if (isNaN(count) || count <= 0) {
            count = 1;
        } else if (count > item.count) {
            count = item.count;
        }
        $('#item_popup_input', context).val(count);
        $('#item_popup_max_money', context).text("$" + item.getSellPrice() * count);
    };
    Trader.riseSellCount = function (item, context) {
        var count = parseInt($('#item_popup_input', context).val());
        if (!isNaN(count) && count < item.count) {
            count = count + 1;
            $('#item_popup_input', context).val(count);
            $('#item_popup_max_money', context).text("$" + item.getSellPrice() * count);
        }
    };
    Trader.lowerSellCount = function (item, context) {
        var count = parseInt($('#item_popup_input', context).val());
        if (!isNaN(count) && count > 1) {
            count = count - 1;
            $('#item_popup_input', context).val(count);
            $('#item_popup_max_money', context).text("$" + item.getSellPrice() * count);
        }
    };
    Trader.cancelSell = function (item) {
        $('#sell_popup').hide();
    }
    Trader.drawInventory = function (page) {
        $('#trader_bag').children().remove();
        var count = 1;
        page = page == undefined ? 0 : page - 1;
        Trader.calcPages(page + 1);
        var start = Trader.invMaxLength * page;
        for (var k in Trader.inv) {
            if (count > start + Trader.invMaxLength)break;
            if (count > start) {
                Trader.inv[k].appendTo($('#trader_bag'));
                var item_id = Trader.inv[k].obj.item_id;
                Trader.inv[k].getImgEl().on('click', function (item_id) {
                    return function (e) {
                        if (!e.shiftKey)
                            Trader.buyDialog(item_id);
                    }
                }(item_id));
            }
            count++;
        }
        $('.drag').setDraggable();
        $('#trader_bag').asDropzone('.item_inventory_img', false, Trader.sell);
    };
    Trader.wheelHandler = function (e, delta) {
        if (delta > 0) {
            if (Trader.page > 1)Trader.drawInventory(Trader.page - 1); else $('#arrow_left').hide();
        }
        if (delta < 0) {
            if (Trader.page < Trader.pages)Trader.drawInventory(Trader.page + 1); else $('#arrow_right').hide();
        }
        e.preventDefault();
        e.returnValue = false;
    };
    Trader.calcPages = function (page) {
        var count = 0;
        for (k in Trader.inv)count++;
        var pages = Math.ceil(count / Trader.invMaxLength);
        var html = '';
        for (var i = 1; pages >= i; i++) {
            if (Trader.type == 'item_trader')break;
            html += i == page ? "<span class='current_page'>" + i + "</span>" : "<a href='#' onclick='Trader.drawInventory(" + i + ");' class='page'>" + i + "</a>";
        }
        page < pages ? $('#arrow_right').show().unbind().click(function () {
            Trader.drawInventory(page + 1);
        }) : $('#arrow_right').hide();
        page > 1 ? $('#arrow_left').show().unbind().click(function () {
            Trader.drawInventory(page - 1);
        }) : $('#arrow_left').hide();
        Trader.page = page;
        Trader.pages = pages;
        $('#trader_bag_pages').html(html);
    };
    Trader.addItemToInv = function (item_id, type) {
        var item, data = ItemManager.get(item_id);
        if (Trader.type != "item_trader") {
            item = new tw2widget.TraderItem(data);
        } else {
            item = new tw2widget.ItemTraderItem(data);
        }
        Trader.inv[item_id] = item.setCharge(Trader.charge).setCount('$' + (data.price * (Trader.charge || 1)));
    };
})(jQuery);
;
(function ($) {
    window.Wear = {};
    Wear.wear = {};
    Wear.item_ids = [];
    Wear.loaded = false;
    Wear.uid = "wear";
    Wear.slots = ['head', 'neck', 'body', 'right_arm', 'left_arm', 'yield', 'foot', 'animal', 'belt', 'pants'];
    Wear.open = function (invCategory) {
        var wear = wman.toggleOpen(Wear.uid, "Снаряжение", "noreload");
        if (wear && 'open' === wear.status) {
            Wear.window = wear.win;
            Wear.window.setMiniTitle("Снаряжение");
            Wear.window.appendToContentPane($('<div id="wear_drop">' + '<div class="wear_button equip_manager_button" onclick="EquipManager.showPopup();" title="' + "Наборы снаряжения" + '"></div>' +
                (!LinearQuestHandler.hasTutorialQuest() ? '<div class="wear_button item_trader_button" onclick="west.window.shop.open(\'wear_window\').showCategory(\'trader\');" title="' + "Коммивояжёр" + '"></div>' : '<div class="wear_button item_trader_button" title="' + "Сначала заверши руководство." + '"></div>')
                + '</div>'));
            Wear.DOM = $('#wear_drop');
            $.each(Wear.slots, function (k, v) {
                Wear.DOM.append($('<div class="wear_' + v + ' wear_slot"></div>').append($('<img class="default_inventory_item_' + v + '" src="https://westrus.innogamescdn.com/images/inventory/default/' + v + '_blank.png" alt="' + v + '" />')));
            });
            Wear.DOM.asDropzone('.item_inventory_img', false, Wear.test);
            EventHandler.listen('wear_loaded', function () {
                Wear.renderWear();
            }, null, {boundto: Wear.window});
            Wear.renderWear();
        }
        if (wear && 'minimize' !== wear.status) {
            Inventory.open(Wear.window, {context: this, window: this.window}, {category: invCategory});
            Wear.window.bringToTop();
        } else {
            Inventory.minimize();
        }
    };
    Wear.onInventoryClick = function (item) {
        return false;
    };
    Wear.test = function (source) {
        var item = Bag.getItemByItemId($(source).data('itemId'));
        if (item == undefined) {
            return false;
        }
        if (item.obj.action) {
            $.globalEval(item.obj.action);
            return false;
        }
        Wear.carry(item);
        return true;
    };
    Wear.renderWear = function () {
        $.each(Wear.slots, function (k, v) {
            var slot = $('.wear_' + v, Wear.DOM);
            slot.empty();
            if (undefined != Wear.wear[v]) {
                var item = Wear.wear[v];
                item.getMainDiv().data('type', item.obj.type).click(function () {
                    Wear.uncarry(item.obj.type);
                }).setDraggable().appendTo(slot);
            } else {
                slot.append($('<img class="default_inventory_item_' + v + '" src="https://westrus.innogamescdn.com/images/inventory/default/' + v + '_blank.png" alt="' + v + '" />'));
            }
        });
    };
    Wear.hoverSlot = function (itemId) {
        var item = ItemManager.get(itemId);
        $('.wear_' + item.type).css('border', '5px solid black');
    };
    Wear.loadInitData = function (data) {
        var i = data.length;
        while (i--) {
            Wear.add(data[i]);
        }
        EventHandler.signal('wear_loaded');
    };
    Wear.add = function (itemId) {
        var data = ItemManager.get(itemId);
        var item = new tw2widget.WearItem(data).setCharacter(Character);
        Wear.wear[item.getType()] = item;
        Wear.item_ids.push(itemId);
        EventHandler.signal('wear_add', [itemId]);
    };
    Wear.uncarry = function (type) {
        var wear, change;
        if (!type) {
            type = $('.dnd_dragElem').data('type');
        }
        wear = this.wear[type];
        change = {added: [], removed: [wear.obj]};
        wear.getImgEl().css('opacity', 0.3);
        Ajax.remoteCall('inventory', 'uncarry', {last_inv_id: Bag.getLastInvId(), type: type}, function (json) {
            Wear.handleClothChange(json, wear, change, function () {
                Wear.remove(type);
            });
        });
        return true;
    };
    Wear.remove = function (type) {
        var id = Wear.wear[type].getId();
        west.common.removeFromArray(Wear.item_ids, id);
        delete(Wear.wear[type]);
        EventHandler.signal('wear_remove', [id]);
    };
    Wear.get = function (type) {
        return Wear.wear[type];
    };
    Wear.carry = function (item) {
        var newItem = item.obj, change = {
            added: [newItem],
            removed: [Wear.wear[newItem.type] && Wear.wear[newItem.type].obj] || []
        };
        item.getImgEl().css('opacity', 0.3);
        Ajax.remoteCall('inventory', 'carry', {
            item_id: item.obj.item_id,
            last_inv_id: Bag.getLastInvId()
        }, function (json) {
            Wear.handleClothChange(json, item, change, function () {
                Wear.add(item.obj.item_id);
            });
        });
    };
    Wear.carries = function (id) {
        var itm = ItemManager.getByBaseId(id);
        return itm && Wear.wear[itm.type] && Wear.wear[itm.type].getItemBaseId() == id;
    };
    Wear.getByBaseId = function (id) {
        var itm = ItemManager.getByBaseId(id), result;
        if (itm && Wear.wear[itm.type] && Wear.wear[itm.type].getItemBaseId() == id) {
            result = Wear.wear[itm.type];
        }
        return result;
    };
    Wear.handleClothChange = function (data, item, change, successCallback) {
        WearSet.setUpBonus(data.setBonus);
        WearSet.setUpItems(data.wearSets);
        WearSet.setWorkPointBonus(data.workPointBonus);
        CharacterSkills.updateAllBonuspoints(data.bonus.allBonuspoints);
        Character.setSpeed(data.speed);
        Character.calcMaxHealth();
        EventHandler.signal('health', [Character.health, Character.maxHealth]);
        item.getImgEl().css('opacity', 1.0);
        if (data.error) {
            new UserMessage(data.message || data.error, UserMessage.TYPE_ERROR).show();
            return false;
        }
        Bag.updateChanges(data.changes, "wear");
        if (successCallback)successCallback.call();
        if (item.obj.type == 'right_arm') {
            EventHandler.signal('character_weapon_changed', [ItemManager.get(item.obj.item_id)]);
        }
        EventHandler.signal('wear_changed', [change]);
        Wear.renderWear();
    };
    Wear.updateChanges = function (wear) {
        var i = 0, len, cat, currentId, changed = false;
        for (len = Wear.slots.length; i < len; i++) {
            cat = Wear.slots[i];
            currentId = Wear.wear[cat] && Wear.wear[cat].getId() || null;
            if (currentId !== wear[cat]) {
                changed = true;
                if (wear[cat] !== null)
                    Wear.add(wear[cat]); else
                    Wear.remove(cat);
            }
        }
        if (changed)Wear.renderWear();
    };
})(jQuery);
;
(function ($) {
    window.Inventory = {};
    Inventory.uid = "inventory";
    Inventory.size = 20;
    Inventory.sizeSearch = 16;
    Inventory.width = 304;
    Inventory.availableCategories = ['new', 'belt', 'body', 'foot', 'head', 'neck', 'pants', 'animal', 'right_arm', 'left_arm', 'yield', 'upgradeable'];
    Inventory.defaultCategory = 'new';
    Inventory.latestSize = 20;
    Inventory.context = null;
    Inventory.categoryDesc = {
        belt: "Пояс",
        body: "Одежда",
        foot: "Обувь",
        head: "Головной убор",
        neck: "Шейная повязка",
        pants: "Штаны",
        animal: "Средство передвижения",
        right_arm: "Дуэльное оружие",
        left_arm: "Фортовое оружие",
        yield: "Продукт",
        'new': "Последние смененные предметы",
        'upgradeable': "Можно модифицировать",
        set: "Искать",
        'buffs': 'Усилители',
        'potions': 'Зелья',
        'misc': 'Разное',
        'crafting': 'Ремесло'
    };
    Inventory.guiElements = {};
    Inventory.searchResult = [];
    Inventory.addEventListeners = function () {
        Inventory.removeEventListeners();
        EventHandler.listen("window_focus_changed", this.handleReFocus, this, {boundto: this.window});
        if (Game.ui.itemUpgrade && Game.ui.itemUpgrade.min_char_level > Character.level) {
            EventHandler.listen("character_level_up", this.handleCharacterLevelup, this, {boundto: this.window});
        }
    }, Inventory.removeEventListeners = function () {
        EventHandler.unlisten("window_focus_changed", this.handleReFocus, this);
        EventHandler.unlisten("character_level_up", this.handleCharacterLevelup, this);
    }, Inventory.handleReFocus = function (win) {
        if (win != this.window) {
            this.click = undefined;
            if (this.focused && this.focused !== win.id) {
                this.window.removeClass('focused_' + this.focused);
            }
            if (!!~listenerWnd.indexOf(win)) {
                this.focused = win.id;
                this.window.addClass('focused_' + win.id);
            }
        }
    };
    Inventory.handleCharacterLevelup = function (change) {
        if (Game.ui.itemUpgrade && Game.ui.itemUpgrade.min_char_level <= change.level) {
            Inventory.addEventListeners();
            Inventory.guiElements.upgradeButton.removeTooltip().enable();
        }
    };
    Inventory.open = function (dockedWindow, clickHandler, opts) {
        opts = $.extend({category: undefined}, opts || {});
        if (wman.getById(Inventory.uid)) {
            wman.reopen(Inventory.uid);
            if (opts.category) {
                Inventory.addItems(opts.category);
            }
        } else {
            Inventory.firstLoad(opts);
        }
        this.setClickHandler(clickHandler);
        if (dockedWindow) {
            Inventory.dock(dockedWindow);
        }
        if (Character.read['inventory']) {
            Ajax.remoteCall('character', 'inventory_read', {}, function () {
                Character.setToRead('inventory', false);
            });
        }
        return this;
    };
    Inventory.dock = function (dockedWindow) {
        Inventory.window.center = function () {
            var max_window_size_difference = 100;
            var $inventory = $('#windows .inventory'), $docklet = $(dockedWindow.divMain), offset_left, offset_top, inventory_position = {}, docklet_position = {};
            offset_left = ($(document).outerWidth() - $inventory.outerWidth() - $docklet.outerWidth()) >> 1;
            if (offset_left < 0) {
                inventory_position.left = $(document).outerWidth() - $inventory.outerWidth() + 7;
                docklet_position.left = 0;
            } else {
                inventory_position.left = offset_left + $docklet.outerWidth() - 6;
                docklet_position.left = offset_left + 7;
            }
            inventory_position.top = ($(document).outerHeight() - $inventory.outerHeight()) >> 1;
            if ($docklet.outerHeight() < ($inventory.outerHeight() + max_window_size_difference)) {
                offset_top = Math.min(($(document).outerHeight() - $docklet.outerHeight()) >> 1, ($(document).outerHeight() - $inventory.outerHeight()) >> 1);
                inventory_position.top = docklet_position.top = offset_top;
            } else {
                docklet_position.top = ($(document).outerHeight() - $docklet.outerHeight()) >> 1;
            }
            $docklet.css({left: docklet_position.left + 'px', top: docklet_position.top + 'px'});
            $inventory.css({left: inventory_position.left + 'px', top: inventory_position.top + 'px'});
        };
        if (Inventory.dockedWindow) {
            Inventory.undock();
        }
        Inventory.dockedWindow = dockedWindow;
        Inventory.window.addClass('docked_' + dockedWindow.id);
        Inventory.window.addClass('focused_' + dockedWindow.id);
        EventHandler.listen("window_closed_" + dockedWindow.id, Inventory.undock, Inventory);
        Inventory.window.center();
    };
    Inventory.undock = function () {
        Inventory.window.removeClass('docked_' + Inventory.dockedWindow.id);
        Inventory.window.removeClass('focused_' + Inventory.dockedWindow.id);
        EventHandler.unlisten("window_closed_" + Inventory.dockedWindow.id, Inventory.undock, Inventory);
        return this;
    };
    Inventory.minimize = function () {
        wman.minimize(Inventory.uid);
    };
    var listenerWnd = [];
    Inventory.setClickHandler = function (handler) {
        if (!handler)return;
        if (!handler.context || !handler.window)
            throw"Invalid params.";
        handler.callback = handler.callback || function () {
                return false;
            };
        var onDefocus = function (handler) {
            return function () {
                Inventory.resetClickHandler(handler.context);
            }
        }(handler);
        if (-1 == $.inArray(handler.window, listenerWnd)) {
            handler.window.addEventListener(TWE('WINDOW_FOCUS'), function (handler) {
                return function () {
                    Inventory.setClickHandler(handler);
                }
            }(handler)).addEventListener(TWE('WINDOW_MINIMIZE'), onDefocus).addEventListener(TWE('WINDOW_DESTROY'), function (handler) {
                return function () {
                    listenerWnd.splice($.inArray(handler.window, listenerWnd), 1);
                    onDefocus();
                }
            }(handler));
            listenerWnd.push(handler.window);
        }
        this.click = handler;
    };
    Inventory.resetClickHandler = function (context) {
        if (this.click && this.click.context == context)
            this.click = undefined;
    }
    Inventory.showCategory = function (category, data) {
        if (category instanceof jQuery.Event) {
            category = $(category.target).data('category');
        }
        if (!Inventory.isEmpty(category)) {
            Inventory.addItems(category);
        }
    };
    Inventory.firstLoad = function (opts) {
        Inventory.window = wman.open(Inventory.uid, null, "noreload").setMiniTitle("Багаж");
        Inventory.addEventListeners();
        var $filters = $('<div class="filters"></div>');
        for (var i = 0, len = Inventory.availableCategories.length; i < len; ++i) {
            var cat = Inventory.availableCategories[i];
            $filters.append($('<div data-category="' + cat + '" class="filter_inventory filter_' + cat + '" title="' + s('Открыть закладку: %1', Inventory.categoryDesc[cat]) + '"></div>').off('click').click(Inventory.showCategory));
        }
        Inventory.guiElements.searchTextfield = new west.gui.Textfield('inventory_search').maxlength(12);
        Inventory.guiElements.searchSubmitButton = new west.gui.Iconbutton(new west.gui.Icon('search'), Inventory.search);
        Inventory.guiElements.searchClearButton = new west.gui.Icon('abort', 'Очистить поиск');
        Inventory.guiElements.upgradeButton = new west.gui.Button('Улучшить предмет', west.window.item_upgrade.open, west.window.item_upgrade, null).addClass('upgrade_items');
        if (Game.ui.itemUpgrade && Game.ui.itemUpgrade.min_char_level > Character.level) {
            Inventory.guiElements.upgradeButton.setTooltip(west.window.item_upgrade.model.getL10n('info').age(Game.ui.itemUpgrade.min_char_level)).disable();
        }
        Inventory.guiElements.searchShowButton = new west.gui.Iconbutton(new west.gui.Icon('search'), function () {
            Inventory.showCategory('set');
        }).addClass('open_search');
        Inventory.window.appendToContentPane($filters, $("<div id='bag'></div>"), $("<div class='bag_navigation hidden'></div>").append($("<div class='bag_pages'></div>"), $("<div class='bag_next bag_control'></div>"), $("<div class='bag_previous bag_control'></div>")), $("<div class='search_container'></div>").append(Inventory.guiElements.searchTextfield.getMainDiv().keypress(function (event) {
            if (event.keyCode == 13) {
                Inventory.search();
            }
        }), Inventory.guiElements.searchSubmitButton.getMainDiv(), Inventory.guiElements.searchClearButton.getMainDiv().on('click', Inventory.clearSearch.bind(Inventory, true))), $('<div class="actions"></div>').append(Inventory.guiElements.upgradeButton.getMainDiv(), Inventory.guiElements.searchShowButton.getMainDiv()));
        Inventory.DOM = Inventory.window.$('div.tw2gui_window_content_pane');
        Inventory.window.showLoader();
        EventHandler.listen('inventory_loaded', function () {
            Inventory.addItems((opts.category) ? opts.category : undefined);
            EventHandler.signal('inventory_ready');
            Inventory.updateFilters();
            return EventHandler.ONE_TIME_EVENT;
        }, {boundto: Inventory.window});
        $('#bag', Inventory.DOM).asDropzone('img.item_trader_img div.item_wear', false, Inventory.onDropHandler);
        $('#bag', Inventory.DOM).mousewheel(function (e, d) {
            Inventory.wheelHandle(e, d);
        });
    };
    Inventory.onDropHandler = function (e) {
        if (e.hasClass('item_trader_img'))
            Trader.buy(e);
        if (e.hasClass('item_wear'))
            Wear.uncarry();
    };
    (function () {
        var shiftFocus = null;
        $(document).keydown(function (e) {
            if (e.which == 16) {
                var tmp = $("input:focus");
                if (tmp.length == 0)tmp = $("textarea:focus");
                if (tmp.length != 0)shiftFocus = tmp;
            }
        }).click(function (e) {
            if (!e.shiftKey)return;
            var t = $(e.target);
            if (undefined !== t.data("itemId") && null !== shiftFocus && shiftFocus.length != 0) {
                shiftFocus.val(shiftFocus.val() + ("[item=" + t.data("itemId") + "]"));
                shiftFocus.focus();
            }
        });
    })();
    Inventory.clickHandler = function (item_id, e) {
        var item = Bag.getItemByItemId(item_id);
        if (e.shiftKey)return;
        if (this.click && this.click.callback.apply(this.click.context, [item]))
            return;
        if (item.obj.action) {
            $.globalEval(item.obj.action);
            return;
        }
        if (wman.getById(Wear.uid)) {
            Wear.carry(item);
            return;
        }
        return;
    };
    Inventory.wheelHandle = function (e, delta) {
        if (Inventory.categorie != "new" && !Inventory.handleRunning) {
            Inventory.handleRunning = true;
            if (delta > 0) {
                if (Inventory.page == 1) {
                    return false;
                }
                Inventory.addItems(Inventory.category, Inventory.page - 1);
            }
            else {
                var count = 0;
                var actualCount = Inventory.page * Inventory.size;
                if (Inventory.category == "set") {
                    count = Inventory.searchResult.length;
                    actualCount = Inventory.page * Inventory.sizeSearch;
                } else if ('upgradeable' === Inventory.category) {
                    count = Bag.getItemsUpgradeable().length;
                } else {
                    var categories = Inventory.getCategoryTypes(Inventory.category), i = categories.length;
                    while (i--) {
                        count += Bag.getItemsIdsByType(categories[i]).length;
                    }
                }
                if (count > actualCount) {
                    Inventory.addItems(Inventory.category, Inventory.page + 1);
                }
            }
        }
        window.setTimeout(function () {
            Inventory.handleRunning = false;
        }, 100);
        e.preventDefault();
        e.returnValue = false;
    };
    Inventory.search = function (search_string) {
        if (search_string && 'string' === typeof search_string) {
            $('#inventory_search', Inventory.DOM).val(search_string);
        }
        var searchVal = $('#inventory_search', Inventory.DOM).val();
        if (searchVal.length > 1) {
            var res = Bag.search(searchVal);
            Inventory.showSearchResult(res || []);
        }
    };
    Inventory.showSearchResult = function (res) {
        Inventory.searchResult = res;
        Inventory.addItems('set', 1);
        if (wman.getById(Inventory.uid))
            wman.reopen(Inventory.uid);
        if (wman.getById(Wear.uid))
            wman.reopen(Wear.uid);
    }, Inventory.addItemDivToInv = function (item) {
        item.appendTo($('#bag', Inventory.DOM)).getImgEl().off('click').click(function (e) {
            Inventory.clickHandler(item.getId(), e);
        }).data('itemId', item.getId()).setDraggable(Inventory.announceDragStart, Inventory.announceDragStop);
    }, Inventory.announceDragStart = function (draggable, helper) {
        EventHandler.signal('inventory_item_drag', ['start', draggable, helper]);
    };
    Inventory.announceDragStop = function (draggable, helper) {
        EventHandler.signal('inventory_item_drag', ['stop', draggable, helper]);
    };
    Inventory.isEmpty = function (category) {
        if ('new' == category || 'set' == category) {
            return false;
        } else if ('upgradeable' === category) {
            return !Bag.hasItemsUpgradeable();
        }
        var categories = Inventory.getCategoryTypes(category), i = categories.length;
        while (i--) {
            if (Bag.getItemsIdsByType(categories[i]).length) {
                return false;
            }
        }
        return true;
    }, Inventory.updateFilters = function () {
        var $root = Inventory.window.getContentPane();
        Inventory.availableCategories.forEach(function (category) {
            $('.filter_' + category, $root).toggleClass('no-items', Inventory.isEmpty(category));
        });
    };
    Inventory.addItemsByCategory = function (category, start, page) {
        var numPages = Inventory.calcPages(category), categories = Inventory.getCategoryTypes(category), i = 0, l = categories.length, items = [];
        for (i; i < l; i++) {
            items = items.concat(Bag.getItemsIdsByType(categories[i]));
        }
        items = items.slice(start, start + Inventory.size);
        i = 0;
        l = items.length;
        for (i; i < l; i++) {
            Inventory.addItemDivToInv(Bag.getItemByItemId(items[i]));
        }
        if (false != numPages && numPages > 0 && page >= numPages) {
            page = numPages - 1;
        }
        Inventory.setNavigation(category, page + 1, numPages);
    };
    Inventory.showLastItems = function () {
        $('#overlay_inv').show();
        var lastIds = Bag.getInventoryIds(), i = 0, l = lastIds.length, item;
        for (i; i < l; ++i) {
            item = Bag.getItemByInvId(lastIds[i]);
            if (item) {
                Inventory.addItemDivToInv(item);
            }
        }
        Inventory.setNavigation('new', 1, 0);
    };
    Inventory.showUpgradeable = function (start, page) {
        start = start || 0;
        var numPages = Inventory.calcPages('upgradeable'), items_ids = Bag.getItemsUpgradeable().slice(start, start + Inventory.size), i = 0, l = items_ids.length, item;
        for (i; i < l; ++i) {
            item = Bag.getItemByItemId(items_ids[i]);
            if (item) {
                Inventory.addItemDivToInv(item);
            }
        }
        if (false != numPages && numPages > 0 && page >= numPages) {
            page = numPages - 1;
        }
        Inventory.setNavigation('upgradeable', page + 1, numPages);
    };
    Inventory.clearSearch = function (focus) {
        $('#inventory_search').val('');
        if (focus) {
            $('#inventory_search').focus();
        }
        $('#bag', Inventory.DOM).empty();
        $('.bag_navigation', Inventory.DOM).addClass('hidden');
        Inventory.searchResult = [];
    }, Inventory.showSearch = function (start, page) {
        Inventory.window.showLoader();
        $(Inventory.DOM).addClass('search_enabled');
        $('#inventory_search').focus();
        var i = 0;
        for (var j = 0, len = Inventory.searchResult.length; j < len; ++j) {
            if (i >= start + Inventory.sizeSearch)break;
            if (i >= start)Inventory.addItemDivToInv(Inventory.searchResult[j]);
            i++;
        }
        if (i == 0) {
            $('<div style="margin:auto;"><span style="margin:auto; font-weight:bold;">' + "Такой предмет в багаже отсутствует" + '</span></div>').appendTo($('#bag', Inventory.DOM));
        }
        var numPages = Inventory.calcPages('set');
        if (false != numPages && numPages > 0 && page >= numPages)
            page = numPages - 1;
        Inventory.setNavigation('set', page + 1, numPages);
        Inventory.window.hideLoader();
    }, Inventory.addItems = function (category, page) {
        $('#bag', Inventory.DOM).empty();
        page = (page == undefined) ? 0 : page - 1;
        category = category || Inventory.defaultCategory;
        Inventory.setCategoryActive(category);
        $(Inventory.DOM).removeClass('search_enabled');
        if ('set' !== category) {
            Inventory.clearSearch();
        }
        switch (category) {
            case'new':
                Inventory.showLastItems();
                break;
            case'set':
                Inventory.showSearch(page * Inventory.sizeSearch, page);
                break;
            case'upgradeable':
                Inventory.showUpgradeable(page * Inventory.size, page);
                break;
            case'belt':
            case'body':
            case'foot':
            case'head':
            case'neck':
            case'pants':
            case'animal':
            case'right_arm':
            case'left_arm':
            case'yield':
                Inventory.addItemsByCategory(category, page * Inventory.size, page);
                break;
        }
        Inventory.window.hideLoader();
        Inventory.category = category;
        Inventory.page = page + 1;
    };
    Inventory.getCategoryTypes = function (category) {
        if ('yield' == category)
            return ['yield', 'recipe'];
        return [category];
    };
    Inventory.update = function () {
        if (!wman.getById(Inventory.uid))return;
        Inventory.addItems(Inventory.category, Inventory.page);
        Inventory.updateFilters();
    };
    Inventory.calcPages = function (category) {
        var count = 0, size = Inventory.size;
        if (category == "new") {
            return false;
        } else if (category == "set") {
            size = Inventory.sizeSearch;
            count += Inventory.searchResult.length;
        } else if ("upgradeable" === category) {
            count += Bag.getItemsUpgradeable().length;
        } else {
            var categories = Inventory.getCategoryTypes(category), i = categories.length;
            while (i--) {
                count += Bag.getItemsIdsByType(categories[i]).length;
            }
        }
        return 1 + (Math.floor((count - 1) / size));
    };
    Inventory.setNavigation = function (category, page, pages) {
        if (!pages || 1 === pages) {
            $('.bag_navigation', Inventory.DOM).addClass('hidden');
            return false;
        }
        $('.bag_navigation', Inventory.DOM).removeClass('hidden');
        var runLength, start;
        if (pages > 7) {
            start = (page > 4) ? (page - 3) : 1;
            runLength = start + 6;
            if (runLength > pages) {
                runLength = pages;
                start = pages - 6;
            }
        } else {
            runLength = pages;
            start = 1;
        }
        var html = '';
        for (var i = start; runLength >= i; i++) {
            if (i > pages)break;
            if (i == page)
                html += "<span class='current_page'>" + i + "</span>"; else
                html += "<a href='#' onclick='Inventory.addItems(\"" + category + "\", " + i + ");' class='page'>" + i + "</a>";
        }
        $('.bag_pages', Inventory.DOM).html(html);
        var navigate = function (step) {
            return function () {
                Inventory.addItems(category, page + step);
            };
        };
        page < (i - 1) ? $('.bag_next', Inventory.DOM).off().click(navigate(+1)) : $('.bag_next', Inventory.DOM).unbind();
        page > 1 ? $('.bag_previous', Inventory.DOM).off().click(navigate(-1)) : $('.bag_previous', Inventory.DOM).unbind();
    };
    Inventory.setCategoryActive = function (category) {
        var $root = Inventory.window.getContentPane();
        $('.active', $root).removeClass('active');
        $('.filter_' + category, $root).addClass('active');
    };
})(jQuery);
var WearSet = {
    bonus: new Array(),
    setItems: new Array(),
    workPointBonus: {},
    regenBonus: null,
    init: function (workPointBonus, regenBonus) {
        WearSet.setWorkPointBonus(workPointBonus);
        WearSet.regenBonus = regenBonus;
    },
    setWorkPointBonus: function (bonus) {
        WearSet.workPointBonus = bonus;
    },
    setUpItems: function (items) {
        if (Array.isArray(items) && items.length) {
            items = items.map(function (id) {
                return ItemManager.itemIdToBaseItemId(id);
            });
        } else {
            items = [];
        }
        WearSet.setItems = items;
    },
    hasItem: function (baseItemId) {
        return !!~WearSet.setItems.indexOf(baseItemId);
    },
    setUpBonus: function (sets) {
        WearSet.bonus = new Array();
        for (var setKey in sets) {
            if (typeof sets[setKey] !== 'object')continue;
            for (var i = 0; i < sets[setKey].length; i++) {
                WearSet.addBonus(setKey, sets[setKey][i]);
            }
        }
    },
    addBonus: function (setKey, bonusText) {
        if (WearSet.bonus[setKey] === undefined) {
            WearSet.bonus[setKey] = new Array();
        }
        WearSet.bonus[setKey].push(bonusText);
    },
    getBonus: function (setKey) {
        if (WearSet.bonus[setKey] === undefined) {
            return new Array();
        }
        return WearSet.bonus[setKey];
    },
    getWorkPointAddition: function (jobId) {
        var overall = (WearSet.workPointBonus['all'] === undefined ? 0 : WearSet.workPointBonus['all']);
        if (WearSet.workPointBonus[jobId] !== undefined) {
            overall += WearSet.workPointBonus[jobId];
        }
        return overall;
    },
    getRegenAddition: function () {
        return WearSet.regenBonus;
    }
};
;
(function ($) {
    window.PlayerlistWindow = {DOM: '*', x: 0, y: 0, sort: 0, page: 0};
    var pagebar = null;
    PlayerlistWindow.open = function (x, y) {
        PlayerlistWindow.x = x;
        PlayerlistWindow.y = y;
        PlayerlistWindow.window = wman.open("player-list").setMiniTitle('Игрок').appendToContentPane($('<div class="player-list-content" />'));
        PlayerlistWindow.DOM = $("div.player-list");
        PlayerlistWindow.window.setTitle('Игроки');
        PlayerlistWindow.init();
    };
    PlayerlistWindow.init = function () {
        var maindiv = $('<div></div>');
        PlayerlistWindow.sort = 0;
        PlayerlistWindow.page = 0;
        pagebar = null;
        PlayerlistWindow.Group = new west.gui.Groupframe("player-list-group", "<div class='player-list-data' ></div><div class='player-list-footer'></div>");
        PlayerlistWindow.Group.appendTo(maindiv);
        PlayerlistWindow.Content = new west.gui.Scrollpane();
        $('div.player-list-data', maindiv).append(PlayerlistWindow.Content.getMainDiv());
        $('div.player-list-footer', maindiv).append("<div class='sort_bt'> </div>");
        $('div.player-list-content', PlayerlistWindow.DOM).empty().append(maindiv);
        PlayerlistWindow.initData();
    };
    wman.registerReloadHandler(/^player-list/, PlayerlistWindow.init);
    PlayerlistWindow.initData = function () {
        Ajax.remoteCallMode('players', 'get_data', {
            x: PlayerlistWindow.x,
            y: PlayerlistWindow.y,
            sortby: PlayerlistWindow.sort,
            page: PlayerlistWindow.page
        }, function (json) {
            if (json.error)return new UserMessage(json.error, UserMessage.TYPE_ERROR).show();
            PlayerlistWindow.updateData(json);
        }, PlayerlistWindow);
    };
    PlayerlistWindow.updateData = function (data) {
        if (data.pages != 0) {
            PlayerlistWindow.page = data.page;
            updatePagebar(data.pages);
        }
        var sortButtons = ['Имя', 'Уровень', 'Ранг', 'Дуэльный разряд', 'Город'];
        $('div.player-list-footer div.sort_bt', PlayerlistWindow.DOM).empty();
        PlayerlistWindow.Content.getContentPane().empty();
        sortButtons.each(function (v, k) {
            if (data.sortby == k)var orderby = 1; else if (data.sortby - 5 == k)var orderby = 0;
            var tmpBut = new west.gui.Button('&nbsp;' + v + '&nbsp;', sortButtonClicked, null, {
                sortby: k,
                orderby: orderby || 0
            }, 'Сортировать список по' + '&nbsp;' + v).setMaxWidth(120).getMainDiv()
            if (k == data.sortby)
                $('div.textart_title', tmpBut).prepend('<img class="jobssort" src="https://westrus.innogamescdn.com/images/window/jobs/sortarrow_asc.png" alt="" />'); else if (k == data.sortby - 5)
                $('div.textart_title', tmpBut).prepend('<img class="jobssort" src="https://westrus.innogamescdn.com/images/window/jobs/sortarrow_desc.png" alt="" />'); else
                $('div.textart_title > img', tmpBut).remove();
            $('div.player-list-footer div.sort_bt', PlayerlistWindow.DOM).append(tmpBut);
        });
        for (var i = 0; i < data.players.length; i++) {
            var player = data.players[i];
            var contentdiv = $("<div class= 'player_row' id='player_row_" + player.player_id + "'></div>");
            var town = '<div class="town_name"> <a href="javascript:Map.center(' + player.town_x + ',' + player.town_y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + player.town_x + ',' + player.town_y + ');\' > ' + player.town_name + '</a></div>';
            var name = '<div class="player_name"><a href="javascript:Map.center(' + PlayerlistWindow.x + ',' + PlayerlistWindow.y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            name += '<a title="' + 'Показать профиль игрока' + '" href="javascript:void(PlayerProfileWindow.open(' + player.player_id + '));"> ' + player.name + '</a></div>';
            var info = "<div class='player_info'><div>" + '%1 уровень'.replace('%1', player.level) + "</br>" + 'Ранг %1'.replace('%1', player.rank) + "</div>" + "<div class='player_info_class'>" + '%1 дуэльный разряд'.replace('%1', player.duel_level) + "</br><img  src='https://westrus.innogamescdn.com/images/class_choose/class_" + player['class'] + ".png'></a>&nbsp;" + data.class_translation[player['class']] + "</div></div>";
            player.avatar = "<div class='avatar'>" + player.avatar + "</div>";
            contentdiv.append(player.avatar, name, (player.town_name !== null) ? town : "", info, '<div class="interact-mail" title="' + 'Отправить игроку письмо' + '" onclick="MessagesWindow.open(\'telegram\', {insert_to: \'' + player.name + '\'})"></div>');
            if (player.can_duell)
                contentdiv.append('<div class="interact-duel" title="' + 'Бросить вызов' + '" onclick="SaloonWindow.startDuel(' + player.player_id + ',' + player.alliance_id + ',false,false,PlayerlistWindow);"></div>');
            if (data.can_invite)
                contentdiv.append('<div class="interact-town" title="' + 'Пригласить игроков в город' + '" onclick="PlayerlistWindow.invitePlayer(' + player.player_id + ');"></div>');
            PlayerlistWindow.Content.appendContent(contentdiv);
        }
        PlayerlistWindow.Content.scrollToTop();
    };
    var sortButtonClicked = function (ev) {
        if (ev.data.orderby)PlayerlistWindow.sort = ev.data.sortby + 5; else PlayerlistWindow.sort = ev.data.sortby;
        PlayerlistWindow.page = 0;
        PlayerlistWindow.initData();
    };
    PlayerlistWindow.invitePlayer = function (player_id) {
        Ajax.remoteCall("profile", "invite_player", {player_id: player_id}, function (data) {
            if (data.error)return new UserMessage(data.msg).show();
            return new UserMessage(data.msg, UserMessage.TYPE_SUCCESS).show();
        }, PlayerlistWindow);
    };
    var jump2Page = function (page) {
        if (page - 1 == PlayerlistWindow.page)
            return false;
        PlayerlistWindow.page = page - 1;
        PlayerlistWindow.initData();
    };
    var updatePagebar = function (pages) {
        if (!pagebar) {
            pagebar = new west.gui.Pagebar(PlayerlistWindow.page + 1, pages, jump2Page);
        }
        else {
            pagebar.update(PlayerlistWindow.page + 1, pages);
        }
        $('div.player-list-footer', PlayerlistWindow.DOM).append(pagebar.getMainDiv());
    };
})(jQuery);
;
(function ($) {
    window.QuestEmployerWindow = {};
    QuestEmployerWindow.open = function () {
        QuestEmployerWindow.window = wman.open("window-quest_employer").addEventListener("WINDOW_DESTROY", function () {
            QuestLog.setActiveQuest(null);
        }).setTitle("Квест");
        QuestEmployerView.init(QuestEmployerWindow.window);
        QuestEmployerWindow.window.showLoader();
    };
    wman.registerReloadHandler(/^window-quest_employer/, function (uid) {
        QuestEmployerWindow.showEmployer(QuestLog.employer.key, QuestLog.employer.x, QuestLog.employer.y);
    });
    QuestEmployerWindow.updateQuestList = function () {
        if (LinearQuestHandler.hasTutorialQuest()) {
            return false;
        }
        Ajax.remoteCall('quest_employer', '', {
            employer: QuestLog.employer.key,
            x: QuestLog.employer.x,
            y: QuestLog.employer.y
        }, function (json) {
            QuestLog.employer = json.employer;
            QuestEmployerView.buildQuestLog(json.employer);
        });
    };
    QuestEmployerWindow.showEmployer = function (employer_key, x, y, id) {
        if (employer_key === undefined) {
            new UserMessage("Неизвестный квестодатель", UserMessage.TYPE_ERROR).show();
        } else {
            Ajax.remoteCall('quest_employer', '', {employer: employer_key, x: x, y: y}, function (json) {
                if (json.error) {
                    new UserMessage(json.error, UserMessage.TYPE_ERROR).show();
                } else {
                    if (!wman.getById("window-quest_employer"))QuestEmployerWindow.open(); else wman.reopen("window-quest_employer");
                    QuestEmployerWindow.window.setTitle(json.employer.name).setMiniTitle("Квест");
                    QuestLog.setActiveEmployer(json.employer, x, y);
                    if (id && QuestLog.getEmployerQuest(id))
                        QuestEmployerWindow.showOpenQuest(id);
                }
                QuestEmployerWindow.window.hideLoader();
            });
        }
    };
    QuestEmployerWindow.updateQuest = function () {
        var quest_id = QuestLog.active_quest;
        Ajax.remoteCall('quest', 'update_quest_requirements', {quest_id: quest_id}, function (json) {
            QuestLog.updateEmployerQuest(quest_id, json);
        });
    };
    QuestEmployerWindow.showOpenQuest = function (quest_id) {
        var quest = QuestLog.getEmployerQuest(quest_id);
        if (!quest) {
            new UserMessage("Это задание не существует", UserMessage.TYPE_ERROR).show();
        } else {
            QuestEmployerView.showQuest(quest);
        }
    };
    QuestEmployerWindow.startWalk = function (employer) {
        Ajax.remoteCall('quest_employer', 'walk', {
            x: employer.x,
            y: employer.y,
            employer: employer.key
        }, function (json) {
            TaskQueue.init(json.task_queue);
            if (json.error) {
                var callback = function () {
                    QuestEmployerWindow.startWalk(employer);
                };
                if (!(Premium.checkForPremium(json.error[1], callback))) {
                    new UserMessage(json.error[0] || json.error, UserMessage.TYPE_ERROR).show();
                }
            }
        }, QuestEmployerWindow);
    };
})(jQuery);
;
(function ($) {
    window.QuestWindow = {};
    QuestWindow.registeredListeners = [];
    QuestWindow.activeQuest = null;
    QuestWindow.rewardOption = 0;
    QuestWindow.open = function () {
        if (LinearQuestHandler.hasTutorialQuest()) {
            new UserMessage("Сначала заверши руководство.", 'hint').show();
            return;
        }
        QuestWindow.window = wman.open("questbook").setTitle("Квесты").setMiniTitle("Квесты").addTab("Квесты", 'window-quest_log', function () {
            QuestWindow.showQuestLog();
        }).addTab("Пройденные", 'window-quest_solved', function () {
            QuestWindow.showSolvedQuests();
        });
        QuestWindowView.init(QuestWindow.window);
        QuestWindow.showQuestLog();
        QuestWindow.loadQuests();
    };
    wman.registerReloadHandler(/^questbook/, function (uid) {
        QuestWindow.open();
    });
    QuestWindow.loadQuests = function () {
        QuestLog.updateQuestLog();
    };
    QuestWindow.showQuestLog = function () {
        QuestWindow.window.switchTab('window-quest_log');
    };
    QuestWindow.showSolvedQuests = function () {
        QuestWindow.window.switchTab('window-quest_solved');
        QuestWindowView.renderQuestSolved();
        Ajax.remoteCallMode('building_quest', 'get_solved_quests', {}, function (json) {
            for (var x = 0; x < json.solved.length; x++) {
                QuestLog.addSolvedQuest(json.solved[x]);
            }
        });
    };
    QuestWindow.cancelQuest = function (quest_id) {
        Ajax.remoteCall('quest', 'cancel_quest', {quest_id: quest_id}, function (json) {
            if (json.error) {
                new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            } else {
                QuestLog.removeQuest(quest_id, true);
            }
        }, QuestWindow);
    };
    QuestWindow.switchToQuest = function (quest_id) {
        QuestWindow.showQuest(quest_id);
        QuestWindow.window.switchTab('window-quest_log');
    };
    QuestWindow.showQuest = function (quest_id) {
        var quest = (this.activeQuest) ? QuestLog.getQuest(this.activeQuest) : undefined;
        if (quest && false === quest.watched) {
            questCallback.deactivate(quest);
        }
        quest = QuestLog.getQuest(quest_id);
        if (!quest) {
            new UserMessage("Это задание не существует", UserMessage.TYPE_ERROR).show();
        } else {
            this.activeQuest = quest_id;
            if (!quest.watched) {
                questCallback.activate(quest);
            }
            QuestWindowView.showQuest(quest);
        }
    };
    QuestWindow.showSolvedQuest = function (quest_id) {
        var quest = QuestLog.getSolvedQuest(quest_id);
        if (!quest) {
            new UserMessage("Это задание не существует", UserMessage.TYPE_ERROR).show();
        } else {
            QuestWindowView.showSolvedQuest(quest);
        }
    };
    QuestWindow.acceptQuest = function (quest_id) {
        Ajax.remoteCall("quest", "accept_quest", {quest_id: quest_id}, function (json) {
            if (json.error) {
                new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            } else {
                var quest = QuestLog.getEmployerQuest(quest_id);
                quest.accepted = true;
                EventHandler.signal('questemployer_changed', ['accepted', quest_id]);
                quest.isChallenge = json.isChallenge;
                quest.finishable = json.finishable;
                quest.updateQuest();
                QuestTrackerWindow.toggleTracking(quest, true);
                QuestLog.addQuest(quest);
            }
        }, QuestWindow);
    };
    QuestWindow.finishQuest = function (quest_id) {
        Ajax.remoteCall("quest", "finish_quest", {
            quest_id: quest_id,
            reward_option_id: QuestWindow.rewardOption
        }, function (json) {
            if (json.health !== undefined)EventHandler.signal("health", [json.health]);
            if (json.error) {
                if (json.data) {
                    if (json.data.eval) {
                        if (json.msg) {
                            new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
                        }
                        try {
                            $.globalEval(json.data.eval);
                        } catch (e) {
                        }
                    } else {
                        ReportWindow.open(json.data.report_id, json.data.hash);
                    }
                } else {
                    new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
                }
            }
            if (!json.error) {
                Character.updateDailyTask('quests');
                EventHandler.signal('questemployer_changed', ['finished', quest_id]);
                var quest = QuestLog.getQuest(quest_id);
                quest.setGainedRewards(json.allRewards);
                quest.showRewardBox();
                quest.questCompletionHint = json.questCompletionHint;
                quest.questCompletionText = json.questCompletionText;
                quest.updateQuest();
                QuestLog.removeQuest(quest_id, false);
                QuestLog.addSolvedQuest(quest);
                if (quest.redrawMap) {
                    Map.refresh();
                }
                if (json.reportData) {
                    ReportWindow.open(json.reportData.report_id, json.reportData.hash);
                }
                try {
                    $.globalEval(json.eval);
                }
                catch (e) {
                    if (window.DEBUG)console.log("Evaluation failed: ", e);
                }
            }
        }, QuestWindow);
        QuestLog.setActiveQuest(null);
    };
})(jQuery);
"use strict";
var Notebook = (function () {
    var obj = {};
    obj.init = function (parent) {
        this.parent = parent;
        this.raw = '';
        obj.get();
        var txtArea = new west.gui.Textarea(undefined);
        this.elEdit = $('<div class="notebook"/>').append((new west.gui.Bbcodes($('textarea', txtArea.getMainDiv())[0]).getMainDiv()), $('<div class="notebook-actions" />').append((new west.gui.Icon('save notebook-save', 'Сохранить заметку').getMainDiv()), (new west.gui.Icon('abort notebook-cancel', 'Отмена').getMainDiv())), txtArea.getMainDiv());
        $('.notebook-save', this.elEdit).on('click', obj.save);
        $('.notebook-cancel', this.elEdit).on('click', obj.cancel);
        this.elText = $('<div class="notebook">').append($('<div class="notebook-actions" />').append((new west.gui.Icon('hammer notebook-edit', 'Править заметку').getMainDiv())), $("<div class='notebook-wrapper' />").append(new west.gui.Scrollpane().appendContent("<div class='content' />").getMainDiv()));
        $('.notebook-edit', this.elText).on('click', obj.edit);
        $('#ui_notebook').append(this.elText);
    };
    obj.get = function () {
        Ajax.get('character', 'get_notebook', {}, function (resp) {
            obj.raw = (resp.raw) ? resp.raw : '';
            obj.parsed = (resp.parsed) ? resp.parsed : '';
            $('.content', obj.elText).html(Game.TextHandler.parse(obj.parsed));
        });
    };
    obj.edit = function (ev) {
        obj.elText.detach();
        $('textarea', obj.elEdit).val(obj.raw);
        $('#ui_notebook').append(obj.elEdit);
    };
    obj.save = function (ev) {
        var newRaw = $('textarea', obj.elEdit).val();
        if (newRaw != obj.raw) {
            obj.raw = newRaw;
            Ajax.remoteCall('character', 'save_notebook', {notebook: obj.raw}, function (resp) {
                obj.parsed = (resp.parsed) ? resp.parsed : '';
                $('.content', obj.elText).html(Game.TextHandler.parse(obj.parsed));
                obj.elEdit.detach();
                $('#ui_notebook').append(obj.elText);
            });
        } else {
            obj.elEdit.detach();
            $('#ui_notebook').append(obj.elText);
        }
    };
    obj.cancel = function (ev) {
        obj.elEdit.detach();
        $('#ui_notebook').append(obj.elText);
    };
    return obj;
})();

var QuestTrackerWindow = (function () {
    var obj = {'trackedQuests': {}, 'hasQuests': false, 'maxHeight': 0, 'position': {}};
    var enabledTracker, enabledBook;
    var minimized = false;
    obj.defaults = function (render) {
        obj.position = {left: Map.width - 425, top: 142};
        obj.maxHeight = parseInt(Map.height * Map.height * 0.0004);
        if (render) {
            obj.dom.css(obj.position);
            obj.dom.css('height', obj.maxHeight);
        }
    };
    obj.setup = function () {
        obj.defaults();
        enabledTracker = Config.get('questtracker.enabled');
        Config.addChangeListener('questtracker.enabled', function () {
            var tmpEnabled = Config.get('questtracker.enabled');
            if (!tmpEnabled)obj.deactivate();
            enabledTracker = tmpEnabled;
            obj.init();
        });
        enabledBook = Config.get('notebook.enabled');
        if (0 === enabledBook) {
            EventHandler.listen(['quest_added', 'quest_tracking_changed'], function (quest) {
                if (quest.watched) {
                    Config.set('notebook.enabled', true);
                    return EventHandler.ONE_TIME_EVENT;
                }
            }, obj);
        }
        Config.addChangeListener('notebook.enabled', function () {
            enabledBook = Config.get('notebook.enabled');
            obj.init();
        });
        var qtc = Config.get('questtracker.config');
        obj.maxHeight = qtc.maxHeight || obj.maxHeight;
        obj.position = qtc.position || obj.position;
        obj.init();
    };
    obj.deactivate = function () {
        for (var questId in obj.trackedQuests) {
            obj.toggleTracking(obj.trackedQuests[questId], false);
        }
    };
    obj.minimize = function () {
        minimized = (minimized) ? false : true;
        $(this.window.divMain).toggle();
        $('.ui_menucontainer.questtracker').toggle();
        if (enabledTracker && 1 <= $('.quest_tracker_container', this.dom).children().length) {
            obj.showTracker();
            this.resetHeight(true, '.quest_tracker_container');
        } else if (enabledBook) {
            obj.showNotebook();
            this.resetHeight(true, '.notebook');
        }
    };
    obj.init = function () {
        if (this.window)this.window.destroy();
        this.scrolling = new west.gui.Scrollpane(null).appendContent("<div class='quest_tracker_container' />");
        this.window = wman.open('questtracker', null, 'chat questtracker noclose nocloseall dontminimize').setMiniTitle('Принятые задания').addEventListener(TWE('WINDOW_RELOAD'), obj.reload, this).addEventListener(TWE('WINDOW_MINIMIZE'), obj.minimize, this).setResizeable(true).appendToContentPane($("<div id='ui_questtracker'/>").append(this.scrolling.getMainDiv()), "<div id='ui_notebook'></div>");
        this.dom = $(this.window.getMainDiv());
        this.dom.css(obj.position);
        if (enabledTracker) {
            this.window.showLoader();
            this.window.addTab('<div class="questbook" title="' + "Квесты" + '"></div>' + 'Принятые задания', 'questtracker', obj.showTracker);
        }
        this.qinit();
        EventHandler.listen('questlog_loaded', function () {
            this.window.hideLoader();
            this.hideTracker(true);
            return EventHandler.ONE_TIME_EVENT;
        }, this);
        QuestLog.updateQuestLog();
        if (enabledBook) {
            this.window.addTab('<div class="questbook" title="' + "Заметки" + '"></div>' + 'Заметки', 'notebook', obj.showNotebook);
            Notebook.init(this);
        }
        this.window.dontCloseAll = true;
        var settings = new west.gui.Selectbox();
        settings.setWidth(225).addItem(1, "Сохранить настройки", "Сохраняет текущие размеры и положение окна.").addItem(2, "Сбросить настройки", "Возвращает первоначальные размеры и позицию окна.").addListener(obj.changeSettings);
        $(".tw2gui_window_buttons", this.dom).prepend($("<div class='tw2gui_window_buttons_settings' title='" + "Настройки".escapeHTML() + "' />").click(function (e) {
            settings.show(e);
        }));
        var opts = {boundto: this.window};
        EventHandler.listen('window_resized', function () {
            obj.show();
        }, obj, opts);
        $.each([".tw2gui_window_shadow_box div, " + ".tw2gui_window_inset div, " + ".tw2gui_window_inset_bottom, " + ".tw2gui_window_inset_right, " + ".tw2gui_window_border, " + ".tw2gui_inner_splitwindow_container, " + ".tw2gui_inner_window_title div, " + ".tw2gui_window_tabbar_fadeleft, " + ".tw2gui_window_tabbar_faderight"], function (i, k) {
            $(k, obj.dom).remove();
        });
    };
    obj.changeSettings = function (id) {
        switch (id) {
            case 1:
                obj.maxHeight = obj.dom.height();
                obj.position = obj.dom.position();
                Config.set('questtracker.config', {'maxHeight': obj.maxHeight, 'position': obj.position});
                break;
            default:
            case 2:
                Config.reset('questtracker.config');
                obj.defaults(true);
                break;
        }
    };
    obj.show = function () {
        if (enabledTracker || enabledBook)
            this.dom.show();
        if (enabledTracker)obj.showTracker(); else if (enabledBook)obj.showNotebook();
    };
    obj.hide = function () {
        this.dom.hide();
    };
    obj.hideTracker = function (hideTab) {
        $('#ui_questtracker', this.dom).hide();
        if (hideTab && enabledBook) {
            this.window.hideTab('questtracker');
            this.showNotebook();
            this.resetHeight(true, '.notebook');
        } else if (!enabledBook)this.dom.hide();
    };
    obj.showTracker = function () {
        if (!enabledTracker)return;
        if (!obj.hasQuests)return;
        obj.hideNotebook();
        obj.window.showTab('questtracker');
        obj.window.activateTab('questtracker');
        $('#ui_questtracker', obj.dom).show();
        obj.resetHeight(true, '.quest_tracker_container');
    };
    obj.hideNotebook = function () {
        $('#ui_notebook', this.dom).hide();
    };
    obj.showNotebook = function () {
        obj.hideTracker();
        obj.window.activateTab('notebook');
        $('#ui_notebook', obj.dom).show();
        obj.resetHeight(true, '.notebook');
    };
    obj.resetHeight = function (recalc, src, dontScroll) {
        if (!enabledTracker)return;
        var height = $(src, this.dom).height() + 60;
        var maxHeight = obj.maxHeight;
        if (recalc) {
            this.dom.css('height', maxHeight);
        }
        if (height < maxHeight) {
            this.dom.css('height', $(src, this.dom).height() + 60);
        } else {
            this.dom.css('height', maxHeight);
        }
        if (!dontScroll || height <= maxHeight)
            this.scrolling.scrollToTop();
    };
    obj.qinit = function () {
        var opts = {boundto: this.window};
        EventHandler.listen('quest_added', obj.add, obj, opts);
        EventHandler.listen(['quest_update', 'quest_tracking_changed'], obj.update, obj, opts);
        EventHandler.listen(['quest_removed', 'quest_solved', 'quest_tracking_changed'], obj.remove, obj, opts);
        $('#ui_questtracker', this.dom).on("click", function (event) {
            var el = $(event.target);
            var questId, quest;
            if (el.hasClass('title')) {
                questId = el.parent().attr('id').match(/questtracker_quest_(\d+)/)[1];
                quest = obj.trackedQuests[questId];
                var x, y = undefined;
                if (quest.employer_coords && quest.employer_coords[0]) {
                    x = quest.employer_coords[0][0];
                    y = quest.employer_coords[0][1];
                }
                QuestEmployerWindow.showEmployer(quest.employer, x, y, quest.id);
            } else if (el.hasClass('collapse')) {
                obj.toggleCollapse(el, obj.trackedQuests[el.parent().attr('id').match(/questtracker_quest_(\d+)/)[1]], !el.hasClass('open'));
            } else if (el.hasClass('remove')) {
                questId = el.parent().parent().attr('id').match(/questtracker_quest_(\d+)/)[1];
                quest = obj.trackedQuests[questId];
                obj.toggleTracking(quest, false);
                $('.tw2gui_checkbox.questtracker-' + quest.id).toggleClass('tw2gui_checkbox_checked');
            }
        });
    };
    obj.getCollapseStatus = function (quest) {
        return Config.get('questtracker.quests')[quest.id];
    };
    obj.toggleCollapse = function (el, quest, open, nosave) {
        if (open) {
            $('.requirement_container', el.parent()).show();
            el.addClass('open');
        } else {
            $('.requirement_container', el.parent()).hide();
            el.removeClass('open');
        }
        obj.resetHeight(false, '.quest_tracker_container', true);
        if (!nosave) {
            var watchedQuest = clone(Config.get('questtracker.quests'));
            watchedQuest[quest.id] = open;
            Config.set('questtracker.quests', watchedQuest);
        }
    };
    obj.reload = function () {
        this.window.showLoader();
        QuestLog.updateQuestLog().done(function () {
            this.window.hideLoader();
        }.bind(this));
    };
    obj.add = function (quest) {
        var el = $('#questtracker_quest_' + quest.id, this.dom);
        questCallback.deactivate(quest);
        questCallback.activate(quest);
        if (quest.watched && !quest.solved && quest.accepted && !el.length) {
            obj.hasQuests = true;
            (minimized) ? obj.minimize() : obj.show();
            $('.quest_tracker_container').append(quest.getQuestTrackerEl());
            obj.trackedQuests[quest.id] = quest;
            obj.toggleCollapse($('#questtracker_quest_' + quest.id + ' .collapse', this.dom), quest, obj.getCollapseStatus(quest), true);
        }
    };
    obj.update = function (quest) {
        if (quest.watched) {
            obj.hasQuests = true;
            obj.showTracker();
            var el = $('#questtracker_quest_' + quest.id);
            if (el.length > 0) {
                $('#questtracker_quest_' + quest.id).replaceWith(quest.getQuestTrackerEl());
                obj.toggleCollapse($('#questtracker_quest_' + quest.id + ' .collapse', this.dom), quest, obj.getCollapseStatus(quest), true);
            } else {
                obj.add(quest);
            }
        }
    };
    obj.remove = function (quest) {
        if (quest.watched)return;
        if (undefined === quest.id) {
            quest = obj.trackedQuests[quest];
        }
        $('#questtracker_quest_' + quest.id).remove();
        questCallback.deactivate(quest);
        obj.trackedQuests[quest.id] = undefined;
        delete obj.trackedQuests[quest.id];
        obj.resetHeight(false, '.quest_tracker_container');
        if (1 > $('.quest_tracker_container').children().length) {
            obj.hasQuests = false;
            this.hideTracker(true);
        }
    };
    obj.toggleTracking = function (quest, status) {
        var watchedQuest = clone(Config.get('questtracker.quests'));
        quest.watched = status;
        for (var questId in watchedQuest)
            if (!obj.trackedQuests[questId])
                delete watchedQuest[questId];
        if (quest.watched) {
            watchedQuest[quest.id] = true;
        } else {
            delete watchedQuest[quest.id];
        }
        Config.set('questtracker.quests', watchedQuest);
        EventHandler.signal('quest_tracking_changed', [quest]);
    };
    obj.getCheckBox = function (quest) {
        if (!enabledTracker)return false;
        return new west.gui.Checkbox(null, 'toggleQuesttracker questtracker-' + quest.id).setSelected(quest.watched).setCallback(function (selected) {
            QuestTrackerWindow.toggleTracking(quest, selected);
        }).getMainDiv();
    };
    return obj;
})();
;
(function ($) {
    window.BankWindow = {
        DOM: '*',
        tab: 'balance',
        Balance: {},
        Transactions: {},
        Transfer: {fee: 0},
        TownTransactions: {}
    };
    wman.registerReloadHandler(/^bank-\d+/, function (uid) {
        BankWindow.open(uid.match(/\d+/)[0]);
    });
    BankWindow.townid = 1;
    BankWindow.open = function (townID) {
        BankWindow.tab = 'balance';
        BankWindow.townid = townID;
        var tabclick = function (win, id) {
            BankWindow.showTab(id);
        };
        BankWindow.window = wman.open('bank-' + BankWindow.townid, null, 'bank').setMiniTitle('Банк').addTab('Финансы', 'balance', tabclick).addTab('Операции', 'transactions', tabclick).addTab('Перевод', 'transfer', tabclick).addTab('Казна', 'town_transactions', tabclick).appendToContentPane($('<div class="bank-balance"/>'), $('<div class="bank-transactions"/>'), $('<div class="bank-transfer"/>'), $('<div class="bank-town_transactions"/>'));
        BankWindow.DOM = $('div.bank-' + BankWindow.townid);
        BankWindow.Balance.init();
        BankWindow.Transactions.init();
        BankWindow.Transfer.init();
        BankWindow.TownTransactions.init();
        BankWindow.showTab(BankWindow.tab);
        EventHandler.listen("char_deposit_changed", function (data) {
            $('.deposit .deposit_val', BankWindow.DOM).text("$ " + format_money(data));
        }, null, {boundto: BankWindow.window});
        EventHandler.listen("char_money_changed", function (data) {
            $('.money .money_val', BankWindow.DOM).text("$ " + format_money(data));
        }, null, {boundto: BankWindow.window});
    };
    BankWindow.showTab = function (id) {
        BankWindow.tab = id;
        if (!BankWindow.window)return;
        BankWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *', BankWindow.DOM).each(function (i, e) {
            if ($(e).hasClass('bank-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'balance':
                BankWindow.Balance.initData();
                BankWindow.window.setTitle('Финансы');
                break;
            case'transactions':
                BankWindow.Transactions.initData();
                BankWindow.window.setTitle('Операции');
                break;
            case'transfer':
                BankWindow.Transfer.initData();
                BankWindow.window.setTitle('Перевод');
                break;
            case'town_transactions':
                BankWindow.TownTransactions.initData();
                BankWindow.window.setTitle('Казна');
                break;
        }
    };
    BankWindow.Balance.init = function () {
        var maindiv = $('<div></div>');
        BankWindow.Balance.info = new west.gui.Groupframe("bank-balance-info", "<div class='bank-info'></div><div class='wood-footer'></div><div class='balance-info-content'></div>");
        BankWindow.Balance.balance = new west.gui.Groupframe("bank-balance-balance", "<div class='money'><div>" + "Наличные" + "</div>" + "<div class='money_val'></div></div><div class='deposit'><div class='tbbg'>" + "Счёт в банке" + "</div><div class='deposit_val'></div></div>" + "<div class='wood-devider'></div><div class='all'><div>" + "Всего" + "</div><div class='all_val'></div></div>");
        BankWindow.Balance.balance.appendTo(BankWindow.Balance.info.$('div.balance-info-content'));
        new west.gui.Button("Внести", BankWindow.Balance.add).setMinWidth(150).appendTo(BankWindow.Balance.info.$('div.wood-footer'));
        $("<div class='deposit'></div>").appendTo(BankWindow.Balance.info.$('div.wood-footer'));
        BankWindow.Balance.info.$('div.wood-footer').append(new west.gui.Textfield("tb_balance_input_" + BankWindow.townid).setSize(10).addListener(this.add, this).getMainDiv(), $('<span id="bank_payin_premium" ></span>').click(butPremiumDepositClicked));
        $('<img class="bank_pic" src="https://westrus.innogamescdn.com/images/buildings/bank1.png" /><div class="town_data"><div class="bank-level"></div><div class="town-name"></div><div class="bank-fee"></div></div>' + '<div class="town_data_value"><div class="bank-level"></div><div class="town-name"></div><div class="bank-fee"></div></div>').appendTo(BankWindow.Balance.info.$('div.bank-info'));
        BankWindow.Balance.info.appendTo(maindiv);
        $('div.bank-balance', BankWindow.window.getMainDiv()).empty().append(maindiv);
        $('div.town_data div.bank-level', BankWindow.DOM).text("Уровень:");
        $('div.town_data div.town-name', BankWindow.DOM).text("Город:");
        $('div.town_data div.bank-fee', BankWindow.DOM).text("Комиссия:");
        $('#tb_balance_input_' + BankWindow.townid, BankWindow.DOM).keyup(function () {
            BankWindow.Balance.showTax();
        });
    };
    BankWindow.Balance.showTax = function () {
        var payinInput = $('#tb_balance_input_' + BankWindow.townid, BankWindow.DOM);
        var payinAmount = payinInput.val();
        if (isNaN(payinAmount))payinInput.val(payinAmount = payinAmount.replace(/\D/g, ''));
        if (payinAmount > Character.money)payinInput.val(payinAmount = Character.money);
        var tax = Math.max(1, Math.ceil(payinAmount * (BankWindow.Balance.depositFee / 100) / (1 + (BankWindow.Balance.depositFee / 100))));
        $('div.town_data_value div.bank-fee', BankWindow.DOM).text(BankWindow.Balance.depositFee + '% (' + tax + '$)');
    };
    BankWindow.Balance.add = function () {
        var amount = $('#tb_balance_input_' + BankWindow.townid, BankWindow.DOM).val();
        Ajax.remoteCall("building_bank", "deposit", {town_id: BankWindow.townid, amount: amount}, function (data) {
            if (data.error == false) {
                BankWindow.Balance.Mupdate(data);
                Character.setDeposit(data.deposit);
                Character.setMoney(data.own_money);
                new UserMessage(s(sextext('Ты внёс %1$ и уплатил за это %2$ комиссии', 'Ты внесла %1$ и уплатила за это %2$ комиссии', Character.charSex), amount, data.fee), UserMessage.TYPE_SUCCESS).show();
            }
            else new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
        }, BankWindow);
    };
    BankWindow.Balance.initData = function () {
        Ajax.remoteCallMode("building_bank", "get_data", {town_id: BankWindow.townid}, function (data) {
            if (data.error == false) {
                BankWindow.Balance.update(data);
                if (!data.transfer)
                    $('._tab_id_transfer', BankWindow.DOM).remove();
                if (!data.own_town)
                    $('._tab_id_town_transactions', BankWindow.DOM).remove();
                BankWindow.Transfer.fee = data.transfer_fee;
            }
            else new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
        }, BankWindow);
    };
    BankWindow.Balance.update = function (data) {
        var bankpic = (data.stage > 3) ? (data.stage > 6) ? 3 : 2 : 1;
        $('img.bank_pic', BankWindow.DOM).attr("src", "https://westrus.innogamescdn.com/images/buildings/bank" + bankpic + ".png");
        $('div.tw2gui_inner_window_bg2', BankWindow.DOM).css("background", "url('https://westrus.innogamescdn.com/images/window/bank/bank" + bankpic + "_bg2.jpg') 10px 66px no-repeat scroll transparent");
        $('div.town_data_value div.bank-level', BankWindow.DOM).text(data.stage);
        $('div.town_data_value div.town-name', BankWindow.DOM).text(data.town_name);
        $('div.town_data_value div.bank-fee', BankWindow.DOM).text(data.deposit_fee + "%");
        BankWindow.Balance.depositFee = data.deposit_fee;
        BankWindow.Balance.Mupdate(data);
    };
    BankWindow.Balance.Mupdate = function (data) {
        $('div.all div.all_val', BankWindow.DOM).text("$ " + format_money(data.deposit + data.own_money));
        $('div.deposit .deposit_val', BankWindow.DOM).text("$ " + format_money(data.deposit));
        $('div.money div.money_val', BankWindow.DOM).text("$ " + format_money(data.own_money));
        $('#tb_balance_input_' + BankWindow.townid, BankWindow.DOM).val("");
        $('div.wood-footer div.deposit', BankWindow.DOM).text("(" + format_money(data.own_money) + ")").off('click').click(function () {
            $('#tb_balance_input_' + BankWindow.townid, BankWindow.DOM).val(data.own_money);
            BankWindow.Balance.showTax();
        });
        $('div.town_data_value div.bank-fee', BankWindow.DOM).text(BankWindow.Balance.depositFee + "%");
    };
    BankWindow.Transactions.init = function (data) {
        var maindiv = $('<div></div>');
        BankWindow.Transactions.Table = new west.gui.Table().setId('transactiontable').createEmptyMessage('Нет трансакций').appendTo(maindiv).addColumn("tra_cha").addColumn("tra_res").addColumn("tra_ico").addColumn("tra_mon").addColumn("tra_val");
        BankWindow.Transactions.Table.appendTo(maindiv);
        $('div.bank-transactions', BankWindow.window.getMainDiv()).empty().append(maindiv);
    };
    BankWindow.Transactions.initData = function () {
        Ajax.remoteCallMode("building_bank", "get_own_log", {town_id: BankWindow.townid}, function (data) {
            if (data.error == false) {
                BankWindow.Transactions.update(data);
            }
            else new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
        }, BankWindow);
    };
    BankWindow.Transactions.update = function (data) {
        BankWindow.Transactions.Table.clearBody();
        data = data.own_log;
        var tmpCells = {};
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var color = "tw_red";
            var pos = "arrow_red.png";
            if (rd.money_change > 0) {
                color = "tw_green";
                pos = "arrow_green.png";
                rd.money_change = "+ " + rd.money_change;
            } else {
                rd.money_change = "- " + (rd.money_change * -1);
            }
            tmpCells['tra_cha'] = (rd.reason == 'bank_deposit' ? "" : "<img src='https://westrus.innogamescdn.com/images/window/bank/" + pos + "'/>");
            tmpCells['tra_res'] = rd.log_date_fmt + "</br>" + reason(rd);
            tmpCells['tra_ico'] = "<img src='https://westrus.innogamescdn.com/images/bank/deposit_small.png'/></br><img src='https://westrus.innogamescdn.com/images/bank/cash_small.png'/>";
            tmpCells['tra_mon'] = format_money(rd.money_deposit) + " $</br>" + format_money(rd.money_carring) + " $";
            tmpCells['tra_val'] = (rd.reason == 'bank_deposit' ? "<span class='tw_green'>+ " + (rd.money_change).substring(2) + " $</span>" : "") + "</br><span class='" + color + "'>" + rd.money_change + " $</span>";
            BankWindow.Transactions.Table.buildRow('tra_row_' + i, tmpCells);
        }
    };
    var reason = function (t) {
        var c = t.money_change;
        switch (t.reason) {
            case"bank_citydeposit":
                'Уплата в городскую казну';
            case"bank_deposit":
                return 'Вклад в банк';
            case"job":
                return 'Зарплата';
            case"admintool":
                return 'Действие администратора';
            case"found":
                return 'Основание города';
            case"found_cancel":
                return 'Отмена основания города';
            case"death":
                return 'Обморок';
            case"hotel":
                return 'Счёт из отеля';
            case"quest":
                return c < 0 ? 'Уплата квестодателю' : 'Получено от квестодателя';
            case"duel":
                return 'Навар с дуэли';
            case"duel_lost":
                return 'Ущерб с дуэли';
            case"npcduel":
                return 'Победа над бандитом';
            case"npcduel_lost":
                return 'Поражение в схватке с бандитом';
            case"poker payout":
                return "Забрать наличность";
            case"poker payin":
                return "Внести наличность";
            case"shaman":
                return 'Шаман';
            case"fd_payin":
                return 'Выплата в казну форта';
            case"mobile_trader":
            case"trader":
                return c < 0 ? 'Покупка' : 'Продажа';
            case"hotel_cancel":
                return 'Возврат денег из отеля';
            case"auction_outbid":
                return 'Возвращение ставки';
            case"auction_sold":
                return 'Продажа с торгов';
            case"build_started":
                return 'Постройка';
            case"build_cancel":
                return 'Отмена постройки';
            case"fd_payin":
                return 'Выплата в казну форта';
            case"market":
                return 'Рыночные сборы';
            case"market bid":
                return 'Ставка на торгах';
            case"wanted":
                return 'Награда за голову';
            case"fb loot":
                return 'Боевые трофеи';
            case"money_transfer":
                return 'Перевод денег';
            case"transfer_revert":
                return 'Перевод отменён';
            case"random event":
                return 'В случайном порядке';
            case"battle reward":
                return 'Приз за фортовое сражение';
            case"upgraded_item":
                return 'Улучшение предмета';
            default:
                return t.reason;
        }
    };
    BankWindow.Transfer.init = function () {
        var maindiv = $('<div></div>');
        BankWindow.Transfer.info = new west.gui.Groupframe("bank-transfer-info");
        BankWindow.Transfer.info.appendTo(maindiv);
        BankWindow.Transfer.foot = new west.gui.Groupframe("bank-transfer-foot");
        BankWindow.Transfer.foot.appendTo(maindiv);
        new west.gui.Button("Перевести", BankWindow.Transfer.transfer).setMinWidth(150).appendTo(BankWindow.Transfer.foot.$('div.tw2gui_groupframe_content_pane'));
        BankWindow.Transfer.data = new west.gui.Groupframe("bank-transfer-data");
        BankWindow.Transfer.data.appendTo(maindiv);
        var input = $('<div class="input_data"><div class="lable"></div><div class="field"></div></div>');
        $('div.lable', input).append("<div class='name'>" + "Игрок:" + "</div>", "<div class='amount'>" + "Сумма:*" + "</div>", "<div class='reason'>" + "Цель перевода:" + "</div>");
        $('div.field', input).append(new west.gui.Textfield("playername").setSize(41).getMainDiv(), new west.gui.Textfield("amount").setSize(41).getMainDiv(), new west.gui.Textfield("reason").setSize(41).getMainDiv());
        input.appendTo(BankWindow.Transfer.data.$('div.tw2gui_groupframe_content_pane'));
        $('<div class="more_info">' + 'В первую очередь переводятся деньги, которые у тебя на банковском счету, а если их не хватит, тогда наличные.' + '</br>' +
            '* Комиссия за перевод будет вычтена из указанной суммы.' + '</div><div class="divider"></div><div class="west_agb"></div></div>').appendTo(BankWindow.Transfer.data.$('div.tw2gui_groupframe_content_pane'));
        BankWindow.Transfer.agb = new west.gui.Checkbox();
        $('div.west_agb', maindiv).append(BankWindow.Transfer.agb.getMainDiv(), "<span>" + "Обязуюсь соблюдать правила игры." + "</span>");
        $('div.bank-transfer', BankWindow.window.getMainDiv()).empty().append(maindiv);
    };
    BankWindow.Transfer.initData = function () {
        $('div.bank-transfer-info div.tw2gui_groupframe_content_pane', BankWindow.DOM).empty().append(s("Комиссия за перевод: %1%", BankWindow.Transfer.fee));
    };
    BankWindow.Transfer.transfer = function () {
        var player = $('#playername', BankWindow.DOM).val();
        var amount = $('#amount', BankWindow.DOM).val();
        var reason = $('#reason', BankWindow.DOM).val();
        var agb = BankWindow.Transfer.agb.isSelected();
        Ajax.remoteCall("building_bank", "transfer", {
            town_id: BankWindow.townid,
            player: player,
            dollar: amount,
            purpose: reason,
            agree: agb
        }, function (data) {
            if (data.error == false) {
                new UserMessage(data.success, UserMessage.TYPE_SUCCESS).show();
                BankWindow.Transfer.agb.toggle();
                Character.setDeposit(data.deposit);
                Character.setMoney(data.own_money);
            }
            else new UserMessage(data.error, UserMessage.TYPE_ERROR).show();
        }, BankWindow);
    };
    BankWindow.TownTransactions.init = function () {
        var maindiv = $('<div></div>');
        BankWindow.TownTransactions.info = new west.gui.Groupframe("bank-ttransaction-info", "<div class='bank-town-info'><div>" + 'Казна' + "</div><div class='town_money'></div></div><div class='wood-footer'></div><div class='ttransaction-info-content'></div>");
        new west.gui.Button("Внести", BankWindow.TownTransactions.add).setMinWidth(150).appendTo(BankWindow.TownTransactions.info.$('div.wood-footer'));
        new west.gui.Textfield("tb_town_input_" + BankWindow.townid).setSize(10).addListener(this.add, this).appendTo(BankWindow.TownTransactions.info.$('div.wood-footer'));
        BankWindow.TownTransactions.info.appendTo(maindiv);
        BankWindow.TownTransactions.Table = new west.gui.Table().setId('town_transactiontable').createEmptyMessage('Нет трансакций').appendTo(BankWindow.TownTransactions.info.$('div.ttransaction-info-content')).addColumn("tra_cha").addColumn("tra_mon").addColumn("tra_who");
        $('div.bank-town_transactions', BankWindow.window.getMainDiv()).empty().append(maindiv);
    };
    BankWindow.TownTransactions.add = function () {
        var amount = $('#tb_town_input_' + BankWindow.townid, BankWindow.DOM).val();
        Ajax.remoteCall("building_bank", "city_deposit", {town_id: BankWindow.townid, amount: amount}, function (data) {
            if (data.error == false) {
                BankWindow.TownTransactions.update(data);
                Character.setDeposit(data.deposit);
                Character.setMoney(data.own_money);
                new UserMessage(s(sextext('Ты внёс в городскую казну %1$', 'Ты внесла в городскую казну %1$', Character.charSex), amount), UserMessage.TYPE_SUCCESS).show();
            }
            else new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
        }, BankWindow);
    };
    BankWindow.TownTransactions.initData = function () {
        Ajax.remoteCallMode("building_bank", "get_town_log", {town_id: BankWindow.townid}, function (data) {
            if (data.error == false) {
                BankWindow.TownTransactions.update(data);
            }
            else new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
        }, BankWindow);
    };
    BankWindow.TownTransactions.update = function (data) {
        BankWindow.TownTransactions.Table.clearBody();
        $('div.town_money', BankWindow.DOM).text("$" + format_money(data.city_deposit));
        data = data.city_deposit_log;
        var tmpCells = {};
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var pos = "arrow_red.png";
            if (rd.type == 'withdraw')pos = "arrow_red.png"; else if (rd.amount > 0)pos = "arrow_green.png"; else rd.amount *= -1;
            tmpCells['tra_cha'] = "<img src='https://westrus.innogamescdn.com/images/window/bank/" + pos + "'/>";
            tmpCells['tra_mon'] = '<div>' + rd.log_date + '</div><div>' + '$' + format_money(rd.amount) + '</div>';
            tmpCells['tra_who'] = '<div>' + town_reason(rd) + '</div><div><a href="javascript:void(PlayerProfileWindow.open(\'' + rd.name + '\'))">' + rd.name + '</a></div>';
            BankWindow.TownTransactions.Table.buildRow('tra_row_' + rd.entry_id, tmpCells);
        }
    };
    var town_reason = function (data) {
        switch (data.type) {
            case"payin":
                return 'Взнос';
            case"withdraw":
                return 'Съём';
            case"item_sell":
                return 'Продажа предмета';
            case"fort_war_declare":
                return 'Осада форта';
            case"bank_tax":
                return 'Комиссия банка';
            case"construct":
                return 'Здание';
            case"construct_cancel":
                return 'Отмена строительства';
            case"fort_found":
                return 'Возведение форта';
            case"fort_foundcancel":
                return 'Отмена возведения форта';
            default:
                return '';
        }
    };
    var butPremiumDepositClicked = function () {
        if (Premium.buyable['bankpayin']) {
            Premium.confirmUse("bankpayin", "Банковский взнос", "Этот премиум позволяет без комиссии класть наличные на счёт, независимо от того, где ты находишься.", 10, null, function (json) {
                if (json.error)new UserMessage(json.msg).show();
                BankWindow.Balance.Mupdate({own_money: Character.money, deposit: Character.deposit});
            });
        }
    };
})(jQuery);
;
(function ($) {
    window.ChurchWindow = {};
    wman.registerReloadHandler(/^church-\d+/, function (town_id) {
        ChurchWindow.open(town_id.match(/\d+/)[0]);
    });
    ChurchWindow.townid = null;
    ChurchWindow.open = function (townID) {
        ChurchWindow.townid = townID;
        ChurchWindow.window = wman.open('church-' + ChurchWindow.townid, null, "church").setMiniTitle('Церковь').appendToContentPane($('<div class="church-content" id="church-content-' + ChurchWindow.townid + '"/>'));
        ChurchWindow.window.setTitle('Церковь');
        ChurchWindow.init();
    };
    ChurchWindow.init = function () {
        Ajax.remoteCallMode("building_church", "get_data", {town_id: ChurchWindow.townid}, function (data) {
            if (data.error == false) {
                ChurchWindow.ini_cont(data.stage, data.bonus);
            }
            else new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
        }, ChurchWindow);
    };
    ChurchWindow.ini_cont = function (stage, bonus) {
        var body = $('<div class="church"></div>');
        var table = $("<table>" + "<tr><td style='width:40px'><img src='https://westrus.innogamescdn.com/images/buildings/church1.png' alt='' /></td><td>" +
            'В церкви ты можешь тихонько помолиться.' + "</br></br></br>" + s("Бонус: +%1 к молитве", bonus) + " <strong> " + s("%1 уровень", stage) + " </strong></td></tr>" + "<tr><div class='table_back'><td style='position:absolute; left:20px; margin-top:10px'>" +
            'Богослужение:' + " " + '15 минут' + "</td><td><div class='buttonchurch' style='padding-left:95px' ></div></td></div></tr>" + "</table>");
        var churchcontentbox = new west.gui.Groupframe("churchcontentbox", "<div class='churchcontent'></div>").appendTo(body);
        table.appendTo(churchcontentbox.$('div.churchcontent'));
        new west.gui.Button("Молитва", function () {
            ChurchWindow.start(ChurchWindow.townid)
        }).addClass('table_back').appendTo(churchcontentbox.$('div.buttonchurch'));
        $('#church-content-' + ChurchWindow.townid).empty().append(body);
    };
    ChurchWindow.start = function (town_id) {
        TaskQueue.add(new TaskPray(town_id));
    };
})(jQuery);
;
(function ($) {
    wman.registerReloadHandler(/^cityhall-\d+/, function (town_id) {
        CityhallWindow.open(town_id.match(/\d+/)[0]);
    });
    CityhallWindow = function (town_id, tab) {
        var that = this;
        var tabclick = function (win, id) {
            that.showTab(id);
        }
        this.townId = town_id;
        this.townName = '';
        this.ownTown = false;
        this.allianceData = {};
        this.ownTown = (Character.homeTown.town_id == town_id);
        this.window = wman.open("cityhall-" + town_id, null, 'cityhall').setMiniTitle('Мэрия'.escapeHTML()).addTab('Строительство'.escapeHTML(), 'build', tabclick).addTab('Горожане'.escapeHTML(), 'residents', tabclick);
        if (this.ownTown) {
            this.window.addTab('Журнал'.escapeHTML(), 'log', tabclick);
            if (Character.townRights > 1) {
                this.window.addTab('Приглашения'.escapeHTML(), 'invitations', tabclick).addTab('Управление'.escapeHTML(), 'administration', tabclick).addTab('Альянс'.escapeHTML(), 'alliance', tabclick).addTab('Приглашения в альянс'.escapeHTML(), 'alliance-invitations', tabclick).addTab('Хроники альянса'.escapeHTML(), 'alliance-log', tabclick);
            }
        }
        this.window.appendToContentPane($('<div class="cityhall-build"/>'), $('<div class="cityhall-residents"/>'), $('<div class="cityhall-log"/>'), $('<div class="cityhall-invitations"/>'), $('<div class="cityhall-administration"/>'), $('<div class="cityhall-alliance"/>'), $('<div class="cityhall-alliance-invitations"/>'), $('<div class="cityhall-alliance-log"/>'));
        this.Build = new CityhallWindow.Build(this);
        this.Residents = new CityhallWindow.Residents(this);
        if (this.ownTown) {
            this.Log = new CityhallWindow.Log(this);
            if (Character.townRights > 1) {
                this.Invitations = new CityhallWindow.Invitations(this);
                this.Administration = new CityhallWindow.Administration(this);
                this.Alliance = new CityhallWindow.Alliance(this);
                this.Alliance.Invitations = new CityhallWindow.Alliance.Invitations(this);
                this.Alliance.Log = new CityhallWindow.Alliance.Log(this);
            }
        }
        CityhallWindow.DOM = $('div.cityhall-' + this.townId);
        this.showTab((tab == undefined) ? 'build' : tab);
    }
    var instances = {};
    var getOwn = function () {
        return instances[Character.homeTown.town_id];
    }
    var showBuildWindow = function (key) {
        BuildWindow.open(Character.homeTown.town_id, Character.homeTown.x, Character.homeTown.y, key, false);
    };
    CityhallWindow.open = function (town_id, tab) {
        instances[town_id] = new CityhallWindow(town_id, tab);
        return instances[town_id];
    }
    CityhallWindow.prototype = CityhallWindow;
    CityhallWindow.showTab = function (id) {
        if (!this.window)return;
        this.window.activateTab(id).$('div.tw2gui_window_content_pane > *').each(function (i, e) {
            if ($(e).hasClass('cityhall-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'residents':
                this.Residents.init();
                break;
            case'log':
                if (this.ownTown)this.Log.init();
                break;
            case'invitations':
                if (this.ownTown && Character.townRights > 1)this.Invitations.init();
                break;
            case'administration':
                if (this.ownTown && Character.townRights > 1)this.Administration.init();
                break;
            case'alliance':
                if (this.ownTown && Character.townRights > 1)this.Alliance.init();
                break;
            case'alliance-invitations':
                if (this.ownTown && Character.townRights > 1)this.Alliance.Invitations.init();
                if ($('div.tw2gui_window_tabbar_tabs', CityhallWindow.DOM).position().left > -180) {
                    this.window.tabScroll(1);
                    window.setTimeout(this.window.tabScroll, 300, 1);
                }
                break;
            case'alliance-log':
                if (this.ownTown && Character.townRights > 1)this.Alliance.Log.init();
                break;
            case'build':
            default:
                this.Build.init();
                break;
        }
    }
    CityhallWindow.Build = function (main) {
        this.main = main;
        this.window = main.window;
    }
    CityhallWindow.Build.prototype = CityhallWindow.Build;
    CityhallWindow.Build.init = function () {
        var that = this;
        if (!that.window.$('div.cityhall-build', CityhallWindow.DOM).children().length)
            that.initStructure();
        Ajax.remoteCall('building_cityhall', '', {town_id: that.main.townId}, function (json) {
            that.window.setTitle(json.townName);
            that.main.townName = json.townName;
            that.fillContent(json.buildings);
        }, this.main);
    }
    CityhallWindow.Build.initStructure = function () {
        this.table = new west.gui.Table();
        if (this.main.ownTown) {
            this.table.addColumn('building').addColumn('stage').addColumn('progress').appendToCell('head', 'building', 'Здание'.escapeHTML()).appendToCell('head', 'stage', 'Уровень'.escapeHTML()).appendToCell('head', 'progress', 'Прогресс'.escapeHTML());
        } else {
            this.table.addColumn('building_foreign').addColumn('stage').appendToCell('head', 'building_foreign', 'Здание'.escapeHTML()).appendToCell('head', 'stage', 'Уровень'.escapeHTML());
        }
        this.table.appendTo(this.window.$('.cityhall-build'));
    }
    CityhallWindow.Build.fillContent = function (data) {
        this.table.clearBody();
        for (var i = 0; i < data.length; i++) {
            var r = data[i];
            var buildtext;
            if (!this.main.ownTown)buildtext = r.name; else if (r.stage == r.maxStage && !r.infinite)buildtext = '<span title="' + s("Здание «%1» полностью достроено".escapeHTML(), r.name) + '">' + r.name + '</span>'; else buildtext = '<span title="' + s("Улучшение %1".escapeHTML(), r.name) + '"><a href="#" onClick="javascript:void(BuildWindow.open(' + Character.homeTown.town_id + ', ' + Character.homeTown.x + ', ' + Character.homeTown.y + ', \'' + r.key + '\', false));">' + r.name + '</a></span>';
            this.table.appendRow();
            if (this.main.ownTown) {
                this.table.appendToCell(-1, "building", buildtext).appendToCell(-1, "stage", r.stage + " / " + (r.infinite ? "<img src='https://westrus.innogamescdn.com/images/xp_inf_000.png' style='padding-bottom: 4px;'/>" : r.maxStage)).appendToCell(-1, "progress", new west.gui.Progressbar(r.buildPoints, r.nextStagePoints).getMainDiv());
            } else {
                this.table.appendToCell(-1, "building_foreign", buildtext).appendToCell(-1, "stage", r.stage + " / " + (r.infinite ? "<img src='https://westrus.innogamescdn.com/images/xp_inf_000.png' style='padding-bottom: 4px;'/>" : r.maxStage))
            }
        }
    };
    CityhallWindow.Residents = function (main) {
        this.window = main.window;
        this.main = main;
        this.limit = '';
    }
    CityhallWindow.Residents.prototype = CityhallWindow.Residents;
    CityhallWindow.Residents.init = function () {
        var that = this;
        if (!that.window.$('div.cityhall-residents', CityhallWindow.DOM).children().length)
            that.initStructure();
        Ajax.remoteCallMode('building_cityhall', 'list_residents', {town_id: that.main.townId}, function (json) {
            CityhallWindow.Residents.data = json.list.data;
            CityhallWindow.Residents.canDemand = json.canDemand;
            CityhallWindow.Residents.limit = json.limit;
            CityhallWindow.Residents.ownTown = that.main.ownTown;
            that.fillContent();
        }, this.main);
    }
    CityhallWindow.Residents.initStructure = function () {
        CityhallWindow.Residents.table = new west.gui.Table();
        if (this.main.ownTown) {
            CityhallWindow.Residents.table.addColumn('rank').addColumn('info').addColumn('name').addColumn('options').addColumn('level').addColumn('build').addColumn('payin').appendToCell('head', 'rank', 'Ранг'.escapeHTML()).appendToCell('head', 'info').appendToCell('head', 'name', "<a href='#'>" + 'Имя персонажа'.escapeHTML() + "</a>").appendToCell('head', 'options').appendToCell('head', 'level', "<a href='#'>" + 'Уровень'.escapeHTML() + "</a>").appendToCell('head', 'build', "<a href='#'>" + 'Постройка'.escapeHTML() + "</a>").appendToCell('head', 'payin', "<a href='#'>" + 'Казна'.escapeHTML() + "</a>").appendToCell('foot', 'build', $('<span title="' + "Приглашения".escapeHTML() + '" onClick="west.window.Blackboard.open(\'invite\');" style="cursor:pointer;"><img src="https://westrus.innogamescdn.com/images/window/cityhall/invites.png" alt="" /></span>')).appendToCell('foot', 'payin', $('<span title="' + "Покинуть город".escapeHTML() + '" onClick="CityhallWindow.Residents.resign();" style="cursor:pointer;"><img src="https://westrus.innogamescdn.com/images/window/cityhall/retreat.png" alt="" /></span>'));
        } else {
            CityhallWindow.Residents.table.addColumn('rank').addColumn('info').addColumn('name_foreign').addColumn('level').appendToCell('head', 'rank', 'Ранг'.escapeHTML()).appendToCell('head', 'info').appendToCell('head', 'name_foreign', 'Имя персонажа'.escapeHTML()).appendToCell('head', 'level', 'Уровень'.escapeHTML());
        }
        this.table.appendTo(this.window.$('div.cityhall-residents', CityhallWindow.DOM));
        $("div.name", CityhallWindow.DOM).click(function () {
            return CityhallWindow.Residents.sortBy('name');
        });
        $("div.level", CityhallWindow.DOM).click(function () {
            return CityhallWindow.Residents.sortBy('level');
        });
        $(".row_head > div.build", CityhallWindow.DOM).click(function () {
            return CityhallWindow.Residents.sortBy('build');
        });
        $(".row_head > div.payin", CityhallWindow.DOM).click(function () {
            return CityhallWindow.Residents.sortBy('payin');
        });
    }
    CityhallWindow.Residents.sortBy = function (key) {
        switch (key) {
            case"name":
                CityhallWindow.Residents.data.sort(function (a, b) {
                    return a.name.toString().toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") > b.name.toString().toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") ? 1 : -1;
                });
                break;
            case"level":
                CityhallWindow.Residents.data.sort(function (a, b) {
                    if (b.level == a.level)return 0;
                    return b.level > a.level ? 1 : -1;
                });
                break;
            case"payin":
                CityhallWindow.Residents.data.sort(function (a, b) {
                    if (b.city_deposit == a.city_deposit)return 0;
                    return b.city_deposit > a.city_deposit ? 1 : -1;
                });
                break;
            case"build":
                CityhallWindow.Residents.data.sort(function (a, b) {
                    if (b.buildTime == a.buildTime)return 0;
                    if (!a.buildTime)return 1;
                    if (!b.buildTime)return -1;
                    return parseInt(b.buildTime) > parseInt(a.buildTime) ? 1 : -1;
                });
                break;
        }
        CityhallWindow.Residents.fillContent();
    }
    CityhallWindow.Residents.fillContent = function () {
        var that = this;
        var citizenRights = ['norights', 'norights', 'councillor', 'founder'];
        var citizenRightTexts = {
            'norights': 'граждане'.escapeHTML(),
            'councillor': 'горсовет'.escapeHTML(),
            'founder': 'основатели'.escapeHTML(),
            1: 'граждане'.escapeHTML(),
            2: 'горсовет'.escapeHTML(),
            3: 'основатели'.escapeHTML()
        }
        this.table.getCell('foot', 'name').empty();
        if (CityhallWindow.Residents.ownTown && CityhallWindow.Residents.canDemand && Character.townRights < 3) {
            this.table.appendToCell('foot', 'name', $('<span title="' + "Стать основателем".escapeHTML() + '" onClick="CityhallWindow.Residents.demandFounder();" style="cursor:pointer;"><img src="https://westrus.innogamescdn.com/images/window/cityhall/assume.png" alt="" /></span>'));
        }
        var popup = function (pid, rank, name, rowcount) {
            var ret = $("<div/>");
            if (rowcount > 2)ret = $("<div style='background-position:0px -79px; top: -52px; padding-top: 3px;'>");
            for (var i = 3; i > 0; i--) {
                if (i == rank || i > Character.townRights)continue;
                ret.append($("<a href='#' onClick='CityhallWindow.Residents.changeRank(" + pid + ", " + i + ")'><img src='https://westrus.innogamescdn.com/images/transparent.png' class='city_" + citizenRights[i] + "' style='width: 18px; cursor: pointer;'/>&nbsp;&nbsp;" + s(((i > rank) ? 'Назначить в %1'.escapeHTML() : 'Понизить в %1'.escapeHTML()), citizenRightTexts[i]) + "</a>"));
            }
            ret.append($("<a href='#' onClick='CityhallWindow.Residents.fire(" + pid + ", \"" + name + "\")'><img src='https://westrus.innogamescdn.com/images/icons/delete.png' style='padding-bottom: 5px;'/>&nbsp;&nbsp;" + 'Выгнать'.escapeHTML() + "</a>"));
            return ret;
        }
        CityhallWindow.Residents.table.clearBody();
        for (var i = 0; i < CityhallWindow.Residents.data.length; i++) {
            var r = CityhallWindow.Residents.data[i];
            var infotext = $('<div><img src="https://westrus.innogamescdn.com/images/class_choose/symbol_' + r.charclass + '_small.png" title="' + Game.InfoHandler.getLocalString4Charclass(r.charclass) + '"/>'
                + '<img src="https://westrus.innogamescdn.com/images/crafting/profsymbol_' + ((r.profession_id) ? r.profession_id : 0) + '_small.png" title="' + Game.InfoHandler.getLocalString4ProfessionId(r.profession_id) + '"/>'
                + '<img src="https://westrus.innogamescdn.com/images/transparent.png" style="width: 18px; height: 15px;" class="city_' + citizenRights[r.town_rights] + '" title="' + citizenRightTexts[r.town_rights] + '"/></div>');
            var optiontext = $('<div id="options_' + r.player_id + '"/>');
            if (CityhallWindow.Residents.ownTown) {
                var statusText = '';
                switch (r.player_status) {
                    case'green':
                        statusText = 'Активен'.escapeHTML();
                        break;
                    case'yellow':
                        statusText = 'Бездельничает два дня'.escapeHTML();
                        break;
                    case'red':
                        statusText = 'Бездельничает неделю'.escapeHTML();
                        break;
                    case'blue':
                        statusText = 'Отпуск'.escapeHTML();
                        break;
                }
                infotext.append($('<img src="https://westrus.innogamescdn.com/images/window/cityhall/' + r.player_status + '.png" title="' + statusText + '"/>'));
                if ((Character.townRights > 1 && Character.townRights >= r.town_rights))optiontext.append($("<span class='icons option'><span class='changeoptions'/></span>").append(popup(r.player_id, r.town_rights, r.name, i)));
            }
            this.table.appendRow().appendToCell(-1, 'rank', i + 1).appendToCell(-1, 'info', infotext).appendToCell(-1, 'name' + (!CityhallWindow.Residents.ownTown ? '_foreign' : ''), '<a href="#" onClick="PlayerProfileWindow.open(' + r.player_id + ')">' + r.name + '</a><span>&nbsp;' + (r.title != null ? r.title : '') + '</span>').appendToCell(-1, 'options', optiontext).appendToCell(-1, 'level', r.level);
            if (CityhallWindow.Residents.ownTown) {
                this.table.appendToCell(-1, 'build', (r.buildTime ? r.buildTime : '-')).appendToCell(-1, 'payin', (r.city_deposit ? "$ " + format_money(r.city_deposit) : '-'));
            }
        }
        $(".name" + (!CityhallWindow.Residents.ownTown ? '_foreign' : '') + " span", this.table.getMainDiv()).each(function (i, el) {
            $(el).cut();
        });
    }
    CityhallWindow.Residents.resign = function () {
        var that = getOwn().Residents;
        var premiumTxt = (Premium.buyable['jointown'] ? s("За %1 самородков ты можешь немедленно вселиться в город.".escapeHTML(), Premium.getPrice('jointown')) : '');
        new west.gui.Dialog("Покинуть город".escapeHTML(), "<div style='text-align:center'>"
            + s("Ты сможешь поселиться в другом городе только через %1 после того как покинешь этот. Точно уйти?".escapeHTML(), CityhallWindow.Residents.limit)
            + "<br/><br/>" + premiumTxt + "</div>").addButton('Покинуть'.escapeHTML(), function () {
                Ajax.remoteCall('building_cityhall', 'resign_town', {}, function (resp) {
                    if (resp.error) {
                        new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                        return;
                    }
                    wman.getById('cityhall-' + that.main.townId).destroy();
                    Character.setHomeTown(null);
                }, that);
            }).addButton('cancel').show();
    }
    CityhallWindow.Residents.changeRank = function (pid, rank) {
        var changeRankRequest = function () {
            var that = getOwn().Residents;
            Ajax.remoteCall('building_cityhall', 'change_rank', {player_id: pid, rank: rank}, function (resp) {
                if (resp.error) {
                    return new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                }
                if (pid === Character.playerId) {
                    Character.townRights = rank;
                    that.init();
                }
                else {
                    CityhallWindow.Residents.data = resp.list.data;
                    that.fillContent();
                }
            }, that);
        };
        if (Character.playerId == pid) {
            new west.gui.Dialog('Сменить ранг'.escapeHTML(), "<div class='txcenter'>" + 'Точно сменить ранг?'.escapeHTML() + "</div>").addButton('Смена ранга'.escapeHTML(), changeRankRequest).addButton('cancel').show();
        } else {
            changeRankRequest();
        }
    }
    CityhallWindow.Residents.fire = function (pid, name) {
        var that = getOwn().Residents;
        new west.gui.Dialog(s("Выгнать игрока %1", name).escapeHTML(), "<div style='text-align:center'>" + s("Ты действительно хочешь выгнать игрока %1 из своего города?", name).escapeHTML() + "</div>").addButton('Выгнать'.escapeHTML(), function () {
            Ajax.remoteCall('building_cityhall', 'fire', {citizen_id: pid}, function (resp) {
                if (resp.error) {
                    new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                    return;
                }
                that.fillContent(resp);
            }, that);
        }).addButton('cancel').show();
    }
    CityhallWindow.Residents.demandFounder = function () {
        var that = getOwn().Residents;
        Ajax.remoteCall('building_cityhall', 'demand_founder', {}, function (resp) {
            if (resp.error) {
                return new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
            }
            Character.townRights = 3;
            that.init();
        }, that);
    }
    CityhallWindow.Log = function (main) {
        this.window = main.window;
        this.main = main;
        this.currentPage = 1;
    }
    CityhallWindow.Log.prototype = CityhallWindow.Log;
    CityhallWindow.Log.init = function () {
        if (!this.window.$('.cityhall-log').children().length)this.initStructure();
        this.fetchLog();
    }
    CityhallWindow.Log.initStructure = function () {
        var mdiv = this.window.$('.cityhall-log');
        mdiv.append($("<div style='text-align: center'><h2>" + 'Журнал'.escapeHTML() + "</h2>" + 'Здесь ведётся журнал городских событий.'.escapeHTML() + "</div>"));
        this.pages = $("<div id='pages' style='float:right; margin-right:25px;'/>");
        this.table = new west.gui.Table().appendTo(mdiv).addColumn('date').addColumn('entry').appendToCell('head', 'date', 'Дата'.escapeHTML()).appendToCell('head', 'entry', 'Событие'.escapeHTML()).appendToCell('foot', 'entry', this.pages);
        mdiv.append($("<div class='no-log-entries'><img src='https://westrus.innogamescdn.com/images/icons/warn_circle.png' /><span class='empty-list'>" + 'Нет записей'.escapeHTML() + "</span></div>"));
    }
    CityhallWindow.Log.fetchLog = function (page) {
        var that = getOwn().Log;
        if (page === undefined)page = that.currentPage;
        Ajax.remoteCallMode('building_cityhall', 'list_log', {town_id: that.main.townId, page: page}, function (json) {
            that.currentPage = json.page;
            that.fillContent(json);
        }, this.main);
    }
    CityhallWindow.Log.fillContent = function (json) {
        this.table.clearBody();
        var data = json.logs;
        if (this.window.$('.no-log-entries', CityhallWindow.DOM).css('display') != 'none')
            this.window.$('.no-log-entries', CityhallWindow.DOM).hide();
        if (data.length == undefined) {
            this.window.$('.no-log-entries', CityhallWindow.DOM).slideDown();
        } else {
            for (var i = 0; i < data.length; i++) {
                var r = data[i];
                this.table.appendRow().appendToCell(-1, 'date', r.log_date).appendToCell(-1, 'entry', "<span>" + (r.data) + "</span>");
            }
        }
        this.pages.empty().append(new west.gui.Pagebar(json.page, json.count, CityhallWindow.Log.fetchLog).getMainDiv());
    }
    CityhallWindow.Log.switchPage = function (btn) {
        this.fetchLog(btn.data);
    }
    CityhallWindow.Invitations = function (main) {
        this.window = main.window;
        this.main = main;
    }
    CityhallWindow.Invitations.prototype = CityhallWindow.Invitations;
    CityhallWindow.Invitations.init = function () {
        var that = this;
        if (!that.window.$('div.cityhall-invitations', CityhallWindow.DOM).children().length)
            that.initStructure();
        Ajax.remoteCallMode('building_cityhall', 'list_invitations', {town_id: that.main.townId}, function (json) {
            that.fillContent(json);
        }, this.main);
    }
    CityhallWindow.Invitations.initStructure = function () {
        var mdiv = this.window.$('div.cityhall-invitations', CityhallWindow.DOM);
        var invform = $("<div class='invite-form'/>");
        this.invTypeCombo = new west.gui.Combobox('invitation_type').addItem('player', "Имя".escapeHTML()).addItem('email', "E-mail".escapeHTML());
        this.invText = new west.gui.Textfield('invitation_text').setSize(20).addListener(this.invite, this);
        invform.append(this.invTypeCombo.getMainDiv()).append('&nbsp;').append(this.invText.getMainDiv()).append('&nbsp;').append(new west.gui.Button("Пригласить".escapeHTML(), this.invite, this).getMainDiv()).append(new west.gui.Button("Открыть доску", west.window.Blackboard.open, west.window.Blackboard).getMainDiv());
        invform.prepend("<div class='invite-header'>" + 'Пригласить нового игрока'.escapeHTML() + "</div>")
        invform.appendTo(mdiv);
        this.table = new west.gui.Table().appendTo(mdiv).addColumn('name').addColumn('level').addColumn('sentBy').addColumn('sentAt').addColumn('cancel').appendToCell('head', 'name', 'Имя персонажа'.escapeHTML()).appendToCell('head', 'level', 'Уровень'.escapeHTML()).appendToCell('head', 'sentBy', 'Приглашён игроком'.escapeHTML()).appendToCell('head', 'sentAt', 'Дата приглашения'.escapeHTML()).appendToCell('head', 'cancel');
        mdiv.append($('<div class="invitation-description"/>'));
    }
    CityhallWindow.Invitations.fillContent = function (json) {
        this.table.clearBody();
        this.window.$('div.invitation-description', CityhallWindow.DOM).html(json.invitation_info.text);
        for (var i = 0; i < json.invitations.length; i++) {
            var r = json.invitations[i];
            var isName = (r.name !== undefined);
            var nametext = '';
            if (isName) {
                nametext = '<img src="https://westrus.innogamescdn.com/images/class_choose/symbol_' + r.charclass + '_small.png" title="' + Game.InfoHandler.getLocalString4Charclass(r.charclass) + '"/>'
                    + '<img src="https://westrus.innogamescdn.com/images/crafting/profsymbol_' + ((r.profession_id) ? r.profession_id : 0) + '_small.png" title="' + Game.InfoHandler.getLocalString4ProfessionId(r.profession_id) + '"/> '
                    + '<a href="#" onClick="PlayerProfileWindow.open(' + r.player_id + ')">' + r.name + '</a>';
            }
            else nametext += r.email;
            this.table.appendRow().appendToCell(-1, 'name', nametext).appendToCell(-1, 'level', (isName ? r.level : '-')).appendToCell(-1, 'sentBy', '<a href="#" onClick="PlayerProfileWindow.open(' + r.from_player_id + ')">' + r.from_name + '</a>').appendToCell(-1, 'sentAt', r.invitation_date).appendToCell(-1, 'cancel', '<img class="table-image" onClick="CityhallWindow.Invitations.cancel(' + (isName ? r.town_invitation_id : r.town_inv_email_id) + ', ' + isName + ')" title="' + 'Отозвать приглашение'.escapeHTML() + '" src="https://westrus.innogamescdn.com/images/icons/delete.png" /></div>');
        }
    }
    CityhallWindow.Invitations.invite = function () {
        var invType = this.invTypeCombo.getValue();
        var name = this.invText.getValue();
        var that = this;
        Ajax.remoteCall('building_cityhall', 'invitation_invite_' + invType, {player_name: name}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            new UserMessage("Игрок приглашён", UserMessage.TYPE_SUCCESS).show();
            that.invText.setValue('');
            that.fillContent(resp);
        }, this.main);
    }
    CityhallWindow.Invitations.cancel = function (id, isName) {
        var that = getOwn().Invitations;
        Ajax.remoteCall('building_cityhall', 'invitation_delete_' + (isName ? 'player' : 'email'), {inv_id: id}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.fillContent(resp);
        }, that);
    }
    CityhallWindow.Administration = function (main) {
        this.window = main.window;
        this.main = main;
    }
    CityhallWindow.Administration.prototype = CityhallWindow.Administration;
    CityhallWindow.Administration.init = function () {
        var that = this;
        if (!that.window.$('div.cityhall-administration', CityhallWindow.DOM).children().length)
            that.initStructure();
        Ajax.remoteCallMode('building_cityhall', 'administration', {town_id: that.main.townId}, function (json) {
            that.fillContent(json);
        }, this.main);
    }
    CityhallWindow.Administration.initStructure = function () {
        var mdiv = this.window.$('div.cityhall-administration', CityhallWindow.DOM);
        var renameform = $("<div class='rename-form'><div class='rename-header'>" + 'Переименовать город:'.escapeHTML() + "</div></div>");
        this.renameText = new west.gui.Textfield('rename_to').setSize(30).addListener(this.rename, this);
        renameform.append(this.renameText.getMainDiv()).append(new west.gui.Button("Переименовать".escapeHTML(), this.rename, this).getMainDiv()).appendTo(mdiv);
        var profileform = $("<div class='profile-form'><div class='profile-header'>" + 'Профиль города:'.escapeHTML() + "</div></div>");
        this.profileText = new west.gui.Textarea(null, null).setId('profile_to').setHeight(190).setWidth(300);
        profileform.append($("<div class='bbcodes'>").append(new west.gui.Bbcodes(this.profileText.textarea[0]).getMainDiv())).append(this.profileText.getMainDiv()).append($("<div class='profile-buttons'/>").append(new west.gui.Button("Отправить".escapeHTML(), this.changeProfile, this).getMainDiv()).append($("<div id='prevButtonCont'/>").append(new west.gui.Button("Просмотр".escapeHTML(), this.previewProfile, this).getMainDiv())).append($("<div id='editButtonCont'/>").append(new west.gui.Button("Редактировать".escapeHTML(), this.togglePreview, this).getMainDiv())));
        mdiv.append($("<div class='horizontal-divider'/>")).append(profileform).append($("<div class='vertical-divider'/>"));
        this.window.$('.tw2gui_textarea_wrapper', CityhallWindow.DOM).append('<div class="profile-preview" />');
    }
    CityhallWindow.Administration.fillContent = function (json) {
        this.renameText.setValue(this.main.townName);
        this.profileText.setContent(json.profile);
        if (!this.window.$('#town_image', CityhallWindow.DOM).children().length) {
            this.window.$('div.cityhall-administration', CityhallWindow.DOM).append(json.logodiv);
            this.window.$('div.cityhall-administration .upload-buttons', CityhallWindow.DOM).append(new west.gui.Button("Отправить".escapeHTML(), this.uploadLogo, this).getMainDiv()).append(new west.gui.Button("Удалить картинку".escapeHTML(), this.removeLogo, this).getMainDiv());
        }
    }
    CityhallWindow.Administration.rename = function () {
        var that = this;
        var newName = that.renameText.getValue();
        Ajax.remoteCall('building_cityhall', 'rename_town', {town_name: newName}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.window.setTitle(newName);
            that.main.townName = newName;
            new UserMessage("Город переименован", UserMessage.TYPE_SUCCESS).show();
        }, this.main);
    }
    CityhallWindow.Administration.changeProfile = function () {
        var that = this;
        Ajax.remoteCall('building_cityhall', 'save_description', {text: that.profileText.getContent()}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            if ($('#city_profile_' + that.main.townId, CityhallWindow.DOM).children().length)$('#city_profile_' + that.main.townId + ' #city_profile_description_text').html(resp.text);
            new UserMessage("Профиль города сохранён", UserMessage.TYPE_SUCCESS).show();
        }, this.main);
    }
    CityhallWindow.Administration.previewProfile = function () {
        var that = this;
        Ajax.remoteCall('building_cityhall', 'preview_description', {text: that.profileText.getContent()}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.window.$('#profile_to', CityhallWindow.DOM).slideUp();
            that.window.$('.profile-preview', CityhallWindow.DOM).html(Game.TextHandler.parse(resp.text)).delay(500).slideDown();
            that.window.$('#prevButtonCont', CityhallWindow.DOM).css('display', 'none');
            that.window.$('#editButtonCont', CityhallWindow.DOM).css('display', 'inline');
        }, this.main);
    }
    CityhallWindow.Administration.togglePreview = function () {
        this.window.$('.profile-preview', CityhallWindow.DOM).slideUp().empty();
        this.window.$('#profile_to', CityhallWindow.DOM).delay(500).slideDown();
        this.window.$('#editButtonCont', CityhallWindow.DOM).css('display', 'none');
        this.window.$('#prevButtonCont', CityhallWindow.DOM).css('display', 'inline');
    }
    CityhallWindow.Administration.uploadLogo = function () {
        $('#uploadFrame').css('display', 'block');
        $('#uploadFrame').height('200px');
        $('#uploadForm', CityhallWindow.DOM).height('165px');
        $('#upload_info', CityhallWindow.DOM).empty();
        $('#upload_info', CityhallWindow.DOM).innerHTML += 'Файл загружается.'.escapeHTML();
        $('#upload_info', CityhallWindow.DOM).append(get_throbber());
        $('#town_logo', CityhallWindow.DOM).remove();
        document.upload_town_logo.submit();
        $('#uploadFrame').on('load', function () {
            $('#upload_info', CityhallWindow.DOM).empty().css('font-size', '10px');
            $('#uploadForm', CityhallWindow.DOM).css('height', '45px');
        });
    }
    CityhallWindow.Administration.removeLogo = function () {
        var that = this;
        Ajax.remoteCall('building_cityhall', 'remove_town_logo', {}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.window.$('.town-logo-cont', CityhallWindow.DOM).fadeOut();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
        }, this.main);
    }
    CityhallWindow.Alliance = function (main) {
        this.window = main.window;
        this.main = main;
    }
    CityhallWindow.Alliance.prototype = CityhallWindow.Alliance;
    CityhallWindow.Alliance.init = function () {
        var that = this;
        if (!that.window.$('div.cityhall-alliance', CityhallWindow.DOM).children().length)
            that.initStructure();
        if (that.main.allianceData.alliance == undefined) {
            Ajax.remoteCallMode('building_cityhall', 'alliance', {}, function (json) {
                that.main.allianceData = json;
                that.fillContent();
            }, that);
        }
        else
            that.fillContent();
    }
    CityhallWindow.Alliance.initStructure = function () {
        var mdiv = this.window.$('div.cityhall-alliance', CityhallWindow.DOM);
        var inAllianceDiv = $("<div class='inalliance'/>");
        var notInAllianceDiv = $("<div class='notinalliance'/>");
        var renameform = $("<div class='rename-form'/>");
        this.renameText = new west.gui.Textfield('rename_text').setSize(50).addListener(this.rename, this);
        renameform.append($("<div class='rename-header'>" + 'Переименовать альянс:'.escapeHTML() + "</div>")).append(this.renameText.getMainDiv()).append('&nbsp;').append(new west.gui.Button("Переименовать".escapeHTML(), this.rename, this).setMinWidth(120).setMaxWidth(140).getMainDiv());
        renameform.appendTo(inAllianceDiv);
        this.table = new west.gui.Table().appendTo(inAllianceDiv).addColumn('town').addColumn('members').addColumn('points').addColumn('entryDate').addColumn('rights').addColumn('kick').appendToCell('head', 'town', 'Город'.escapeHTML()).appendToCell('head', 'members', 'Количество жителей'.escapeHTML()).appendToCell('head', 'points', 'Очки'.escapeHTML()).appendToCell('head', 'entryDate', 'Дата вступления'.escapeHTML()).appendToCell('head', 'rights', 'Права'.escapeHTML()).appendToCell('head', 'kick');
        this.allianceNameText = new west.gui.Textfield('name_text').setSize(50).addListener(this.create, this);
        notInAllianceDiv.append('Город не входит в альянс.'.escapeHTML()).append('<br/><br/>').append('Основать новый альянс?'.escapeHTML()).append('<br/><br/>').append($("<div class='header'>" + 'Название:'.escapeHTML() + "</div>")).append(this.allianceNameText.getMainDiv()).append('<br/><br/>').append($("<div class='create-alliance-button'/>").append(new west.gui.Button('Основать альянс'.escapeHTML(), this.create, this).setMinWidth(140).getMainDiv()));
        mdiv.append(inAllianceDiv).append(notInAllianceDiv);
    }
    CityhallWindow.Alliance.fillContent = function () {
        this.table.clearBody();
        this.window.$('.inalliance', CityhallWindow.DOM).show();
        this.window.$('.notinalliance', CityhallWindow.DOM).hide();
        var ownRight = this.main.allianceData.alliance.member_right;
        this.table.getCell('foot', 'town').empty();
        if (false === this.main.allianceData.has_founder) {
            this.table.appendToCell('foot', 'town', $('<span title="' + "Присвоить звание основателя".escapeHTML() + '" onClick="CityhallWindow.Alliance.demandFounder();" style="cursor:pointer;"><img src="https://westrus.innogamescdn.com/images/window/cityhall/claim.png" alt="" /></span>'));
        }
        var that = this;
        if (ownRight == 1)this.window.$('.rename-form', CityhallWindow.DOM).hide();
        if (this.main.allianceData.allyMembers != undefined) {
            var rightsText = ["Член альянса".escapeHTML(), "Совет альянса".escapeHTML(), "Председатель альянса".escapeHTML()];
            var rightselector = function (townid, current) {
                var rightcombo = new west.gui.Combobox('arights-' + townid);
                for (var i = rightsText.length; i > 0; i--) {
                    rightcombo.addItem(i, rightsText[i - 1]);
                }
                rightcombo.select(current).setWidth(130).addListener(that.changeRights, that, townid);
                return rightcombo.getMainDiv();
            }
            this.renameText.setValue(this.main.allianceData.alliance.alliance_name);
            for (var i = 0; i < this.main.allianceData.allyMembers.length; i++) {
                var r = this.main.allianceData.allyMembers[i];
                var kickText = '';
                if (r.town_id == Character.homeTown.town_id)
                    kickText = $("<img src='https://westrus.innogamescdn.com/images/icons/delete.png' class='table-image' title='" + 'Покинуть альянс'.escapeHTML() + "' onClick='CityhallWindow.Alliance.leaveAlliance(" + r.town_id + ")'/>"); else if (ownRight >= r.member_right && ownRight > 1)
                    kickText = $("<img src='https://westrus.innogamescdn.com/images/icons/delete.png' class='table-image' title='" + 'Исключить город'.escapeHTML() + "' onClick='CityhallWindow.Alliance.leaveAlliance(" + r.town_id + ")'/>");
                this.table.appendRow().appendToCell(-1, 'town', '<a href="#" onClick="TownWindow.open(' + r.x + ', ' + r.y + ');" title="' + (r.name.escapeHTML()) + '">' + (r.name).escapeHTML() + '</a>').appendToCell(-1, 'members', r.member_count).appendToCell(-1, 'points', r.town_points).appendToCell(-1, 'entryDate', r.join_date).appendToCell(-1, 'rights', ((r.town_id == Character.homeTown.town_id || r.member_right > ownRight || ownRight == 1) ? rightsText[r.member_right - 1] : rightselector(r.town_id, r.member_right))).appendToCell(-1, 'kick', kickText);
            }
        } else {
            this.window.$('.inalliance', CityhallWindow.DOM).hide();
            this.window.$('.notinalliance', CityhallWindow.DOM).slideDown().css('display', 'table-cell');
        }
    }
    CityhallWindow.Alliance.demandFounder = function () {
        var that = getOwn().Alliance;
        Ajax.remoteCall('building_cityhall', 'demand_ally_founder', {}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.main.allianceData = resp.allydata;
            that.fillContent();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
        }, that);
    }
    CityhallWindow.Alliance.create = function () {
        var that = this;
        Ajax.remoteCall('building_cityhall', 'create_alliance', {alliance_name: that.allianceNameText.getValue()}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.main.allianceData = resp.allydata;
            that.fillContent();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
        }, this.main);
    }
    CityhallWindow.Alliance.rename = function () {
        var that = this;
        Ajax.remoteCall('building_cityhall', 'rename_alliance', {alliance_name: that.renameText.getValue()}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.main.allianceData = resp.allydata;
            that.fillContent();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
        }, this.main);
    }
    CityhallWindow.Alliance.changeRights = function (newRight, townId) {
        var that = this;
        Ajax.remoteCall('building_cityhall', 'change_alliance_rights', {
            town_id: townId,
            right: newRight
        }, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.main.allianceData = resp.allydata;
            that.fillContent();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
        });
    }
    CityhallWindow.Alliance.leaveAlliance = function (townId) {
        var that = getOwn().Alliance;
        var reason = prompt('Обоснование:');
        if (reason == null)return;
        Ajax.remoteCall('building_cityhall', 'leave_alliance', {town_id: townId, message: reason}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.main.allianceData = resp.allydata;
            that.fillContent();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
        }, that);
    }
    CityhallWindow.Alliance.Invitations = function (main) {
        this.window = main.window;
        this.main = main;
    }
    CityhallWindow.Alliance.Invitations.prototype = CityhallWindow.Alliance.Invitations;
    CityhallWindow.Alliance.Invitations.init = function () {
        var that = this;
        if (!that.window.$('div.cityhall-alliance-invitations', CityhallWindow.DOM).children().length)
            that.initStructure();
        if (that.main.allianceData.alliance == undefined) {
            Ajax.remoteCallMode('building_cityhall', 'alliance', {}, function (json) {
                that.main.allianceData = json;
                that.fillContent();
            }, this.main);
        }
        else
            that.fillContent();
    }
    CityhallWindow.Alliance.Invitations.initStructure = function () {
        var mdiv = new west.gui.Scrollpane("invitation-page");
        var inviteform = $("<div class='invite-form'/>");
        this.inviteName = new west.gui.Textfield('invite_name').addListener(this.invite, this);
        this.inviteMessage = new west.gui.Textarea(null, null).setId('invite_msg').setWidth(260).setHeight(60);
        inviteform.append($("<div class='invite-form-header'>" + 'Пригласить город' + "</div>")).append($("<div class='header invite-name-header'>" + 'Город' + ":</div>")).append($("<div class='invite-button'/>").append(new west.gui.Button('Пригласить город'.escapeHTML(), this.invite, this).getMainDiv())).append(this.inviteName.getMainDiv()).append($("<div class='header invite-msg-header'>" + 'Текст приглашения:'.escapeHTML() + "</div>")).append(this.inviteMessage.getMainDiv());
        mdiv.appendContent(inviteform).appendContent($("<div class='horizontal-divider'/>")).appendContent($("<div class='header invited-towns-header'>" + 'Приглашённые города'.escapeHTML() + "</div>"));
        this.sentTable = new west.gui.Table().addColumn('town').addColumn('message').addColumn('cancel').appendToCell('head', 'town', 'Город'.escapeHTML()).appendToCell('head', 'message', 'Сообщение'.escapeHTML()).appendToCell('head', 'cancel');
        mdiv.appendContent($("<div class='sent-invitations-table'/>").append(this.sentTable.getMainDiv())).appendContent($("<div class='header received-header'>" + 'Приглашения в альянс'.escapeHTML() + "</div>"));
        this.receivedTable = new west.gui.Table().addColumn('alliance').addColumn('message').addColumn('accept').addColumn('cancel').appendToCell('head', 'alliance', 'Альянс'.escapeHTML()).appendToCell('head', 'message', 'Сообщение'.escapeHTML()).appendToCell('head', 'accept').appendToCell('head', 'cancel');
        mdiv.appendContent($("<div class='received-invitations-table'/>").append(this.receivedTable.getMainDiv())).appendContent($("<div class='no-sent-invites'><img src='https://westrus.innogamescdn.com/images/icons/warn_circle.png' /><span class='empty-list'>" + 'Нет приглашений'.escapeHTML() + "</span></div>")).appendContent($("<div class='no-received-invites'><img src='https://westrus.innogamescdn.com/images/icons/warn_circle.png' /><span class='empty-list'>" + 'Нет приглашений'.escapeHTML() + "</span></div>"));
        this.window.$('.cityhall-alliance-invitations').append(mdiv.getMainDiv());
    }
    CityhallWindow.Alliance.Invitations.fillContent = function () {
        this.sentTable.clearBody();
        this.receivedTable.clearBody();
        this.window.$('.no-sent-invites', CityhallWindow.DOM).hide();
        if (this.main.allianceData.alliance.member_right == 1) {
            this.window.$('.invite-form', CityhallWindow.DOM).hide();
            this.window.$('.sent-invitations-table', CityhallWindow.DOM).hide();
            this.window.$('.horizontal-divider', CityhallWindow.DOM).hide();
            this.window.$('.invited-towns-header', CityhallWindow.DOM).hide();
            this.window.$('.no-received-invites', CityhallWindow.DOM).css('top', '80px');
        } else if (this.main.allianceData.alliance_invitations == undefined || !this.main.allianceData.alliance_invitations.length) {
            this.window.$('.no-sent-invites', CityhallWindow.DOM).fadeIn();
        } else if (this.main.allianceData.alliance.member_right > 1) {
            for (var i = 0; i < this.main.allianceData.alliance_invitations.length; i++) {
                var r = this.main.allianceData.alliance_invitations[i], m = r.message.escapeHTML();
                this.sentTable.appendRow().appendToCell(-1, 'town', '<a href="#" onClick="TownWindow.open(' + r.x + ', ' + r.y + ')">' + (r.name).escapeHTML() + '</a>').appendToCell(-1, 'message', "<span title='" + m.escapeHTML() + "'>" + m + "</span>").appendToCell(-1, 'cancel', $("<img src='https://westrus.innogamescdn.com/images/icons/delete.png' class='table-image' title='" + 'Отозвать приглашение'.escapeHTML() + "' onClick='CityhallWindow.Alliance.Invitations.cancel(" + r.town_id + ")'/>"));
            }
        }
        this.window.$('.no-received-invites', CityhallWindow.DOM).hide();
        if (this.main.allianceData.alliance_invites == undefined || !this.main.allianceData.alliance_invites.length) {
            this.window.$('.no-received-invites', CityhallWindow.DOM).fadeIn();
        } else {
            for (var i = 0; i < this.main.allianceData.alliance_invites.length; i++) {
                var r = this.main.allianceData.alliance_invites[i], m = r.message.escapeHTML();
                this.receivedTable.appendRow().appendToCell(-1, 'alliance', '<a href="#" onclick="AllianceWindow.open(' + r.alliance_id + ')">' + r.alliance_name.escapeHTML() + '</a>').appendToCell(-1, 'message', "<span title='" + m.escapeHTML() + "'>" + m + "</span>").appendToCell(-1, 'accept', $("<img src='https://westrus.innogamescdn.com/images/icons/telegram_friends.png' class='table-image' style='padding-right: 5px' title='" + 'Принять приглашение'.escapeHTML() + "' onClick='CityhallWindow.Alliance.Invitations.accept(" + r.alliance_id + ")'/>")).appendToCell(-1, 'cancel', $("<img src='https://westrus.innogamescdn.com/images/icons/delete.png' class='table-image' title='" + 'Отклонить приглашение'.escapeHTML() + "' onClick='CityhallWindow.Alliance.Invitations.decline(" + r.alliance_id + ")'/>"));
            }
        }
    }
    CityhallWindow.Alliance.Invitations.invite = function () {
        var that = this;
        Ajax.remoteCall('building_cityhall', 'invite_town', {
            town_name: that.inviteName.getValue(),
            message: that.inviteMessage.getContent()
        }, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.main.allianceData = resp.allydata;
            that.fillContent();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
        }, this.main);
    }
    CityhallWindow.Alliance.Invitations.cancel = function (townId) {
        var that = getOwn().Alliance.Invitations;
        var msg = prompt('Обоснование:');
        if (msg === null)return;
        Ajax.remoteCall('building_cityhall', 'retract_alliance_invitation', {
            town_id: townId,
            message: msg
        }, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.main.allianceData = resp.allydata;
            that.fillContent();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
        }, that);
    }
    CityhallWindow.Alliance.Invitations.accept = function (allianceId) {
        var that = getOwn().Alliance.Invitations;
        Ajax.remoteCall('building_cityhall', 'accept_alliance_invitation', {alliance_id: allianceId}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.main.allianceData = resp.allydata;
            that.fillContent();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
        }, this.main);
    }
    CityhallWindow.Alliance.Invitations.decline = function (allianceId) {
        var that = getOwn().Alliance.Invitations;
        var msg = prompt('Обоснование:');
        if (msg === null)return;
        Ajax.remoteCall('building_cityhall', 'decline_alliance_invitation', {
            alliance_id: allianceId,
            message: msg
        }, function (resp) {
            if (resp.error) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.main.allianceData = resp.allydata;
            that.fillContent();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
        }, this.main);
    }
    CityhallWindow.Alliance.Log = function (main) {
        this.window = main.window;
        this.main = main;
    }
    CityhallWindow.Alliance.Log.prototype = CityhallWindow.Alliance.Log;
    CityhallWindow.Alliance.Log.init = function () {
        var that = this;
        if (!that.window.$('.cityhall-alliance-log', CityhallWindow.DOM).children().length)
            that.initStructure();
        if (that.main.allianceData.alliance == undefined) {
            Ajax.remoteCallMode('building_cityhall', 'alliance', {}, function (json) {
                that.main.allianceData = json;
                that.fillContent();
            }, that);
        }
        else
            that.fillContent();
    }
    CityhallWindow.Alliance.Log.initStructure = function () {
        this.table = new west.gui.Table().appendTo(this.window.$('.cityhall-alliance-log')).addColumn('date').addColumn('entry').appendToCell('head', 'date', 'Дата'.escapeHTML()).appendToCell('head', 'entry', 'Запись'.escapeHTML());
    }
    CityhallWindow.Alliance.Log.fillContent = function () {
        if (undefined === this.main.allianceData.allyLog)return;
        this.table.clearBody();
        for (var i = 0; i < this.main.allianceData.allyLog.length; i++) {
            var r = this.main.allianceData.allyLog[i], message = r.message.replace("<strong>", "").replace("</strong>", "");
            this.table.appendRow().appendToCell(-1, 'date', r.log_date).appendToCell(-1, 'entry', "<span title='" + message.escapeHTML() + "'>" + message + "</span>");
        }
    }
})(jQuery);
;
(function ($) {
    window.SaloonWindow = {DOM: '*', self: {}};
    SaloonWindow.open = function (townId) {
        SaloonWindow.townId = townId;
        SaloonWindow.window = wman.open('saloon-' + SaloonWindow.townId).setMiniTitle('Салун').appendToContentPane($('<div class="saloon-content"/>'));
        SaloonWindow.DOM = $('div.saloon-' + SaloonWindow.townId);
        SaloonWindow.window.setTitle('Салун');
        EventHandler.listen('duelmotivation_changed', SaloonWindow.updateDuelMotivationBar, null, {boundto: SaloonWindow.window});
        SaloonWindow.init();
        SaloonWindow.initData();
    };
    wman.registerReloadHandler(/^saloon-\d+/, function (uid) {
        SaloonWindow.open(uid.match(/\d+/)[0]);
    });
    var playersData = [];
    var currentSort = {'sortBy': 'name', 'orderBy': 'asc'};
    SaloonWindow.init = function () {
        var maindiv = $('<div></div>');
        maindiv.append('<div class="saloon-info">' + "Здесь можно вызывать жителей этого города на дуэль." + '</div>' + '<div class="saloon_duel_moti"></div>');
        SaloonWindow.table = new west.gui.Table().setId('saloon-table-' + SaloonWindow.townId).appendTo(maindiv).addColumn("sal_playername").addColumn("sal_duel_lvl").addColumn("sal_duel_exp").addColumn("sal_way").addColumn("sal_duel").appendToThCell("head", "sal_playername", 'Имя персонажа', 'Имя персонажа').appendToThCell("head", "sal_duel_lvl", 'Дуэльный разряд', 'Дуэльный разряд').appendToThCell("head", "sal_duel_exp", 'Опыт'.cutIt(10), 'Опыт').appendToThCell("head", "sal_way", 'Расстояние', 'Расстояние').appendToThCell("head", "sal_duel", 'Дуэль', 'Дуэль');
        $('div.sal_playername', maindiv).data('sortBy', 'name').click(sortContent);
        $('div.sal_duel_lvl', maindiv).data('sortBy', 'duellevel').click(sortContent);
        $('div.sal_duel_exp', maindiv).data('sortBy', 'experience').click(sortContent);
        $('div.sal_way', maindiv).data('sortBy', 'waytime').click(sortContent);
        $('div.saloon-content', SaloonWindow.DOM).append(maindiv);
    };
    SaloonWindow.updateDuelMotivationBar = function () {
        $('div.saloon_duel_moti', SaloonWindow.DOM).empty().append('<b>' + 'Мотивация к дуэли:' + '</b>', new west.gui.Progressbar(Character.duelMotivation, 1).showPercentOnly(true).getMainDiv());
    };
    SaloonWindow.initData = function () {
        Ajax.remoteCallMode("building_saloon", "get_data", {town_id: SaloonWindow.townId}, function (data) {
            if (data.error)
                return new UserMessage(data.msg).show();
            prepareData(data);
            SaloonWindow.updateTable();
        }, SaloonWindow);
    };
    var prepareData = function (data) {
        playersData = data.players;
        Character.setDuelMotivation(data.motivation);
        SaloonWindow.self = data.self;
    };
    SaloonWindow.updateTable = function () {
        SaloonWindow.table.clearBody();
        var tmpCells = {};
        for (var i = 0; i < playersData.length; i++) {
            var rd = playersData[i];
            var name_link = '<a href="javascript:void(PlayerProfileWindow.open(' + rd.player_id + '));">' + rd.name + '</a>';
            var name_title = (rd.title) ? rd.title + rd.name : rd.name;
            var name_link_title = (rd.title) ? rd.title + name_link : name_link;
            tmpCells['sal_playername'] = "<span title='" + name_title + "'>" + name_link_title + "</span>";
            tmpCells['sal_duel_lvl'] = rd.duel_level;
            tmpCells['sal_duel_exp'] = rd.exp;
            tmpCells['sal_way'] = rd.travel_distance;
            tmpCells['sal_duel'] = SaloonWindow.playerStat(rd);
            SaloonWindow.table.buildRow('sal_duel_id_' + rd.player_id, tmpCells);
        }
    };
    SaloonWindow.playerStat = function (data) {
        var stat = "";
        if (SaloonWindow.self.attack_anyone) {
            stat = '<a href="javascript:SaloonWindow.startDuel(' + data.player_id + ',' + data.alliance_id + ');">' + 'вызвать на дуэль' + '</a>';
        } else if (SaloonWindow.self.selfDeadFlagged) {
            var title = "Дуэль возможна через %1.".replace("%1", SaloonWindow.self.timeleft);
            stat = '<span title="' + title + '" >';
            stat += "%1 часов без дуэлей".replace('%1', SaloonWindow.self.attackAfterDeath);
            stat += '</span>';
        } else if (data.isDeadFlagged) {
            stat += "%1 часов без дуэлей".replace('%1', SaloonWindow.self.safeAfterDeath);
        } else if (!data.holiday_duel) {
            stat = 'В отпуске';
        } else if ((data.isSleeping || data.isSleepingFort || data.isSleepingTent) && !data.last_duel) {
            stat = 'Спит';
        } else if (data.isFoundingFort) {
            stat = 'строит форт';
        } else if (data.involvedInBattle) {
            stat = 'сражается за форт…';
        } else if (data.inLevelRange <= 0 || data.inLevelRangeOpponent <= 0 && !data.attackableByAnyone) {
            stat = 'Дуэль невозможна';
        } else if (data.alreadyDuelled) {
            stat = "Не раньше чем %1".replace('%1', data.nextDuel);
        } else {
            stat = '<a href="javascript:SaloonWindow.startDuel(' + data.player_id + ',' + data.alliance_id + ');">' + 'вызвать на дуэль' + '</a>';
        }
        return stat;
    };
    SaloonWindow.startDuel = function (playerId, allianceId, skipAllianceCheck, skipProtectionCheck, view) {
        if (skipAllianceCheck === undefined)skipAllianceCheck = false;
        if (skipProtectionCheck === undefined)skipProtectionCheck = false;
        if (view === undefined)view = SaloonWindow;
        if (!Character.canDuel()) {
            new UserMessage(s("%1 часов без дуэлей", Game.duelProtectionEarly), UserMessage.TYPE_ERROR).show();
        } else if (!skipAllianceCheck && allianceId && Character.homeTown.alliance_id && allianceId == Character.homeTown.alliance_id) {
            new west.gui.Dialog("Хочешь вызвать на дуэль члена твоего альянса?").addButton('yes', function () {
                SaloonWindow.startDuel(playerId, allianceId, true, false, view)
            }).addButton('no').setText("<div class='txcenter'>" + "Это член твоего альянса! Точно вызвать на дуэль?" + "</div>").show();
        } else if (!skipProtectionCheck && Character.isDuelProtected()) {
            var text = s(ngettext('Твоя защита от поединков закончится %1. Нападение на другого игрока раньше этого времени отменит защиту от дуэлей и обойдётся в %2 очко энергии. Точно продолжить?', new Array('Твоя защита от поединков закончится %1. Нападение на другого игрока раньше этого времени отменит защиту от дуэлей и обойдётся в %2 очко энергии. Точно продолжить?', 'Твоя защита от поединков закончится %1. Нападение на другого игрока раньше этого времени отменит защиту от дуэлей и обойдётся в %2 очка энергии. Точно продолжить?', 'Твоя защита от поединков закончится %1. Нападение на другого игрока раньше этого времени отменит защиту от дуэлей и обойдётся в %2 очков энергии. Точно продолжить?'), Game.duelProtectionEnergy), new Date(Character.getDuelProtection(true) - Game.serverTimeDifference).toDateTimeStringNice(), Game.duelProtectionEnergy);
            new west.gui.Dialog('Отменить защиту от дуэлей').setIcon(west.gui.Dialog.SYS_WARNING).addButton('yes', function () {
                SaloonWindow.startDuel(playerId, allianceId, true, true, view)
            }).addButton('no').setText("<div class='txcenter'>" + text + "</div>").show();
        } else {
            TaskQueue.add(new TaskDuel(playerId));
        }
    };
    var sortContent = function (ev) {
        startSortDispatcher($(ev).data.sortBy);
        SaloonWindow.updateTable();
    };
    var startSortDispatcher = function (sortBy) {
        if (currentSort.sortBy == sortBy) {
            currentSort.orderBy = currentSort.orderBy == 'asc' ? 'desc' : 'asc';
            playersData.reverse();
        }
        else {
            currentSort.sortBy = sortBy;
            currentSort.orderBy = 'asc';
            playersData.sort(sortingBy.hasOwnProperty(currentSort.sortBy) ? sortingBy[currentSort.sortBy] : sortingBy.standard);
        }
    };
    var sortingBy = {
        name: function (a, b) {
            return a.name.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") > b.name.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") ? 1 : -1;
        }, duellevel: function (a, b) {
            return a.duel_level - b.duel_level;
        }, experience: function (a, b) {
            return a.inLevelRange - b.inLevelRange;
        }, waytime: function (a, b) {
            return a.distance - b.distance;
        }, standard: function (a, b) {
            return sortingBy.name(a, b);
        }
    };
})(jQuery);
;
(function ($) {
    window.MessagesWindow = {
        currentTab: 'telegram',
        Telegram: {
            visibles: [],
            current_page: 1,
            folder_id: 'all',
            folders: {},
            all_selected: 0,
            NewTelegram: {receivers: '', topic: '', message: '', opened: false, preview: false},
            DOM: null
        },
        Report: {List: {}, reportsTable: null, currentPage: 1, pageCount: 1, currentFolder: 'all', DOM: null}
    };
    MessagesWindow.toggleOpen = function () {
        var wnd = wman.toggleOpen('messages');
        if (wnd && 'open' === wnd.status) {
            MessagesWindow.open(null, {win_open: wnd.win});
        }
    };
    MessagesWindow.open = function (tab, options) {
        this.options = options || {};
        var tabclick = function (win, id) {
            MessagesWindow.showTab(id);
        }
        var toReadReports = '';
        var toReadMessages = '';
        if (Character.read['messages'])toReadMessages = ' (' + 'новое' + ')';
        if (Character.read['reports'])toReadReports = ' (' + 'новое' + ')';
        MessagesWindow.window = (this.options.win_open || wman.open("messages")).setMiniTitle('Сообщения').addTab('Почта' + toReadMessages, 'telegram', tabclick).addTab('Отчёты' + toReadReports, 'report', tabclick).appendToContentPane($('<div class="messages-telegram"><div class="messagelist"/><div class="newtelegram"/><div class="blockedplayers"/></div>'), $('<div class="messages-report"/>'));
        if (0 != this.options.reset) {
            this.Telegram.current_page = this.Report.currentPage = 1;
            this.Telegram.folder_id = this.Report.currentFolder = 'all';
            this.Telegram.NewTelegram.opened = false;
        }
        MessagesWindow.Telegram.DOM = $('div.messages-telegram');
        if (!tab) {
            if (toReadMessages)tab = 'telegram'; else if (toReadReports)tab = 'report'; else tab = 'telegram';
        }
        EventHandler.listen('telegram-opened', MessagesWindow.Telegram.toggleStatus, null, {boundto: MessagesWindow.window});
        MessagesWindow.showTab(tab);
    };
    wman.registerReloadHandler(/^messages/, function () {
        MessagesWindow.open(MessagesWindow.currentTab, {reset: 0});
    });
    MessagesWindow.showTab = function (id) {
        if (!MessagesWindow.window)return;
        this.currentTab = id;
        MessagesWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *').each(function (i, e) {
            if ($(e).hasClass('messages-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            } else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'telegram':
                MessagesWindow.Telegram.init();
                break;
            case'report':
                MessagesWindow.Report.init();
                break;
        }
    };
    MessagesWindow.Telegram.init = function () {
        $(".blockedplayers", MessagesWindow.Telegram.DOM).hide();
        $(".newtelegram", MessagesWindow.Telegram.DOM).hide();
        this.fetchTelegrams();
    };
    MessagesWindow.Telegram.toggleBlocked = function () {
        $("div.messagelist", MessagesWindow.Telegram.DOM).toggle();
        $(".blockedplayers", MessagesWindow.Telegram.DOM).toggle();
        return this;
    };
    MessagesWindow.Telegram.toggleNew = function () {
        $("div.messagelist", MessagesWindow.Telegram.DOM).toggle();
        $(".newtelegram", MessagesWindow.Telegram.DOM).toggle();
        this.NewTelegram.opened = $("div.messagelist", MessagesWindow.Telegram.DOM).css("display") == "block" ? false : true;
        if (this.NewTelegram.receivers && this.receiverInput.getValue() == '')
            MessagesWindow.Telegram.insert_to(null, this.NewTelegram.receivers);
        if (this.NewTelegram.topic)
            this.subjectInput.setValue(this.NewTelegram.topic);
        if (this.NewTelegram.message)
            this.telegramInput.setContent(this.NewTelegram.message);
        if (!this.NewTelegram.receivers)
            this.receiverInput.getField().focus(); else if (!this.NewTelegram.topic)
            this.subjectInput.getField().focus();
        return this;
    };
    MessagesWindow.Telegram._initStructure = function (json) {
        var listdiv = $("div.messagelist", MessagesWindow.Telegram.DOM).empty();
        listdiv.append($("<div id='mess_checkboxes'>" + "<input onclick='MessagesWindow.Telegram.switchShow()' type='checkbox' name='messages_show' value='unread' id='messages_show_unread' checked='checked' /><label for='messages_show_unread'>" + 'новое' + "</label>" + "<input onclick='MessagesWindow.Telegram.switchShow()' type='checkbox' name='messages_show' value='answered' id='messages_show_answered' checked='checked' /><label for='messages_show_answered'>" + 'отвеченное' + "</label>" + "<input onclick='MessagesWindow.Telegram.switchShow()' type='checkbox' name='messages_show' value='read' id='messages_show_read' checked='checked' /><label for='messages_show_read'>" + 'прочитанное' + "</label>" + "</br><input onclick='MessagesWindow.Telegram.switchShow()' type='checkbox' name='messages_show' value='group_new' id='messages_show_group_new' checked='checked' /><label for='messages_show_group_new'>" + 'новые рассылки' + "</label>" + "<input onclick='MessagesWindow.Telegram.switchShow()' type='checkbox' name='messages_show' value='group_read' id='messages_show_group_read' checked='checked' /><label for='messages_show_group_read'>" + 'старые рассылки' + "</label>" + "</div>"), $("<span class='blockPlayerButton'/>").append(new west.gui.Button("Написать письмо", function () {
            MessagesWindow.Telegram.toggleNew()
        }).setWidth(190).getMainDiv()), $("<span class='newTelegramButton'/>").append(new west.gui.Button("Чёрный список", function () {
            MessagesWindow.Telegram.toggleBlocked()
        }).setWidth(190).getMainDiv()));
        var messages = $("<div id='messages'/>");
        listdiv.append(messages);
        this.messagetable = new west.gui.Table().appendTo(messages).addColumn("t_checkbox").addColumn("t_status").addColumn("t_subject").addColumn("t_folder").addColumn("t_sender_status").addColumn("t_sender").addColumn("t_sender_actions").addColumn("t_date").addColumn("t_trash").appendToCell("head", "t_checkbox", '&nbsp;').appendToCell("head", "t_status", "&nbsp;").appendToCell("head", "t_subject", '<div class="head_icons subject_icon"/> ' + 'Тема').appendToCell("head", "t_folder", '&nbsp;').appendToCell("head", "t_sender_status", "&nbsp;").appendToCell("head", "t_sender", '<div class="head_icons receiver_icon"/> ' + 'Собеседник').appendToCell("head", "t_sender_actions", '&nbsp;').appendToCell("head", "t_date", '<div class="head_icons date_icon"/> ' + "Дата").appendToCell("head", "t_trash", '&nbsp;');
        this.folderpopup = function (tid, currentfolder, count) {
            var popup = "<div>";
            if (count > 3)popup = "<div style='background-position:0px -139px; top:-115px;'>";
            if (tid === null)popup = "<div style='background-position:0px -139px; bottom:1px; left:160px;'>";
            for (var i in this.folders) {
                popup += "<a class='mini_folders" + (i ? ' minifolder-' + i : '') + (currentfolder == i ? ' current' : '') + "' href='javascript:MessagesWindow.Telegram.changeFolder(" + tid + ", \"" + i + "\");'>" + "<span></span>" + this.folders[i] + "</a>";
            }
            return popup + "</div>";
        }
        this.messagetable.appendToCell("foot", "t_checkbox", $('<input name="selectall" type="checkbox" onclick="MessagesWindow.Telegram.selectAll()" />'));
        this.folderCombo = new west.gui.Combobox('telegram-folders');
        this.folderCombo.addItem('all', 'Все');
        for (var i in json.folders)this.folderCombo.addItem("" + i + "", json.folders[i]);
        this.folderCombo.addListener(function () {
            MessagesWindow.Telegram.switchFolder()
        });
        this.messagetable.appendToCell("foot", "t_folder", this.folderCombo.getMainDiv());
        this.pages = $("<div id='pages'/>").append((this.pagebar = new west.gui.Pagebar(json.page, json.count, MessagesWindow.Telegram.switchPage)).getMainDiv());
        this.messagetable.appendToCell("foot", "t_date", this.pages);
        var blockeddiv = $(".blockedplayers", MessagesWindow.Telegram.DOM).empty();
        this.blockinput = new west.gui.Textfield('bl_player_name').setSize(30).setWidth(190);
        var add = new west.gui.Button('Заблокировать', this.blockPlayer);
        blockeddiv.append($("<div class='blockplayer'><b>" + 'Игрок:' + " </b></div>").append(this.blockinput.getMainDiv()).append(add.getMainDiv()));
        this.blocktable = new west.gui.Table().appendTo(blockeddiv).addColumn("b_playername").addColumn("b_remove").appendToCell("head", "b_playername", 'Игрок').appendToCell("head", "b_remove", "&nbsp;");
        for (var i = 0; i < json.blocked.length; i++) {
            var msg = json.blocked[i];
            this.blocktable.appendRow(null, 'player_' + msg.player_id).appendToCell(-1, 'b_playername', '<a href="javascript:void(PlayerProfileWindow.open(' + msg.player_id + '))">' + msg.name.escapeHTML() + '</a>').appendToCell(-1, 'b_remove', $('<div title="&lt;b&gt;' + 'Перестать игнорировать' + '&lt/b&gt;" onclick="MessagesWindow.Telegram.removeBlocked(this)" class="trash"/>'));
        }
        blockeddiv.append(new west.gui.Button("Назад", MessagesWindow.Telegram.toggleBlocked).addClass('backButton').getMainDiv());
        var newdiv = $("div.newtelegram", MessagesWindow.Telegram.DOM);
        this.receiverInput = new west.gui.Textfield("receiver").setSize(30).setWidth(190);
        this.subjectInput = new west.gui.Textfield("subject").setSize(60).setWidth(340);
        this.masstelegramInput = new west.gui.Checkbox("").setTooltip('Отправить всем адресатам.');
        this.telegramInput = new west.gui.Textarea().setId("msgtextarea").setWidth(635).setHeight(230);
        newdiv.append($("<span class='receiver'>" + 'Кому' + ":<br /></span>").append(this.receiverInput.getMainDiv()));
        newdiv.append($("<span class='subject'>" + 'Тема' + ":<br /></span>").append(this.subjectInput.getMainDiv()));
        newdiv.append($("<span class='masstelegramm' title='" + 'Отправить всем адресатам.' + "'>" + 'Рассылка' + ":<br /></span>"));
        newdiv.append(this.masstelegramInput.getMainDiv().addClass('groupcheckbox'));
        newdiv.append($("<span class='msg'>" + 'Сообщение' + ":<br /></span>").append(this.telegramInput.getMainDiv()));
        $('#msgtextarea', newdiv).parent().append($('<div id="newtelegram_preview" />'));
        var addressbook = new west.gui.Groupframe('', '<div id="addressbook_list"></div><div id="addressbook_add"></div>').setId('addressbook').getMainDiv();
        MessagesWindow.Telegram.refresh_addressbook();
        newdiv.append($("<span class='toggle_book'><a href='javascript:MessagesWindow.Telegram.toggle_addressbook();'>" + '&raquo; Добавить получателя' + "</a></span>").append(addressbook));
        newdiv.append($("<div id='newtelegram_bbcodes'>").append(new west.gui.Bbcodes(this.telegramInput.textarea[0]).getMainDiv()));
        newdiv.append($('<span class="button_preview"/>').append(new west.gui.Button('Просмотр', function () {
            MessagesWindow.Telegram.preview()
        }).setMinWidth(120).getMainDiv()));
        newdiv.append($('<span class="buttons"/>').append(new west.gui.Button('Отправить', function () {
            MessagesWindow.Telegram.send()
        }).setMinWidth(120).getMainDiv(), new west.gui.Button('Назад', function () {
            MessagesWindow.Telegram.toggleNew()
        }).setMinWidth(120).getMainDiv()));
    };
    MessagesWindow.Telegram.blockPlayer = function () {
        var name = MessagesWindow.Telegram.blockinput.getValue();
        Ajax.remoteCall('messages', 'block_player', {block_name: name}, function (json) {
            if (!json[0]) {
                new UserMessage(json[1], UserMessage.TYPE_ERROR).show();
                return;
            }
            MessagesWindow.Telegram.blocktable.appendRow(null, 'player_' + json[1]).appendToCell(-1, 'b_playername', '<a href="javascript:void(PlayerProfileWindow.open(' + json[1] + '))">' + name.escapeHTML() + '</a>').appendToCell(-1, 'b_remove', $('<div onclick="MessagesWindow.Telegram.removeBlocked(this)" class="trash"/>'));
        }, MessagesWindow);
    };
    MessagesWindow.Telegram.removeBlocked = function (el) {
        var parent = $(el).parent().parent();
        var id = parent.attr('class').split(' ')[2].split('_')[1];
        Ajax.remoteCall('messages', 'unblock', {blocked_id: id}, function () {
            parent.fadeOut('slow', function () {
                this.remove()
            });
        }, MessagesWindow);
    };
    MessagesWindow.Telegram.fetchTelegrams = function (p) {
        var page = p !== undefined ? p : this.current_page;
        var firstload = MessagesWindow.window.$('div.messagelist', MessagesWindow.Telegram.DOM).children().length ? 0 : 1;
        var that = this;
        Ajax.remoteCall('messages', 'get_messages', {
            folder_id: this.folder_id,
            page: page,
            visibles: this.visibles,
            include_blocked: firstload
        }, function (data) {
            if (data.error) {
                new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            that.current_page = data.page;
            that.folders = data.folders;
            if (firstload)
                that._initStructure(data);
            that.updateTelegrams(data);
            if (MessagesWindow.options.insert_to || that.NewTelegram.opened) {
                if (MessagesWindow.options.insert_to)
                    that.NewTelegram.receivers = MessagesWindow.options.insert_to;
                that.toggleNew();
            }
            $("input[name=selectall]", MessagesWindow.Telegram.DOM).attr('checked', false);
            that.all_selected = false;
            MessagesWindow.window.renameTab('telegram', 'Почта');
            Character.setToRead('messages', false);
            return;
        }, MessagesWindow);
    };
    MessagesWindow.Telegram.selectAll = function () {
        $("input[name=delete_messages]", MessagesWindow.Telegram.DOM).attr('checked', this.all_selected ? false : true);
        this.all_selected = !this.all_selected;
    };
    MessagesWindow.Telegram.switchShow = function () {
        this.visibles = [];
        $("input[name=messages_show]:checked", MessagesWindow.Telegram.DOM).each(function (e, v) {
            MessagesWindow.Telegram.visibles.push($(v).val());
        });
        if (this.visibles.length == 5)
            this.visibles = []; else if (this.visibles.length == 0)
            $("input[name=messages_show]", MessagesWindow.Telegram.DOM).attr("checked", true);
        this.fetchTelegrams(0);
    };
    MessagesWindow.Telegram.switchFolder = function () {
        this.folder_id = this.folderCombo.getValue();
        this.fetchTelegrams(0);
    };
    MessagesWindow.Telegram.switchPage = function (page) {
        MessagesWindow.Telegram.fetchTelegrams(page);
    };
    MessagesWindow.Telegram.updateTelegrams = function (data) {
        this.messagetable.clearBody();
        for (var i = 0; i < data.messages.length; i++) {
            var msg = data.messages[i];
            var sysmail = !msg.partner_name;
            var readit;
            if (msg.partner_name.length < 2) {
                msg.pname = sysmail ? '<i>' + 'Система' + '</i>' : $("<a href='javascript:void(PlayerProfileWindow.open(" + msg.partner_id[0] + "))'>" + (msg.partner_name[0].escapeHTML()) + "</a>");
            }
            else {
                msg.pname = msg.partner_name[0];
                for (var z = 1; z < msg.partner_name.length; z++) {
                    if (z == 50) {
                        msg.pname += '</br>...';
                        break;
                    }
                    msg.pname += '</br>' + msg.partner_name[z];
                }
                readit = 0;
                for (z = 0; z < msg.other_status.length; z++)
                    if (msg.other_status[z] == 4)
                        readit++;
            }
            if (msg.partner_name[0] == 'NULL') {
                if (msg.ownbyme)
                    msg.pname = '<div onclick="MessagesWindow.Telegram.add_player(' + msg.head_id + ')"title="' + 'Все твои собеседники удалили это письмо, но ты можешь добавить адресата.' + '"><a href="#">' + '----' + '</a></div>'; else
                    msg.pname = '<div>' + '----' + '</div>';
            }
            this.messagetable.appendRow(null, 'msg msg' + msg.message_id).appendToCell(-1, 't_checkbox', $('<input name="delete_messages" value="' + msg.message_id + '" type="checkbox" />'));
            if (msg.other_status.length > 1)
                this.messagetable.appendToCell(-1, 't_status', $("<div class='statusmass " + (msg.own_status == 5 ? 'unread' : 'read') + "mass'/>")); else
                this.messagetable.appendToCell(-1, 't_status', $("<div class='status " + ((msg.own_status == 3 || msg.own_status == 5) ? 'unread' : (msg.own_status == 2 ? 'answered' : 'read')) + "'/>"));
            this.messagetable.appendToCell(-1, 't_subject', $("<a id='t_subject_" + msg.message_id + "' href='#' onclick='MessagesWindow.Telegram.open(" + msg.message_id + ");'>" + (msg.subject).escapeHTML() + "</a>")).appendToCell(-1, 't_folder', $("<span class='icons folder" + (msg.folder ? ' folder-' + msg.folder : '') + "'><span class='switchfolder'/>" + this.folderpopup(msg.message_id, msg.folder, i) + "</span>"));
            if (msg.partner_id.length < 2 && msg.partner_name[0] != 'NULL') {
                this.messagetable.appendToCell(-1, 't_sender_status', sysmail ? '' : $("<div class='status " + ((msg.other_status[0] == 3 || msg.other_status[0] == 5) ? 'unread' : (msg.other_status[0] == 2 ? 'answered' : 'read')) + "'/>")).appendToCell(-1, 't_sender', msg.pname).appendToCell(-1, 't_sender_actions', sysmail ? '' : $("<div title='&lt;b&gt;" + 'Предложить дружбу' + "&lt;/b&gt;' onclick='FriendslistWindow.inviteIngameFriend(\"" + (msg.partner_name[0].escapeHTML()) + "\")' class='icons addfriend'/>" + "<div title='&lt;b&gt;" + 'Пожаловаться' + "&lt;/b&gt;' onclick='Suggestion.showPopup(\"tel_messages\", " + msg.message_id + ", " + msg.partner_id[0] + ")' class='icons affront'/>"));
            }
            else {
                this.messagetable.appendToCell(-1, 't_sender_status', (sysmail) ? '' : msg.partner_name[0] == 'NULL' ? $("<div class='status read'/>") : $("<div title='" + s("Прочитали %1 из %2", readit, msg.other_status.length) + "' class='statusmass readmass'/>")).appendToCell(-1, 't_sender', (msg.partner_name[0] == 'NULL') ? msg.pname : msg.ownbyme ? "<div onclick='MessagesWindow.Telegram.add_player(" + msg.head_id + ")' title='" + msg.pname + "'><a href='#'>" + 'Рассылка' + "</a></div>" : "<div title='" + msg.pname + "'>" + 'Рассылка' + "</div>").appendToCell(-1, 't_sender_actions', msg.ownbyme ? $("<div onclick='MessagesWindow.Telegram.add_player(" + msg.head_id + ")'title='" + "Добавить получателя" + "'class='add_player'/>") : '');
            }
            this.messagetable.appendToCell(-1, 't_date', $("<span>" + msg.last_post_date + "</span>")).appendToCell(-1, 't_trash', $("<div class='icons trash' title='&lt;b&gt;" + 'Удалить письмо' + "&lt;/b&gt;' onclick='MessagesWindow.Telegram.deleteTelegram([" + msg.message_id + "])'/>"));
            $('#t_subject_' + msg.message_id).dblclick
            ((function (id) {
                return function () {
                    $('.tw2gui_window.telegram-' + id).css('height', $('.tw2gui_window').height() + 'px');
                }
            })(msg.message_id));
        }
        $(".t_subject a, .t_sender a", MessagesWindow.Telegram.DOM).each(function (i, el) {
            $(el).addClass("checkk").cut();
        });
        this.actions = $("<span class='actionprompt'></span>").append('<div class="background"/>').append('<div class="frame tw2gui_bg_tl"></div>').append('<div class="frame tw2gui_bg_tr"></div>').append('<div class="frame tw2gui_bg_bl"></div>').append('<div class="frame tw2gui_bg_br"></div>').append((MessagesWindow.Telegram.folder_id != "all" ? ("<a href='javascript:MessagesWindow.Telegram.deleteAll();'>" + 'Удалить содержание папки' + "</a>") : "") + "<a href='javascript:MessagesWindow.Telegram.multiDelete();'>" + 'Удалить отмеченное' + "</a>" + "<span>" + this.folderpopup(null, null, 4) + "<a href='#'>" + 'Переместить отмеченное' + "</a></span>");
        var that = this;
        var actionbutton = new west.gui.Button("Действия", function () {
            that.actions.toggle();
        });
        this.messagetable.getCell("foot", "t_status").html($("<span/>").append(actionbutton.getMainDiv(), this.actions));
        this.pagebar.update(data.page, data.count);
    };
    MessagesWindow.Telegram.add_player = function (head_id) {
        var text = new west.gui.Textfield().setName("msg_player_add").setId("msgplayeradd").setSize(40).setWidth(254).setTooltip('Когда делаешь рассылку, раздели ники получателей точкой с запятой (;)').getMainDiv();
        var force = new west.gui.Checkbox("").setTooltip('Отправление не будет отменено, если адресат не существует или заблокировал тебя').setId("msgplayeraddforce");
        new west.gui.Dialog("Добавить игрока").setText('<div>' + 'Имя:' + '</div><div id="toplayler"></div><div title="' + 'Отправление не будет отменено, если адресат не существует или заблокировал тебя' + '" id="label" style="position:absolute; left: 25px;top:49px"></div><div id="forceit"></div>').addButton('yes', function () {
            var to = $('#msgplayeradd').val();
            var forcesend = force.isSelected();
            if (!to) {
                new UserMessage("А кому пишешь-то?", UserMessage.TYPE_ERROR).show();
                return;
            }
            Ajax.remoteCall('messages', 'add_player', {
                to: to,
                head_id: head_id,
                forcesend: forcesend
            }, function (resp) {
                if (resp.error)
                    new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show(); else
                    new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
            });
        }).addButton('no').show();
        $('#label').html('Добавить игрока');
        $('#toplayler').append(text);
        $('#forceit').append(force.getMainDiv());
    };
    MessagesWindow.Telegram.open = function (id) {
        TelegramWindow.open(id);
    };
    MessagesWindow.Telegram.toggleStatus = function (id) {
        var status = $(".msg" + id + " .t_status div", MessagesWindow.Telegram.DOM);
        if (status.hasClass("unread"))
            status.removeClass().addClass("status read"); else if (status.hasClass("unreadmass"))
            status.removeClass().addClass("statusmass readmass");
    };
    MessagesWindow.Telegram.multiDelete = function () {
        var message_ids = this.getSelected();
        if (message_ids.length)
            this.deleteTelegram(message_ids);
        $("#messages input[name=selectall]", MessagesWindow.Telegram.DOM).attr("checked", "");
    };
    MessagesWindow.Telegram.getSelected = function () {
        var message_ids = [];
        $("#messages input[name=delete_messages]:checked", MessagesWindow.Telegram.DOM).each(function (k, e) {
            message_ids.push($(e).val());
        });
        return message_ids;
    }
    MessagesWindow.Telegram.deleteAll = function (sure) {
        if (!sure) {
            var msg = '<div class="center">' + 'Точно очистить папку?' + '</div>';
            new west.gui.Dialog('Удалить телеграммы', msg, west.gui.Dialog.SYS_QUESTION).addButton("yes", function () {
                MessagesWindow.Telegram.deleteAll(true);
            }).addButton("no").show();
            return;
        }
        if (this.folder_id == "all")
            return
        else
            Ajax.remoteCall('messages', 'delete_all_messages', {folder: this.folder_id}, function (json) {
                if (json.error)return;
                MessagesWindow.Telegram.fetchTelegrams();
            });
    }
    MessagesWindow.Telegram.deleteTelegram = function (tid) {
        Ajax.remoteCall('messages', 'delete_messages', {messages: tid}, function (json) {
            if (json.error)return;
            if (typeof tid == "object" || true) {
                MessagesWindow.Telegram.fetchTelegrams();
            } else {
            }
        });
    };
    MessagesWindow.Telegram.changeFolder = function (tid, fid) {
        if (tid === null)
            tid = this.getSelected(); else tid = [tid];
        Ajax.remoteCall('messages', 'move_messages', {messages: tid, folder: fid}, function (json) {
            if (json.success) {
                new UserMessage(json.success, UserMessage.TYPE_SUCCESS).show();
                MessagesWindow.Telegram.fetchTelegrams();
            } else {
                new UserMessage(json.error, UserMessage.TYPE_ERROR).show();
            }
        });
    };
    MessagesWindow.Telegram.send = function () {
        var to = this.receiverInput.getValue();
        var masstele = this.masstelegramInput.isSelected();
        var subject = this.subjectInput.getValue();
        var text = this.telegramInput.getContent();
        if (!to) {
            new UserMessage("А кому пишешь-то?", UserMessage.TYPE_ERROR).show();
            return;
        }
        if (!subject || subject.length < 3) {
            new UserMessage("Тема не может быть короче 3 символов", UserMessage.TYPE_ERROR).show();
            return;
        }
        if (!text || text.length < 3) {
            new UserMessage("Текст должен быть не короче 3 символов", UserMessage.TYPE_ERROR).show();
            return;
        }
        Ajax.remoteCall('messages', 'send', {
            to: to,
            subject: subject,
            text: text,
            masstelegramm: masstele
        }, function (resp) {
            if (!resp[0]) {
                if (resp[2] != null && (resp[2][0] == 'block' || resp[2][0] == 'not_found')) {
                    new west.gui.Dialog(resp[1], "Хочешь удалить из списка получателей?", west.gui.Dialog.SYS_QUESTION).addButton("yes", function () {
                        var ls = to.split(/;|,/);
                        var blocked = {};
                        var out = [];
                        resp[2][1].each(function (el) {
                            blocked[el.toLowerCase()] = true
                        });
                        ls.each(function (el) {
                            if (!blocked[el.trim().toLowerCase()])out.push(el)
                        });
                        MessagesWindow.Telegram.receiverInput.setValue(out.join(';'));
                    }).addButton("no").show();
                } else new UserMessage(resp[1], UserMessage.TYPE_ERROR).show();
                return false;
            }
            MessagesWindow.Telegram.clearFields();
            new UserMessage("Телеграмма отправлена", UserMessage.TYPE_ERROR);
            MessagesWindow.open();
            return true;
        }, MessagesWindow);
    };
    MessagesWindow.Telegram.clearFields = function () {
        this.receiverInput.setValue('');
        this.subjectInput.setValue('');
        this.telegramInput.textarea.val('');
        this.NewTelegram = {receivers: "", topic: "", message: "", opened: false, preview: false};
    };
    MessagesWindow.Telegram.preview = function () {
        if (!this.NewTelegram.preview) {
            var text = this.telegramInput.getContent();
            if (!text || text.length < 3) {
                new UserMessage("Текст должен быть не короче 3 символов", UserMessage.TYPE_ERROR).show();
                return;
            }
            Ajax.remoteCall('messages', 'preview', {text: text}, function (res) {
                if (!res)return;
                MessagesWindow.Telegram.NewTelegram.preview = true;
                $('#msgtextarea', MessagesWindow.Telegram.DOM).hide();
                $('#newtelegram_preview', MessagesWindow.Telegram.DOM).html(res.text).show();
                $('.newtelegram .buttons, #newtelegram_bbcodes', MessagesWindow.Telegram.DOM).hide();
                $('.button_preview .textart_title', MessagesWindow.Telegram.DOM).text('Назад');
            }, MessagesWindow);
        }
        else {
            this.NewTelegram.preview = false;
            $('#newtelegram_preview', MessagesWindow.Telegram.DOM).hide();
            $('#msgtextarea, .newtelegram .buttons, #newtelegram_bbcodes', MessagesWindow.Telegram.DOM).show();
            $('.button_preview .textart_title', MessagesWindow.Telegram.DOM).text('Просмотр');
        }
    };
    var initAddressbook = function (data) {
        var table = '<div id="addressbook_list_table">';
        table += '<h4 style="position: relative; left: 0px; top: 0px; font-size: 13px;">' + 'Добавить получателя' + '<span style="position: absolute; right: 5px; top: 0px;"><a href="javascript:MessagesWindow.Telegram.toggle_addressbook();">x</a></span></h4>' + '<p style="clear: left;">&nbsp;</p>';
        if (data.town_member) {
            table += '<p><a href="javascript:MessagesWindow.Telegram.insert_to(\'insert_town_members\', \'members\');">' + 'Жители города' + '</a></p>' + '<p><a href="javascript:MessagesWindow.Telegram.insert_to(\'insert_town_members\', \'leadership\');">' + 'Городское руководство' + '</a></p>';
        }
        if (data.alliance) {
            table += '<p><a href="javascript:MessagesWindow.Telegram.insert_to(\'insert_alliance_members\', \'members\');">' + 'Члены альянса' + '</a></p>' + '<p><a href="javascript:MessagesWindow.Telegram.insert_to(\'insert_alliance_members\', \'leadership\');">' + 'Руководство альянса' + '</a></p>';
        }
        if (data.friends.length) {
            $.each(data.friends, function (ix, friend) {
                table += '<p id="addressbook_player_' + friend['id'] + '">' + '<span><a href="javascript:MessagesWindow.Telegram.insert_to(null, \'' + friend['name'].escapeHTML() + '\');">' + friend['name'].escapeHTML() + '</a></span>&nbsp;&nbsp;' + '<span style="font-size:smaller;"><a href="javascript:MessagesWindow.Telegram.delete_from_addressbook(' + friend['id'] + ');">' + 'Удалить' + '</a></span>' + '</p>';
            });
            $.each(data.others, function (ix, other) {
                table += '<p id="addressbook_player_' + other['id'] + '">' + '<span><a href="javascript:MessagesWindow.Telegram.insert_to(null, \'' + other['name'].escapeHTML() + '\');">' + other['name'].escapeHTML() + '</a></span>&nbsp;&nbsp;' + '<span style="font-size:smaller;"><a href="javascript:MessagesWindow.Telegram.delete_from_addressbook(' + other['id'] + ');">' + 'Удалить' + '</a></span>' + '</p>';
            });
        }
        if (!(data.town_member) && !data.friends.length && !data.others.length) {
            table += '<p>' + 'Твоя адресная книга пуста.' + '</p>';
        }
        table += '</div>';
        $("#addressbook_list", MessagesWindow.Telegram.DOM).empty().append(table);
    };
    MessagesWindow.Telegram.toggle_addressbook = function () {
        if ($("#addressbook", MessagesWindow.Telegram.DOM).css('display') == 'none') {
            MessagesWindow.Telegram.refresh_addressbook();
            $("#addressbook", MessagesWindow.Telegram.DOM).fadeIn();
            $("#addressbook_add", MessagesWindow.Telegram.DOM).empty().append(new west.gui.Textfield('addressbook_player_to_add').getMainDiv(), '<br /><br />').append(new west.gui.Button('Добавить', function () {
                MessagesWindow.Telegram.add_to_addressbook()
            }).getMainDiv());
        } else {
            $("#addressbook", MessagesWindow.Telegram.DOM).fadeOut();
        }
    };
    MessagesWindow.Telegram.insert_to = function (type, name) {
        var input = this.receiverInput;
        var addToList = function (rec) {
            if (input.getValue() != '') {
                var names = input.getValue().split(';');
                var newNames = rec.split(';');
                for (var i = 0; i < newNames.length; i++) {
                    names.push(newNames[i]);
                }
                input.setValue(names.join(';'));
            } else {
                input.setValue(rec);
            }
        };
        if (null === type)
            addToList(name); else {
            Ajax.remoteCall('messages', type, {type: name}, function (json) {
                if (json[0]) {
                    addToList(json[1]);
                } else {
                    new UserMessage(json[1], UserMessage.TYPE_ERROR).show();
                }
            }, MessagesWindow);
        }
    };
    MessagesWindow.Telegram.delete_from_addressbook = function (player_id) {
        Ajax.remoteCall('messages', 'delete_from_addressbook', {addressee: player_id}, function (json) {
            if (json.error) {
                new UserMessage(json.msg).show();
            } else {
                $('#addressbook_player_' + json.player_id, MessagesWindow.Telegram.DOM).fadeOut();
            }
        }, MessagesWindow);
    };
    MessagesWindow.Telegram.add_to_addressbook = function () {
        var name = $('#addressbook_player_to_add', MessagesWindow.Telegram.DOM).val();
        if (name == "") {
            new UserMessage("Пожалуйста, введи имя игрока.").show();
        } else {
            Ajax.remoteCall('messages', 'add_to_addressbook', {player_name: name}, function (json) {
                if (json.error) {
                    new UserMessage(json.msg).show();
                } else {
                    var row = '<p id="addressbook_player_' + json.player_id + '"><span><a href="javascript:MessagesWindow.Telegram.insert_to(null, \'' + (name).escapeHTML() + '\');">' + name.escapeHTML() + '</a></span>&nbsp;&nbsp;' + '<span style="font-size:smaller;"><a href="javascript:MessagesWindow.Telegram.delete_from_addressbook(' + json.player_id + ');">' + 'Удалить' + '</a></span></p>';
                    $('#addressbook_list_table', MessagesWindow.Telegram.DOM).append(row);
                }
            }, MessagesWindow);
        }
    }
    MessagesWindow.Telegram.refresh_addressbook = function () {
        Ajax.remoteCall('messages', 'get_addressbook', {}, function (json) {
            initAddressbook(json);
        }, MessagesWindow);
    };
    MessagesWindow.Report.init = function () {
        MessagesWindow.Report.DOM = $('div.messages-report');
        Ajax.remoteCall('reports', 'get_reports', {
            page: MessagesWindow.Report.currentPage,
            folder: MessagesWindow.Report.currentFolder
        }, function (json) {
            MessagesWindow.Report.pageCount = json.count;
            MessagesWindow.Report.currentPage = json.page;
            MessagesWindow.Report._initContent(json);
            ReportPublish.publishData = json.publishData;
            MessagesWindow.window.renameTab('report', 'Отчёты');
            Character.setToRead('reports', false);
        }, MessagesWindow);
    };
    MessagesWindow.Report._initContent = function (data) {
        var maindiv = $('<div class="reports"></div>');
        MessagesWindow.Report.reportsTable = new west.gui.Table().appendTo(maindiv).addColumn("rl_checkbox").addColumn("rl_title").addColumn("rl_apprpubl").addColumn("rl_date").addColumn("rl_delete").appendToCell("head", "rl_checkbox", '&nbsp;').appendToCell("head", "rl_title", 'Тема').appendToCell("head", "rl_apprpubl", '&nbsp;').appendToCell("head", "rl_date", 'Отправлено').appendToCell("head", "rl_delete", '&nbsp;');
        MessagesWindow.window.$(MessagesWindow.Report.DOM).empty().append(maindiv);
        var reports = data["reports"];
        MessagesWindow.Report.updateContent(reports);
        var that = this;
        var actionbutton = new west.gui.Button("Действия", function () {
            that.actions.toggle();
        });
        this.actions = $("<span class='actionprompt'></span>").append('<div class="background"/>' + '<div class="frame tw2gui_bg_tl"></div>' + '<div class="frame tw2gui_bg_tr"></div>' + '<div class="frame tw2gui_bg_bl"></div>' + '<div class="frame tw2gui_bg_br"></div>').append((MessagesWindow.Report.currentFolder != "all" ? ("<a href='javascript:MessagesWindow.Report.multiDelete(true);'>" + 'Очистить категорию' + "</a>") : "") + "<a href='javascript:MessagesWindow.Report.multiDelete();'>" + 'Удалить отмеченное' + "</a>" + "<a href='javascript:MessagesWindow.Report.multiChange();'>" + 'Изменить уровень доступа' + "</a>" + "<a href='javascript:ReportPublish.showLinks();'>" + 'Ссылка на выбранные отчёты' + "</a>");
        var categoryFilter = new west.gui.Combobox('folders');
        categoryFilter.addItem('all', 'Все').addItem('job', 'Работа').addItem('duel', 'Дуэли').addItem('achv', 'Достижения').addItem('fortbattle', 'Битвы').addItem('other', 'Другое').addItem('deleted', 'Удалено');
        categoryFilter.select(MessagesWindow.Report.currentFolder).addListener(function () {
            switchFilter(categoryFilter.getValue());
        });
        var pagenavi = $('<div class="rl_pagenavi"></div>').append(new west.gui.Pagebar(MessagesWindow.Report.currentPage, MessagesWindow.Report.pageCount, jump2Page).getMainDiv());
        MessagesWindow.Report.reportsTable.appendToCell("foot", "rl_checkbox", $('<input class="rl_cb_mark_allreports" type="checkbox" name="rl_mark_reports" id="rl_mark_allreports" value="all_reports" />')).appendToCell("foot", "rl_title", $("<span/>").append(actionbutton.getMainDiv()).append(this.actions)).appendToCell("foot", "rl_apprpubl", categoryFilter.getMainDiv()).appendToCell("foot", "rl_date", pagenavi);
        $('#rl_mark_allreports').click(function () {
            selectAll();
        });
    };
    MessagesWindow.Report.multiChange = function () {
        var ids = [];
        $(".reports .row input:checked", MessagesWindow.Report.DOM).each(function (k, v) {
            ids.push($(v).val());
        });
        if (ids.length)
            ReportPublish.selectPublish(ids, null);
    };
    MessagesWindow.Report.updateContent = function (reports) {
        MessagesWindow.Report.reportsTable.clearBody();
        for (var i = 0; i < reports.length; i++) {
            var rp = reports[i];
            {
                if (i == 0)
                    MessagesWindow.Report.reportData = {};
                MessagesWindow.Report.reportData[rp.report_id] = {id: rp.report_id, title: rp.title, hash: rp.hash};
                MessagesWindow.Report.reportsTable.appendRow(null, 'reportData_' + rp.report_id).appendToCell(-1, 'rl_checkbox', '<span id="rl_mark_report_' + rp.report_id + '"><input class="rl_cb_mark_report" type="checkbox" name="rl_mark_reports" id="rl_mark_report_' + rp.report_id + '" value="' + rp.report_id + '" /></span>').appendToCell(-1, 'rl_title', '<span id="rl_report_name_' + rp.report_id + '" class="rl_report_titles linkstyle" title="' + rp.popupData.escapeHTML() + '">' + rp.title + '</span>' + (rp.read ? '' : '&nbsp;&nbsp;<span class="text_bold">(' + 'новое' + ')</span>')).appendToCell(-1, 'rl_apprpubl', '<span id="rl_approval_' + rp.report_id + '" class="rl_approval">&nbsp;</span>&nbsp;<span id="rl_publish_' + rp.report_id + '" class="rl_publish" title="' + 'Ссылка на отчёт' + '">&nbsp;</span>').appendToCell(-1, 'rl_date', rp.date_received);
                if (MessagesWindow.Report.currentFolder == 'deleted')
                    MessagesWindow.Report.reportsTable.appendToCell(-1, 'rl_delete', '<span id="rl_undelete_' + rp.report_id + '" class="rl_undelete_report" title="' + 'Восстановить отчёт' + '">&nbsp;</span>'); else
                    MessagesWindow.Report.reportsTable.appendToCell(-1, 'rl_delete', '<span id="rl_delete_' + rp.report_id + '" class="rl_delete_report" title="' + 'Удалить отчёт' + '">&nbsp;</span>');
                MessagesWindow.Report.getApprovalIcon(rp.report_id, rp.publish_mode);
                $('#rl_report_name_' + rp.report_id, MessagesWindow.Report.DOM).click
                ((function (id, publHash) {
                    return function () {
                        ReportWindow.open(id, publHash);
                    }
                })(rp.report_id, rp.hash));
                $('#rl_report_name_' + rp.report_id, MessagesWindow.Report.DOM).dblclick
                ((function (id) {
                    return function () {
                        $('.report.report-' + id).css('height', $('.tw2gui_window').height() + 'px');
                    }
                })(rp.report_id));
                $('#rl_approval_' + rp.report_id, MessagesWindow.Report.DOM).click
                ((function (id, publMode) {
                    return function () {
                        ReportPublish.selectPublish(id, publMode);
                    }
                })(rp.report_id, rp.publish_mode));
                $('#rl_publish_' + rp.report_id, MessagesWindow.Report.DOM).click
                ((function (id, publHash, title) {
                    return function () {
                        ReportPublish.showLink(id, publHash, true, title);
                    }
                })(rp.report_id, rp.hash, rp.title));
                $('#rl_delete_' + rp.report_id, MessagesWindow.Report.DOM).click
                ((function (id) {
                    return function () {
                        MessagesWindow.Report.deleteReport(id);
                    }
                })(rp.report_id));
                if (MessagesWindow.Report.currentFolder == 'deleted')
                    $('#rl_undelete_' + rp.report_id, MessagesWindow.Report.DOM).click
                    ((function (id, hash) {
                        return function () {
                            MessagesWindow.Report.undeleteReport(id, hash);
                        }
                    })(rp.report_id, rp.hash));
            }
        }
    };
    var selectAll = function () {
        $('#rl_mark_allreports', MessagesWindow.Report.DOM).is(':checked') ? $('input.rl_cb_mark_report', MessagesWindow.Report.DOM).attr('checked', 'checked') : $('input.rl_cb_mark_report', MessagesWindow.Report.DOM).removeAttr('checked');
    };
    var switchFilter = function (value) {
        MessagesWindow.Report.currentFolder = value;
        MessagesWindow.Report.currentPage = 0;
        MessagesWindow.Report.init();
    };
    var jump2Page = function (page) {
        if (MessagesWindow.Report.currentPage == parseInt(page))return;
        MessagesWindow.Report.currentPage = parseInt(page);
        MessagesWindow.Report.reportsTable.clearBody();
        MessagesWindow.Report.init();
    };
    MessagesWindow.Report.deleteReport = function (report_id, reopen) {
        if (report_id == 0) {
            new UserMessage("Невозможно удалить отчёт", UserMessage.TYPE_ERROR).show();
            return false;
        }
        Ajax.remoteCall('reports', 'delete_single_report', {
            report: report_id,
            type: MessagesWindow.Report.currentFolder,
            deleted: (MessagesWindow.Report.currentFolder == 'deleted') ? true : false
        }, function (json) {
            if (json[0])
                new UserMessage("Невозможно удалить этот отчёт", UserMessage.TYPE_ERROR).show(); else {
                new UserMessage("Отчёт удалён", UserMessage.TYPE_SUCCESS).show();
                MessagesWindow.Report.init();
                if (json[1] && reopen)
                    ReportWindow.open(json[1]['report_id'], json[1]['hash'], null, true, reopen);
            }
        });
        return true;
    };
    MessagesWindow.Report.undeleteReport = function (report_id, hash) {
        if (report_id == 0) {
            new UserMessage("Невозможно восстановить этот отчёт", UserMessage.TYPE_ERROR).show();
            return false;
        }
        Ajax.remoteCall('reports', 'undelete_single_report', {report: report_id, hash: hash}, function (json) {
            if (json.error)
                new UserMessage(json.msg.escapeHTML(), UserMessage.TYPE_ERROR).show(); else {
                new UserMessage(json.msg.escapeHTML(), UserMessage.TYPE_SUCCESS).show();
                MessagesWindow.Report.init();
            }
        });
        return true;
    };
    MessagesWindow.Report.multiDelete = function (all) {
        var params = {};
        if (all) {
            params = {folder: MessagesWindow.Report.currentFolder};
        } else {
            var report_ids = [];
            $("div.reports .row input:checked", MessagesWindow.Report.DOM).each(function (k, v) {
                report_ids.push($(v).val());
            });
            if (!report_ids.length)
                return;
            params = {
                reports: report_ids.join(","),
                deleted: (MessagesWindow.Report.currentFolder == 'deleted') ? true : false
            };
        }
        Ajax.remoteCall('reports', 'delete_reports', params, function (json) {
            if (json["result"]) {
                new UserMessage("Отчёты удалены".escapeHTML(), UserMessage.TYPE_SUCCESS).show();
                $('#rl_mark_allreports', MessagesWindow.Report.DOM).removeAttr('checked');
                MessagesWindow.Report.init();
            }
            else {
                new UserMessage("Невозможно удалить этот отчёт".escapeHTML(), UserMessage.TYPE_ERROR).show();
            }
        });
    };
    MessagesWindow.Report.getApprovalIcon = function (id, publishMode) {
        var pubTitle = '';
        switch (parseInt(publishMode)) {
            case 0:
                pubTitle = 'Закрытый';
                break;
            case 1:
                pubTitle = 'Город';
                break;
            case 2:
                pubTitle = 'Альянс';
                break;
            case 3:
                pubTitle = 'Открытый';
                break;
            default:
                pubTitle = 'Закрытый';
                break;
        }
        $('#rl_approval_' + id, MessagesWindow.Report.DOM).attr('class', '').addClass('rl_approval').addClass('rl_approval_' + publishMode).attr('title', '<span class="text_bold">' + 'Доступ' + ':&nbsp;' + pubTitle + '</span>');
    };
    MessagesWindow.Report.getApprovalIcon4Button = function (id, publishMode) {
        var pubTitle, src = '';
        switch (parseInt(publishMode)) {
            case 0:
                pubTitle = 'Закрытый';
                src = 'lock_icon.png';
                break;
            case 1:
                pubTitle = 'Город';
                src = 'town_new.png';
                break;
            case 2:
                pubTitle = 'Альянс';
                src = 'alliance_new.png';
                break;
            case 3:
                pubTitle = 'Открытый';
                src = 'welt.png';
                break;
            default:
                pubTitle = 'Закрытый';
                src = 'lock_icon.png';
                break;
        }
        $('#rp_report-' + id + ' .report_head_button_displayauth .textart_title > img', MessagesWindow.Report.DOM).attr('src', 'https://westrus.innogamescdn.com/images/icons/' + src).attr('title', '<span class="text_bold">' + 'Доступ' + ':&nbsp;' + pubTitle + '</span>');
    };
    window.Messages = {
        popup: function (url, width, height) {
            var w = window.open(url, "popup", "width=" + width + ",height=" + height + ",resizable=yes,scrollbars=yes");
            w.focus();
        }
    }
})(jQuery);
;
(function ($) {
    wman.registerReloadHandler(/^telegram-\d+/, function (uid) {
        TelegramWindow.open(uid.match(/\d+/)[0]);
    });
    TelegramWindow = function (telegramid, page, appearance) {
        this.telegramid = telegramid;
        this.page = page;
        var win = this;
        win.window = wman.open("telegram-" + telegramid, "Письмо загружается", 'telegram').setMiniTitle("Письмо");
        if (appearance)win.window.restoreAppearance(appearance);
        EventHandler.signal('telegram-opened', [telegramid]);
        Ajax.remoteCall('messages', 'get_message', {tid: telegramid, page: page}, function (json) {
            if (json.error) {
                new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
                win.window.destroy();
                return;
            }
            win.window.setTitle(json.subject);
            TelegramWindow.init(json, win);
        }, win);
    };
    TelegramWindow.prototype = TelegramWindow;
    TelegramWindow.open = function (telegramid, page) {
        if (!telegramid)
            return;
        page === undefined ? page = 0 : page = page;
        return new TelegramWindow(telegramid, page);
    };
    TelegramWindow.init = function (data, win) {
        var scrollpane = new west.gui.Scrollpane(), content = $(win.window.getContentPane()).empty(), textarea = win.textarea = new west.gui.Textarea().setWidth(190).setHeight(250).setExpandable({width: 660}), bbcodes = new west.gui.Bbcodes(textarea.textarea[0]), answer = new west.gui.Button('Ответить', function () {
            TelegramWindow.answer(win);
        }).setWidth(190).addClass('telegram-answer'), nextButton = new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/arrows_up.png', function () {
            TelegramWindow.browse(win, 'next');
        }).setTitle('Следующее письмо').addClass('next'), delButton = new west.gui.Button('Удалить', function () {
            TelegramWindow.deleteTelegram(win);
        }, null, null, 'Удалить письмо').setWidth(120).addClass('delete'), prevButton = new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/arrows_down.png', function () {
            TelegramWindow.browse(win, 'previous');
        }).setTitle('Предыдущее письмо').addClass('previous'), pages = new west.gui.Pagebar(data.page, data.pages, function (page) {
            TelegramWindow.switchPage(page, win);
        }), pageFrame = new west.gui.Groupframe().appendToContentPane(pages.getMainDiv()), i;
        for (i = 0; i < data.posts.length; i++) {
            this.appendTelegram(data.posts[i], scrollpane);
        }
        scrollpane.appendContent('<br /><br />');
        if (data.ownbyme)
            content.append($('<div class="add-player" onclick="MessagesWindow.Telegram.add_player(' + data.head_id + ')" title="&lt;b&gt;' + 'Добавить игрока' + '&lt;/b&gt;"/>'));
        content.append(prevButton.getMainDiv(), delButton.getMainDiv(), nextButton.getMainDiv(), '<div class="divider"/>', scrollpane.getMainDiv(), textarea.getMainDiv(), answer.getMainDiv(), pageFrame.getMainDiv(), bbcodes.getMainDiv());
    };
    TelegramWindow.switchPage = function (page, win) {
        new TelegramWindow(win.telegramid, page, win.window.saveAppearance());
    }
    TelegramWindow.appendTelegram = function (p, e) {
        var sysmail = !p.name;
        p.title_name = p.title_name != null ? p.title_name : '';
        p.nm = sysmail ? '<i class="author system">' + "Система" + '</i>' : $("<div title='&lt;b&gt;" + p.title_name + p.name + "&lt;/b&gt;' class='author'><a class='shorten' href='javascript:void(PlayerProfileWindow.open(" + p.player_id + "))'>" + p.name.escapeHTML() + "</a></div>");
        var head = $("<div class='telegram-head'/>");
        head.append(sysmail ? '' : $("<div class='add' title='&lt;b&gt;" + 'Предложить дружбу' + "&lt;/b&gt;' onclick='javascript:FriendslistWindow.inviteIngameFriend(\"" + p.name + "\");'/>" + "<div title='&lt;b&gt;" + 'Пожаловаться' + "&lt;/b&gt;' onclick='Suggestion.showPopup(\"tel_messages\", " + p.msgid + ", " + p.player_id + ")' class='icons-affront'/>"));
        head.append(p.nm);
        head.append($("<div class='date'>" + p.post_date + "</div>"));
        e.appendContent(head);
        var post = $("<div class='telegram-post selectable'>" + Game.TextHandler.parse(p.text) + "</div><br /><br />");
        e.appendContent(post);
    };
    TelegramWindow.answer = function (win) {
        var text = win.textarea.getContent();
        Ajax.remoteCall('messages', 'reply', {message_id: win.telegramid, text: text}, function (resp) {
            if (!resp[0]) {
                new UserMessage(resp[1], UserMessage.TYPE_ERROR).show();
                return;
            }
            new TelegramWindow(win.telegramid, null, win.window.saveAppearance());
        }, win);
    };
    TelegramWindow.browse = function (win, direction) {
        win.window.setTitle("Письмо загружается");
        app = win.window.saveAppearance();
        Ajax.remoteCallMode('messages', 'switch', {
            id: win.telegramid,
            folder: MessagesWindow.Telegram.folder_id,
            direction: direction
        }, function (data) {
            win.window.destroy();
            if (data.id) {
                new TelegramWindow(data.id, null, app);
            }
        }, win.window);
    };
    TelegramWindow.deleteTelegram = function (win) {
        Ajax.remoteCall('messages', 'delete_messages', {messages: [win.telegramid]}, function (json) {
            MessagesWindow.Telegram.fetchTelegrams();
            win.window.destroy();
        }, win.window);
    };
})(jQuery);
;
(function ($) {
    window.ReportWindow = {
        window: null,
        reportId: 0,
        reportTitle: "",
        reportType: '',
        reportHash: "",
        reportInfos: {},
        publishHash: "",
        formattedDate: "",
        own: false,
        publishMode: 0,
        ownerId: null,
        ownerName: null,
        content: "",
        ReportWindow: null,
        animated: false,
        DOM: null,
        duelAnimations: {}
    };
    ReportWindow.open = function (reportId, hash, animated, page, app, simpleheader) {
        this.reportId = reportId;
        this.reportHash = hash;
        if (undefined !== animated && (animated == 1 || animated == 0)) {
            this.animated = animated;
            if (Config.get('duel.viewtype') != animated) {
                Config.set('duel.viewtype', animated);
            }
        }
        else
            this.animated = Config.get('duel.viewtype');
        ReportWindow.window = wman.open('report-' + this.reportId, 'Отчёт загружается', 'report' + ' hash-' + this.reportHash, page).setMiniTitle('Отчёт').restoreAppearance(app).appendToContentPane($('<div class="report-content selectable" id="rp_report-' + this.reportId + '"/>'));
        ReportWindow.window.setTitle('Отчёт загружается');
        $("div.reportData_" + this.reportId + " .text_bold").remove();
        ReportWindow.DOM = $('#rp_report-' + this.reportId);
        ReportWindow.init(page, simpleheader);
        ReportWindow.window.addEventListener(TWE('WINDOW_DESTROY'), function () {
            var animations = ReportWindow.duelAnimations;
            if (animations[reportId]) {
                animations[reportId].stop();
                animations[reportId] = null;
            }
        });
    };
    wman.registerReloadHandler(/^report-\d+$/, function (id, winclass) {
        var a = id.match(/report-(\d+)/);
        var b = winclass.match(/hash-([a-zA-Z0-9]+)/);
        ReportWindow.open(a[1], b[1]);
    });
    ReportWindow.init = function (page, simpleheader) {
        Ajax.remoteCallMode("reports", "show_report", {
            report_id: this.reportId,
            hash: this.reportHash || "",
            animated: this.animated,
            simpleheader: simpleheader
        }, function (json) {
            if (json.error)
                return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            ReportWindow.init_content(json);
        }, ReportWindow);
    }
    ReportWindow.init_content = function (data) {
        if (data.title) {
            ReportWindow.window.setTitle(data.title);
        }
        else {
            ReportWindow.window.setTitle("Ошибка");
            return false;
        }
        this.reportTitle = data.title;
        this.publishMode = data.publishMode;
        this.publishHash = data.publishHash;
        this.reportInfos = data.reportInfo;
        this.reportInfos['icon'] = data.reportIcon;
        this.own = data.isOwnReport;
        if (data.reportType) {
            this.reportType = data.reportType;
            ReportWindow.window.addClass('report-' + data.reportType + (this.animated ? '-animated' : ''));
        } else
            this.reportType = 'Тайна';
        this.formattedDate = data.date_received;
        this.ownerId = data.ownerId;
        this.ownerName = data.ownerName;
        this.publishData = data.publishData;
        ReportPublish.publishData = data.publishData;
        ReportWindow.buildReportHeader();
        ReportWindow.buildReportBody(data.page);
        if (data.js)
            ReportWindow.loadJavaScript(data.js);
    };
    ReportWindow.loadJavaScript = function (js) {
        try {
            $.globalEval(js);
        }
        catch (e) {
            console.log("Executing this failed: " + js, e);
        }
    };
    var hasFacebookButton = function () {
        if (!ReportWindow.reportType || !ReportWindow.reportInfos.icon)return false;
        switch (ReportWindow.reportType) {
            case'achv':
                return true;
            case'duel':
                return true;
            case'fortbattle':
                return ReportWindow.reportInfos.subtype != 'start' && ReportWindow.reportInfos.subtype != 'unsupported';
            default:
                return false;
        }
    };
    ReportWindow.buildReportHeader = function () {
        var header = $('<div class="report_head"></div>').append(ReportWindow.getDescriptionContainer(this.reportTitle, this.formattedDate), ReportWindow.getDisplayButton(this.reportId, ReportWindow.publishMode, this.publishData), ReportWindow.getLinkButton(this.reportId, this.publishHash, this.reportTitle));
        if (this.own) {
            if (hasFacebookButton()) {
                var fbshare = buildSocialMediaMessage(ReportWindow.reportType);
                header.append('<div class="fb_share_button">' + Share.getFacebookButton(encodeURI(fbshare.image), encodeURI(fbshare.title), encodeURI(fbshare.text), fbshare.url) + '</div>');
            }
            header.append(ReportWindow.getPreviousButton(this.reportId), ReportWindow.getDeleteButton(this.reportId), ReportWindow.getNextButton(this.reportId));
        } else {
            header.append(ReportWindow.getProfileLink(ReportWindow.ownerId, ReportWindow.ownerName));
        }
        $(ReportWindow.DOM).empty().append(header);
        MessagesWindow.Report.getApprovalIcon4Button(this.reportId, this.publishMode);
    };
    var getFortReportMessage = function () {
        var mess = '';
        if (ReportWindow.reportInfos.subtype == 'declare') {
            if (ReportWindow.reportInfos.hasOwnProperty('attacker_town'))
                mess = s('Объявлена война форту %1. %2 из г. %3 откопал топор войны!', ReportWindow.reportInfos.fortname, ReportWindow.reportInfos.attacker, ReportWindow.reportInfos.attacker_town);
            if (ReportWindow.reportInfos.hasOwnProperty('battle_date') && ReportWindow.reportInfos.battle_date) {
                var d = new Date(ReportWindow.reportInfos.battle_date * 1000);
                mess += ' ' + s('Битва за форт начнётся %1 в %2.', d.toDateString(), d.toTime());
            }
            else if (ReportWindow.reportInfos.hasOwnProperty('battle_delta') && ReportWindow.reportInfos.battle_delta > 0) {
                var d = new Date((ReportWindow.reportInfos.battle_delta * 1000) + new Date().getTime());
                mess += ' ' + s('Битва за форт начнётся %1 в %2.', d.toDateString(), d.toTime());
            }
        }
        else if (ReportWindow.reportInfos.subtype == 'result') {
            if (ReportWindow.reportInfos.won) {
                mess += s(sextext('%1 стал героем дня и захватил форт %2', '%1 стала героем дня и захватила форт %2', Character.charSex), Character.name, ReportWindow.reportInfos.fortname);
                if (ReportWindow.reportInfos.killed)
                    mess += ' ' + s(sextext('Покинув укрытие, %1 схватил пулю и лишился сознания', 'Покинув укрытие, %1 схватила пулю и лишилась сознания', Character.charSex), Character.name); else if (ReportWindow.reportInfos.hurt > 0)
                    mess += ' ' + s(sextext('%1 ранен.', '%1 ранена.', Character.charSex), Character.name); else
                    mess += ' ' + s(sextext('%1 вышел из боя без единой царапины.', '%1 вышла из боя без единой царапины.', Character.charSex), Character.name);
            }
            else {
                mess += s(sextext('%1 храбро сражался, но форт %2 всё равно был потерян.', '%1 храбро сражалась, но форт %2 всё равно был потерян.', Character.charSex), Character.name, ReportWindow.reportInfos.fortname);
                if (ReportWindow.reportInfos.killed)
                    mess += ' ' + s(sextext('Получив ранение, %1 потерял сознание и очнулся уже в отеле.', 'Получив ранение, %1 потеряла сознание и очнулась уже в отеле.', Character.charSex), Character.name); else if (ReportWindow.reportInfos.hurt > 0)
                    mess += ' ' + s(sextext('Раненый первым же выстрелом, %1 притворился мёртвым и под шумок слинял в кусты.', 'Ранена первым же выстрелом, %1 притворилась мёртвой и под шумок слиняла в кусты.', Character.charSex), Character.name); else
                    mess += ' ' + s(sextext('Быстро поняв, что недооценил противника, %1 поспешил убраться подальше.', 'Быстро поняв, что недооценила противника, %1 поспешила убраться подальше.', Character.charSex), Character.name);
            }
        }
        return mess;
    };
    var buildSocialMediaMessage = function (type) {
        var message = {};
        message['title'] = ReportWindow.reportTitle;
        message['image'] = ReportWindow.reportInfos.icon;
        message['url'] = Player.friendsref.replace('west_invite', 'west_invite_facebo_' + type);
        switch (type) {
            case'achv':
                message['text'] = 'Новое достижение в The West' + ': ' + ReportWindow.reportTitle;
                break;
            case'duel':
                message['text'] = (ReportWindow.reportInfos.was_attacker ? s('%1 и %2 готовы для дуэли.', Character.name, ReportWindow.reportInfos.oppn_name || '?') : s('%1 и %2 встали напротив друг друга перед салуном.', Character.name, ReportWindow.reportInfos.oppn_name || '?')) + ' ' +
                    (ReportWindow.reportInfos.won ? s('Раздаётся выстрел! %1 игрок был быстрее, его противник упал лицом в грязь.', ReportWindow.reportInfos.winner_name) : s('Раздаётся выстрел и %1 падает лицом в грязь.', Character.name));
                break;
            case'fortbattle':
                message['text'] = getFortReportMessage();
                message['url'] = message.url.replace('fortbattle', 'fort');
                break;
            default:
                message['text'] = 'Новости The West' + ': ' + ReportWindow.reportTitle;
        }
        return message;
    };
    ReportWindow.buildReportBody = function (content) {
        var body = $('<div class="report_xhtml"></div>').append(content);
        $(ReportWindow.DOM).append(body);
        if (this.animated != 1 && !$.browser.msie) {
            var tmp = $('div.report_xhtml page', ReportWindow.DOM).html();
            $('div.report_xhtml page', ReportWindow.DOM).remove();
            $('div.report_xhtml', ReportWindow.DOM).html(tmp);
        }
    };
    ReportWindow.getDescriptionContainer = function (report_type, formatted_date) {
        return '<div class="report_head_container_desc shorten">' + '<span title="' + report_type + '" class="report_head_report_type">' + report_type + '</span><br/>' + '<span class="report_head_report_date">' + formatted_date + '</span></div>';
    };
    ReportWindow.getLinkButton = function (report_id, publishHash, title) {
        var tdLink = $('<div class="report_head_button_publishlink"></div>');
        var butLink = new west.gui.Button('<img src="https://westrus.innogamescdn.com/images/icons/link_icon.png" />', function () {
            ReportPublish.showLink(report_id, publishHash, false, title);
        }, null, null).setMinWidth(35).getMainDiv();
        tdLink.attr('title', '<span class="text_bold">' + 'Ссылка на отчёт' + '</span>').append(butLink);
        return tdLink;
    };
    ReportWindow.getDisplayButton = function (report_id, publishMode, publishData) {
        if (ReportWindow.own) {
            var pubTitle = '';
            switch (parseInt(publishMode)) {
                case 0:
                    pubTitle = 'Закрытый';
                    break;
                case 1:
                    pubTitle = 'Город';
                    break;
                case 2:
                    pubTitle = 'Альянс';
                    break;
                case 3:
                    pubTitle = 'Открытый';
                    break;
                default:
                    pubTitle = 'Закрытый';
                    break;
            }
            var tdEye = $('<div class="report_head_button_displayauth"></div>');
            var butEye = new west.gui.Button('<span class="rp_approval mode_' + publishMode + '" />', function () {
                ReportPublish.selectPublish(report_id, publishMode, publishData);
            }, null, null).setMinWidth(35).getMainDiv();
            tdEye.attr('title', '<span class="text_bold">' + 'Доступ' + ':&nbsp;' + pubTitle + '</span>').append(butEye);
            return tdEye;
        }
        else {
            return $('<div class="report_head_button_displayauth">&nbsp;</div>');
        }
    };
    ReportWindow.getPreviousButton = function (report_id) {
        var tdPrev = $('<div class="report_head_button_previous"></div>');
        var butPrev = new west.gui.Button('<img src="https://westrus.innogamescdn.com/images/icons/arrows_down.png" />', function () {
            ReportWindow.getPreviousReport(report_id);
        }, null, null).setMinWidth(40).getMainDiv();
        tdPrev.attr('title', '<span class="text_bold">' + 'Предыдущий отчёт' + '</span>').append(butPrev);
        return tdPrev;
    };
    ReportWindow.getDeleteButton = function (report_id) {
        var tdDel = $('<div class="report_head_button_delete"></div>');
        var butDel = new west.gui.Button('Удалить', function () {
            ReportWindow.viewDeleteReport(report_id)
        }, null, null).setWidth(80).getMainDiv();
        tdDel.attr('title', '<span class="text_bold">' + 'Удалить этот отчёт' + '</span>').append(butDel);
        return tdDel;
    };
    ReportWindow.getNextButton = function (report_id) {
        var tdNext = $('<div class="report_head_button_next"></div>');
        var butNext = new west.gui.Button('<img src="https://westrus.innogamescdn.com/images/icons/arrows_up.png" />', function () {
            ReportWindow.getNextReport(report_id)
        }, null, null).setMinWidth(40).getMainDiv();
        tdNext.attr('title', '<span class="text_bold">' + 'Следующий отчёт' + '</span>').append(butNext);
        return tdNext;
    };
    ReportWindow.getProfileLink = function (ownerId, ownerName) {
        var profileTh = $('<div class="report_head_button_showprofile"></div>');
        var profileLink = $('<a href="#">' + ownerName + '</a>');
        profileLink.click(function () {
            PlayerProfileWindow.open(ownerId)
        });
        profileTh.append(profileLink);
        return profileTh;
    };
    ReportWindow.switchDuel = ReportWindow.open;
    ReportWindow.browse = function (id, next) {
        var win = wman.getById("report-" + id);
        if (!win)return;
        win.setTitle("Отчёт загружается");
        var app = win.saveAppearance();
        Ajax.remoteCallMode("reports", "get_" + (next ? "next" : "previous") + "_report", {
            report_id: id,
            type: MessagesWindow.Report.currentFolder
        }, function (data) {
            win.destroy();
            if (data.id) {
                ReportWindow.open(data.id, data.hash, null, data, app);
            }
        });
    };
    ReportWindow.getNextReport = function (id) {
        ReportWindow.browse(id, true)
    };
    ReportWindow.getPreviousReport = ReportWindow.browse;
    ReportWindow.viewDeleteReport = function (report_id) {
        var win = wman.getById("report-" + report_id);
        if (!win)return;
        win.setTitle("Отчёт будет удалён");
        MessagesWindow.Report.deleteReport(report_id, win.saveAppearance());
        win.destroy();
    };
    window.Reports = {
        show: function (id, hash) {
            ReportWindow.open(id, hash);
        }
    };
})(jQuery);
var ReportPublish = {
    publishData: null,
    reportIds: null,
    currentMode: null,
    selectedMode: null,
    changedCache: [],
    selectPublish: function (reportIds, currentMode) {
        if (ReportPublish.publishData === null)return;
        if (typeof reportIds == "object") {
        }
        else if (parseInt(reportIds) != NaN) {
            reportIds = [parseInt(reportIds)];
        }
        else {
            return;
        }
        this.reportIds = reportIds;
        if (reportIds.length > 1) {
            currentMode = 0;
        }
        else {
            if (this.changedCache[reportIds[0]] !== undefined) {
                currentMode = this.changedCache[reportIds[0]];
            }
        }
        this.currentMode = currentMode;
        var onclick, ic;
        var xhtml = '<div id="report-publish-container">';
        var that = this;
        ReportPublish.publishData.each(function (data) {
            if (currentMode == data['publishId'])that.selectedMode = data['publishId'];
            onclick = 'onclick="ReportPublish.selectedMode = ' + data['publishId'] + '" ';
            ic = '<img src="' + data['imagePath'] + '" alt="" style="margin-top: -6px;" />';
            xhtml += '<div style="padding: 5px;"><label>';
            xhtml += '<input type="radio" id="publishMode_' + data['publishId'] + '" name="publishMode" ' + onclick + (currentMode == data['publishId'] ? 'checked="checked"' : '') + ' value="' + data['publishId'] + '"> ' + ic + ' ' + data['name'] + '';
            xhtml += '<span style="display: block; font-size: 10px; padding-left: 25px;">' + data['description'] + '</span>';
            xhtml += '</label></div>';
        });
        var reportTitle;
        if (reportIds.length > 1) {
            reportTitle = 'Выбрано несколько отчётов';
        } else {
            if ($('#rl_report_name_' + reportIds[0]).length) {
                reportTitle = $('#rl_report_name_' + reportIds[0]).html();
            } else if ($('.report_head_report_type', $('#rp_report-' + reportIds[0]))[0]) {
                reportTitle = $('.report_head_report_type', $('#rp_report-' + reportIds[0]))[0].innerHTML;
            } else if (reportIds[0] == 0) {
                reportTitle = 'Tutorial';
            }
        }
        var header = '<div>' + 'Изменить уровень доступа' + '</div>';
        if (reportTitle)
            header += '<span style="font-size: 10px;">(' + reportTitle + ')</span>';
        new west.gui.Dialog(header, xhtml).addButton('ok', function () {
            if (reportIds[0] != 0)ReportPublish.changePublish();
        }).addButton('cancel').show();
    },
    changePublish: function () {
        if (null === this.reportIds || (this.currentMode == this.selectedMode && this.reportIds.length == 1)) {
            return;
        }
        var that = this;
        Ajax.remoteCall('reports', 'change_publish', {
            reportIds: JSON.stringify(that.reportIds),
            selectedMode: that.selectedMode
        }, function (data) {
            if (data.error) {
                new UserMessage(data.error, UserMessage.TYPE_ERROR).show();
                return;
            } else {
                new UserMessage(data.success, UserMessage.TYPE_SUCCESS).show();
                var reportId;
                for (var i = 0; i < that.reportIds.length; i++) {
                    reportId = that.reportIds[i];
                    that.changedCache[reportId] = that.selectedMode;
                    var tmpSel = $('div.report-' + reportId);
                    $('div.report_head_button_displayauth', tmpSel).replaceWith(ReportWindow.getDisplayButton(reportId, that.selectedMode));
                    MessagesWindow.Report.getApprovalIcon(reportId, that.selectedMode);
                    MessagesWindow.Report.getApprovalIcon4Button(reportId, that.selectedMode);
                }
                that.reportIds = null;
            }
        });
    },
    showLink: function (reportId, hash, listMode, title) {
        new west.gui.Dialog('Ссылка на отчёт').addButton('ok').setText('<div style="text-align: center;">BBCode: ' + '<input type="text" class="input_layout" readonly="readonly" style="text-align: center;" size="35" name="report_bbcode" value="[report=' +
            reportId + hash + ']' + title.escapeHTML() + '[/report]" onclick="this.select();" /></div>').show();
    },
    showLinks: function () {
        var res = "";
        var el = $('input[name=rl_mark_reports]');
        var reportId = 0;
        var reportTitle = null;
        var hash = "";
        for (var i = 0; i < el.length; i++) {
            if (el[i].checked) {
                reportId = el[i].value;
                if (reportId == "all_reports")continue;
                reportTitle = MessagesWindow.Report.reportData[reportId].title;
                hash = MessagesWindow.Report.reportData[reportId].hash;
                res += '[report=' + reportId + hash + ']' + reportTitle.escapeHTML() + '[/report]\n';
            }
        }
        if (!res)
            return;
        new west.gui.Dialog('Ссылка на отчёт').addButton('ok').setText('<div style="text-align: center;">BBCode: ' + '<textarea class="input_layout" readonly="readonly" cols="40" rows="6" style="text-align: center;" name="report_bbcode" onclick="this.select();">' + res + '</textarea></div>').show();
    }
};

(function ($) {
    OptionsButler = {
        lang: null,
        email: null,
        profile: null,
        signature: null,
        avatar: null,
        activities: null,
        vacation: null,
        deleteacc: null,
        ponyexpress: null,
        migration: null
    }
    OptionsButler.init = function (window, callback) {
        this.window = window;
        var that = this;
        Ajax.remoteCall("settings", "settings", {}, function (resp) {
            for (var key in resp) {
                if (undefined !== that[key])
                    that[key] = resp[key];
            }
            if (callback)
                callback();
        }, window);
    }
    OptionsButler.changePassword = function (old, newpw, retype) {
        Ajax.remoteCall("settings", "change_password", {
            password: newpw,
            password_repeat: retype,
            old_password: old
        }, function (resp) {
            new UserMessage(resp.msg, resp.error ? UserMessage.TYPE_ERROR : UserMessage.TYPE_SUCCESS).show();
        }, this.window);
    }
    OptionsButler.changeEmail = function (email, password) {
        Ajax.remoteCall("settings", "change_email", {email: email, password: password}, function (resp) {
            new UserMessage(resp.msg, resp.error ? UserMessage.TYPE_ERROR : UserMessage.TYPE_SUCCESS).show();
        }, this.window);
    }
    OptionsButler.changeProfileText = function (text) {
        Ajax.remoteCall("settings", "save_text", {text: text}, function (resp) {
            if (resp[0]) {
                new UserMessage("Текст сохранён", UserMessage.TYPE_SUCCESS).show();
            } else {
                new UserMessage(resp[1], UserMessage.TYPE_ERROR).show();
            }
        }, this.window);
    }
    OptionsButler.saveSignature = function (text) {
        Ajax.remoteCall("settings", "save_signature_text", {text: text}, function (resp) {
            new UserMessage(resp.msg, resp.error ? UserMessage.TYPE_ERROR : UserMessage.TYPE_SUCCESS).show();
        }, this.window);
    }
    OptionsButler.activateVacation = function () {
        Ajax.remoteCall("settings", "activate_holiday", {}, function (resp) {
            if (resp.error)
                return new UserMessage(resp.error).show();
            window.location.replace('/');
        }, this.window);
    }
    OptionsButler.deleteAccount = function (password) {
        Ajax.remoteCall("settings", "delete", {password: password}, function (resp) {
            if (resp.error)
                return new UserMessage(resp.msg).show();
            window.location.replace('/');
        }, this.window);
    }
    OptionsButler.activateRedeem = function (code) {
        Ajax.remoteCall("settings", "bonus", {code: code}, function (resp) {
            if (resp.error)
                return new UserMessage(resp.msg).show();
            var ls = ["<div style='text-align:center'>"];
            ls.push("<div class='bag_item' id='item_use_content'></div>");
            window.setTimeout(function () {
                $('#item_use_content').append(new tw2widget.Item(ItemManager.get(resp.data)).getMainDiv())
            }, 100);
            new west.gui.Dialog("Промо-код использован").setText("<div style='text-align:center'>"
                + 'Внутри:' + ls.join("")
                + "</div><br clear='all' />").addButton('ok').show();
        });
    }
    OptionsButler.updatePonyExpress = function () {
        var d = {};
        $.each(this.ponyexpress, function (i, noti) {
            d[noti.name] = noti.checked == 1 ? "on" : false;
        });
        Ajax.remoteCall("settings", "submit_ponyExpress", d, function (resp) {
            if (resp[0]) {
                new UserMessage("Настройки Пони-экспресс сохранены", UserMessage.TYPE_SUCCESS).show();
            } else {
                new UserMessage(resp.msg).show();
            }
        }, this.window);
    }
    OptionsButler.submitMigration = function (worldid, password) {
        Ajax.remoteCall("settings", "request_migration", {world_id: worldid, password: password}, function (resp) {
            if (resp.error)
                return new UserMessage(resp.msg).show();
            new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
            window.location.replace('/');
        }, this.window);
    }
    OptionsWindow = function () {
    };
    var getLabeledInput = function (label, inp) {
        var wrap = $("<div />");
        wrap.append("<span style='display: inline-block;" + "font-weight: bold; width: 150px;'>" + label + "</span>", inp.getMainDiv());
        return wrap;
    }
    OptionSub = function (name) {
        this.name = name;
    }
    OptionSub.prototype.init = function () {
    }
    OptionSub.prototype.isEnabled = function () {
        return true;
    }
    PasswordSub = function () {
        this.id = "password";
        this.name = "Сменить пароль";
    }
    PasswordSub.prototype = new OptionSub;
    PasswordSub.prototype.init = function (parent, content) {
        this.parent = parent;
        var c = $("<div style='padding: 20px;'/>");
        c.append("<p>" + "Здесь ты можешь изменить свой пароль. Для этого введи старый и новый пароли. Новый пароль тебе следует написать дважды." + "</p>");
        c.append("<p>" + "Если ты забыл старый пароль, можешь получить новый, кликнув на главной странице игры «Сменить пароль»." + "</p>");
        c.append("<p>" + "Пароль будет изменён для всех миров и не нуждается в подтверждении по E-mail." + "</p>");
        var oldpw = new west.gui.Textfield(null, 'password');
        var newpw = new west.gui.Textfield(null, 'password');
        var retypepw = new west.gui.Textfield(null, 'password').addListener(function () {
            OptionsButler.changePassword(oldpw.getValue(), newpw.getValue(), retypepw.getValue());
        });
        var changebtn = new west.gui.Button("Сменить пароль", function () {
            OptionsButler.changePassword(oldpw.getValue(), newpw.getValue(), retypepw.getValue());
        });
        c.append("<br/>", new west.gui.Groupframe().appendToContentPane(getLabeledInput("Старый пароль:", oldpw), getLabeledInput("Новый пароль:", newpw), getLabeledInput("Повторить:", retypepw)).getMainDiv(), new west.gui.Groupframe().appendToContentPane($("<div style='text-align: right;'/>").append(changebtn.getMainDiv())).getMainDiv());
        content.append(c);
    }
    PasswordSub.prototype.getInputHtml = function (label, inp) {
        var wrap = $("<div />");
        wrap.append("<span style='display: inline-block;" + "font-weight: bold; width: 150px;'>" + label + "</span>", inp.getMainDiv());
        return wrap;
    }
    EmailSub = function () {
        this.id = "email";
        this.name = "Сменить E-mail";
    }
    EmailSub.prototype = new OptionSub;
    EmailSub.prototype.init = function (parent, content) {
        this.parent = parent;
        var resp = OptionsButler.email
        var c = $("<div style='padding: 20px;'/>");
        c.append("<p>" + "Ты получишь E-mail на новый адрес, который тебе следует подтвердить. E-mail будет отправлен также на старый адрес. Изменения могут быть отменены со старого адреса в течение 14 дней." + "</p><br/>");
        c.append("<p>" + "Вход под чужим аккаунтом наказуем. В случае незаконного изменения E-mail (например, с помощью краденого пароля) мы передадим настоящему владельцу лог-файлы." + "</p><br/>");
        var validtxt = resp.email_valid ? "" : " <a href='" + Game.masterURL + "/?page=confirm_email'" + "style='color: red;'>(" + "Активировать" + ")</a>";
        c.append(new west.gui.Groupframe().appendToContentPane("Текущий E-mail:" + " <strong>" + resp.email + validtxt + "</strong>").getMainDiv());
        if (resp.portal) {
            var p = $("<div style='font-weight: bold; text-align: center;'/>");
            var that = this;
            var btn = new west.gui.Button("Изменить E-mail", function () {
                that.openPortalEmail();
            });
            p.append("<br />", btn.getMainDiv());
            c.append(p);
        } else {
            var email = new west.gui.Textfield();
            var pw = new west.gui.Textfield(null, 'password');
            var sub = new west.gui.Button("Изменить", function () {
                OptionsButler.changeEmail(email.getValue(), pw.getValue());
            });
            c.append("<br />", getLabeledInput("E-mail", email), getLabeledInput("Пароль", pw), $("<div style='padding-top:10px;float:right;'/>").append(sub.getMainDiv()));
        }
        content.append(c);
    }
    EmailSub.prototype.getInputHtml = function (label, inp) {
        var wrap = $("<div />");
        wrap.append("<span style='display: inline-block;" + "font-weight: bold; width: 150px;'>" + label + "</span>", inp.getMainDiv());
        return wrap;
    }
    EmailSub.prototype.openPortalEmail = function () {
        var wnd = wman.open("portalemail", null, "portalemail noreload").setMiniTitle("E-mail").setSize(750, 510).setTitle("Изменить E-mail");
        $(wnd.getMainDiv()).css("")
        Ajax.remoteCallMode("settings", "email_iframe", {}, function (r) {
            wnd.appendToContentPane(r.page);
        }, wnd);
    }
    ProfileSub = function () {
        this.id = "profile";
        this.name = "Свой текст";
    }
    ProfileSub.prototype = new OptionSub;
    ProfileSub.prototype.init = function (parent, content) {
        this.parent = parent;
        this.parsed = $("<div class='profile_parsed' />");
        var resp = OptionsButler.profile;
        if (undefined == this.textarea) {
            this.textarea = new west.gui.Textarea().setWidth(430).setHeight(215);
            this.textarea.setContent(resp);
        }
        this.bbcode = new west.gui.Bbcodes(this.textarea);
        var that = this;
        this.submitbtn = new west.gui.Button("Подтвердить", function () {
            OptionsButler.changeProfileText(that.textarea.getContent());
        });
        this.previewbtn = new west.gui.Button("Просмотр", function () {
            that.setPreview(!that.isPreview);
        });
        this.setPreview(false);
        content.append(new west.gui.Groupframe().appendToContentPane(this.bbcode.getMainDiv(), this.textarea.getMainDiv(), this.parsed).getMainDiv(), new west.gui.Groupframe().appendToContentPane($("<div style='text-align: right;'/>").append(this.submitbtn.getMainDiv(), this.previewbtn.getMainDiv())).getMainDiv());
    }
    ProfileSub.prototype.setPreview = function (state) {
        this.isPreview = state;
        this.previewbtn.setCaption(this.isPreview ? "Редактировать" : "Просмотр");
        this.parsed.css("display", this.isPreview ? "inline-block" : "none");
        this.textarea.getMainDiv().css("display", !this.isPreview ? "inline-block" : "none");
        if (this.isPreview) {
            var that = this;
            Ajax.remoteCall("settings", "get_parsed_text", {text: this.textarea.getContent()}, function (resp) {
                that.parsed.empty();
                that.parsed.append(Game.TextHandler.parse(resp.parsed_text));
            }, this.parent.parent);
        }
    }
    SignatureSub = function () {
        this.id = "signature";
        this.name = "Подпись";
    }
    SignatureSub.prototype = new OptionSub;
    SignatureSub.prototype.init = function (parent, content) {
        this.parent = parent;
        var resp = OptionsButler.signature;
        var pid = Character.playerId, txsize = 49;
        var sigwrap = $("<div />");
        sigwrap.append("<div style='font-weight: bold;'>" +
            "Здесь ты можешь ввести текст, который будет показан на некоторых из этих подписей." + "</div>");
        var sigtxtf = new west.gui.Textfield().setSize(35).setValue(resp.sigtext).addListener(function (txt) {
            OptionsButler.saveSignature(txt);
        });
        sigwrap.append(sigtxtf.getMainDiv(), new west.gui.Button("ОК", function () {
            OptionsButler.saveSignature(sigtxtf.getValue());
        }).getMainDiv());
        content.append(new west.gui.Groupframe().appendToContentPane(sigwrap).getMainDiv());
        $.each(resp.signatures, function (i, sigid) {
            var wrap = $("<div style='padding-top: 10px;' />");
            wrap.append($("<img src='img.php?type=sig&design=" + sigid
                + "&player_id=" + pid + "&time=" + resp.time + "'/>"));
            var bb = new west.gui.Textfield();
            bb.setValue("[url=" + Game.masterURL + "][img]" +
                resp.url + "/img.php?type=sig&design=" + sigid + "&player_id=" + pid + "[/img][/url]");
            bb.click(function () {
                this.focus();
                this.select();
            });
            bb.setSize(txsize);
            var ht = new west.gui.Textfield();
            ht.setValue('<a href="' + Game.masterURL + '">' + '<img src="' + resp.url + '/img.php?type=sig&design=' + sigid
                + '&player_id=3"/>' + '</a>');
            ht.click(function () {
                this.focus();
                this.select();
            });
            ht.setSize(txsize);
            wrap.append(bb.getMainDiv());
            wrap.append(ht.getMainDiv());
            content.append(wrap);
        });
    }
    AvatarSub = function () {
        this.id = "avatar";
        this.name = "Портрет";
    }
    AvatarSub.prototype = new OptionSub;
    AvatarSub.prototype.init = function (parent, content) {
        var resp = OptionsButler.avatar;
        var c = $("<div style='padding: 10px;'/>");
        c.append("Ты можешь сохранить этот портрет на своём компьютере.");
        var wrap = $("<div />");
        if (resp.oldavatar) {
            $.each([resp.oldavatar, resp.oldavatarsmall], function (i, k) {
                var e = $("<div style='float:left;margin-left:20px;'/>");
                e.append("<img src='" + k + "'/>");
                wrap.append(e);
            });
        } else {
            for (var w in resp.sizes) {
                var h = resp.sizes[w];
                var e = $("<div style='float:left;margin-left:20px;'/>");
                e.append("<img src='img.php?type=own_avatar&x=" + w
                    + "&y=" + h + "'/>");
                wrap.append(e);
            }
        }
        c.append(new west.gui.Groupframe().appendToContentPane(wrap.append("<div style='clear:both;' />")).getMainDiv());
        content.append(c);
    }
    ActivitiesSub = function () {
        this.id = "activities";
        this.name = "Заходы в игру";
    }
    ActivitiesSub.prototype = new OptionSub;
    ActivitiesSub.prototype.init = function (parent, content) {
        var resp = OptionsButler.activities;
        var c = $("<div style='padding: 5px;' />");
        c.append("Последний заход:" + " <strong>" +
            resp.lastLogin + "</strong>");
        var table = new west.gui.Table().addColumn("ip").addColumn("date").addColumn("status").appendToCell("head", "ip", " IP-адрес").appendToCell("head", "date", "Дата").appendToCell("head", "status", "Статус");
        $.each(resp.login_list, function (i, login) {
            var status = "";
            if (login.failed) {
                status = "<span style='color: maroon;'>" +
                    "Неудача" + "</span>";
            } else {
                status = "<span style='color: green;'>" +
                    "Успех" + "</span>";
            }
            table.appendRow().appendToCell(-1, 'ip', login.ip).appendToCell(-1, 'date', login.login_date).appendToCell(-1, 'status', status);
        });
        c.append(table.getMainDiv());
        content.append(c);
    }
    DeleteAccountSub = function () {
        this.id = "deleteaccount";
        this.name = "Удалить персонаж";
    }
    DeleteAccountSub.prototype = new OptionSub;
    DeleteAccountSub.prototype.init = function (parent, content) {
        var resp = OptionsButler.deleteacc;
        var c = $("<div style='padding: 20px;'/>");
        c.append("Начать игру заново ты сможешь только после удаления персонажа." + ' ');
        c.append(ngettext("Твой персонаж будет удалён через %d день.", new Array("Твой персонаж будет удалён через %d день.", "Твой персонаж будет удалён через %d дня.", "Твой персонаж будет удалён через %d дней."), resp.delete_days).replace("%d", resp.delete_days) + ' ');
        c.append("Персонаж будет удалён только в этом мире. Записи на форуме и в других мирах сохраняются.", "<br/><br/>");
        var pwdinput = new west.gui.Textfield(null, 'password');
        var btn = new west.gui.Button("Удалить", function () {
            OptionsButler.deleteAccount(pwdinput.getValue());
        });
        c.append(new west.gui.Groupframe().appendToContentPane(getLabeledInput("Пароль:", pwdinput)).getMainDiv(), new west.gui.Groupframe().appendToContentPane($("<div style='text-align:right;'/>").append(btn.getMainDiv())).getMainDiv());
        content.append(c);
    }
    RedeemBonusSub = function () {
        this.id = "redeembonus";
        this.name = "Промо-коды";
    }
    RedeemBonusSub.prototype = new OptionSub;
    RedeemBonusSub.prototype.init = function (parent, content) {
        var c = $("<div style='padding: 20px;'/>");
        c.append("Здесь можно ввести промо-код и получить за это что-нибудь полезное.", " ", "Промо-коды можно получить на конкурсах или других акциях.", "<br />");
        var input = new west.gui.Textfield().addListener(function (txt) {
            OptionsButler.activateRedeem(input.getValue());
        });
        var btn = new west.gui.Button("Использовать", function () {
            OptionsButler.activateRedeem(input.getValue());
        });
        c.append(getLabeledInput("Код:", input), $("<div style='padding-top:20px;float:right;'/>").append(btn.getMainDiv()));
        content.append(c);
    }
    MigrationSub = function () {
        this.id = "migration";
        this.name = "Переселение";
    }
    MigrationSub.prototype = new OptionSub;
    MigrationSub.prototype.isEnabled = function () {
        return OptionsButler.migration.available;
    }
    MigrationSub.prototype.init = function (parent, content) {
        var resp = OptionsButler.migration;
        var c = $("<div style='padding: 8px;'/>");
        c.append("Здесь ты можешь переселить персонаж в другой мир.<br />\nВторой раз переселиться в тот же мир можно только спустя 90 дней.<br />\nОбрати внимание, что следующее <b>не</b> будет перенесено:<br /><br />");
        var ul = $("<ul/>");
        $.each(["Отчёты", "Почта", "Твой нынешний город", "Твои форты"], function (i, v) {
            ul.append($("<li>" + v + "</li>"));
        });
        c.append(ul);
        c.append("<br />", "Для получения дополнительной информации загляни на форум игры.", "<br/><br/>");
        var sel = $("<select name='world_id' id='world_id'/>");
        $.each(resp.mergeto, function (i, v) {
            sel.append("<option value='" + v.id + "'>" + v.name + "</option>");
        });
        var pwdinput = new west.gui.Textfield(null, 'password');
        var btn = new west.gui.Button("Переселение", function () {
            OptionsButler.submitMigration(sel.val(), pwdinput.getValue());
        });
        c.append(sel, "<br /><br/>", getLabeledInput("Пароль:", pwdinput), $("<div style='padding-top:10px;'/>").append(btn.getMainDiv()));
        content.append(c);
    }
    PonyExpressSub = function () {
        this.id = "ponyexpress";
        this.name = "Пони-экспресс";
    }
    PonyExpressSub.prototype = new OptionSub;
    PonyExpressSub.prototype.init = function (parent, content) {
        var notactivated = "";
        if (!OptionsButler.email.email_valid) {
            notactivated = $("<div class='emailnotactivated'>").append("Чтобы использовать Пони-экспресс, необходимо активировать свой E-mail.", "<br /><br />", new west.gui.Button("Активировать", function () {
                OptionsWindow.open('account', 'email');
            }).getMainDiv());
        }
        var resp = OptionsButler.ponyexpress, ul = $("<ul />");
        for (var i = 0; i < resp.length; i++) {
            var notification = resp[i], checkbox = new west.gui.Checkbox(notification.description);
            checkbox.setSelected(1 == notification.checked).setCallback(function (notification, state) {
                notification.checked = state ? "1" : "0"
            }.bind(this, notification));
            ul.append($("<li />").append(checkbox.getMainDiv()));
        }
        content.append("<div style='padding: 10px'>"
            + "Ты можешь получать оповещения об интересующих тебя событиях."
            + "</div>", new west.gui.Groupframe().appendToContentPane("<h4>" + "Уведомлять по E-mail о:" + "</h4>", ul, new west.gui.Button("ОК", function () {
            OptionsButler.updatePonyExpress();
        }).setWidth(145).getMainDiv(), "<div class='pony_logo' />", notactivated).getMainDiv());
    }
    SupportSub = function () {
        this.id = "support";
        this.name = "Поддержка";
    }
    SupportSub.prototype = new OptionSub;
    SupportSub.prototype.init = function (parent, content) {
        var that = this;
        var reopen = new west.gui.Button("Повторно открыть окно", function () {
            that.openFrame();
        });
        var c = $("<div style='padding-top: 125px; text-align: center;'/>");
        c.append("<div style='padding: 15px;'>" +
            "Откроется новое окно, в котором можно будет обратиться в поддержку." + "</div>");
        c.append(reopen.getMainDiv());
        content.append(c);
        this.openFrame();
    }
    SupportSub.prototype.openFrame = function () {
        var url = "game.php?window=settings&mode=support";
        var width = 800;
        var height = 660;
        window.open(url, "popup", "width=" + width + ",height=" +
            height + ",resizable=yes,scrollbars=yes").focus();
    }
    VacationSub = function () {
        this.id = "vacation";
        this.name = "Отпуск";
    }
    VacationSub.prototype = new OptionSub;
    VacationSub.prototype.init = function (parent, content) {
        var resp = OptionsButler.vacation;
        var c = $("<div style='padding: 20px;'/>");
        c.append("Если на протяжении нескольких дней или даже недель ты не сможешь заходить в игру, включи режим отпуска. Уход в отпуск означает:", "<br/>");
        var condit = $("<ul style='font-weight:bold;list-style-type:disc; padding: 10px 20px;'/>");
        $.each(["Твой персонаж не будет удалён из-за неактивности.", "Через %s после начала тебя нельзя будет вызвать на дуэль.".replace("%s", resp.duel_duration)
        + "<br />" + 'В салуне появится надпись «в отпуске».', "Ты не сможешь зайти в игру, не прервав тем самым отпуск.", "В мэрии, рядом с твоим именем, будет отображаться синий кружок."], function (i, k) {
            condit.append($("<li>" + k + "</li>"));
        });
        c.append(new west.gui.Groupframe().appendToContentPane(condit).getMainDiv());
        c.append("Отпуск заканчивается автоматически через 2 месяца. Прервать его можно обычным входом в игру.", "<br/>");
        var rd = $("<div style='text-align: right;'/>");
        rd.append(new west.gui.Button("Включить режим отпуска", function () {
            OptionsButler.activateVacation();
        }).getMainDiv());
        c.append(rd);
        content.append(c);
    }
    HotkeySub = function () {
        this.id = "hotkey";
        this.name = "Сочетания клавиш";
    };
    HotkeySub.prototype = new OptionSub;
    HotkeySub.prototype.init = function (parent, content) {
        var self = this, hotkeys = HotkeyManager.getList();
        var tbl = new west.gui.Table().addColumn("key").addColumn("value").appendToCell("head", "key", "Действие").appendToCell("head", "value", "Клавиша");
        var enabled = new west.gui.Checkbox("Активировать комбинации клавиш").setSelected(Config.get("hotkeys.enabled"));
        var savebutton = new west.gui.Button("Сохранить", function () {
            Config.set("hotkeys.enabled", enabled.isSelected());
            HotkeyManager.save();
            new UserMessage("Комбинации клавиш сохранены", UserMessage.TYPE_SUCCESS).show();
        });
        var onChange = function () {
            OptionsWindow.open("settings", "hotkey");
        };
        var resetbutton = new west.gui.Button("Сбросить", function () {
            for (var i = 0; i < hotkeys.length; i++)
                hotkeys[i].reset();
            onChange();
        });
        var trans = {"map": "Карта", "char": "Персонаж", "window": "Окно"}
        var cats = {};
        for (var i = 0; i < hotkeys.length; i++) {
            var hk = hotkeys[i];
            if (undefined === cats[hk.cat])
                cats[hk.cat] = [];
            cats[hk.cat].push(hk);
        }
        for (var k in cats) {
            tbl.appendRow().appendToCell(-1, "key", "<strong style='font-size: 16px;'>" + (trans[k] || "Разное") + "</strong>");
            var keys = cats[k];
            keys.sort(function (a, b) {
                return a.desc > b.desc ? 1 : -1;
            });
            for (var i = 0; i < keys.length; i++) {
                var hk = keys[i], button = new west.gui.Button((hk.key) ? hk.key : "<span style='color: red;'>-</span>", function (hk) {
                    return function () {
                        HotkeyManager.rebindHotkey(hk, onChange);
                    };
                }(hk));
                tbl.appendRow().appendToCell(-1, "key", hk.desc).appendToCell(-1, "value", button.getMainDiv());
            }
        }
        content.append(tbl.getMainDiv(), $("<div style='padding: 0 20px;' />").append($("<div style='float: left; padding: 8px 0 0 0;' />").append(enabled.getMainDiv()), $("<div style='float: right;' />").append(savebutton.getMainDiv(), resetbutton.getMainDiv()), "<div style='clear: both;' />"));
    };
    InterfaceSub = function () {
        this.id = "interface";
        this.name = "Интерфейс";
    }
    InterfaceSub.prototype = new OptionSub;
    InterfaceSub.prototype.init = function (parent, content) {
        this.content = content;
        this.saveBatch = [];
        this.resetBatch = [];
        var that = this;
        var submitbtn = new west.gui.Button("Сохранить", function () {
            for (var i = 0; i < that.saveBatch.length; ++i)
                that.saveBatch[i]();
            new UserMessage("Настройки сохранены", UserMessage.TYPE_SUCCESS).show();
        });
        var resetbtn = new west.gui.Button("Сбросить", function () {
            for (var i = 0; i < that.saveBatch.length; ++i)
                that.resetBatch[i]();
            new UserMessage("Первоначальные настойки возвращены", UserMessage.TYPE_SUCCESS).show();
        });
        this._initMisc();
        this._initChat();
        content.append(new west.gui.Groupframe().appendToContentPane($("<div style='text-align: right;'/>").append(submitbtn.getMainDiv(), resetbtn.getMainDiv())).getMainDiv());
    }
    InterfaceSub.prototype._initMisc = function () {
        var wrap = $("<ul style='list-style-type: none;'/>");
        var add = function (el) {
            wrap.append
            ($("<li style='margin: 5px 0;'/>").append(el.getMainDiv()));
        };
        var itemcompare = new west.gui.Checkbox("Сравнение предметов").setSelected(!Config.get("gui.main.compare")).setTooltip('Сравнивает показатели надетых предметов и показатели предмета, находящегося в багаже, при наведении курсора мыши на него.');
        var animate = new west.gui.Checkbox("Анимация").setSelected(Config.get("gui.animations")).setTooltip('Активирует анимацию в игре. Отключи, если у тебя слабый компьютер или медленный интернет.');
        var windowoffset = new west.gui.Checkbox("Каскадные окна").setSelected(Config.get("window.offset")).setTooltip('При открытии нескольких окон, они будут слегка смещёнными друг от друга, для более лёгкого переключения между ними.');
        var windowAnimate = new west.gui.Checkbox("Анимация окон").setSelected(Config.get("gui.main.animations")).setTooltip('Окна плавно появляются и исчезают во время открытия или закрытия.');
        var gametips = new west.gui.Checkbox("Подсказки").setSelected(Config.get("gametips.enabled")).setTooltip('Показывает подсказки по игре в области уведомлений.');
        var gamehints = new west.gui.Checkbox("Предупреждения").setSelected(Config.get("gamehints.enabled")).setTooltip('Показывает предупреждения в области уведомлений, например, о низком уровне здоровья.');
        var questtracker = new west.gui.Checkbox("Принятые задания").setSelected(Config.get("questtracker.enabled")).setTooltip('Открывает планировщик квестов со списком всех принятых квестов и их текущим статусом.');
        var notebook = new west.gui.Checkbox("Заметки").setSelected(Config.get("notebook.enabled")).setTooltip('Открывает блокнот в окне планировщика квестов, где можно сохранять заметки.');
        var jobwindow = new west.gui.Checkbox('Окно работы остаётся открытым после начала работы').setSelected(Config.get('jobs.stayopen')).setTooltip('Выключи, для автоматического закрытия окна работы после начала работы.');
        [itemcompare, animate, windowAnimate, windowoffset, gametips, gamehints, questtracker, notebook, jobwindow].each(function (setting) {
            add(setting);
        });
        var duelview = new west.gui.Combobox('options_duelview').addItem(0, 'HTML').addItem(1, 'Flash');
        duelview.select(Config.get('duel.viewtype'));
        var markerview = new west.gui.Combobox('options_markerview').addItem(1, 'Всегда').addItem(2, 'При наведении курсора');
        markerview.select(Config.get('minimap.marker'));
        this.content.append(new west.gui.Groupframe().appendToContentPane("<h2>" + "Разное" + "</h2>", "<hr />", wrap, '<span>' + 'Режим дуэлей' + ':&nbsp;</span>', duelview.getMainDiv(), '<br />', '<span>' + 'Флажки' + ':&nbsp;</span>', markerview.getMainDiv()).getMainDiv());
        this.saveBatch.push(function () {
            Config.set("gui.main.compare", !itemcompare.isSelected());
            Config.set("gui.main.animations", windowAnimate.isSelected());
            Config.set("window.offset", windowoffset.isSelected());
            Config.set("gui.animations", animate.isSelected());
            Config.set("gametips.enabled", gametips.isSelected());
            Config.set("gamehints.enabled", gamehints.isSelected());
            Config.set("questtracker.enabled", questtracker.isSelected());
            Config.set("notebook.enabled", notebook.isSelected());
            Config.set('jobs.stayopen', jobwindow.isSelected());
            Config.set("duel.viewtype", duelview.getValue());
            Config.set("minimap.marker", markerview.getValue());
        });
        this.resetBatch.push(function () {
            itemcompare.setSelected(!Config.reset("gui.main.compare"));
            windowoffset.setSelected(Config.reset("window.offset"));
            windowAnimate.setSelected(Config.reset("gui.main.animations"));
            animate.setSelected(Config.reset("gui.animations"));
            gametips.setSelected(Config.reset("gametips.enabled"));
            gamehints.setSelected(Config.reset("gamehints.enabled"));
            questtracker.setSelected(Config.reset("questtracker.enabled"));
            notebook.setSelected(Config.reset("notebook.enabled"));
            duelview.select(Config.reset("duel.viewtype"));
            markerview.select(Config.reset("minimap.marker"));
        });
    }
    InterfaceSub.prototype._initChat = function () {
        var wrap = $("<ul style='list-style-type: none;'/>");
        var add = function (el) {
            wrap.append($("<li style='margin: 5px 0;'/>").append(el.getMainDiv()));
        };
        var chatsound = new west.gui.Checkbox("Выключить звук").setSelected(Config.get("soundsOff"));
        var chatfade = new west.gui.Textfield().setLabel("Яркость неактивного чата (в процентах)").maxlength(3).setSize(3).setValue(Config.get("chat.fade"));
        var chatopacity = new west.gui.Textfield().setLabel("Яркость активного чата (в процентах)").maxlength(3).setSize(3).setValue(Config.get("chat.opacity"));
        add(chatsound);
        add(chatfade);
        add(chatopacity);
        this.content.append(new west.gui.Groupframe().appendToContentPane("<h2>" + "Чат" + "</h2>", "<hr/>", wrap).getMainDiv());
        this.saveBatch.push(function () {
            Config.set("soundsOff", chatsound.isSelected());
            var fade = parseInt(chatfade.getValue());
            if (fade > 100)fade = 100; else if (fade < 0)fade = 0;
            chatfade.setValue(fade);
            Config.set("chat.fade", fade);
            var opacity = parseInt(chatopacity.getValue());
            if (opacity > 100)opacity = 100; else if (opacity < 0)opacity = 0;
            chatopacity.setValue(opacity);
            Config.set("chat.opacity", opacity);
        });
        this.resetBatch.push(function () {
            chatfade.setValue(Config.reset("chat.fade"));
            chatopacity.setValue(Config.reset("chat.opacity"));
        });
    };
    InterfaceSub.prototype._initNotifications = function () {
        var tmpsave = {};
        var wrap = $("<ul style='list-style-type: none;' />");
        var addNotify = function (id, name, enabled, callback) {
            tmpsave[id] = chatcontrol.disableNotifications[id];
            var check = new west.gui.Checkbox(name, "notifications", function () {
                tmpsave[id] = !this.isSelected();
            });
            check.setSelected(!tmpsave[id]);
            wrap.append($("<li style='margin: 5px 0 5px 0;'/>").append(check.getMainDiv()));
        }
        addNotify("reports", "Отчёты");
        addNotify("messages", "Сообщения");
        addNotify("achievements", "Достижения");
        addNotify("friends", "Онлайн друзей");
        this.content.append("<h2>" + "Уведомления" + "</h2>", wrap);
        this.saveBatch.push(function () {
            var tosave = {};
            for (var k in tmpsave) {
                chatcontrol.disableNotifications[k] = tmpsave[k];
                tosave[k] = tmpsave[k];
            }
            Config.set("chat.disableNotifications", tosave);
        });
    }
    OptionTab = function (parent, id, name, subs) {
        if (!(parent instanceof OptionsWindow))
            throw"OptionTab parent is not the OptionsWindow!";
        var isSubbed = subs.length > 1;
        this.id = isSubbed ? id : subs[0].id;
        this.name = isSubbed ? name : subs[0].name;
        this.subs = {};
        this.currentSub = null;
        this.window = $("<div class='tabwrapper Options-" + this.id + "'/>");
        this.parent = parent;
        this.content = $("<div class='content'/>");
        if (isSubbed) {
            this.window.addClass("subbed");
        }
        for (var i = 0; i < subs.length; ++i)
            this.addSub(subs[i]);
    }
    OptionTab.prototype.init = function (subid) {
        if (undefined == subid)
            subid = this.currentSub;
        this.scrollpane = new west.gui.Scrollpane();
        this.scrollpane.appendContent(this.content);
        this.window.empty();
        if (this.hasSub()) {
            var menu = $("<ul class='submenu'/>");
            for (var key in this.subs) {
                var sub = this.subs[key];
                menu.append($("<li/>").append(new west.gui.Button(sub.name, sub.click).setWidth(190).getMainDiv()));
            }
            this.window.append(menu);
        }
        this.window.append(this.scrollpane.getMainDiv());
        this.showSub(subid);
    }
    OptionTab.prototype.getSubCount = function () {
        var count = 0;
        for (var k in this.subs) {
            if (this.subs.hasOwnProperty(k))
                count++;
        }
        return count;
    }
    OptionTab.prototype.hasSub = function () {
        return this.getSubCount() > 1;
    }
    OptionTab.prototype.addSub = function (sub) {
        if (!sub.isEnabled())
            return;
        if (null == this.currentSub)
            this.currentSub = sub.id;
        var that = this;
        sub.click = function () {
            that.showSub(sub.id);
        };
        this.subs[sub.id] = sub;
    }
    OptionTab.prototype.showSub = function (subid) {
        var sub = this.subs[subid];
        if (undefined == sub)
            return;
        this.content.removeClass(this.subs[this.currentSub].id);
        this.currentSub = subid;
        this.content.empty();
        this.content.addClass(sub.id);
        this.scrollpane.scrollToTop();
        this.parent.window.setTitle(sub.name);
        sub.init(this, this.content);
    }
    OptionsWindow = function (tab, subid) {
        this.tabs = {};
        if (undefined === tab)tab = "settings";
        this.window = wman.open("options", null, "options noreload");
        this.window.setMiniTitle("Установки");
        var that = this;
        OptionsButler.init(this, function () {
            that.addTab(new OptionTab(that, "settings", "Настройки", [new ProfileSub(), new InterfaceSub(), new HotkeySub(), new PonyExpressSub(), new SignatureSub(), new AvatarSub()])).addTab(new OptionTab(that, "account", "Аккаунт", [new PasswordSub(), new EmailSub(), new ActivitiesSub(), new VacationSub(), new DeleteAccountSub(), new MigrationSub()])).addTab(new OptionTab(that, null, null, [new RedeemBonusSub()])).addTab(new OptionTab(that, null, null, [new SupportSub()]));
            that.showTab(tab, subid);
        });
    }
    OptionsWindow.prototype = OptionsWindow;
    OptionsWindow.open = function (tab, subid) {
        return new OptionsWindow(tab, subid);
    }
    OptionsWindow.addTab = function (tab) {
        if (tab instanceof OptionTab) {
            this.tabs[tab.id] = tab;
            var that = this;
            this.window.addTab(tab.name, tab.id, function (win, id) {
                that.showTab(id);
            });
            this.window.appendToContentPane(tab.window);
        }
        return this;
    }
    OptionsWindow.showTab = function (tabid, subid) {
        if (!this.window)return;
        this.window.activateTab(tabid).$("div.tw2gui_window_content_pane > *").each(function (i, e) {
            if ($(e).hasClass("Options-" + tabid)) {
                $(e).children().fadeIn();
                $(e).show();
            } else {
                $(e).children().fadeOut();
                $(e).delay(2000).hide();
            }
        });
        this.window.setTitle("");
        this.window.removeClass("tabbg");
        var tab = this.tabs[tabid];
        if (undefined !== tab) {
            if (tab.hasSub())
                this.window.addClass("tabbg");
            this.window.setTitle(tab.name);
            tab.init(subid);
        }
        return this;
    }
})(jQuery);
;
(function ($) {
    window.DuelsWindow = {DOM: '*', Npc: {ticker: null}, Player: {}, Tactic: {}};
    var duelData = [], npcduelData = {};
    var duelMotivationProgressbar = null;
    var pvp_pagebar = null;
    var pvp_cbSearchtime = null;
    var pvp_searchObj = null;
    var settingsObj = {};
    var saveInProgress = false;
    var npcTimer = null;
    var duelAnimation = null;
    var duelTab = null;
    DuelsWindow.toggleOpen = function () {
        var wnd = wman.toggleOpen("duels");
        if (wnd && 'open' === wnd.status) {
            DuelsWindow.open(wnd.win);
        }
    };
    DuelsWindow.open = function (win_open) {
        if (west.Feature.duels === 0) {
            new UserMessage("Дуэли будут доступными позже — в руководстве.", 'hint').show();
            return;
        }
        var tabclick = function (win, id) {
            DuelsWindow.showTab(id);
        }
        DuelsWindow.window = (win_open || wman.open("duels")).setMiniTitle('Дуэль').addTab('Бандиты', 'npcduel', tabclick).addTab('Игрок', 'playerduel', tabclick).addTab('Тактика', 'dueltactic', tabclick).appendToContentPane($('<div class="duels-npcduel"/>'), $('<div class="duels-playerduel"/>'), $('<div class="duels-dueltactic"/>'));
        DuelsWindow.DOM = $('div.tw2gui_window.duels');
        pvp_pagebar = null;
        pvp_cbSearchtime = null;
        pvp_searchObj = {distance: 7200, order_by: 'ASC', page: 0, sort: 'range', next: false};
        getNewJsonData();
        var opts = {boundto: DuelsWindow.window};
        EventHandler.listen('duelmotivation_changed', DuelsWindow.updateDuelMotivationBar, null, opts);
        EventHandler.listen('character_weapon_changed', DuelsWindow.updateDuelWeapon, null, opts);
        DuelsWindow.window.addEventListener(TWE('WINDOW_DESTROY'), function () {
            if (duelAnimation)duelAnimation.stop();
        });
    };
    wman.registerReloadHandler(/^duels/, function () {
        DuelsWindow.open();
    });
    DuelsWindow.showTab = function (id) {
        if (!DuelsWindow.window)return;
        west.Feature.removeLock(DuelsWindow.window);
        duelTab = id;
        DuelsWindow.updateDuelMotivationBar();
        DuelsWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *', DuelsWindow.DOM).each(function (i, e) {
            if ($(e).hasClass('duels-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'npcduel':
                DuelsWindow.window.setTitle('Бандиты');
                break;
            case'playerduel':
                DuelsWindow.window.setTitle('Игрок');
                west.Feature.lockScreen('duel');
                break;
            case'dueltactic':
                DuelsWindow.window.setTitle('Тактика');
                break;
            default:
                DuelsWindow.window.setTitle('Бандиты');
                break;
        }
    };
    DuelsWindow.Npc.init = function () {
        var maindiv = $('<div class="duel-npcduel"></div>').append(generateMainLayout('npc'));
        $('div.dl_footer', maindiv).append('<p class="dln_new_npc_countdown" title="' + 'Как только время выйдет, на смену этим бандитам придут новые.' + '">' + s('Новые бандиты через %1', '<span id="dln_npc_countdown"></span>') + '</p>', '<p style="display: none;" id="dln_switch_reporttype" class="linklike"></p>');
        DuelsWindow.window.$('div.duels-npcduel', DuelsWindow.DOM).empty().append(maindiv);
        $('#dln_htmlreport_container, #dl_animationcontainer', DuelsWindow.DOM).hide();
        $('#dln_switch_reporttype', maindiv).text('Изменить вид').click(switchReporttype);
        updateNpcList();
        if (!DuelsWindow.ticker || !DuelsWindow.ticker.active) {
            DuelsWindow.ticker = new Ticker(getNewNpcList);
            DuelsWindow.ticker.setPeriod(2000);
            DuelsWindow.ticker.start();
        }
        resetCountdown();
    };
    DuelsWindow.Player.init = function () {
        var maindiv = $('<div class="duel-playerduel"></div>').append(generateMainLayout('player'));
        $('div.duels-playerduel', DuelsWindow.DOM).empty().append(maindiv);
        if (Character.townRights == 0 && Character.homeTown.town_id == 0) {
            $(maindiv).addClass('disabled_row');
            $('div.duels-playerduel', DuelsWindow.DOM).append('<div id="dlp_notownnotice">' + 'Чтобы вызывать других игроков на дуэль, тебе необходимо жить в городе.' + '</div>');
        }
        else {
            $('div.dlp_sortheader', maindiv).click(sortOpponentList);
            $('div.dl_rightSide', maindiv).append('<div id="dlp_player4duel_search">' + '<h4>' + 'Поиск противника' + '</h4>' + '<span class="dlp_devider"></span>' + '</div>');
            pvp_cbSearchtime = new west.gui.Combobox('dlp_search_times').setWidth(120).addItem('10', '10 минут').addItem('15', '15 минут').addItem('30', '30 минут').addItem('60', '1 час').addItem('120', '2 часа').addItem('240', '4 часа').addItem('360', '6 часов').select('120');
            var searchButton = new west.gui.Button('Найти', search4PvpOpponents, null, null).setMinWidth(140);
            $('#dlp_player4duel_search', maindiv).append(pvp_cbSearchtime.getMainDiv(), searchButton.getMainDiv());
            $('div._tab_id_playerduel', DuelsWindow.DOM).one('click', search4PvpOpponents);
        }
    };
    DuelsWindow.Tactic.init = function () {
        var maindiv = $('<div class="duel-dueltactic"></div>');
        maindiv.append(generateMainLayout4Settings());
        DuelsWindow.window.$('div.duels-dueltactic', DuelsWindow.DOM).empty().append(maindiv);
        for (var i = 1; i < 5; i++) {
            $('div.dls_offense', maindiv).append(getAttackbox(i));
            updateAttackbox(i);
            $('div.dls_defense', maindiv).append(getDefendbox(i));
            updateDefendbox(i);
        }
        $('div.dls_attackbox table, div.dls_defendbox > img', maindiv).click(changeTacticMode);
    };
    var getNewJsonData = function () {
        Ajax.remoteCall('duel', 'get_data', {}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            prepareData(json);
            buildScreens();
        }, DuelsWindow);
    };
    var prepareData = function (data) {
        duelData = [];
        duelData = data;
        duelData.weapon = ItemManager.get(duelData.weaponId);
        settingsObj.aim = $.fn.cloneObj(data.aim);
        settingsObj.dodge = $.fn.cloneObj(data.dodge);
        Character.setDuelMotivation(data.motivation);
        Character.setNPCDuelMotivation(data.motivation_npc);
    };
    var buildScreens = function () {
        DuelsWindow.Npc.init();
        DuelsWindow.Player.init();
        DuelsWindow.Tactic.init();
        DuelsWindow.Player.infoShown = false;
        DuelsWindow.Tactic.infoShown = false;
        DuelsWindow.showTab('npcduel');
    };
    var generateMainLayout = function (tabId) {
        var layout = $('<div class="dl_leftSide">' +
            (tabId == 'npc' ? '' : '<div class="dlp_sortheader">' + '<span id="dlp_sorthead_duellevel" title="' + 'Сортировать по дуэльному разряду' + '"><img src="https://westrus.innogamescdn.com/images/window/duels/dl.jpg" /></span><span id="dlp_sorthead_duration" title="' + 'Сортировать по расстоянию' + '"><img src="https://westrus.innogamescdn.com/images/window/duels/ef.jpg" /></span><span id="dlp_sorthead_charclass" title="' + 'Сортировать по типу персонажа' + '"><img src="https://westrus.innogamescdn.com/images/window/duels/ck.jpg" /></span>' + '</div>') + '<div class="dl_row dl_row1"></div>' + '<div class="dl_row dl_row2"></div>' + '<div class="dl_row dl_row3"></div>' + '<div class="dl_row dl_row4"></div>' +
            (tabId == 'npc' ? '<div class="dl_difficulty" title="' + 'За каждым побеждённым бандитом приходит новый бандит, сильнее предыдущего. С каждым поражением и с течением времени бандиты снова становятся слабее.' + '">' + 'Сложность дуэли' + ':&nbsp;<span></span></div>' : '') + '<div class="dl_motivation" title="' + 'Понижение мотивации означает уменьшение и опыта, и денег, которые можно заработать на дуэли. С каждой дуэлью твоя мотивация понижается, а с течением времени она вновь восстановится.' + '"></div>' + '</div>' + '<div class="dl_rightSide">' +
            (tabId == 'npc' ? '<span id="dl_animationcontainer"></span><span id="dln_htmlreport_container"></span>' : '<div class="dl_rightSideOpacity"></div>') + '</div>' + '<div class="dl_footer"></div>');
        $('#dlp_sorthead_duellevel > img', layout).data('sortBy', 'duellevel');
        $('#dlp_sorthead_duration > img', layout).data('sortBy', 'range');
        $('#dlp_sorthead_charclass > img', layout).data('sortBy', 'class');
        duelMotivationProgressbar = new west.gui.Progressbar((tabId == 'npc' ? Character.npcDuelMotivation : Character.duelMotivation), 1).showPercentOnly(true);
        $('div.dl_motivation', layout).append(duelMotivationProgressbar.getMainDiv());
        return layout;
    };
    var generateMainLayout4Settings = function () {
        var layout = $('<div class="dls_tactic_header"><div>' + 'Навыки' + '</div><div>' + 'Раунд 1 и 5' + '</div><div>' + 'Раунд 2 и 6' + '</div><div>' + 'Раунд 3 и 7' + '</div><div>' + 'Раунд 4 и 8' + '</div></div>' + '<div class="dls_offense">' + '<div class="dls_spec_skill">' + jq2Html(CharacterSkills.getSkill('aim').getSkillImage()) + '</div>' + '</div>' + '<div class="dls_defense">' + '<div class="dls_spec_skill">' + jq2Html(CharacterSkills.getSkill('dodge').getSkillImage()) + '</div>' + '</div>' + '<div class="dls_skillrow">' + '<div class="dls_weapon"></div>' + '<div class="dls_damage center"><span title="' + 'Урон, который наносит твоё оружие, может быть усилен твоими навыками. Удар воздействует на оружие ближнего боя, а навык стрельбы — на стрелковое оружие.' + '">' + 'Урон' + '</span>' + jq2Html(duelData.weapon.sub_type == 'hand' ? CharacterSkills.getSkill('punch').getSkillImage().jq2Html() : CharacterSkills.getSkill('shot').getSkillImage()) + '</div>' + '<div class="dls_opposition center"><span title="' + 'Если противник в тебя попадёт, урон может быть снижен твоей обороноспособностью. Против оружия ближнего боя лучше помогает навык стойкости, а от стрелкового оружия — реакция.' + '">' + 'Сопротивление' + '</span><br />' + CharacterSkills.getSkill('reflex').getSkillImage().jq2Html() + '&nbsp;' + CharacterSkills.getSkill('tough').getSkillImage().jq2Html() + '</div>' + '<div class="dls_attack center"><span title="' + 'В нападении твоя способность к блефу понижает шансы противника попасть в тебя, если она превышает его тактическую подготовку.' + '">' + 'Атака' + '</span>' + CharacterSkills.getSkill('appearance').getSkillImage().jq2Html() + '</div>' + '<div class="dls_defend center"><span title="' + 'Когда ты защищаешься, твои тактические навыки помогают снизить шансы противника попасть в тебя, но для этого твой навык тактики должен превосходить способность противника к блефу.' + '">' + 'Защита' + '</span>' + CharacterSkills.getSkill('tactic').getSkillImage().jq2Html() + '</div>' + '</div>');
        $('div.dls_weapon', layout).append(new tw2widget.Item(duelData.weapon, 'item_duelweapon').setCharacter(Character).getMainDiv());
        return layout;
    };
    var resetCountdown = function () {
        DuelsWindow.ticker.add2Queue('dln_npc_countdown', (parseInt(duelData.npcs.remaining_time) + 20 + Math.round(Game.getClientTime())));
        $('#dln_npc_countdown', DuelsWindow.DOM).text(parseInt(duelData.npcs.remaining_time).getTime2EndString(false));
        if (!DuelsWindow.ticker.active)DuelsWindow.ticker.start();
    };
    var updateNpcList = function () {
        var selector = $('div.duel-npcduel', DuelsWindow.DOM);
        for (var i = 1; i <= 4; i++) {
            var isReadyTime = parseInt(duelData.npcs.npcs[i - 1]['arrival'] = duelData.npcs.arrival_delay - duelData.npcs.npcs[i - 1].arrival_delta);
            if (duelData.npcs.npcs[i - 1]) {
                if (isReadyTime < 5) {
                    $('div.dl_row' + i, selector).empty().append(generateNpcBox(duelData.npcs.npcs[i - 1]));
                    $('#dln_npcduel_' + duelData.npcs.npcs[i - 1].duelnpc_id, selector).click({npc_id: duelData.npcs.npcs[i - 1].duelnpc_id}, npcDuelButtonClicked);
                }
                else {
                    if (!npcTimer || !npcTimer.active) {
                        npcTimer = new Ticker(npcListTick);
                        npcTimer.setPeriod(2000);
                        npcTimer.start();
                    }
                    npcTimer.add2Queue(duelData.npcs.npcs[i - 1].duelnpc_id, (Game.getClientTime() + isReadyTime + 20));
                    $('#dl_npc_box_' + duelData.npcs.npcs[i - 1].duelnpc_id, selector).addClass('disabled_row');
                    $('div.dl_row' + i, selector).empty().append(generateNpcBox(duelData.npcs.npcs[i - 1], isReadyTime.getTime2EndToken('Ждёт')));
                }
            }
            else {
                $('div.dl_row' + i, selector).append(getNoOpponentBox());
                $('div.dl_row' + i + ' div.dl_fightbutton', selector).remove();
            }
        }
        $('div.dl_fightbutton', DuelsWindow.DOM).hover(function () {
            $(this).stop().animate({right: '-60px'}, 500);
        }, function () {
            $(this).stop().animate({right: '-18px'}, 400);
        });
        $('div.dl_difficulty > span', selector).text(duelData.npcs.difficulty);
        Character.setDuelMotivation(duelData.motivation);
        Character.setNPCDuelMotivation(duelData.motivation_npc);
    };
    var generateNpcPopup = function (npcData, weaponId, character) {
        var weapon, damage;
        if (weaponId) {
            weapon = ItemManager.get(weaponId);
            damage = weapon.getDamage(character);
        }
        return '<table class="dln_npcskill_popup">' +
            (weapon ? '<tr><td colspan="5" class="text_bold">' + 'Бонусы от способностей противника' + '<br />&nbsp;</td></tr>' : '') + '<tr><td><img src="https://westrus.innogamescdn.com/images/window/duels/npcskill_shot.jpg" /></td><td><img src="https://westrus.innogamescdn.com/images/window/duels/npcskill_punch.jpg" /></td>' + '<td><img src="https://westrus.innogamescdn.com/images/window/duels/npcskill_aim.jpg" /></td><td><img src="https://westrus.innogamescdn.com/images/window/duels/npcskill_appearance.jpg" /></td><td></td></tr>' + '<tr><td class="text_bold">' + (npcData.shot || 0) + '</td><td class="text_bold">' + (npcData.punch || 0) + '</td>' + '<td class="text_bold">' + (npcData.aim || 0) + '</td><td class="text_bold">' + (npcData.appearance || 0) + '</td><td></td></tr>' + '<tr><td><img src="https://westrus.innogamescdn.com/images/window/duels/npcskill_tactic.jpg" /></td><td><img src="https://westrus.innogamescdn.com/images/window/duels/npcskill_reflex.jpg" /></td>' + '<td><img src="https://westrus.innogamescdn.com/images/window/duels/npcskill_dodge.jpg" /></td><td><img src="https://westrus.innogamescdn.com/images/window/duels/npcskill_tough.jpg" /></td><td><img src="https://westrus.innogamescdn.com/images/window/duels/npcskill_health.jpg" /></td></tr>' + '<tr><td class="text_bold">' + (npcData.tactic || 0) + '</td><td class="text_bold">' + (npcData.reflex || 0) + '</td>' + '<td class="text_bold">' + (npcData.dodge || 0) + '</td><td class="text_bold">' + (npcData.tough || 0) + '</td><td class="text_bold">' + (npcData.health || 0) + '</td></tr>' +
            (weapon ? '<tr><td colspan="2" class="text_bold"><img src="' + weapon.image + '" /></td><td colspan="3" class="text_bold"><br />' + weapon.name + '<br />(' + 'Урон' + ':&nbsp;' + damage.min + ' - ' + damage.max + ')</td></tr>' : '') + '</table>';
    };
    var generateNpcBox = function (npc, isReadyIn) {
        var weapon = ItemManager.get(npc.weapon_id);
        var box = $('<div id="dl_npc_box_' + npc.duelnpc_id + '" class="dl_npc_box">' + '<div class="dln_picture" title="' + generateNpcPopup(npc).escapeHTML() + '"><img src="https://westrus.innogamescdn.com/images/' + npc.picture + '" /></div>' + '<div class="dln_npc_content"><span class="dln_name">' + npc.npc_name + '</span><span class="dln_level">' + 'Уровень' + ':&nbsp;' + npc.npc_level + '</span>' + '<span class="dln_ready_in_time">' + (isReadyIn ? isReadyIn : '') + '</span></div><div class="dln_npc_weapon"></div>' + '</div>' + '<div id="dln_npcduel_' + npc.duelnpc_id + '" class="dl_fightbutton"><span class="dln_fightstatus">' + 'Ждёт' + '</span></div>');
        if (isReadyIn) {
            $(box).addClass('disabled_row');
            $(box[1]).hide();
        }
        $('div.dln_npc_weapon', box).append(new tw2widget.Item(weapon, 'item_npcweapon').getMainDiv());
        return box;
    };
    var updatePlayerList = function () {
        var selector = $('div.duel-playerduel', DuelsWindow.DOM);
        for (var i = 1; i <= 4; i++) {
            if (duelData.pclist[i - 1]) {
                $('div.dl_row' + i, selector).html(generatePlayerBox(duelData.pclist[i - 1]));
                $('#dlp_pvpduel_' + duelData.pclist[i - 1].player_id, selector).click({
                    player_id: duelData.pclist[i - 1].player_id,
                    alliance_id: duelData.pclist[i - 1].alliance_id
                }, function (ev) {
                    SaloonWindow.startDuel(ev.data.player_id, ev.data.alliance_id, false, false, DuelsWindow);
                });
            }
            else {
                $('div.dl_row' + i, selector).html(getNoOpponentBox());
            }
        }
        $('div.dl_fightbutton', DuelsWindow.DOM).hover(function () {
            $(this).stop().animate({right: '-60px'}, 500);
        }, function () {
            $(this).stop().animate({right: '-18px'}, 400);
        });
        Character.setDuelMotivation(duelData.motivation);
        Character.setNPCDuelMotivation(duelData.motivation_npc);
        updatePagebar();
    };
    var generatePlayerBox = function (playerObj) {
        if (playerObj.hasOwnProperty('bonus') && playerObj.hasOwnProperty('weaponId')) {
            var duelistPopup = generateNpcPopup(playerObj.bonus, playerObj.weaponId, playerObj);
        }
        return $('<div id="dl_player_box_' + playerObj.player_id + '" class="dl_player_box">' + '<div ' + (duelistPopup ? 'title="' + duelistPopup.escapeHTML() + ' "' : '') + 'class="dlp_avatar">' + playerObj.avatar + '</div>' + '<div class="dln_npc_content"><span class="dlp_name">' + getPlayerNameWithProfileLink(playerObj.player_id, playerObj.player_name) + '</span>' + '<span class="dlp_level">' + 'Уровень' + ':&nbsp;' + playerObj.duellevel + '</span>' + '<span class="dlp_townname">' + getTownNameWithLink(playerObj.town_id, playerObj.town_name, playerObj.town_x, playerObj.town_y) + '</span>' + '<span class="dlp_distance">' + 'Расстояние' + ':&nbsp;' + getDistance2Player(playerObj.own_coord.x, playerObj.own_coord.y, playerObj.character_x, playerObj.character_y) + '</span>' + '</div><div class="dlp_player_charclass">' + getCharClassIcon(playerObj['class']) + '</div>' + '</div>' + '<div id="dlp_pvpduel_' + playerObj.player_id + '" class="dl_fightbutton"><span class="dlp_fightstatus">' + 'Ждёт' + '</span></div>');
    };
    var getCharClassIcon = function (charclass) {
        return '<img src="https://westrus.innogamescdn.com/images/window/duels/charclass_' + charclass + '.png" />';
    };
    var getDistance2Player = function (charX, charY, plX, plY) {
        return Map.calcWayTime({x: charX, y: charY}, {x: plX, y: plY}).formatDuration();
    };
    var getTownNameWithLink = function (town_id, town_name, town_x, town_y) {
        return '<a href="javascript: void(0);" title="' + town_name + '" class="shorten" onclick="TownWindow.open(' + town_x + ',' + town_y + ')">' + town_name + '</a>';
    };
    var getPlayerNameWithProfileLink = function (player_id, player_name) {
        return '<a href="javascript: void(0);" title="' + player_name + '" class="shorten" onclick="PlayerProfileWindow.open(' + player_id + ')">' + player_name + '</a>';
    };
    var getNoOpponentBox = function () {
        return $('<div class="dl_player_box">' + '<img src="https://westrus.innogamescdn.com/images/window/duels/overlay.png" />' + '<p class="dlp_noopponent">' + 'Нет противников для дуэли' + '</p>' + '</div>');
    };
    var getAttackbox = function (ix) {
        var box = $('<div id="dls_off_r' + ix + '" class="dls_attackbox">' + '<table>' + '<tr><td /><td /><td><img src="https://westrus.innogamescdn.com/images/window/duels/hit_grey.png" class="dls_attackbox_head" title="' + '<strong>Голова:</strong> +50% урона' + '" /></td><td /><td /></tr>' + '<tr><td /><td><img src="https://westrus.innogamescdn.com/images/window/duels/hit_grey.png" class="dls_attackbox_rightshoulder" title="' + '<strong>Правое плечо:</strong> +15% урона' + '" /></td><td /><td><img src="https://westrus.innogamescdn.com/images/window/duels/hit_grey.png" class="dls_attackbox_leftshoulder" title="' + '<strong>Левое плечо:</strong> +15% урона' + '" /></td><td /></tr>' + '<tr><td><img src="https://westrus.innogamescdn.com/images/window/duels/hit_grey.png" class="dls_attackbox_rightarm" title="' + '<strong>Правая рука</strong>' + '" /></td><td></td><td></td><td /><td><img src="https://westrus.innogamescdn.com/images/window/duels/hit_grey.png" class="dls_attackbox_leftarm" title="' + '<strong>Левая рука</strong>' + '" /></td></tr>' + '</table>' + '</div>');
        $('img.dls_attackbox_head', box).data({roundNo: ix, hitpoint: 'head'});
        $('img.dls_attackbox_leftshoulder', box).data({roundNo: ix, hitpoint: 'leftshoulder'});
        $('img.dls_attackbox_rightshoulder', box).data({roundNo: ix, hitpoint: 'rightshoulder'});
        $('img.dls_attackbox_leftarm', box).data({roundNo: ix, hitpoint: 'leftarm'});
        $('img.dls_attackbox_rightarm', box).data({roundNo: ix, hitpoint: 'rightarm'});
        return box;
    };
    var updateAttackbox = function (ix) {
        $('#dls_off_r' + ix + ' img', DuelsWindow.DOM).attr('src', 'https://westrus.innogamescdn.com/images/window/duels/hit_grey.png');
        $('#dls_off_r' + ix + ' img.dls_attackbox_' + settingsObj.aim[ix], DuelsWindow.DOM).attr('src', 'https://westrus.innogamescdn.com/images/window/duels/hit_red.png');
    };
    var updateAttackboxes = function () {
        for (var i = 1; i < 5; i++)
            updateAttackbox(i);
    };
    var getDefendbox = function (ix) {
        var box = $('<div id="dls_def_r' + ix + '" class="dls_defendbox"></div>').append
        ($('<img src="https://westrus.innogamescdn.com/images/window/duels/duel_defense_aim.png" class="dls_defend_aim dls_defend" title="' + 'Хорошо прицелившись в этом раунде, ты повышаешь шансы попадания в следующем раунде. Разумеется, в тебя при этом тоже нетрудно попасть.' + '" />').data({
            roundNo: ix,
            defendtactic: 'aim'
        }), $('<img src="https://westrus.innogamescdn.com/images/window/duels/duel_defense_left.png" class="dls_defend_left dls_defend" title="' + 'В этом раунде ты уворачиваешься <strong>влево</strong> и снижаешь тем самым шансы удара с <strong>правой стороны</strong>.' + '" />').data({
            roundNo: ix,
            defendtactic: 'left'
        }), $('<img src="https://westrus.innogamescdn.com/images/window/duels/duel_defense_right.png" class="dls_defend_right dls_defend" title="' + 'В этом раунде ты уворачиваешься <strong>вправо</strong> и снижаешь тем самым шансы удара с <strong>левой стороны</strong>.' + '" />').data({
            roundNo: ix,
            defendtactic: 'right'
        }), $('<img src="https://westrus.innogamescdn.com/images/window/duels/duel_defense_duck.png" class="dls_defend_duck dls_defend" title="' + 'В этом раунде ты наклоняешься и снижаешь шансы попадания <strong>в голову и плечи</strong>' + '" />').data({
            roundNo: ix,
            defendtactic: 'duck'
        }));
        return box;
    };
    var updateDefendbox = function (ix) {
        var selector = $('#dls_def_r' + ix, DuelsWindow.DOM);
        $('img.dls_defend', selector).hide();
        $('img.dls_defend_' + settingsObj.dodge[ix], selector).show();
    };
    var updateDefendboxes = function () {
        for (var i = 1; i < 5; i++)
            updateDefendbox(i);
    };
    var swapDodge = function (round) {
        settingsObj.dodge[round] = getNextDodge(settingsObj.dodge[round]);
    };
    var getNextDodge = function (current) {
        switch (current) {
            case'left':
                return 'right';
            case'right':
                return 'duck';
            case'duck':
                return 'aim';
            case'aim':
                return 'left';
            default:
                return 'aim';
        }
    };
    DuelsWindow.updateDuelWeapon = function () {
        $('div.dls_weapon', DuelsWindow.DOM).html();
        duelData.weapon = Wear.wear.hasOwnProperty('right_arm') ? Wear.wear.right_arm.obj : ItemManager.get(0);
        if (duelData.weapon.sub_type == 'hand')
            $('div.dls_damage', DuelsWindow.DOM).empty().append(CharacterSkills.getSkill('punch').getSkillImage()); else
            $('div.dls_damage', DuelsWindow.DOM).empty().append(CharacterSkills.getSkill('shot').getSkillImage());
        $('div.dls_weapon', DuelsWindow.DOM).empty().append(new tw2widget.Item(duelData.weapon, 'item_duelweapon').setCharacter(Character).getMainDiv());
    };
    var showAnimation = function () {
        $('#dln_htmlreport_container', DuelsWindow.DOM).hide();
        var container = $('#dl_animationcontainer', DuelsWindow.DOM).empty();
        if (duelAnimation)duelAnimation.stop();
        duelAnimation = new west.duel.Animation(duelData.data.resultData).appendTo(container.show()).play();
    };
    var showHtmlAnimation = function () {
        EventHandler.signal('duel_report_started');
        $('#dl_animationcontainer', DuelsWindow.DOM).hide();
        $('#dln_htmlreport_container', DuelsWindow.DOM).addClass('disabledBG');
        var sel = $('#dln_htmlreport_container', DuelsWindow.DOM);
        var td = function (person) {
            if (person && person.damage) {
                return '<span class="dln_htmlreport_aimtext">' + person.aim_text + '</span><br />' + '<span class="dln_htmlreport_damage">- ' + person.damage + ' LP</span>';
            }
            return '<span style="font-size: 8pt; font-weight: bold">' + 'Мимо' + '</span>';
        };
        var fmtRound = function (round) {
            return '<tr><td style="text-align:right;" width="35%">' + td(round.other) + '</td>' + '<td><div class="dln_htmlreport_bg">' + '<div class="dln_htmlreport_attacker" style="background-position: 0px ' + (round.other ? round.other.sprite * -39 : 0) + 'px;"></div>' + '<div class="dln_htmlreport_defender" style="background-position: 0px ' + (round.own ? round.own.sprite * -39 : 0) + 'px;"></div>' + '</div></td>' + '<td width="35%">' + td(round.own) + '</td></tr>';
        };
        var scroll = new west.gui.Scrollpane('dln_htmlreport');
        var table = $('<table class="dln_htmlreport_table" style="width:90%"></table>');
        var rounds = npcduelData.html.rounds;
        for (var i = 0; i < rounds.length; i++) {
            table.append(fmtRound(rounds[i]));
        }
        scroll.appendContent(table).appendContent($('<table style="width:90%">' + fmtRound(npcduelData.html.summary_round) + '</table>' + '<h4 style="text-align:center;font-size:10pt">' + npcduelData.html.duelResult + '</h4>'));
        var sesRewards = '', sesData;
        if (npcduelData.html.sesData && npcduelData.html.sesData.length > 0) {
            sesRewards = '<p style="margin-top: 20px; text-align: center; font-weight: bold">' + 'Получено следующее вознаграждение:' + ' </p>';
            sesRewards += '<table style="margin: 10px auto; min-width: 130px;">';
            for (var eventName in npcduelData.html.sesData) {
                sesData = npcduelData.html.sesData[eventName];
                sesRewards += '<tr>';
                sesRewards += '<td title="' + sesData['report']['event_human'] + '"><img style="vertical-align:top;" src="https://westrus.innogamescdn.com/images/icons/' + sesData['event'] + '.png" /> ' + sesData['report']['event_human'] + '</td>';
                sesRewards += '<td>' + sesData['report']['amount'] + '</td>';
                sesRewards += '</tr>';
            }
            sesRewards += '</table>';
        }
        scroll.appendContent(sesRewards);
        sel.empty().append(scroll.getMainDiv()).show();
        EventHandler.signal('duel_report_finished');
    };
    var npcDuelButtonClicked = function (ev) {
        Ajax.remoteCall('duel', 'duel_npc', {duelnpc_id: ev.data.npc_id}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            Character.updateDailyTask('npcduels');
            var oldNPCs = duelData.npcs.npcs;
            duelData = json;
            for (var i = 0; i < oldNPCs.length; i++) {
                var oldNPC = oldNPCs[i];
                for (var n = 0; n < duelData.npcs.npcs.length; n++) {
                    var newNPC = duelData.npcs.npcs[n];
                    if (oldNPC.duelnpc_id == newNPC.duelnpc_id && i != n) {
                        duelData.npcs.npcs[n] = duelData.npcs.npcs[i];
                        duelData.npcs.npcs[i] = oldNPC;
                    }
                }
            }
            oldNPCs = undefined;
            npcduelData['animation'] = json.data;
            npcduelData['html'] = json.data;
            json.data.isAnimation = Config.get('duel.viewtype') == 1;
            json.data.isAnimation ? showAnimation() : showHtmlAnimation();
            if (!$('div.duel-npcduel div.dl_footer').hasClass('dln_footer2'))
                $('div.duel-npcduel div.dl_footer').addClass('dln_footer2');
            $('#dln_switch_reporttype', DuelsWindow.DOM).show().data('reporttype', json.data.isAnimation ? 'animation' : 'html');
            updateCharacterObject(json);
            if (json.attacker_died > 0) {
                Premium.updatePoints(json.premium_points);
                Character.setNuggets(json.premium_points);
                TaskQueue.init(json.task_queue);
                if (Character.homeTown) {
                    Character.setPosition(Character.homeTown.x, Character.homeTown.y);
                }
            }
            duelData.npcs.npcs = json.npcs.npcs;
            resetCountdown();
            updateNpcList();
            CharacterSkills.setBuffs(json.buffs);
        }, DuelsWindow);
    };
    var search4PvpOpponents = function () {
        pvp_searchObj.distance = parseInt(pvp_cbSearchtime.getValue()) * 60;
        pvp_searchObj.page = 0;
        getNewPlayerOpponents();
    };
    var getNewPlayerOpponents = function () {
        Ajax.remoteCall('duel', 'search_op', pvp_searchObj, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            duelData['pclist'] = json.oplist.pclist;
            pvp_searchObj.page = json.oplist.page;
            pvp_searchObj.next = json.oplist.next;
            updatePlayerList();
        }, DuelsWindow);
    };
    var sortOpponentList = function (ev) {
        var sortBy = $(ev.target).data('sortBy');
        pvp_searchObj.page = 0;
        if (sortBy != pvp_searchObj.sort) {
            pvp_searchObj.sort = sortBy;
            pvp_searchObj.order_by = 'ASC';
        }
        else {
            pvp_searchObj.order_by = pvp_searchObj.order_by == 'ASC' ? 'DESC' : 'ASC';
        }
        $('div.dlp_sortheader img.sort_index', DuelsWindow.DOM).removeClass('sort_index');
        $(ev.target).addClass('sort_index');
        getNewPlayerOpponents();
        updatePagebar();
    };
    var switchPage = function (chosenButton) {
        if (chosenButton == 'next') {
            pvp_searchObj.page += 1;
        }
        else if (chosenButton == 'prev') {
            pvp_searchObj.page -= 1;
        }
        else {
            pvp_searchObj.page = 0;
        }
        getNewPlayerOpponents();
        updatePagebar();
    };
    var updateCharacterObject = function (data) {
        Character.setMoney(data.money);
        if ($.isNumeric(data.motivation))Character.setDuelMotivation(data.motivation);
        if ($.isNumeric(data.motivation_npc))Character.setNPCDuelMotivation(data.motivation_npc);
        Character.setEnergy(Math.floor(data.energy));
        Character.setHealth(Math.floor(data.health));
        if (data.level)Character.setLevel(data.level);
        if ($.isNumeric(data.experience))Character.setExperience(data.experience);
    };
    var duelWon = function (own, other) {
        return own.damage > other.damage;
    };
    DuelsWindow.updateDuelMotivationBar = function () {
        if (!duelMotivationProgressbar)return false;
        if (duelTab == 'npcduel') {
            duelMotivationProgressbar.setValue(Character.npcDuelMotivation, 1);
        } else if (duelTab == 'playerduel') {
            duelMotivationProgressbar.setValue(Character.duelMotivation, 1);
        }
        $('div.dl_motivation', DuelsWindow.DOM).empty().append(duelMotivationProgressbar.getMainDiv());
        $('div.tw2gui_progressbar_contents', DuelsWindow.DOM).prepend('Мотивация к дуэли' + ':&nbsp;');
    };
    var updatePagebar = function () {
        if (!pvp_pagebar) {
            if (!pvp_searchObj)return false;
            pvp_pagebar = new west.gui.Pagebar(1, null, switchPage, null, pvp_searchObj.next);
        }
        else {
            pvp_pagebar.update(pvp_searchObj.page + 1, false, pvp_searchObj.next);
        }
        $('div.duel-playerduel div.dl_footer', DuelsWindow.DOM).append(pvp_pagebar.getMainDiv());
    };
    var changeTacticMode = function (ev) {
        if ($(ev.target).data('hitpoint')) {
            settingsObj.aim[$(ev.target).data('roundNo')] = $(ev.target).data('hitpoint');
            updateAttackbox($(ev.target).data('roundNo'));
        }
        else {
            swapDodge($(ev.target).data('roundNo'));
            updateDefendbox($(ev.target).data('roundNo'));
        }
        if (saveInProgress) {
            window.clearTimeout(saveInProgress);
        }
        saveInProgress = window.setTimeout(saveTacticSettings, 3000);
    };
    var saveTacticSettings = function () {
        window.clearTimeout(saveInProgress);
        Ajax.remoteCall('duel', 'save_settings', {settings: JSON.stringify(settingsObj)}, function (json) {
            saveInProgress = false;
            if (json.error) {
                new UserMessage(json.msg).show();
                settingsObj.aim = $.fn.cloneObj(duelData.aim);
                settingsObj.dodge = $.fn.cloneObj(duelData.dodge);
                updateAttackboxes();
                updateDefendboxes();
                return false;
            }
            duelData.aim = $.fn.cloneObj(settingsObj.aim);
            duelData.dodge = $.fn.cloneObj(settingsObj.dodge);
        }, DuelsWindow);
    };
    var getNewNpcList = function (id, diff) {
        if (diff > 0) {
            $('#' + id).text(diff.getTime2EndString(false));
            return true;
        }
        Ajax.remoteCall('duel', 'reload', {}, function (json) {
            if (json.error)new UserMessage(json.msg).show();
            duelData.npcs = json.npcs;
            updateNpcList();
            resetCountdown();
        }, DuelsWindow);
        return true;
    };
    var npcListTick = function (id, diff) {
        var selRowFiBut = $('#dln_npcduel_' + id, DuelsWindow.DOM);
        var selRowNpcBox = $('#dl_npc_box_' + id, DuelsWindow.DOM);
        if (diff > 1) {
            selRowFiBut.hide();
            $('span.dln_ready_in_time', selRowNpcBox).text(diff.getTime2EndToken('Ждёт'));
        }
        else {
            selRowFiBut.show().off("click").click({npc_id: id}, npcDuelButtonClicked).removeClass('disabled_row');
            $('span.dln_ready_in_time', selRowNpcBox).remove();
            selRowNpcBox.removeClass('disabled_row');
        }
    };
    var switchReporttype = function () {
        if ($('#dln_switch_reporttype', DuelsWindow.DOM).data('reporttype') === 'animation') {
            Config.set('duel.viewtype', 0);
            showHtmlAnimation();
            $('#dln_switch_reporttype', DuelsWindow.DOM).data('reporttype', 'html');
        }
        else {
            Config.set('duel.viewtype', 1);
            showAnimation();
            $('#dln_switch_reporttype', DuelsWindow.DOM).data('reporttype', 'animation');
        }
    };
})(jQuery);

var AchievementWindow = null;
var AchievementExplorer = null;
;
(function ($) {
    achieved_popup = function (achvIds) {
        if (LinearQuestHandler.hasTutorialQuest())return;
        Ajax.remoteCall('achievement', 'get_achievements', {achvids: achvIds.join(',')}, function (json) {
            if (!json || json.error)return;
            var popup = $("#achievement-popup"), inDelay = 1000;
            if (popup.length == 0) {
                popup = $("<div id='achievement-popup' />");
                $('#popup-container').append(popup);
                inDelay = 0;
            }
            var handleOpen = function (achvCont) {
                return function () {
                    var glowDiv = $('.achievement_glow', achvCont), fxChlds = $(".achievement_fx_wrapper", achvCont).children(), fxIn = 0, fxOut = 500;
                    for (var i = 0; i < fxChlds.length; i++) {
                        $(fxChlds[i]).delay(fxIn).fadeIn('normal').delay(fxOut).fadeOut('normal');
                        fxIn += 200;
                        fxOut -= 50;
                    }
                    glowDiv.delay(200).fadeIn('slow').delay(1000).fadeOut('slow');
                    achvCont.fadeIn('slow').delay(3000).fadeOut('fast', handleClose(achvCont));
                };
            };
            var handleClose = function (container) {
                return function () {
                    container.remove();
                    if (0 == popup.children().length)
                        popup.remove();
                };
            };
            $.each(json, function (k, v) {
                var achvCont = $("<div style='position:relative;' />");
                if (undefined === v.isInSlots) {
                    v.isInSlots = $.inObject(v.id, Character.achievementSlots);
                }
                tw2widget.achievement.create(v, null, true).appendTo(achvCont);
                achvCont.append("<div class='achievement_fx_wrapper'>"
                    + "<div class='achievement_fx g01' />"
                    + "<div class='achievement_fx g02' />"
                    + "<div class='achievement_fx g03' />"
                    + "<div class='achievement_fx g04' />"
                    + "<div class='achievement_fx g05' />"
                    + "<div class='achievement_fx g06' />"
                    + "<div class='achievement_fx g07' />"
                    + "</div>"
                    + "<div class='achievement_glow' />");
                $.each(v.rewards, function (rk, rv) {
                    eval(rv.js);
                });
                var achvClone = achvCont.clone();
                popup.prepend(achvCont);
                $('.cb2showachievements', achvCont).hide();
                $('.achievement', achvCont).css({'min-height': '96px', 'max-height': '96px'});
                $('.achievement_content', achvCont).css({'height': '42px', 'overflow': 'hidden'});
                $('.achievement_expand_wrap', achvCont).hide();
                $('#achievement_progress', achvCont).hide();
                achvCont.hide();
                setTimeout(handleOpen(achvCont), inDelay);
                WestUi.NotiBar.add(new OnGoingAchievementEntry(achvClone));
                inDelay += 1000;
            });
        });
    };
    wman.registerReloadHandler(/^playerachievement-\d+/, function (uid) {
        AchievementWindow.open(uid.match(/\d+/)[0]);
    });
    AchievementWindow = function (playerid, tab) {
        this.playerid = playerid;
        var that = this;
        var tabclick = function (win, id) {
            that.showTab(id);
        };
        this.window = wman.open("playerachievement-" + playerid, null, "achievements").setMiniTitle("Достижения").addTab("Обзор", 'overview', tabclick).addTab("Достижения", 'explorer', tabclick).addTab("Статистика", 'statistic', tabclick).setMinSize(748, 471).setMaxSize(748, 820);
        this.Overview = new AchievementOverview(playerid, this.window);
        this.Explorer = new AchievementExplorer(playerid, this.window);
        this.Statistic = new AchievementStatistic(playerid, this.window);
        AchievementWindow.DOM = $('playerachievement-' + this.playerid + ' tw2gui_window_content_pane');
        this.showTab(undefined == tab ? 'overview' : tab);
    }
    AchievementWindow.prototype = AchievementWindow;
    var _achv_instances = {};
    AchievementWindow.open = function (playerid, tab) {
        if (undefined == playerid || null == playerid || 0 == playerid)
            playerid = Character.playerId;
        _achv_instances[playerid] = new AchievementWindow(playerid, tab);
        return _achv_instances[playerid];
    }
    AchievementWindow.getInstance = function (playerid) {
        return _achv_instances[playerid];
    };
    AchievementWindow.showTab = function (id) {
        if (!this.window)return;
        this.window.activateTab(id).$("div.tw2gui_window_content_pane > *").each(function (i, e) {
            if ($(e).hasClass("achievement-" + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).delay(2000).hide();
            }
        });
        this.window.removeClass('explorerbg').removeClass("overviewbg");
        this.window.setTitle("").setSize(748, 471).setResizeable(false);
        switch (id) {
            case"overview":
                this.window.addClass('overviewbg');
                this.window.setTitle("Обзор");
                this.Overview.init();
                break;
            case"statistic":
                this.window.addClass('statisticbg');
                this.Statistic.init();
                break;
            case"explorer":
            default:
                this.window.setResizeable(true);
                this.window.addClass('explorerbg');
                this.Explorer.init();
                break;
        }
        return this;
    };
    AchievementOverview = function (playerid, win) {
        this.playerid = playerid;
        this.window = win;
        this.element = $("<div class='achievement-overview'/>");
        this.boxEl = $("<div class='achievement-box'/>");
        this.progressEl = $("<div class='achievement-completed'/>");
        this.isOwn = false;
        this.window.appendToContentPane(this.element);
    }
    AchievementOverview.prototype = AchievementOverview;
    AchievementOverview.init = function () {
        this.element.empty();
        this.boxEl.empty();
        this.progressEl.empty();
        var that = this;
        Ajax.remoteCall('achievement', 'get_overview', {playerid: this.playerid}, function (resp) {
            that.isOwn = null == resp.pname;
            if (that.isOwn) {
                EventHandler.listen('achievement_slot_changed', that.setSlot, that, {boundto: that.window});
            }
            $.each(resp.box, function (k, v) {
                that.setSlot(k, v);
            });
            that.boxEl.append($("<div class='cb'/>"));
            var icontranslate = function (name) {
                switch (name) {
                    case"general":
                        return "book";
                    case"heroics":
                        return "medal";
                    case"items":
                        return "box";
                    case"jobs":
                        return "hammer";
                    case"pve":
                        return "tree";
                    case"pvp":
                        return "gun";
                    case"quests":
                        return "comment";
                    case"social":
                        return "buddy";
                }
            };
            that.progressEl.append($("<div class='achievement-total-completed'/>").append(new west.gui.Progressbar().setValue(resp.total.achieved).setMaxValue(resp.total.contains).setLabel("Всего", "westblack").dropShadow().getMainDiv()));
            var cats = $("<div class='achievement-categories-total'/>");
            $.each(resp.catprogress, function (k, v) {
                cats.append($("<div class='entry'/>").append(new west.gui.Progressbar().setValue(v.achieved).setMaxValue(v.contains).setLabel(v.name, icontranslate(k)).setEndless("heroics" == k).dropShadow().getMainDiv()));
            });
            cats.append($("<div class='cb'/>"));
            that.progressEl.append(cats);
            that.element.append(that.boxEl, that.progressEl);
            if (null != resp.pname)
                that.window.setTitle("Просмотр %s".replace("%s", resp.pname));
        }, this);
    }
    AchievementOverview.setSlot = function (slot, achvdata) {
        var frame = $("#achvOview_" + this.playerid + "_" + slot, this.boxEl);
        if (!frame.length) {
            frame = $('<div class="achievement_icon_frame" id="achvOview_' + this.playerid + '_' + slot + '" />').append("<div class='box-achievement' />");
            if (this.isOwn) {
                var that = this;
                frame.click(function () {
                    that.selectSlot(slot);
                });
            }
            this.boxEl.append(frame);
        }
        var achvBox = $(".box-achievement", frame).empty();
        if (false !== achvdata) {
            $('.tw2gui_iconbutton', frame).remove();
            var achv = tw2widget.achievement.create(achvdata, null, this.isOwn);
            achvBox.append($('<img src="' + achvdata.icon + '" alt="" width="55px" height="53px" />'), achv.getMainDiv()).hover(function () {
                achv.getMainDiv().show();
            }, function () {
                achv.getMainDiv().hide();
            });
        } else {
            if (this.isOwn)frame.append(new west.gui.Iconbutton(new west.gui.Icon('gear')).getMainDiv());
            frame.attr("title", "<b>" + (!this.isOwn ? "Пустой" : "Кликни сюда, чтобы разместить достижение") + "</b>");
        }
    }
    AchievementOverview.selectSlot = function (slot) {
        var req = function (id) {
            Ajax.remoteCall("achievement", "update_achievement_slot", {
                achieveId: id,
                slot: slot,
                del: null == id
            }, function (resp) {
                if (resp.error)return new UserMessage(resp.msg).show();
                if (null != id)Character.achievementSlots = $.insertValue2Object(id, Character.achievementSlots)
                else Character.achievementSlots = $.removeFromObject(id, Character.achievementSlots);
                messbox.hide();
                Character.achievementSlots[slot] = id;
                new UserMessage(resp.msg, UserMessage.TYPE_SUCCESS).show();
                EventHandler.signal("achievement_slot_changed", [slot, resp.achievement]);
                return true;
            });
        };
        var messbox = new west.gui.Dialog("Выбрать достижение").addButton("Убрать", function () {
            req(null);
        }).addButton("Отмена").setId('messb_achievement_choose');
        Ajax.remoteCall("achievement", "get_achieved", {playerid: this.playerid}, function (resp) {
            var content = $("<div class='achievement_slot_choose'/>"), grpname = "achvslotgrp";
            $.each(resp, function (k, v) {
                var acc = new west.gui.Accordion(v.id, v.name, grpname);
                $.each(v.content, function (k, data) {
                    acc.addContentRow($("<span><img src='" + data.icon + "'/>" + data.name + "</span>").click(function () {
                        req(data.id);
                    }));
                });
                content.append(acc.getMainDiv());
            });
            messbox.setText(content).show();
        });
    }
    AchievementExplorer = function (playerid, win) {
        this.playerid = playerid;
        this.window = win;
        this.window.appendToContentPane($("<div class='achievement-explorer'/>").append("<div class='achievement-menu'/>", "<div class='achievement-list'/>"));
        this.currentRoot = null;
    }
    AchievementExplorer.prototype.init = function () {
        var that = this;
        Ajax.remoteCall('achievement', '', {playerid: this.playerid}, function (json) {
            that.updateMenu(json.menu);
            that.updateContent(json.list);
        }, this);
        return this;
    };
    AchievementExplorer.prototype.updateMenu = function (data) {
        var that = this;
        var ul, appendLink, frame, scrollpane, el;
        var maxcharlength = 20;
        el = this.window.$('div.achievement-explorer > .achievement-menu', AchievementWindow.DOM);
        scrollpane = new west.gui.Scrollpane();
        ul = $('<ul/>');
        appendLink = function (el, v, isSub) {
            var li, a, subc, name;
            subc = 0;
            if (undefined != v.sub)
                subc = v.sub.length;
            name = v.name;
            if (name.length > (isSub ? maxcharlength - 4 : maxcharlength))
                name = name.substr(0, (isSub ? maxcharlength - 4 : maxcharlength)) + "...";
            li = $('<li/>', {'class': v.id});
            a = new west.gui.Button(name, function () {
                that.showContentOf(v.id, isSub);
            }).setWidth(isSub ? 170 : 185);
            if (subc > 0)
                a.addClass('has-submenu');
            a.appendTo(li);
            if (subc > 0) {
                var subul = $('<ul/>');
                $.each(v.sub, function (k, v) {
                    appendLink(subul, v, true);
                });
                li.append(subul);
            }
            el.append(li);
        };
        $.each(data, function (k, v) {
            appendLink(ul, v, false);
        });
        scrollpane.appendContent(ul);
        el.empty();
        el.append(scrollpane.getMainDiv());
        return this;
    };
    AchievementExplorer.prototype.updateContent = function (data) {
        var title, progress, ul, appendToUl, frame, scrollpane, el, titlediv;
        el = this.window.$('div.achievement-explorer > .achievement-list', AchievementWindow.DOM);
        el.empty();
        frame = $('<div style="padding: 5px 0;"/>');
        scrollpane = new west.gui.Scrollpane();
        el.append($("<div class='achievement-list-scroll-wrapper'/>").append(scrollpane.getMainDiv()));
        progress = new west.gui.Progressbar()
        if (null == data.pachv)data.pachv = {};
        var that = this;
        if (data.achievements.inslot !== undefined && data.pname == null)
            Character.achievementSlots = data.achievements.inslot;
        for (var achv in data.achievements) {
            if (!data.achievements.hasOwnProperty(achv))continue;
            if (achv != 'inslot') {
                $.each(data.achievements[achv], function (k, v) {
                    v.isInSlots = $.inObject(v.id, Character.achievementSlots);
                    var a = tw2widget.achievement.create(v, that, that.playerid == Character.playerId);
                    if (undefined != data.pachv[v.id])
                        a.iAchieved();
                    a.appendTo(frame);
                });
            }
        }
        if (!data.folder.hideProgressbar) {
            scrollpane.appendContent(progress.getMainDiv());
            progress.setValue(data.folder.progress.achieved);
            progress.setMaxValue(data.folder.progress.contains);
        }
        scrollpane.appendContent(frame);
        titlediv = $('<div class="tw2gui_inner_window_title">' + '<div class="tw2gui_inner_window_title_left"/>' + '<div class="tw2gui_inner_window_title_right"/></div>');
        var txt = data.folder.name;
        if (null != data.pname) {
            txt = txt + " [" + data.pname + "]";
            $('.cb2showachievements', frame).remove();
        }
        new west.gui.Textart(txt, 500, 32, "bold 20pt Times New Roman").appendTo(titlediv);
        el.append(titlediv);
        return this;
    };
    AchievementExplorer.prototype.showContentOf = function (id, isSub) {
        var that = this;
        if (undefined == that.window.$('div.achievement-explorer > .achievement-menu', AchievementWindow.DOM))
            return;
        Ajax.remoteCall('achievement', 'get_list', {folder: id, playerid: this.playerid}, function (json) {
            if (json.error)return;
            that.updateContent(json);
            if (true != isSub)
                that.handleMenuDisplay(id);
        }, that);
        return that;
    };
    AchievementExplorer.prototype.forwardTo = function (achvid) {
        var that = this;
        if (undefined == that.window.$('div.achievement-explorer > .achievement-menu', AchievementWindow.DOM))
            return;
        Ajax.remoteCall('achievement', 'forward_to', {
            achievement_id: achvid,
            playerid: that.playerid
        }, function (json) {
            if (json.error)return;
            that.updateContent(json);
            that.handleMenuDisplay(json.folder.id, json.folder.isSub);
        });
        return that;
    }
    AchievementExplorer.prototype.handleMenuDisplay = function (id) {
        var el = this.window.$("." + id, AchievementWindow.DOM);
        if (this.currentRoot == id) {
            if (el.hasClass("expanded"))
                el.removeClass("expanded")
            else
                el.addClass("expanded")
        }
        else {
            if (null != this.currentRoot)
                this.window.$("." + this.currentRoot, AchievementWindow.DOM).removeClass("expanded");
            el.addClass("expanded");
            this.currentRoot = id;
        }
    };
    AchievementStatistic = function (playerid, win) {
        this.playerid = playerid;
        this.window = win;
        this.window.appendToContentPane("<div class='achievement-statistic'/>");
    }
    AchievementStatistic.prototype = AchievementStatistic;
    AchievementStatistic.init = function () {
        var that = this;
        Ajax.remoteCall('achievement', 'get_statistic', {playerid: this.playerid}, function (json) {
            var table = new west.gui.Table().addColumn('desc').addColumn('value').appendToCell('head', 'desc').appendToCell('head', 'value');
            var i = 0;
            $.each(json.stats, function (k, v) {
                if (i != 0)
                    table.appendRow();
                table.appendRow($('<h2>' + k + '</h2>'));
                $.each(v, function (kk, vv) {
                    table.appendRow().appendToCell(-1, 'desc', kk).appendToCell(-1, 'value', vv);
                });
                i++;
            });
            that.window.$('div.achievement-statistic', AchievementWindow.DOM).empty();
            table.appendTo(that.window.$('div.achievement-statistic', AchievementWindow.DOM));
        }, this);
        return this;
    };
})(jQuery);
;
(function ($) {
    window.ServerInfoWindow = {
        window: null,
        currentTab: "changelog",
        currentCampaign: null,
        Changelog: {window: null},
        Announcements: {window: null},
        WorldSettings: {window: null}
    };
    ServerInfoWindow.open = function (tab) {
        if (LinearQuestHandler.hasTutorialQuest())return;
        if (undefined === tab)tab = this.currentTab;
        var tabclick = function (win, id) {
            ServerInfoWindow.showTab(id);
        }
        ServerInfoWindow.Changelog.window = $("<div class='serverinfo-changelog selectable'/>");
        ServerInfoWindow.Announcements.window = $("<div class='serverinfo-announcements selectable'/>");
        ServerInfoWindow.WorldSettings.window = $("<div class='serverinfo-worldsettings selectable'/>");
        ServerInfoWindow.window = wman.open("serverinfo", "Информация", "noreload").setMiniTitle("Информация").addTab("Объявление мира", "announcements", tabclick).addTab("Журнал изменений", "changelog", tabclick).addTab("Настройки мира", "worldsettings", tabclick).appendToContentPane(ServerInfoWindow.Changelog.window).appendToContentPane(ServerInfoWindow.Announcements.window).appendToContentPane(ServerInfoWindow.WorldSettings.window).addEventListener(TWE('WINDOW_DESTROY'), this.onDestroy, this);
        this.showTab(tab);
    };
    ServerInfoWindow.onDestroy = function (ok) {
        if ('OK' === ok)return;
        if (ServerInfoWindow.currentCampaign) {
            Ajax.remoteCall('serverinfo', 'dismiss_campaign', {
                camp_id: ServerInfoWindow.currentCampaign.campaign_id,
                type: ServerInfoWindow.currentCampaign.type
            });
            for (var i = 0, l = Game.interstitialData.length; i < l; i++) {
                if (Game.interstitialData[i].campaign_id == ServerInfoWindow.currentCampaign.campaign_id) {
                    Game.interstitialData.splice(Game.interstitialData.indexOf(Game.interstitialData[i]), 1);
                    break;
                }
            }
        }
    };
    ServerInfoWindow.showTab = function (id) {
        if (!this.window)return;
        this.currentTab = id;
        this.window.activateTab(id).$('div.tw2gui_window_content_pane > *').each(function (i, e) {
            if ($(e).hasClass('serverinfo-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        ServerInfoWindow.window.setTitle("Информация");
        this.window.removeClass('announcements').removeClass('changelog').removeClass('worldsettings').addClass(id);
        switch (id) {
            case"changelog":
                ServerInfoWindow.Changelog.init();
                break;
            case"announcements":
                ServerInfoWindow.Announcements.init();
                break;
            case"worldsettings":
                ServerInfoWindow.WorldSettings.init();
                break;
        }
    };
    ServerInfoWindow.Changelog.init = function () {
        if ("" == this.window.text()) {
            var that = this;
            Ajax.remoteCallMode('serverinfo', 'get_changelog', {}, function (result) {
                var menuUl = $("<ul/>"), contentDiv = $("<div />"), contentScroll = new west.gui.Scrollpane(), i = 0;
                $.each(result['changelog'], function (k, v) {
                    var versionTitle = 'Версия $1'.replace('$1', k), changelog = $('<ul class="changelog"/>').hide();
                    var button = new west.gui.Button(versionTitle, function () {
                        $('.changelog', contentDiv).hide();
                        changelog.show();
                        contentScroll.scrollToTop();
                        ServerInfoWindow.window.setTitle(versionTitle);
                    }).setWidth(185);
                    $.each(v, function (type, notes) {
                        if ('title' != type) {
                            var type = $('<li style="font-size: 14px; font-weight: bold;">' + type + '</li>'), ul = $('<ul style="padding-bottom: 15px;"/>');
                            $.each(notes, function (k, note) {
                                ul.append($('<li style="padding-bottom: 4px">' + note + '</li>'));
                            });
                            changelog.append(type);
                            changelog.append(ul);
                        }
                    });
                    menuUl.append($("<li />").append(button.getMainDiv()));
                    contentDiv.append(changelog);
                    if (0 == i)button.click();
                    i++;
                });
                that.window.empty().append($("<div class='version-menu' />").append(new west.gui.Scrollpane().appendContent(menuUl).getMainDiv()), $("<div class='version-content' />").append(contentScroll.appendContent(contentDiv).getMainDiv()));
            }, ServerInfoWindow);
        }
    };
    ServerInfoWindow.Announcements.init = function () {
        var that = this;
        ServerInfoWindow.window.setTitle('Объявление');
        var nextPriority = 0;
        var nextCampaign = 0;
        if (0 === Game.interstitialData.length) {
            $('.tw2gui_window.serverinfo .tw2gui_window_content_pane').append('<div class="none_left"><h2>' + 'К сожалению, нет новых объявлений, проверь позже.' + '</h2></div>');
            return;
        }
        for (var i = 0, l = Game.interstitialData.length; i < l; i++) {
            if (Game.interstitialData[i].priority > nextPriority) {
                nextPriority = Game.interstitialData[i].priority;
                nextCampaign = Game.interstitialData[i];
            }
        }
        ServerInfoWindow.currentCampaign = nextCampaign;
        Ajax.remoteCall('serverinfo', 'track_view', {camp_id: nextCampaign.campaign_id, type: nextCampaign.type});
        if ('crm' === nextCampaign.type) {
            var imgUrl = "https://westrus.innogamescdn.com/images/crm/crm_" + nextCampaign.campaign_id + ".jpg";
            $('.announcements .tw2gui_window_tabbar').hide();
            $('.announcements .tw2gui_window_content_pane').css("cursor", "pointer");
            $('.announcements .tw2gui_inner_window_bg2').css("background-image", "url(" + imgUrl + ")");
            $.ajax({url: imgUrl, type: 'HEAD'}).fail(function () {
                $('.announcements .tw2gui_inner_window_bg2').css("background-image", "url(" + imgUrl.replace(Game.cdnURL, '') + ")");
            });
            if ('uri' == nextCampaign.cta) {
                $('.announcements .tw2gui_window_content_pane').wrap('<a href="' + nextCampaign.cta_uri + '" target="_blank"></a>').click(function () {
                    ServerInfoWindow.Announcements.readCRM();
                });
            } else {
                $('.announcements .tw2gui_window_content_pane').click(function () {
                    ServerInfoWindow.Announcements.readCRM();
                });
            }
        } else {
            this.elDisable = new west.gui.Button("Отметить как прочитанное", function () {
                that.read();
            });
            this.customInterstitial = false;
            var scroll = new west.gui.Scrollpane();
            scroll.appendContent(nextCampaign.content.announce);
            if ('custom' === nextCampaign.type) {
                if ('none' !== nextCampaign.content.reward.type) {
                    that.elDisable.setCaption('Взять вознаграждение').addClass('big_red');
                }
                that.customInterstitial = true;
                ServerInfoWindow.window.setTitle('Сообщение для тебя');
            }
            that.window.empty().append(scroll.getMainDiv(), $("<div class='wnd-footer' />").append(that.elDisable.getMainDiv())).toggleClass('custom_interstitial', ('custom' === nextCampaign.type));
        }
        ;
    };
    ServerInfoWindow.Announcements.readCRM = function () {
        Ajax.remoteCall('serverinfo', 'claim_reward', {camp_id: ServerInfoWindow.currentCampaign.campaign_id}, function (resp) {
            if (resp.reward !== undefined) {
                ServerInfoWindow.Announcements.handleReward(resp.reward);
            } else if (resp.error && resp.msg !== undefined) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
            }
            ServerInfoWindow.window.destroy('OK');
        });
    };
    ServerInfoWindow.Announcements.read = function () {
        Ajax.remoteCall('serverinfo', 'announcement_read', {custom: this.customInterstitial}, function (resp) {
            if (resp.reward !== undefined) {
                ServerInfoWindow.Announcements.handleReward(resp.reward);
            } else if (resp.error && resp.msg !== undefined) {
                new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
            }
            ServerInfoWindow.window.destroy('OK');
        });
    };
    ServerInfoWindow.Announcements.handleReward = function (rewardData) {
        var reward = new tw2widget.reward.RewardDialog('За труды', null, function () {
            ServerInfoWindow.Announcements.handleCta();
        });
        switch (rewardData.type) {
            case'payment':
                ServerInfoWindow.Announcements.handleCta();
                break;
            case'xp':
                Character.addExperience(rewardData.amount);
                reward.addReward(new tw2widget.reward.ExpReward(rewardData.amount));
                break;
            case'nuggets':
                Character.addNuggets(rewardData.amount);
                reward.addReward(new tw2widget.reward.NuggetReward(rewardData.amount));
                break;
            case'bonds':
                Character.addUpb(rewardData.amount);
                reward.addReward(new tw2widget.reward.BondReward(rewardData.amount));
                break;
            case'dollars':
                Character.addMoney(rewardData.amount);
                reward.addReward(new tw2widget.reward.DollarReward(rewardData.amount));
                break;
            case'dollarsByLevel':
                Character.addMoney(rewardData.amount);
                reward.addReward(new tw2widget.reward.DollarReward(rewardData.amount * Character.level));
                break;
            case'item':
                reward.addReward(new tw2widget.reward.ItemReward(rewardData.amount));
                EventHandler.signal('inventory_changed');
                if ('custom' === ServerInfoWindow.currentCampaign.type) {
                    setTimeout(function () {
                        Inventory.open().search(ItemManager.get(rewardData.amount).name);
                    }, 100);
                }
                break;
            case'longtimer':
                reward.addReward(new tw2widget.reward.PremiumReward('Пакет «Комфорт»', rewardData.amount));
                break;
        }
        if ('none' !== rewardData.type && 'payment' !== rewardData.type && 'premiumsale' !== rewardData.type) {
            reward.show();
        }
    };
    ServerInfoWindow.Announcements.handleCta = function () {
        switch (ServerInfoWindow.currentCampaign.cta) {
            case'itemShop':
                west.window.shop.open('serverInfoWindow_announcement_cta');
                west.window.shop._window.addEventListener(TWE('WINDOW_DESTROY'), function () {
                    ServerInfoWindow.Announcements.next();
                }, west.window.shop);
                break;
            case'cashShop':
                west.window.premium.open();
                setTimeout(function () {
                    west.window.premium._window.addEventListener(TWE('WINDOW_DESTROY'), function () {
                        ServerInfoWindow.Announcements.next();
                    }, west.window.premium);
                }, 2000);
                break;
            case'inventory':
                Inventory.open();
                Inventory.window.addEventListener(TWE('WINDOW_DESTROY'), function () {
                    ServerInfoWindow.Announcements.next();
                }, Inventory.window);
                break;
            default:
                ServerInfoWindow.Announcements.next();
                break;
        }
    };
    ServerInfoWindow.Announcements.next = function () {
        if (Game.interstitialData.length > 0) {
            ServerInfoWindow.open('announcements');
        }
    };
    ServerInfoWindow.WorldSettings.init = function () {
        var that = this;
        Ajax.remoteCallMode('serverinfo', 'get_worldsettings', {}, function (result) {
            var scroll = new west.gui.Scrollpane();
            scroll.appendContent(result['worldsettings']);
            that.window.empty().append(scroll.getMainDiv());
        }, ServerInfoWindow);
    };
})(jQuery);
;
(function ($) {
    window.RankingWindow = {
        Experience: {},
        DOM: '*',
        page: 0,
        tab: 'experience',
        Duels: {},
        Cities: {},
        Skills: {},
        HallofFame: {}
    };
    wman.registerReloadHandler(/^ranking/, function (uid) {
        RankingWindow.open();
    });
    RankingWindow.open = function (tab) {
        var tabclick = function (win, id) {
            RankingWindow.showTab(id);
        }
        RankingWindow.window = wman.open("ranking").setMiniTitle('Рейтинг').addTab('Опыт', 'experience', tabclick).addTab('Дуэли', 'duels', tabclick).addTab('Города', 'cities', tabclick).addTab('Навыки', 'skills', tabclick).addTab('Зал славы', 'halloffame', tabclick).appendToContentPane($('<div class="ranking-experience"/>'), $('<div class="ranking-duels"/>'), $('<div class="ranking-cities"/>'), $('<div class="ranking-skills"/>'), $('<div class="ranking-halloffame"/>'));
        $(RankingWindow.window.getContentPane()).addClass('selectable');
        RankingWindow.DOM = $('div.ranking');
        RankingWindow.tab = "experience";
        RankingWindow.Experience.init();
        RankingWindow.tab = "duels";
        RankingWindow.Duels.init();
        RankingWindow.tab = "cities";
        RankingWindow.Cities.init();
        RankingWindow.tab = "skills";
        RankingWindow.Skills.init();
        RankingWindow.HallofFame.init();
        RankingWindow.showTab("experience");
        if (tab) {
            RankingWindow.showTab(tab);
        }
    };
    RankingWindow.showTab = function (id) {
        RankingWindow.page = 0;
        RankingWindow.tab = id;
        if (!RankingWindow.window)return;
        RankingWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *', RankingWindow.DOM).each(function (i, e) {
            if ($(e).hasClass('ranking-' + id)) {
                $(e).children().fadeIn();
                $(e).show()
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        RankingWindow.window.removeClass("tabbg");
        RankingWindow.window.removeClass("tabbghalloffame");
        switch (id) {
            case'experience':
                RankingWindow.window.setTitle('Опыт');
                RankingWindow.Experience.initData();
                break;
            case'duels':
                RankingWindow.window.setTitle('Дуэли');
                RankingWindow.Duels.initData();
                break;
            case'cities':
                RankingWindow.window.setTitle('Города');
                RankingWindow.Cities.initData();
                break;
            case'skills':
                RankingWindow.window.addClass("tabbg");
                RankingWindow.window.setTitle('Навыки');
                RankingWindow.Skills.initData();
                break;
            case'halloffame':
                RankingWindow.window.addClass("tabbghalloffame");
                RankingWindow.window.setTitle('Зал славы');
                RankingWindow.HallofFame.initData();
                break;
            default:
                RankingWindow.window.setTitle('Опыт');
                RankingWindow.Experience.init();
                break;
        }
    };
    RankingWindow.buildFooter = function (town) {
        var footer = $('<div class="ranking_table_foot"><div id="rl_player_search" /><div id="rl_rank_search" /><div id="rl_button_search" /></div>');
        $('#rl_player_search', footer).append(new west.gui.Textfield("rl_player_search_" + RankingWindow.tab).setSize(18).getMainDiv());
        $('#rl_rank_search', footer).append(new west.gui.Textfield("rl_rank_search_" + RankingWindow.tab).setSize(5).getMainDiv());
        $('#rl_button_search', footer).append(new west.gui.Button('Найти', RankingWindow.search).getMainDiv());
        var searchlb = (town) ? 'Город' : 'Имя';
        $("#rl_player_search span.tw2gui_textfield span", footer).append("<span class='search_lable_span' >" + searchlb + "</span>");
        var select_plabel = $("#rl_player_search span.tw2gui_textfield span span", footer);
        $("#rl_player_search_" + RankingWindow.tab, footer).focus(function () {
            select_plabel.hide();
        });
        $("#rl_player_search_" + RankingWindow.tab, footer).focusout(function () {
            if ($('#rl_player_search_' + RankingWindow.tab, RankingWindow.DOM).val() == "")
                select_plabel.show();
        });
        select_plabel.click(function () {
            $("#rl_player_search_" + RankingWindow.tab, footer).focus();
        });
        $("#rl_rank_search span.tw2gui_textfield span", footer).append("<span class='search_lable_span' >" + 'Ранг' + "</span>");
        var select_rlabel = $("#rl_rank_search span.tw2gui_textfield span span", footer);
        $("#rl_rank_search_" + RankingWindow.tab, footer).focus(function () {
            select_rlabel.hide();
        });
        $("#rl_rank_search_" + RankingWindow.tab, footer).focusout(function () {
            if ($('#rl_rank_search_' + RankingWindow.tab, RankingWindow.DOM).val() == "")
                select_rlabel.show();
        });
        $("#rl_player_search_" + RankingWindow.tab, footer).keydown(function (e) {
            if (e.keyCode == 13) {
                RankingWindow.search();
                $("#rl_player_search_" + RankingWindow.tab, footer).blur();
            }
        });
        $("#rl_rank_search_" + RankingWindow.tab, footer).keydown(function (e) {
            if (e.keyCode == 13) {
                RankingWindow.search();
                $("#rl_rank_search_" + RankingWindow.tab, footer).blur();
            }
        });
        select_rlabel.click(function () {
            $("#rl_rank_search_" + RankingWindow.tab, footer).focus();
        });
        footer.append($('<div class="rl_pagebar_ranking" />'));
        return footer;
    };
    RankingWindow.Experience.init = function () {
        var maindiv = $('<div></div>');
        var footer = RankingWindow.buildFooter();
        RankingWindow.Experience.Table = new west.gui.Table().setId('ranking_exptable').createEmptyMessage('Рейтинг ещё пуст!').appendTo(maindiv).addColumn("exp_rank").addColumn("exp_playername").addColumn("exp_level").addColumn("exp_exp").addColumn("exp_class").addColumn("exp_town").appendToThCell("head", "exp_rank", 'Ранг', 'Ранг').appendToThCell("head", "exp_playername", 'Имя персонажа', 'Имя персонажа').appendToThCell("head", "exp_level", 'Ур.', 'Ур.').appendToThCell("head", "exp_exp", 'Опыт', 'Опыт').appendToThCell("head", "exp_class", 'Тип', 'Тип').appendToThCell("head", "exp_town", 'Город', 'Город').appendToFooter('exp_rank', footer);
        $('div.ranking-experience', RankingWindow.DOM).empty().append(maindiv);
    };
    RankingWindow.Experience.initData = function () {
        Ajax.remoteCallMode('ranking', 'get_data', {page: RankingWindow.page, tab: RankingWindow.tab}, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            RankingWindow.Experience.updateTable(json);
        }, RankingWindow);
    };
    RankingWindow.Experience.updateTable = function (be_data) {
        RankingWindow.Experience.Table.clearBody();
        var tmpCells = {};
        var highlight_row;
        RankingWindow.page = be_data.page;
        var data = be_data.ranking;
        $('div.ranking-experience div.rl_pagebar_ranking', RankingWindow.DOM).empty().append(new west.gui.Pagebar(RankingWindow.page, be_data.pages, jump2Page).getMainDiv());
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var name_title = (rd.title) ? rd.title + rd.name : rd.name;
            var name_link = '<a href="javascript:void(PlayerProfileWindow.open(' + rd.player_id + '));">' + name_title + '</a>';
            var town = '<a href="javascript:Map.center(' + rd.town_x + ',' + rd.town_y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.town_x + ',' + rd.town_y + ');\' > ' + rd.town_name + '</a>';
            tmpCells['exp_rank'] = rd.counter;
            tmpCells['exp_playername'] = "<span title='" + name_title.escapeHTML() + "'>" + name_link + "</span>";
            tmpCells['exp_level'] = rd.level;
            tmpCells['exp_exp'] = rd.experience;
            tmpCells['exp_class'] = (rd['class']) ? '<img title="' + Game.InfoHandler.getLocalString4Charclass(rd["class"]) + '" src="https://westrus.innogamescdn.com/images/class_choose/class_' + rd['class'] + '.png" />' : '';
            tmpCells['exp_town'] = (rd.town_name) ? town : '-';
            highlight_row = rd.highlight;
            RankingWindow.Experience.Table.buildRow('exp_rank_' + rd.counter, tmpCells, (highlight_row) ? function (row) {
                row.addClass("highlight_row");
                return row;
            } : null);
        }
    };
    RankingWindow.search = function (tab, search_string, search_rank) {
        if ('string' === typeof tab) {
            if (wman.isWindowCreated('ranking')) {
                if (tab !== RankingWindow.tab) {
                    RankingWindow.showTab(tab);
                }
            } else {
                RankingWindow.open(tab);
            }
        }
        var rank = parseInt($('#rl_rank_search_' + RankingWindow.tab, RankingWindow.DOM).val(), 10) || parseInt(search_rank, 10);
        var player = $('#rl_player_search_' + RankingWindow.tab, RankingWindow.DOM).val() || search_string;
        Ajax.remoteCallMode('ranking', 'get_data', {
            rank: rank,
            search: player,
            tab: RankingWindow.tab
        }, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            $('#rl_player_search_' + RankingWindow.tab, RankingWindow.DOM).val("").focusout();
            $('#rl_rank_search_' + RankingWindow.tab).val("").focusout();
            RankingWindow.loadTab(json);
        }, RankingWindow);
    };
    RankingWindow.loadTab = function (data) {
        switch (RankingWindow.tab) {
            case'experience':
                RankingWindow.Experience.updateTable(data);
                break;
            case'duels':
                RankingWindow.Duels.updateTable(data);
                break;
            case'cities':
                RankingWindow.Cities.updateTable(data);
                break;
            case'skills':
                RankingWindow.Skills.updateTable(data);
                break;
            case'halloffame':
                RankingWindow.HallOfFame.updateTable(data);
                break;
        }
    };
    var jump2Page = function (page) {
        if (RankingWindow.page == parseInt(page))return;
        RankingWindow.page = parseInt(page);
        switch (RankingWindow.tab) {
            case'experience':
                RankingWindow.Experience.initData();
                break;
            case'duels':
                RankingWindow.Duels.initData();
                break;
            case'cities':
                RankingWindow.Cities.initData();
                break;
            case'skills':
                RankingWindow.Skills.initData();
                break;
            case'halloffame':
                RankingWindow.HallofFame.initData();
                break;
        }
    };
    RankingWindow.Duels.init = function () {
        var maindiv = $('<div></div>');
        var footer = RankingWindow.buildFooter();
        RankingWindow.Duels.Table = new west.gui.Table().setId('ranking_duel').createEmptyMessage('Рейтинг ещё пуст!').appendTo(maindiv).addColumn("duel_rank").addColumn("duel_playername").addColumn("duel_exp").addColumn("duel_win").addColumn("duel_loss").addColumn("duel_diff").addColumn("duel_town").appendToThCell("head", "duel_rank", 'Ранг', 'Ранг').appendToThCell("head", "duel_playername", 'Имя персонажа', 'Имя персонажа').appendToThCell("head", "duel_exp", 'Дуэльный опыт', 'Опыт').appendToThCell("head", "duel_win", 'Победы на дуэлях', 'Поб.').appendToThCell("head", "duel_loss", 'Поражения на дуэлях', 'Пор.').appendToThCell("head", "duel_diff", 'Разница побед и поражений на дуэлях', 'Разн.').appendToThCell("head", "duel_town", 'Город', 'Город').appendToFooter('duel_rank', footer);
        $('div.ranking-duels', RankingWindow.DOM).empty().append(maindiv);
    };
    RankingWindow.Duels.initData = function () {
        Ajax.remoteCallMode('ranking', 'get_data', {page: RankingWindow.page, tab: RankingWindow.tab}, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            RankingWindow.Duels.updateTable(json);
        }, RankingWindow);
    };
    RankingWindow.Duels.updateTable = function (be_data) {
        RankingWindow.Duels.Table.clearBody();
        var tmpCells = {};
        var highlight_row;
        RankingWindow.page = be_data.page;
        var data = be_data.ranking;
        $('div.ranking-duels div.rl_pagebar_ranking', RankingWindow.DOM).empty().append(new west.gui.Pagebar(RankingWindow.page, be_data.pages, jump2Page).getMainDiv());
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var name_title = (rd.title) ? rd.title + rd.name : rd.name;
            var name_link = '<a href="javascript:void(PlayerProfileWindow.open(' + rd.player_id + '));">' + name_title + '</a>';
            var town = '<a href="javascript:Map.center(' + rd.town_x + ',' + rd.town_y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.town_x + ',' + rd.town_y + ');\' > ' + rd.town_name + '</a>';
            tmpCells['duel_rank'] = rd.counter;
            tmpCells['duel_playername'] = "<span title='" + name_title.escapeHTML() + "'>" + name_link + "</span>";
            tmpCells['duel_exp'] = rd.experience;
            tmpCells['duel_win'] = rd.duel_win
            tmpCells['duel_loss'] = rd.duel_loss
            tmpCells['duel_diff'] = rd.difference
            tmpCells['duel_town'] = (rd.town_name) ? town : '-';
            highlight_row = rd.highlight;
            RankingWindow.Duels.Table.buildRow('duel_rank_' + rd.counter, tmpCells, (highlight_row) ? function (row) {
                row.addClass("highlight_row");
                return row;
            } : null);
        }
    };
    RankingWindow.Cities.init = function () {
        var maindiv = $('<div></div>');
        var footer = RankingWindow.buildFooter(true);
        RankingWindow.Cities.Table = new west.gui.Table().setId('ranking_cities').createEmptyMessage('Рейтинг ещё пуст!').appendTo(maindiv).addColumn("town_rank").addColumn("town_name").addColumn("town_points_sum").addColumn("town_points").addColumn("town_fort_points").addColumn("town_member_points").addColumn("town_duel_points").addColumn("town_member_count").addColumn("town_member_lvl").appendToThCell("head", "town_rank", 'Ранг', 'Ранг').appendToThCell("head", "town_name", 'Город', 'Город').appendToThCell("head", "town_points_sum", 'Суммарные очки', 'Очки').appendToThCell("head", "town_points", 'Очки города', '&nbsp;').appendToThCell("head", "town_fort_points", 'Очки фортов', '&nbsp;').appendToThCell("head", "town_member_points", 'Очки жителей', '&nbsp;').appendToThCell("head", "town_duel_points", 'Дуэльные очки', '&nbsp;').appendToThCell("head", "town_member_count", 'Жители', '&nbsp;').appendToThCell("head", "town_member_lvl", 'Средний уровень жителей', '&nbsp;').appendToFooter('town_rank', footer);
        $('div.ranking-cities', RankingWindow.DOM).empty().append(maindiv);
    };
    RankingWindow.Cities.initData = function () {
        Ajax.remoteCallMode('ranking', 'get_data', {page: RankingWindow.page, tab: RankingWindow.tab}, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            RankingWindow.Cities.updateTable(json);
        }, RankingWindow);
    };
    RankingWindow.Cities.updateTable = function (be_data) {
        RankingWindow.Cities.Table.clearBody();
        var tmpCells = {};
        var highlight_row;
        RankingWindow.page = be_data.page;
        var data = be_data.ranking;
        $('div.ranking-cities div.rl_pagebar_ranking', RankingWindow.DOM).empty().append(new west.gui.Pagebar(RankingWindow.page, be_data.pages, jump2Page).getMainDiv());
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var town = '<a href="javascript:Map.center(' + rd.town_x + ',' + rd.town_y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.town_x + ',' + rd.town_y + ');\' > ' + rd.town_name + '</a>';
            tmpCells['town_rank'] = rd.counter;
            tmpCells['town_name'] = (rd.town_name) ? town : '-';
            tmpCells['town_points_sum'] = rd.sum_points;
            tmpCells['town_points'] = rd.points;
            tmpCells['town_fort_points'] = rd.fort_points;
            tmpCells['town_member_points'] = rd.member_level_points;
            tmpCells['town_duel_points'] = rd.duel_diff_points;
            tmpCells['town_member_count'] = rd.member_count;
            tmpCells['town_member_lvl'] = rd.mean_level;
            highlight_row = rd.highlight;
            RankingWindow.Cities.Table.buildRow('cities_rank_' + rd.counter, tmpCells, (highlight_row) ? function (row) {
                row.addClass("highlight_row");
                return row;
            } : null);
        }
    };
    RankingWindow.Skills.init = function () {
        var maindiv = $('<div></div>');
        RankingWindow.Skills.skill = "strength";
        RankingWindow.Skills.menue = $('<ul class="submenu"></ul>').appendTo(maindiv);
        RankingWindow.Skills.Table = new west.gui.Table().setId('ranking_skills').createEmptyMessage('Рейтинг ещё пуст!').appendTo(maindiv).addColumn("skill_rank").addColumn("skill_playername").addColumn("skill_pointss").addColumn("skill_level").addColumn("skill_town").appendToThCell("head", "skill_rank", 'Ранг', 'Ранг').appendToThCell("head", "skill_playername", 'Имя персонажа', 'Имя персонажа').appendToThCell("head", "skill_pointss", 'Суммарные очки', 'Очки').appendToThCell("head", "skill_level", 'Уровень', 'Уровень').appendToThCell("head", "skill_town", 'Город', 'Город');
        $('div.ranking-skills', RankingWindow.DOM).empty().append(maindiv, '<div class="illegal_skill"></div>');
        var tmpA = [];
        for (var attribute in CharacterSkills.skillKeys4Attr) {
            var skills = CharacterSkills.skillKeys4Attr[attribute];
            var tmpArr = [];
            for (var x = 0; x < skills.length; x++) {
                tmpArr.push($("<li id='rank_subbutton_" + CharacterSkills.skillKeys4Attr[attribute][x] + "' class='skill_button'></li>").append(new west.gui.Button(CharacterSkills.keyNames[skills[x]], RankingWindow.Skills.subClick, skills[x]).setWidth(162).getMainDiv()));
            }
            tmpA.push($("<li id='rank_button_" + attribute + "'></li>").append(new west.gui.Button(CharacterSkills.keyNames[attribute], RankingWindow.Skills.subClick, attribute).setWidth(185).getMainDiv()).append($("<ul class='subsubmenu' id='rank_sub_" + attribute + "'></ul>").appendArray(tmpArr)));
        }
        RankingWindow.Skills.menue.appendArray(tmpA);
    };
    RankingWindow.Skills.subClick = function (data) {
        if ($('#rank_button_' + data.context, RankingWindow.DOM).length > 0) {
            $('.expanded', RankingWindow.Skills.menue).removeClass("expanded");
            $('#rank_button_' + data.context, RankingWindow.DOM).addClass("expanded");
        }
        if (RankingWindow.Skills.skill == data.context)return;
        RankingWindow.Skills.skill = data.context;
        RankingWindow.Skills.initData();
    };
    RankingWindow.Skills.initData = function () {
        Ajax.remoteCallMode('ranking', 'get_data', {
            page: RankingWindow.page,
            tab: RankingWindow.tab,
            skill: RankingWindow.Skills.skill,
            entries_per_page: 10
        }, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            RankingWindow.Skills.updateTable(json);
        }, RankingWindow);
    };
    RankingWindow.Skills.updateTable = function (data) {
        RankingWindow.Skills.Table.clearBody();
        var sel = $('div.ranking-skills .illegal_skill', RankingWindow.DOM);
        if (data.msg == "illegal_skill") {
            sel.empty().append('<img src="https://westrus.innogamescdn.com/images/icons/warn_circle.png" alt="Warn" />');
            sel.append("<strong>" + s("Навык «%1» не может быть показан.", CharacterSkills.keyNames[data.skill]) + "</strong><br />")
            sel.append("<div>" + s("Навык «%1» не может быть показан, поскольку играет стратегическую роль.", CharacterSkills.keyNames[data.skill]) + "</div>");
            sel.show();
            return false;
        }
        sel.hide();
        var tmpCells = {};
        var highlight_row;
        data = data.ranking;
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var name_title = (rd.title) ? rd.title + rd.name : rd.name;
            var name_link = '<a href="javascript:void(PlayerProfileWindow.open(' + rd.player_id + '));">' + name_title + '</a>';
            var town = '<a href="javascript:Map.center(' + rd.town_x + ', ' + rd.town_y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.town_x + ',' + rd.town_y + ');\' > ' + rd.town_name + '</a>';
            tmpCells['skill_rank'] = rd.counter;
            tmpCells['skill_playername'] = "<span title='" + name_title.escapeHTML() + "'>" + name_link + "</span>";
            tmpCells['skill_pointss'] = rd.skill_level;
            tmpCells['skill_level'] = rd.level;
            tmpCells['skill_town'] = (rd.town_name) ? town : '-';
            highlight_row = rd.highlight;
            RankingWindow.Skills.Table.buildRow('skill_rank_' + rd.counter, tmpCells, (highlight_row) ? function (row) {
                row.addClass("highlight_row");
                return row;
            } : null);
        }
    };
    RankingWindow.HallofFame.init = function () {
        var maindiv = $('<div></div>');
        RankingWindow.HallofFame.level = 150;
        RankingWindow.HallofFame.menue = $('<ul class="submenu"></ul>').appendTo(maindiv);
        $('<div class="halloffamecontent"></div>').appendTo(maindiv).append('<div class="bgpage"></div>');
        $('<div id="rl_pagebar_ranking_halloffame" />').appendTo(maindiv);
        $('div.ranking-halloffame', RankingWindow.DOM).empty().append(maindiv);
    };
    RankingWindow.HallofFame.subClick = function (data) {
        if (RankingWindow.HallofFame.level == data.context)
            return false;
        RankingWindow.page = 1;
        RankingWindow.HallofFame.level = data.context;
        RankingWindow.HallofFame.initData();
    };
    RankingWindow.HallofFame.initData = function () {
        Ajax.remoteCallMode('ranking', 'get_hof', {
            page: RankingWindow.page - 1,
            level: RankingWindow.HallofFame.level
        }, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            RankingWindow.HallofFame.updateTable(json);
        }, RankingWindow);
    };
    RankingWindow.HallofFame.updateTable = function (data) {
        var sub = [150, 120, 100, 80, 60];
        $.each(data.valid_level, function (k, l) {
            if (!$.fn.isInArray(l, sub)) {
                sub.push(l);
            }
        });
        sub.sort(function (a, b) {
            return parseInt(b) - parseInt(a);
        });
        RankingWindow.HallofFame.menue.empty();
        RankingWindow.HallofFame.button = [];
        var tmpA = [];
        for (var x = 0; x < sub.length; x++) {
            RankingWindow.HallofFame.button[sub[x]] = (new west.gui.Button(s("%1 уровень", sub[x]), RankingWindow.HallofFame.subClick, sub[x]).setWidth(190));
            tmpA.push($("<li id='rank_button_" + sub[x] + "'></li>").append(RankingWindow.HallofFame.button[sub[x]].disable().getMainDiv()));
        }
        RankingWindow.HallofFame.menue.appendArray(tmpA);
        for (var i = 0; i < data.valid_level.length; i++) {
            RankingWindow.HallofFame.button[data.valid_level[i]].enable();
        }
        RankingWindow.page = data.page;
        $('#rl_pagebar_ranking_halloffame', RankingWindow.DOM).empty().append(new west.gui.Pagebar(RankingWindow.page, data.pages, jump2Page).getMainDiv());
        $('div.halloffamecontent .bgpage', RankingWindow.DOM).hide();
        $('div.halloffamecontent', RankingWindow.DOM).append('<div class="rl_hof_playerlist"/>');
        $('div.halloffamecontent .rl_hof_playerlist', RankingWindow.DOM).empty();
        var tmpArr = [];
        if (RankingWindow.page > 1) {
            $('div.halloffamecontent .bgpage', RankingWindow.DOM).show();
            for (var x = 0; x < data.ranking.length; x++) {
                tmpArr.push(RankingWindow.HallofFame.buildplayer(data.ranking[x], x));
            }
        }
        else {
            tmpArr.push(RankingWindow.HallofFame.buildTopplayer(data.ranking[0]));
            for (var x = 1; x < data.ranking.length; x++) {
                tmpArr.push(RankingWindow.HallofFame.buildplayer(data.ranking[x], x + 1));
            }
        }
        $('div.halloffamecontent .rl_hof_playerlist', RankingWindow.DOM).appendArray(tmpArr);
    };
    RankingWindow.HallofFame.buildplayer = function (data, index) {
        var playerdiv = $('<div class="ranking_halloffame_player_' + index + '" title="' + RankingWindow.HallofFame.buildTitle(data).escapeHTML() + '" ></div>');
        var avatar = $('<div class="player_pic" id="ranking_halloffame_player_' + data.player_id + '" >' + data.avatar + '<div/>');
        var name = $('<div class="ranking_halloffame_playername"><a href="javascript:void(PlayerProfileWindow.open(' + data.player_id + '));">' + data.name + '</a></div>');
        playerdiv.append(avatar, name);
        return playerdiv;
    };
    RankingWindow.HallofFame.buildTopplayer = function (data) {
        var playerdiv = $('<div class="ranking_halloffame_player_top" title="' + RankingWindow.HallofFame.buildTitle(data).escapeHTML() + '" ></div>');
        var avatar = $('<div  id="ranking_halloffame_player_' + data.player_id + '"> ' + data.avatar + '<div/>');
        var name = '<div class="ranking_halloffame_playername_top"><a href="javascript:void(PlayerProfileWindow.open(' + data.player_id + '));">' + data.name + '</a></div>';
        playerdiv.append(avatar, name);
        return playerdiv;
    };
    RankingWindow.HallofFame.buildTitle = function (data) {
        var title = '<div  style="text-align:center;"><div style="width:72px; margin:0px auto">' + data.avatar + '</div><strong>' + data.name + '</strong><br />' +
            'Имя высечено в зале славы %1.'.replace('%1', data.reached) + '</div>';
        return title;
    };
})(jQuery);

(function ($) {
    wman.registerReloadHandler(/^playerprofile-\d+/, function (uid) {
        PlayerProfileWindow.open(parseInt(uid.match(/\d+/)[0]));
    });
    PlayerProfileWindow = function (id, tab) {
        var name;
        var playerId;
        if (typeof id === 'number') {
            playerId = id;
            this.uid = 'playerprofile-' + playerId;
            this.window = wman.open(this.uid, null, "playerprofile main").setMiniTitle("Профиль игрока");
        } else {
            name = id;
        }
        var that = this;
        Ajax.remoteCallMode("profile", "init", {name: name, playerId: playerId}, function (resp) {
            if (resp.error) {
                if (that.window)that.window.destroy();
                return new UserMessage(resp.message, UserMessage.TYPE_ERROR).show();
            }
            that.playerid = resp.playerid;
            that.uid = that.uid || 'playerprofile-' + that.playerid;
            that.window = that.window || wman.open(that.uid, null, "playerprofile main").setMiniTitle("Профиль игрока")
            that.tab = tab;
            that.Main = new PlayerProfileMain(that.playerid, that);
            that.Main.resp = resp;
            that.window.appendToContentPane(that.Main.window);
            that.Main.init();
        }, undefined !== this.window ? this : null);
    }
    PlayerProfileWindow.prototype = PlayerProfileWindow;
    PlayerProfileWindow.open = function (id, tab) {
        if (undefined === id)id = Character.playerId;
        return new PlayerProfileWindow(id, tab);
    }
    PlayerProfileMain = function (playerid, parent) {
        this.playerid = playerid;
        this.parent = parent;
        this.window = $("<div class='playerprofile-main'/>");
    }
    PlayerProfileMain.prototype = PlayerProfileMain;
    PlayerProfileMain.init = function () {
        var resp = this.resp;
        this.window.empty();
        this.setTitle(resp);
        this.setAvatar(resp);
        this.setWear(resp.wear, {level: resp.level});
        this.setProfession(resp.profession);
        this.setAchievementBox(resp.achvbox);
        this.setClass(resp.classKey, resp.className);
        this.setProfileInfo(resp);
        this.setInteract(resp);
        this.setProfileDesc(resp.profiledesc);
        this.registerEvents(!resp.lookother);
    }
    PlayerProfileMain.registerEvents = function (isOwn) {
        if (isOwn) {
            EventHandler.listen('achievement_slot_changed', this.setAchievementSlot, this, {boundto: this.parent.window});
        }
        EventHandler.listen('charavatar_changed_' + this.playerid, this.setAvatar, this, {boundto: this.parent.window});
    };
    PlayerProfileMain.setProfession = function (prof) {
        $(".profileprof", this.window).remove();
        if (null == prof)return;
        this.window.append($("<div title='" + prof.name + "' class='pp-prof pp-prof-" + prof.id + "'/>"));
    }
    PlayerProfileMain.setTitle = function (resp) {
        var town = resp.town;
        var tname = null === town ? "Без города" : ("<a href=\"javascript:TownWindow.open(" + town.town_x + "," + town.town_y + ");\">" + town.name + "</a>");
        var tscroll = null === town ? "" : $("<a href='javascript:Map.center(" + town.town_x + "," + town.town_y + ");' title='" + "Показать город на карте" + "'" + "class='tw2gui_inner_window_title_divider'/>");
        var pscroll = $("<a href='javascript:Map.center(" + resp.x + "," + resp.y + ");' title='" + "Показать игрока на карте" + "'" + "class='tw2gui_inner_window_title_divider'/>");
        this.parent.window.setTitle($("<div class='playerprofile-title' style='font-size:15pt;'/>").append($("<div class='playerprofile-title-player' title='" + resp.playertitle + " " + resp.playername + "'><span>"
            + resp.playertitle.cutIt(8) + "</span> " + resp.playername.cutIt(14) + "</div>").append(pscroll), $("<div class='playerprofile-title-town' title='" + (town === null ? "Без города" : town.name) + "'>" + tname + "</div>").append(tscroll)).html());
    }
    PlayerProfileMain.setWear = function (wear, character) {
        $("div.profilewear", this.window).remove();
        var e = $("<div class='profilewear'/>");
        this.window.append(e);
        for (var k in wear) {
            if ("player_id" == k)continue;
            var issmall = "yield" == k || "animal" == k;
            var itm = null;
            if (null != wear[k]) {
                itm = new tw2widget.Item(ItemManager.get(wear[k]), issmall ? 'item_profile_small' : 'item_profile').setShowbuffs(false).setCharacter(character).setShowSetBoni(Character.playerId === this.playerid).getMainDiv();
            }
            else {
                itm = $("<img src='https://westrus.innogamescdn.com/images/inventory/default/empty_" + k + ".png'/>");
                if (issmall)itm.attr({width: 44, height: 44});
            }
            itm.addClass("profilewear-" + k);
            e.append(itm);
        }
    }
    PlayerProfileMain.setClass = function (classKey, className) {
        $("div.characterclass", this.window).remove();
        this.window.append($("<div class='characterclass charclass-" + classKey + "' title='<b>"
            + "Тип персонажа: %s".replace("%s", className) + "</b>'/>"));
    }
    PlayerProfileMain.setAvatar = function (resp) {
        $("div.profileavatar", this.window).remove();
        var overlay = $("<div class='overlay'/>");
        if (resp.wanted)overlay.attr('title', SheriffWindow.createWantedTooltip(resp.wanted));
        if (resp.avatar.background) {
            var ava = $("<div class='img c_" + resp.westid + "'/>");
            tw2widget.avatarPicture(ava, "large", resp.avatar);
        } else if (resp.avatar.search('greenhorn') == -1) {
            var ava = $(resp.avatar);
            if (ava.is("img"))ava.css({margin: "16px 6px 6px 6px", border: "2px solid #000"});
        } else {
            var ava = $("<img />");
            if (ava.is("img"))ava.attr("src", 'https://westrus.innogamescdn.com/images/window/character/greenhorn_ava.png');
        }
        this.window.append($("<div class='profileavatar'/>").append(overlay, ava));
    }
    PlayerProfileMain.setAchievementBox = function (achvbox) {
        if (undefined == this.boxdiv)this.boxdiv = $("<div class='profileachv-box'/>");
        this.boxdiv.empty();
        var that = this;
        $.each(achvbox, function (k, v) {
            that.setAchievementSlot(k, v);
        });
        this.boxdiv.append($("<div class='cb'/>"));
        this.window.append(this.boxdiv);
    }
    PlayerProfileMain.setAchievementSlot = function (slot, achvdata) {
        var frame = $("#profslot_" + this.playerid + "_" + slot, this.boxdiv);
        if (!frame.length) {
            frame = $("<div id='profslot_" + this.playerid + "_" + slot + "' class='profileachv-slot'/>");
            this.boxdiv.append(frame);
        } else
            frame.empty();
        if (false !== achvdata) {
            var achv = tw2widget.achievement.create(achvdata, null, this.playerid == Character.playerId);
            frame.append($("<img src='" + achvdata.icon + "' alt='' width='32px' height='32px'/>"))
            frame.hover(function () {
                achv.getMainDiv().css("display", "block");
            }, function () {
                achv.getMainDiv().css("display", "none");
            });
            frame.append(achv.getMainDiv());
        }
        else
            frame.attr("title", "<b>" + "Пустой" + "</b>");
    }
    PlayerProfileMain.setInteract = function (resp) {
        if (!resp.lookother)return;
        $("div.profileinteract", this.window).remove();
        var el = $("<div class='profileinteract'/>");
        this.window.append(el);
        var addInteract = function (cname, title, callback, enabled) {
            if (undefined === enabled)enabled = true;
            var i = $("<div class='interact'/>");
            if (enabled) {
                i.addClass("interact-" + cname).attr("title", "<b>" + title + "</b>").css("cursor", "pointer").click(callback);
            }
            el.append(i);
        };
        var that = this;
        addInteract("addfriend", "Предложить дружбу", function () {
            FriendslistWindow.inviteIngameFriend(resp.playername);
        });
        addInteract("affront", "Пожаловаться", function () {
            Suggestion.showPopup('player_profile', resp.playerid);
        });
        addInteract("town", "Пригласить в город", function () {
            Ajax.remoteCall("profile", "invite_player", {player_id: resp.playerid}, function (data) {
                new UserMessage(data.msg, (data.error ? UserMessage.TYPE_ERROR : UserMessage.TYPE_SUCCESS)).show();
            }, that.parent);
        }, resp.caninvite)
        addInteract("mail", "Отправить телеграмму", function () {
            MessagesWindow.open('telegram', {insert_to: resp.playername});
        });
        addInteract("duel", "Дуэль", function () {
            SaloonWindow.startDuel(resp.playerid, resp.hasTown ? resp.town['alliance_id'] : 0, false, false, that.parent);
        }, resp.isDuelable);
        addInteract("wanted", "Назначить награду", function () {
            SheriffWindow.open(Character.homeTown.town_id, 'create', resp.playername);
        }, resp.canCreateWanted);
    }
    PlayerProfileMain.setProfileInfo = function (resp) {
        $("ul.profileinfo", this.window).remove();
        var ul = $("<ul class='profileinfo'/>");
        this.window.append(ul);
        var addInfo = function (cls, title, value) {
            if (undefined === cls || undefined === title || undefined === value)return;
            ul.append($("<li class='profileinfo-" + cls + "'/>").append("<div class='profileinfo-title'>" + title + "</div>", $("<div class='profileinfo-value'/>").append(value), "<div class='cb'/>"));
        };
        addInfo("status", "Статус", resp.status);
        addInfo("level", "Уровень", resp.level);
        addInfo("duellevel", "Дуэльный разряд", resp.duelLevel);
        addInfo("rank", "Ранг", resp.rank);
        var achv = $("<a href='#' title='<b>" + "Просмотреть достижения" + "</b>'>" + resp.achvpoints + "</a>");
        var that = this;
        achv.click(function () {
            AchievementWindow.open(that.playerid);
        });
        addInfo("achvpoints", "Очки достижений", achv);
        var alliance = "---";
        if (resp.hasTown && resp.town['alliance_id'])
            alliance = $("<a href='#'>" + resp.town['alliance_name'] + "</a>").click(function () {
                AllianceWindow.open(resp.town['alliance_id']);
            });
        addInfo("alliance", "Альянс", alliance);
    }
    PlayerProfileMain.setProfileDesc = function (desc) {
        $("div.profile-desc", this.window).remove();
        this.window.append($("<div class='profile-desc'/>").append(new west.gui.Scrollpane().appendContent("<div class='selectable'>" +
            Game.TextHandler.parse(desc) + "</div>").getMainDiv()));
    }
})(jQuery);
;
(function ($) {
    window.FriendslistWindow = {
        FriendsReward: {},
        FriendsInvite: {rewardPoints: 0, rewardLevel: 0, iconpath: '', isAvailable: true},
        Requests: {},
        OpenRequestsCounter: 0,
        DOM: null
    };
    FriendslistWindow.toggleOpen = function () {
        var wnd = wman.toggleOpen("friendslist");
        if (wnd && wnd.status === 'open') {
            FriendslistWindow.open(null, wnd.win);
        }
    };
    FriendslistWindow.open = function (tab, win_open) {
        var tabclick = function (win, id) {
            FriendslistWindow.showTab(id);
        };
        FriendslistWindow.window = (win_open || wman.open("friendslist")).setMiniTitle('Друзья').addTab('Призы', 'friendsreward', tabclick).addTab('Пригласить друзей', 'friendsinvite', tabclick).addTab('Ожидающие подтверждения', 'openrequests', tabclick).appendToContentPane($('<div class="friendslist-openrequests"/>'), $('<div class="friendslist-friendsreward"/>'), $('<div class="friendslist-friendsinvite"/>'));
        FriendslistWindow.DOM = FriendslistWindow.window.$('div.tw2gui_window_content_pane');
        $('div._tab_id_openrequests div.tw2gui_window_tab_text').append('<span id="openRequestsCounter"></span>');
        initData(tab);
        var opts = {boundto: FriendslistWindow.window};
        EventHandler.listen('friends_rewardpoints_changed', updateFriendpoints, null, opts);
        EventHandler.listen('friend_invitation_sent', FriendslistWindow.reload, null, opts);
    };
    FriendslistWindow.reload = function () {
        initData(FriendslistWindow.window.currentActiveTabId);
    };
    wman.registerReloadHandler(/^friendslist/, FriendslistWindow.reload);
    wman.registerReopenHandler(/^friendslist/, FriendslistWindow.reload);
    FriendslistWindow.showTab = function (id) {
        if (!FriendslistWindow.window)return;
        FriendslistWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *').each(function (i, e) {
            if ($(e).hasClass('friendslist-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'openrequests':
                FriendslistWindow.window.setTitle('Ожидающие подтверждения');
                FriendslistWindow.Requests.init();
                break;
            case'friendsreward':
                FriendslistWindow.window.setTitle('Призы');
                FriendslistWindow.FriendsReward.init();
                break;
            case'friendsinvite':
                FriendslistWindow.window.setTitle('Пригласить друга');
                FriendslistWindow.FriendsInvite.init();
                break;
        }
    };
    FriendslistWindow.showAddDialog = function () {
        new west.gui.TextInputDialog().setPlaceholder('Имя').setTitle('Добавить в друзья').setText('Введи ник игрока, которого ты хочешь добавить в друзья.').addButton('Пригласить', function (playerName) {
            FriendslistWindow.inviteIngameFriend(playerName);
        }).addButton('Отмена').show();
    };
    var achvRanges = [0, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000];
    var rewards = ['', 'Вознаграждение: Набитая трубка', 'Вознаграждение: 3000 очков опыта', 'Вознаграждение: 5000 долларов', 'Вознаграждение: Сундук генерала', 'Вознаграждение: Слон', 'Вознаграждение: Нож Сэма Хоукена', 'Вознаграждение: Сундук маршала', 'Вознаграждение: 2000 облигаций', 'Вознаграждение: 10 особых предметов на выбор', 'Вознаграждение: Три набора — маршала, шерифа и охранника'];
    FriendslistWindow.setOpenRequests = function (newCount) {
        FriendslistWindow.window.$('#openRequestsCounter').html('&nbsp;(' + newCount + ')');
        this.OpenRequestsCounter = newCount;
    };
    var initData = function (tab) {
        Ajax.remoteCallMode('character', 'get_friends', {}, function (json) {
            FriendslistWindow.setOpenRequests(json["open_requests"]);
            FriendslistWindow.FriendsInvite.rewardPoints = json.reward_points || 0;
            FriendslistWindow.FriendsInvite.iconpath = json.invite_iconpath;
            FriendslistWindow.FriendsInvite.isAvailable = json.isAvailable;
            FriendslistWindow.FriendsInvite.rewardAmount = json.rewardAmount;
            FriendslistWindow.FriendsInvite.rewardAmountDefault = json.rewardAmountDefault;
            FriendslistWindow.FriendsInvite.activeFriends = json.activeFriends;
            FriendslistWindow.showTab(tab || 'friendsreward');
        }, FriendslistWindow);
    };
    FriendslistWindow.FriendsReward.init = function () {
        var currStatus = calcRewardLevel(FriendslistWindow.FriendsInvite.rewardPoints), data = FriendslistWindow.FriendsInvite;
        FriendslistWindow.FriendsInvite.rewardLevel = currStatus.level;
        var helpText = 'Ты получаешь очки дружбы, если игроки, зарегистрировавшиеся по твоему приглашению, повышают уровень своих персонажей или используют самородки.';
        var maindiv = $('<div id="flfi-rewards" class="friends-friendsinvite">' + '<p>' + 'Это награды, которые ты можешь получить за каждый уровень.' + '</p>' + '<div class="helpimg" title="' + helpText + '"></div>' + '<div class="flfi_rewardbox"></div><div title="' + getRewardProgressPopup(currStatus).escapeHTML() + '" class="flfi_progressbar"></div>' + '<div class="flfi_footbar"></div></div>');
        var reward = data.rewardAmount;
        if (data.rewardAmountDefault != data.rewardAmount) {
            reward = '<strike>' + data.rewardAmountDefault + '</strike> <span style="font-size:large; color: #B32B2B">' + data.rewardAmount + '</span>';
        }
        $('div.flfi_rewardbox', maindiv).html(getRewardItems(currStatus.level));
        $('div.flfi_progressbar', maindiv).html(new west.gui.Progressbar(currStatus.points, currStatus.lvlMax).getMainDiv());
        $('div.flfi_footbar', maindiv).append(new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/achv_points.png', openFriendsAchievementWindow, null, null, 'Посмотреть очки дружбы').getMainDiv(), ('<div class="flfi_foot_immediateReward text_bold" title="' + 'Ты получишь вознаграждение за каждого приглашённого игрока, который достигнет 10-го уровня.'.escapeHTML() + '">' +
        s(ngettext('За каждого активного знакомого ты получишь %1 облигацию.', new Array('За каждого активного знакомого ты получишь %1 облигацию.', 'За каждого активного знакомого ты получишь %1 облигации.', 'За каждого активного знакомого ты получишь %1 облигаций.'), data.rewardAmount), reward) + ' ' +
        s(ngettext('Вознаграждение получено %1 раз.', new Array('Вознаграждение получено %1 раз.', 'Вознаграждение получено %1 раза.', 'Вознаграждение получено %1 раз.'), data.activeFriends), data.activeFriends) + '</div>'), (FriendslistWindow.FriendsInvite.isAvailable ? new west.gui.Button('Пригласить', function () {
            FriendslistWindow.showTab('friendsinvite');
        }).addClass('flfi_switchScreen').getMainDiv() : '<span class="flfi_inv_disabled">' + 'Жаль, но ты не можешь никого больше пригласить в этот мир. Попробуй в другой.' + '</span>'));
        $('div.friendslist-friendsreward', FriendslistWindow.DOM).empty().append(maindiv);
    };
    FriendslistWindow.FriendsInvite.init = function () {
        FriendslistWindow.FriendsInvite.initLinksContent();
    };
    var calcRewardLevel = function (currPoints) {
        var len = achvRanges.length;
        if (currPoints >= achvRanges[len - 1])
            return {level: 10, points: achvRanges[len - 1], lvlMax: achvRanges[len - 1]};
        for (var i = 0; i < len - 1; i++) {
            if (currPoints < achvRanges[i + 1])
                return {level: i, points: currPoints - achvRanges[i], lvlMax: achvRanges[i + 1] - achvRanges[i]};
        }
        return {level: 0, lvlMax: 100, points: 0};
    };
    var getRewardItems = function (currLevel) {
        var xhtml = '';
        for (var i = 1, len = rewards.length; i < len; ++i) {
            xhtml += getRewardItem(i, rewards[i], i <= currLevel);
        }
        return xhtml;
    };
    var getRewardItem = function (no, title, enabled) {
        return '<img class="flfi_reward_item" title="' + title + '" src="https://westrus.innogamescdn.com/images/window/friendslist/reward-' + no + '-' + (enabled ? 'color' : 'bw') + '.png?2" />';
    };
    var openFriendsAchievementWindow = function () {
        var showFriendsTab = function () {
            faw.Explorer.window.$('li.social', AchievementWindow.DOM).addClass('expanded');
            faw.Explorer.showContentOf('friends', true);
            clearTimeout(timer);
        }
        var faw = AchievementWindow.getInstance(Character.playerId);
        if (!faw || !faw.hasOwnProperty('Explorer'))faw = new AchievementWindow(Character.playerId, 'explorer');
        if (faw.Explorer.window.currentActiveTabId != 'explorer')faw.showTab('explorer');
        var timer = window.setTimeout(showFriendsTab, 1000);
    };
    var getRewardProgressPopup = function (currStatus) {
        return s('У тебя %1 очков дружбы. До следующего уровня не хватает %2.', FriendslistWindow.FriendsInvite.rewardPoints, (currStatus.lvlMax - currStatus.points));
    };
    FriendslistWindow.FriendsInvite.initLinksContent = function () {
        var refLink = Player.friendsref;
        var socialbox = '<div id="flfi_socialmediabuttons">';
        socialbox += Share.getFacebookButton(encodeURIComponent(FriendslistWindow.FriendsInvite.iconpath), encodeURI('The West 2.0'), encodeURI('Открой мир захватывающих приключений и поединков! Дикий Запад ждёт тебя!'), encodeURIComponent(add2RefLink(refLink, 'facebo'))) + '&nbsp;';
        socialbox += Share.getGoogleplusButton(encodeURIComponent(add2RefLink(refLink, 'gooplu'))) + '&nbsp;';
        socialbox += Share.getTwitterButton('', encodeURIComponent(add2RefLink(refLink, 'twittr')));
        socialbox += '</div>';
        var sMarkBannerSize = new west.gui.Combobox().addItem("728x90", 'Доска (728x90)').addItem("468x60", 'Длинный баннер (468x60)').addItem("120x600", 'Небоскрёб (120x600)').addItem("200x200", 'Квадрат (200x200)').addItem("300x250", 'Прямоугольник (300x250)').addItem("250x250", 'Всплывающее окно (250x250)').addItem("234x60", 'Средний баннер (234x60)').addItem("120x60", 'Кнопка (120x60)').addItem("125x125", 'Квадратная кнопка (125x125)').addItem("156x60", 'Короткий баннер (156x60)').addItem("88x31", 'Иконка (88x31)').addItem("100x100", 'Квадратная иконка (100x100)');
        var butMarkBannerShow = new west.gui.Button('показать', function () {
            openBannerCodeWindow(sMarkBannerSize, 'marketing');
        }).setMinWidth(135).getMainDiv();
        var sSignBannerSize = new west.gui.Combobox().addItem("normal", 'Баннер (форум)').addItem("classic1", 'Баннер (тёмный)').addItem("classic2", 'Баннер (карта)').addItem("classic3", 'Баннер (дерево)').addItem("classic4", 'Баннер (кожа)');
        var butSignBannerShow = new west.gui.Button('показать', function () {
            openBannerCodeWindow(sSignBannerSize, 'signature');
        }).setMinWidth(135).getMainDiv();
        var maindiv = $('<div id="flfi-links" class="friends-friendsinvite">' + '<p class="text_bold">' + 'Пригласи в игру своих друзей, ранее не игравших в The West, и получи за это очки дружбы.' + '</p>' + '<p class="text_bold">' + 'Пригласи друзей' + '</p>' + '<div class="flfi_linkbox">' + '<div class="flfi_linkbox_leftside"><h3><img src="https://westrus.innogamescdn.com/images/window/friendslist/banner_icon.png?1" />&nbsp;' + 'Баннер' + '</h3>' + '<div class="flfi_friendshipbanner"><label class="text_bold">' + 'Реферальный баннер' + ':</label><br /></div><br />' + '<div class="flfi_signaturbanner"><label class="text_bold">' + 'Реферальная подпись' + ':</label><br /></div>' + '</div>' + '<div class="flfi_linkbox_rightside"><h3><img src="https://westrus.innogamescdn.com/images/window/friendslist/mail_icon.png?1" />&nbsp;' + 'E-mail' + '</h3>' + '<div class="flfi_email"><label class="text_bold" for="iFiMailAddress">' + 'E-mail твоего друга'.escapeHTML() + ':</label><br /></div><br />' + '<div class="flfi_reflink"><label class="text_bold" for="fl_extInvRefLink">' + 'Твоя реферальная ссылка'.escapeHTML() + ':</label><br /></div>' + '</div></div>' + '<div class="flfi_footbar"><div class="flfi_exclusive"><img src="https://westrus.innogamescdn.com/images/window/friendslist/reward_icon.png" />' + '<p class="text_bold">' + 'Каждый завербованный тобой игрок получит эксклюзивный предмет.' + '</p></div>' + '<div class="flfi_socialmedia"><p class="text_bold">' + 'Завербовать на социальных сетях' + '</p>' + socialbox + '</div></div>');
        $('div.flfi_exclusive img', maindiv).addMousePopup(new ItemPopup(ItemManager.get(13711000)).popup);
        $('div.flfi_friendshipbanner', maindiv).append(sMarkBannerSize.getMainDiv(), butMarkBannerShow);
        $('div.flfi_signaturbanner', maindiv).append(sSignBannerSize.getMainDiv(), butSignBannerShow);
        $('div.flfi_reflink', maindiv).append(new west.gui.Textarea(null, null).setId('fi_extInvRefLink').setContent(add2RefLink(refLink, 'linkrl')).setWidth(300).setHeight(25).setReadonly().getMainDiv());
        $('div.flfi_email', maindiv).append(new west.gui.Textfield().setName("fi_mailaddress").setId("iFiMailAddress").setSize(40).setMaxLength(100).addListener(function (txt) {
            inviteExternFriendPerMail(txt);
        }).getMainDiv(), '<br />', new west.gui.Button('Отправить E-mail', function () {
            inviteExternFriendPerMail($("#iFiMailAddress", FriendslistWindow.DOM).val().escapeHTML())
        }).setMinWidth(180).addClass('flfi_butSendmail').getMainDiv());
        FriendslistWindow.window.$('div.friendslist-friendsinvite').empty().append(maindiv);
        $('#fi_extInvRefLink', FriendslistWindow.DOM).click(function () {
            this.select();
        });
    };
    var reachedNewRewardLevel = function (rewardPoints) {
        if (rewardPoints <= FriendslistWindow.FriendsInvite.rewardPoints)return false;
        var len = achvRanges.length, newLvl = 0;
        if (rewardPoints >= achvRanges[len - 1]) {
            newLvl = 10;
            return newLvl > FriendslistWindow.FriendsInvite.rewardLevel;
        }
        for (var i = 0; i < len - 1; i++) {
            if (rewardPoints < achvRanges[i + 1]) {
                newLvl = i;
                i = len;
            }
        }
        return newLvl > FriendslistWindow.FriendsInvite.rewardLevel;
    };
    var updateFriendpoints = function (newRewardPoints) {
        if (newRewardPoints == FriendslistWindow.FriendsInvite.rewardPoints)return false;
        var sel = $('#flfi-rewards', FriendslistWindow.DOM);
        var currStatus = calcRewardLevel(newRewardPoints);
        $('div.flfi_progressbar', sel).attr('title', getRewardProgressPopup(currStatus).escapeHTML()).html(new west.gui.Progressbar(currStatus.points, currStatus.lvlMax).getMainDiv());
        if (reachedNewRewardLevel(newRewardPoints)) {
            $('div.flfi_rewardbox', sel).html(getRewardItems(currStatus.level));
            if (currStatus.level < 10) {
                $('#flfi_currRewardLevel', sel).text(currStatus.level);
                $('#flfi_nextRewardLevel', sel).text(currStatus.level + 1);
            }
            else
                $('div.flfi_foot_leveldesc', sel).html('<p>' + 'Достигнут максимальный уровень' + '</p>');
        }
        FriendslistWindow.FriendsInvite.rewardPoints = newRewardPoints;
        return true;
    };
    FriendslistWindow.Requests.init = function () {
        Ajax.remoteCallMode('character', 'get_open_requests', {}, function (json) {
            FriendslistWindow.Requests._initContent(json["open_friends"]);
        }, FriendslistWindow);
    };
    FriendslistWindow.Requests._initContent = function (data) {
        var invite = function () {
            var val = FriendslistWindow.window.$('.friendslist-inviteform input').val();
            if (!val)return;
            FriendslistWindow.inviteIngameFriend(val);
        }, maindiv = $('<div class="friends-openrequests"></div>');
        $('<div class="friendslist-inviteform"><b>' + 'Имя:' + '</b></div>').append(new west.gui.Textfield().setSize(30).getMainDiv(), new west.gui.Button('Пригласить игрока', invite).getMainDiv()).appendTo(maindiv);
        var openrequeststable = new west.gui.Table().appendTo(maindiv).addColumn("fl_accept").addColumn("fl_name").addColumn("fl_town").addColumn("fl_delete").appendToCell("head", "fl_accept", '&nbsp;').appendToCell("head", "fl_name", '<img src="https://westrus.innogamescdn.com/images/icons/user.png" alt="" />&nbsp;' + 'Имя').appendToCell("head", "fl_town", '<img src="https://westrus.innogamescdn.com/images/icons/town_new.png" alt="" />&nbsp;' + 'Город').appendToCell("head", "fl_delete", '&nbsp;');
        FriendslistWindow.window.$('div.friendslist-openrequests').empty().append(maindiv);
        var town = friend = town_name = friend_name = '';
        for (var i = 0; i < data.length; i++) {
            var f = data[i], isOwnInvitation = f.inviter_id == Character.playerId, friend, friend_name, entry;
            if (isOwnInvitation) {
                entry = {
                    town_id: f.invited_town_id,
                    town_name: f.invited_town_name,
                    friend_id: f.invited_id,
                    friend_name: f.invited_name,
                    town_coordx: f.invited_town_coordx,
                    town_coordy: f.invited_town_coordy
                };
            } else {
                entry = {
                    town_id: f.inviter_town_id,
                    town_name: f.inviter_town_name,
                    friend_id: f.inviter_id,
                    friend_name: f.inviter_name,
                    town_coordx: f.inviter_town_coordx,
                    town_coordy: f.inviter_town_coordy
                }
            }
            if (entry.town_name) {
                town_name = entry.town_name.escapeHTML();
                town = '<span id="fr_showTown_' + entry.friend_id + '" title="' + s('Показать город %1', town_name) + '">' + town_name + '</span>';
            } else {
                town = "Без города";
            }
            friend_name = entry.friend_name.escapeHTML();
            friend = '<span id="fl_profile_' + entry.friend_id + '" class="linkstyle" title="' + s('Открыть профиль %1', friend_name) + '">' + friend_name + '</span>';
            openrequeststable.appendRow(null, 'friendRequestData_' + entry.friend_id).appendToCell(-1, "fl_accept", isOwnInvitation ? '' : '<img style="width:16px; height: 16px;" id="accept_' + entry.friend_id + '" title="' + 'Подтвердить дружбу' + '" src="https://westrus.innogamescdn.com/images/icons/friends.png" alt="" />').appendToCell(-1, "fl_name", friend).appendToCell(-1, "fl_town", town).appendToCell(-1, "fl_delete", '<img style="width:16px; height: 16px;" id="deny_' + entry.friend_id + '" title="' + 'Отклонить дружбу' + '" src="https://westrus.innogamescdn.com/images/icons/delete.png" alt="' + 'Удалить' + '" />');
            if (isOwnInvitation) {
                openrequeststable.getRow().addMousePopup(s('%1 ещё не принял твоё приглашение.', entry.friend_name))
            }
            $("#accept_" + entry.friend_id, FriendslistWindow.DOM).click((function (id) {
                return function () {
                    acceptFriendship(id);
                }
            })(entry.friend_id));
            $("#fl_profile_" + entry.friend_id, FriendslistWindow.DOM).click((function (id) {
                return function () {
                    showProfile(id);
                }
            })(entry.friend_id));
            $("#deny_" + entry.friend_id, FriendslistWindow.DOM).click((function (id) {
                return function () {
                    denyFriendshipRequest(id);
                }
            })(entry.friend_id));
            $("#fr_showTown_" + entry.friend_id, FriendslistWindow.DOM).click((function (townId, coordX, coordY) {
                return function () {
                    showTown(townId, coordX, coordY);
                }
            })(entry.town_id, entry.town_coordx, entry.town_coordy));
        }
    };
    var showProfile = function (charId) {
        PlayerProfileWindow.open(charId);
    };
    var showMessagebox = function (charName) {
        MessagesWindow.open('telegram', {insert_to: charName});
    };
    var showTown = function (townId, townX, townY) {
        TownWindow.open(townX, townY);
    };
    var denyFriendshipRequest = function (charId) {
        new west.gui.Dialog("Отклонить дружбу", "Точно отклонить дружбу?", west.gui.Dialog.SYS_QUESTION).addButton("yes", function () {
            Ajax.remoteCall('character', 'cancel_friendship', {friend_id: charId}, function (json) {
                if (json) {
                    new UserMessage("Дружба отклонена", UserMessage.TYPE_SUCCESS).show();
                    $("div.friendRequestData_" + charId, FriendslistWindow.DOM).remove();
                    FriendslistWindow.setOpenRequests((FriendslistWindow.OpenRequestsCounter - 1));
                }
                else new UserMessage("Твоя дружба не может быть отклонена", UserMessage.TYPE_ERROR);
            });
        }).addButton("no").show();
    };
    var acceptFriendship = function (charId) {
        new west.gui.Dialog("Дружба", "Точно подтвердить дружбу?", west.gui.Dialog.SYS_QUESTION).addButton("yes", function () {
            Ajax.remoteCall('character', 'accept_friendship', {friend_id: charId}, function (json) {
                if (json.result) {
                    new UserMessage("Игрок добавлен в список друзей", UserMessage.TYPE_SUCCESS).show();
                    $("div.friendRequestData_" + charId, FriendslistWindow.DOM).remove();
                    FriendslistWindow.setOpenRequests((FriendslistWindow.OpenRequestsCounter - 1));
                }
                else new UserMessage(json.msg || "Не удалось добавить игрока в список друзей", UserMessage.TYPE_ERROR).show();
            });
        }).addButton("no").show();
    };
    FriendslistWindow.inviteIngameFriend = function (name) {
        Ajax.remoteCall('character', 'add_friend', {friend_name: name}, function (json) {
            if (json.result) {
                new UserMessage("Приглашение дружбы отправлено", UserMessage.TYPE_SUCCESS).show();
                EventHandler.signal('friend_invitation_sent');
            } else {
                new UserMessage((json.msg ? json.msg : "Предложение дружбы не может быть отправлено"), UserMessage.TYPE_ERROR).show();
            }
        });
    };
    FriendslistWindow.deleteFromFriendList = function (charId) {
        new west.gui.Dialog("Расторгнуть дружбу", "Точно удалить этого игрока из списка?").setIcon(west.gui.Dialog.SYS_QUESTION).addButton("yes", function () {
            Ajax.remoteCall('character', 'cancel_friendship', {friend_id: charId}, function (json) {
                if (json["result"]) {
                    new UserMessage("Игрок удалён из твоего списка друзей", UserMessage.TYPE_SUCCESS).show();
                    $("div.friendData_" + charId, FriendslistWindow.DOM).remove();
                    Chat.Friendslist.removeFriend(charId);
                }
                else new UserMessage("Невозможно удалить этого игрока", UserMessage.TYPE_ERROR).show();
            });
        }).addButton("no").show();
    };
    var inviteExternFriendPerMail = function (mail) {
        var l10n = {
            'popup': {
                'button_sent': 'Отправить E-mail'.escapeHTML(),
                'error': "Не удалось отправить E-mail".escapeHTML()
            },
            'labels': {
                'player_name': 'Твоё имя',
                'friend_name': 'Имя твоего друга'.escapeHTML(),
                'friend_email': 'E-mail твоего друга'.escapeHTML(),
                'custom_message': 'Твоё личное сообщение (необязательно)'.escapeHTML(),
                'legal': 'Настоящим заявляю, что, насколько мне известно, получатель не почувствует себя преследованным и согласен получить это сообщение.'.escapeHTML()
            },
            'texts': {'player_name': Character.name, 'friend_name': 'Ковбой'.escapeHTML(), 'custom_message': ''}
        }, legalToggle = function (state) {
            if (state) {
                sent_email.enable();
            } else {
                sent_email.disable();
            }
        }, player_name = new west.gui.Textfield().setName("fi_playername").setId("iFiPlayerName").setValue(l10n.texts.player_name).setSize(25).setMaxLength(100), friend_name = new west.gui.Textfield().setName("fi_friendname").setId("iFiFriendName").setValue(l10n.texts.friend_name).setSize(25).setMaxLength(100), friend_email = new west.gui.Textfield().setName("fi_mailaddress").setId("iFiMailAddress2").setValue(mail).setSize(45).setMaxLength(256), custom_message = new west.gui.Textarea(null, null).setId('iFiCustomMessage').setContent(l10n.texts.custom_message).setWidth(600).setHeight(78), legal = new west.gui.Checkbox(null, 'legal_checkbox', legalToggle), legal_message = $('<span class="legal_text">' + l10n.labels.legal + '</span>').on('click', function () {
            legal.toggle();
        }), sentRequest = function () {
            if (!legal.isSelected()) {
                new UserMessage("Не удалось отправить E-mail", UserMessage.TYPE_ERROR).show();
                $(legal.getMainDiv()).addClass('error');
                return false;
            }
            Ajax.remoteCall('character', 'invite_mail', {
                player_name: player_name.getValue(),
                friend_name: friend_name.getValue(),
                mail_address: friend_email.getValue(),
                message: custom_message.getContent()
            }, function (json) {
                if (json.result) {
                    new UserMessage("E-mail отправлен", UserMessage.TYPE_SUCCESS).show();
                } else {
                    new UserMessage(json.msg || l10n.popup.error, UserMessage.TYPE_ERROR).show();
                }
                $("#iFiMailAddress", FriendslistWindow.DOM).val('');
            });
        }, sent_email = new west.gui.Button(l10n.popup.button_sent, sentRequest).disable();
        legal.setSelected(true);
        var popup_content = $('<div class="iFiInviteViaeMail"></div>').append($('<div class="float_left if_input_short"><label class="text_bold" for="iFiPlayerName">' + l10n.labels.player_name + ':</label><br /></div>').append(player_name.getMainDiv()), $('<div class="float_left if_input_short"><label class="text_bold" for="iFiFriendName">' + l10n.labels.friend_name + ':</label><br /></div>').append(friend_name.getMainDiv()), $('<div class="float_right if_input_long"><label class="text_bold" for="iFiMailAddress2">' + l10n.labels.friend_email + ':</label><br /></div>').append(friend_email.getMainDiv()), $('<div class="custom_message"><label class="text_bold" for="iFiCustomMessage">' + l10n.labels.custom_message + ':</label><br /></div>').append(custom_message.getMainDiv()), legal.getMainDiv(), legal_message);
        var popup = new west.gui.Dialog('<img src="https://westrus.innogamescdn.com/images/window/friendslist/mail_icon.png?1"> ' + 'Отправить E-mail', popup_content).addButton(sent_email).addButton("cancel").setDimension(620, 220).show();
    };
    var invite2Town = function (friendId) {
        Ajax.remoteCall("profile", "invite_player", {player_id: friendId}, function (data) {
            if (data.error)return new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
            new UserMessage(data.msg, UserMessage.TYPE_SUCCESS).show();
        }, FriendslistWindow);
    };
    var openBannerCodeWindow = function (combobox, bannerType) {
        var pid = Character.playerId;
        var cdnURL = Game.cdnURL;
        var popupContent = '<div id="fi_bannerBbCodeWindow"><p class="labelBannerPreview">' + 'Оригинальный размер баннера'.escapeHTML() + " " + combobox.getValue() + '</p>' + '<p id="fi_bannerBbCodePreview"></p></div>';
        var popup = new west.gui.Dialog("ВВ-коды для баннера", popupContent).setDimension(500, 200).addButton("ok");
        if (bannerType == 'signature') {
            var worldUrl = Game.gameURL || false;
            popup.show();
            $('#fi_bannerBbCodeWindow .labelBannerPreview').html('').css('margin-top', '30px');
            $('#fi_bannerBbCodePreview').append('<img src="img.php?type=sig&design=' + combobox.getValue() + '&player_id=' + pid + '" class="playerSignature" />').css('margin-bottom', '20px');
            if (worldUrl) {
                $('#fi_bannerBbCodeWindow').append
                (new west.gui.Textfield().setName("fi_bbBanner").setId("iFiBbBanner").setSize(50).setMaxLength(150).setValue('[url=' + add2RefLink(Player.friendsref, 'sigbanr') + '][img]' + worldUrl + '/img.php?type=sig&player_id=' + pid + '[/img][/url]').setReadonly().getMainDiv(), new west.gui.Textfield().setName("fi_htmlBanner").setId("iFiHtmlBanner").setSize(50).setMaxLength(150).setValue('<a href="' + add2RefLink(Player.friendsref, 'sigbanr') + '"><img src="' + worldUrl + '/img.php?type=sig&design=classic1&player_id=' + pid + '" /></a>').setReadonly().getMainDiv());
            }
        }
        else {
            var imgFileName = 'banner/' + Game.locale + '/The-West-' + combobox.getValue() + '_' + Game.locale + '.jpg';
            if (combobox.getValue() == '120x600') {
                popupContent = '<div style="position:absolute; width:75px; height:200px;left:20px;"><p id="fi_bannerBbCodePreview"></p></div>' + '<div id="fi_bannerBbCodeWindow" style="position:absolute; width:400px; height:150px; top: 90px;left:90px;"><p>' + 'Оригинальный размер баннера'.escapeHTML() + " " + combobox.getValue() + '</p></div>';
                popup.setText(popupContent).setDimension(500, 225).show();
                $('#fi_bannerBbCodePreview').append('<img src="' + cdnURL + '/ima' + '' + 'ges/' + imgFileName + '" id="markBannerPreview" />');
                $('#fi_bannerBbCodeWindow').append
                (new west.gui.Textfield().setName("fi_bbBanner").setId("iFiBbBanner").setSize(40).setMaxLength(150).setValue('[url=' + add2RefLink(Player.friendsref, 'banner') + '][img]' + cdnURL + '/ima' + '' + 'ges/' + imgFileName + '[/img][/url]').setReadonly().getMainDiv(), new west.gui.Textfield().setName("fi_htmlBanner").setId("iFiHtmlBanner").setSize(40).setMaxLength(150).setValue('<a href="' + add2RefLink(Player.friendsref, 'banner') + '"><img src="' + cdnURL + '/ima' + '' + 'ges/' + imgFileName + '" /></a>').setReadonly().getMainDiv());
                $("#iFiBbBanner, #iFiHtmlBanner").css({width: "370px", maxWidth: "370px"});
                $('#fi_bannerBbCodePreview, #markBannerPreview').css({
                    height: "200px",
                    maxHeight: "200px",
                    maxWidth: "75px"
                });
            }
            else {
                popup.show();
                $('#fi_bannerBbCodePreview').append('<img src="' + cdnURL + '/ima' + '' + 'ges/' + imgFileName + '" id="markBannerPreview" />');
                $('#fi_bannerBbCodeWindow').append
                (new west.gui.Textfield().setName("fi_bbBanner").setId("iFiBbBanner").setSize(50).setMaxLength(150).setValue('[url=' + add2RefLink(Player.friendsref, 'banner') + '][img]' + cdnURL + '/ima' + '' + 'ges/' + imgFileName + '[/img][/url]').setReadonly().getMainDiv(), new west.gui.Textfield().setName("fi_htmlBanner").setId("iFiHtmlBanner").setSize(50).setMaxLength(150).setValue('<a href="' + add2RefLink(Player.friendsref, 'banner') + '"><img src="' + cdnURL + '/ima' + '' + 'ges/' + imgFileName + '" /></a>').setReadonly().getMainDiv());
            }
        }
        $('#iFiBbBanner, #iFiHtmlBanner').click(function () {
            this.select();
        });
    };
    var add2RefLink = function (refLink, referer) {
        return refLink.replace('west_invite', 'west_invite_' + referer);
    };
})(jQuery);

(function ($) {
    var scroll;
    ForumWindow = function () {
        var iframe = $('<iframe allowTransparency="true" src="forum.php" frameborder="0" />');
        wnd = wman.open('forum', null).setTitle('Сплетни').setMiniTitle('Сплетни').setMinSize(748, 471).setMaxSize(748, 820).setSize(748, 625).setResizeable(true).addEventListener("WINDOW_RELOAD", function () {
            iframe[0].contentWindow.location.reload(true);
        }).center();
        var openNewBtn = new west.gui.Button('Открыть в закладке', function () {
            window.open('forum.php');
        }).setWidth(200);
        $(openNewBtn.getMainDiv()).css({'position': 'absolute', 'left': 0, 'top': -40});
        scroll = new west.gui.Scrollbar(false, false).addDragListener(function (bar, pos, oldpos, isvertical) {
            iframe.contents().find("html, body").scrollTop(pos);
        });
        wnd.appendToContentPane(iframe, scroll.getMainDiv(), openNewBtn.getMainDiv());
        iframe.load(function () {
            var ct = iframe.contents();
            ct.find("body").css({"background": "transparent", overflow: "hidden"});
            ct.find("html, body").mousewheel(function (e, d) {
                var t = $(e.target);
                if (t.is('textarea')) {
                    var scrollTop = t.scrollTop();
                    if (d > 0 && scrollTop !== 0)return;
                    if (d < 0) {
                        t.scrollTop(9999);
                        if (t.scrollTop() !== scrollTop) {
                            t.scrollTop(scrollTop);
                            return;
                        }
                    }
                }
                scroll.onWheeled(d);
            });
            Character.setToRead('townforum', false);
        });
    };
    ForumWindow.setScrollSize = function (h) {
        scroll.move(0, false, true);
        scroll.setPullRange(Math.max(0, h));
    };
    ForumWindow.open = function () {
        return new ForumWindow();
    };
})(jQuery);

var ChatWindow = (function () {
    var opened = {}, active = null, maxuid = 0;
    var nextId = function () {
        var i;
        for (i = 1; i < maxuid; i++)if (!opened[i])break;
        if (opened[i])i++;
        maxuid = Math.max(maxuid, i);
        return i;
    };
    var wevent = {
        onDestroy: function (e, win, uid) {
            delete opened[uid];
            if (active == uid) {
                active = null;
                focusHandler.updateActive();
            }
        }, onClose: function (e, win, uid) {
            win.destroy();
        }, onClick: function (e, win, uid) {
            focusHandler.setActive(uid);
            opened[uid].onFocus();
        }
    };
    var focusHandler = {
        setActive: function (uid) {
            var tmp = active;
            if (uid == tmp)return;
            active = uid;
            if (undefined !== opened[tmp])
                opened[tmp].onBlur();
        }, updateActive: function () {
            if (null != active)return active;
            for (var uid in opened)
                return active = uid;
        }, focus: function (uid) {
            opened[uid].onFocus();
        }, blur: function (uid) {
            var tmp = active;
            if (tmp == uid)return;
            opened[uid].onBlur();
            if (undefined !== opened[tmp])
                opened[tmp].onFocus();
        }
    };
    (function () {
        Config.addChangeListener("chat.fade", function () {
            for (var uid in opened)
                if (active != uid)
                    opened[uid].onBlur();
        });
        Config.addChangeListener("chat.opacity", function () {
            for (var uid in opened)
                opened[uid].updateSettings();
        });
        $(document).click(function (e) {
            var op = opened[active];
            if (!op)return;
            var w = $(op.window.getMainDiv());
            pos = w.offset(), focused = e.clientX >= pos.left && e.clientX <= pos.left + w.width() && e.clientY >= pos.top && e.clientY <= pos.top + w.height();
            if (!focused) {
                active = null;
                op.onBlur();
            }
        });
        EventHandler.listen("chat_tell_received", function (room) {
            var isOpen = ChatWindow.isOpen(), isTabOpen = ChatWindow.Tabs.isOpen(room.id);
            if (!isOpen && !isTabOpen) {
                new west.gui.Dialog("Получено новое сообщение в чате".escapeHTML()).setId("tell_client_" + room.id).setIcon(west.gui.Dialog.SYS_QUESTION).setText("Тебе шепнули. Хочешь открыть окно чата?".escapeHTML()).addButton('ok', function () {
                    ChatWindow.open(room);
                    room.read(true);
                }).addButton('cancel').show();
            } else if (!isTabOpen) {
                ChatWindow.open(room, true);
                room.read(false);
            }
            if (!isOpen || (opened[active] && opened[active].activeTab !== room.id) || !TitleTicker.isWindowActive) {
                AudioController.play(AudioController.SOUND_NEWMSG);
            }
        });
        EventHandler.listen("chat_tell_confirmed", function (room) {
            ChatWindow.open(room);
        });
        EventHandler.listen("ignore_added", function (name) {
            ChatWindow.Client.updateIgnore(name, true);
        });
        EventHandler.listen("ignore_removed", function (name) {
            ChatWindow.Client.updateIgnore(name, false);
        });
        EventHandler.listen("client_status_changed", function (client) {
            ChatWindow.Client.updateStatus(client);
        });
        EventHandler.listen('chat_room_rank_changed', function () {
            ChatWindow.Client.updateRank.apply(null, arguments);
        });
        var roomStateChanged = function (id, state) {
            if (!state)ChatWindow.closeTab(id);
        };
        EventHandler.listen("chat_room_added", function (room) {
            EventHandler.listen("chat_room_state_changed_" + room.id, roomStateChanged);
        });
        EventHandler.listen("chat_room_removed", function (room) {
            EventHandler.unlisten("chat_room_state_changed_" + room.id, roomStateChanged);
            ChatWindow.closeTab(room.id);
        });
    })();
    return {
        create: function (forceid) {
            var i = 1;
            for (var k in opened)i++;
            if (i > 10) {
                new UserMessage("У тебя открыто слишком много чатов.", UserMessage.TYPE_ERROR).show();
                return null;
            }
            var uid = null;
            if (undefined !== forceid && !opened[forceid]) {
                uid = forceid;
                if (forceid > maxuid)maxuid = forceid;
            } else {
                uid = nextId();
            }
            var wnd = new Chat.Layout.Window(uid);
            wnd.window.addEventListener(TWE('WINDOW_DESTROY'), wevent.onDestroy, this, uid).addEventListener(TWE('WINDOW_CLOSE'), wevent.onClose, this, uid).addEventListener(TWE('WINDOW_CLICK'), wevent.onClick, this, uid);
            $(wnd.getMainDiv()).hover(function () {
                focusHandler.focus(uid)
            }, function () {
                focusHandler.blur(uid)
            });
            if (Chat.inited) {
                var rms = ChatWindow.Settings.rooms(uid);
                if (rms) {
                    for (var i = 0; i < rms.length; i++) {
                        var r = Chat.Resource.Manager.getRoom(rms[i]);
                        if (r)ChatWindow.Tabs.open(wnd, r, true);
                    }
                }
            }
            return (opened[uid] = wnd);
        }, open: function (room, avoidSwitch) {
            if (jQuery.isEmptyObject(opened))wnd = ChatWindow.create(); else wnd = opened[focusHandler.updateActive()];
            if (undefined !== room) {
                var wid = ChatWindow.Settings.getUidForRoom(room.id);
                if (wid)wnd = ChatWindow.get(wid, true);
                wnd = ChatWindow.Tabs.open(wnd, room, avoidSwitch);
            }
            focusHandler.setActive(wnd.uid);
            wnd.onFocus();
            return wnd;
        }, get: function (uid, doCreate) {
            return !opened[uid] ? (doCreate ? ChatWindow.create(uid) : null) : opened[uid];
        }, isOpen: function () {
            return !jQuery.isEmptyObject(opened);
        }, closeTab: function (id) {
            for (var uid in opened)
                opened[uid].closeTab(id);
        }
    };
})();
ChatWindow.Tabs = {
    opened: {}, open: function (wnd, room, avoidSwitch) {
        if (undefined !== ChatWindow.Tabs.opened[room.id]) {
            wnd = ChatWindow.Tabs.opened[room.id].wnd;
            wnd.switchTab(room.id);
        } else if (wnd) {
            var tab = new Chat.Layout.Tab(wnd, room).init();
            ChatWindow.Tabs.opened[room.id] = tab;
            wnd.addTab(tab, avoidSwitch);
        }
        return wnd;
    }, release: function (id) {
        if (undefined === ChatWindow.Tabs.opened[id])return;
        var tab = ChatWindow.Tabs.opened[id];
        tab.onBlur().deinit();
        delete ChatWindow.Tabs.opened[id];
    }, isOpen: function (id) {
        return undefined !== ChatWindow.Tabs.opened[id];
    }
};
ChatWindow.Client = {
    updateStatus: function (client) {
        var cstatus = Chat.Formatter.formatStatus(client);
        $("." + client.id + "_status").replaceWith(cstatus);
        var r = Chat.Resource.Manager.getRoom(client.id);
        if (null == r)return;
        cstatus = Chat.Formatter.getStatus(client.statusId);
        Chat.pushSystemMessage(s("%1 %2", r.client.pname, cstatus.label), false, r);
    }, updateIgnore: function (name, ignored) {
        var clients = Chat.Resource.Manager.getClients();
        for (var k in clients) {
            var c = Chat.Resource.Manager.getClient(k);
            if (c.pname.escapeHTML().toLowerCase() == name) {
                var e = $(".chat_" + c.id).removeClass('ignored');
                if (ignored) {
                    e.addClass('ignored');
                    ChatWindow.closeTab(c.id);
                }
                break;
            }
        }
    }, updateRank: function (room, client) {
        if (!client)return;
        var tab = ChatWindow.Tabs.opened[room.id];
        if (!tab)return;
        $('.contact_' + client.id, tab.getMainDiv()).empty().append(Chat.Formatter.formatClient(client, room));
    }, onClick: function (args, id) {
        var client = Chat.Resource.Manager.getClient(id), isOnline;
        if (!client || client.myself)
            return;
        isOnline = Chat.Resource.Client.STATUS_OFFLINE != client.statusId;
        if (client.mpi) {
            var onAction = function (id) {
                switch (id) {
                    case 0:
                        Suggestion.showPopup('mpi', client.pname, client.id);
                        break;
                }
            };
            var selectbox = new west.gui.Selectbox().setHeader(client.pname).addItem(0, "Пожаловаться").addListener(onAction).show(args[0]);
        } else {
            var onAction = function (id) {
                switch (id) {
                    case 0:
                        PlayerProfileWindow.open(client.playerId);
                        break;
                    case 1:
                        if (Chat.IgnoreButler.contains(client.pname)) {
                            new UserMessage("Ты игнорируешь этого игрока").show();
                        } else {
                            if (!isOnline) {
                                MessagesWindow.open('telegram', {insert_to: client.pname});
                            } else {
                                var room = Chat.Resource.Manager.acquireRoom(client);
                                if (room)room.openClick();
                            }
                        }
                        break;
                    case 2:
                        if (Chat.IgnoreButler.contains(client.pname)) {
                            Chat.IgnoreButler.unignore(client.pname);
                        } else {
                            Chat.IgnoreButler.ignore(client.pname);
                        }
                        break;
                    case 3:
                        Suggestion.showPopup('chat', '' + client.playerId + '');
                        break;
                    case 4:
                        if (Chat.Friendslist.isFriend(client.id)) {
                            FriendslistWindow.deleteFromFriendList(client.playerId);
                        } else {
                            FriendslistWindow.inviteIngameFriend(client.pname);
                        }
                        break;
                }
            };
            if (Chat.Friendslist.isFriend(client.id)) {
                var friendTxt = 'Расторгнуть дружбу';
            } else {
                var friendTxt = 'Пригласить друга';
            }
            var selectbox = new west.gui.Selectbox().setHeader(client.pname).addItem(0, "Посмотреть профиль").addItem(1, isOnline ? "Шепнуть" : "Написать письмо").addItem(2, Chat.IgnoreButler.contains(client.pname) ? "Перестать игнорировать" : "Проигнорировать").addItem(3, "Пожаловаться").addItem(4, friendTxt).addListener(onAction).show(args[0]);
        }
    }
};
ChatWindow.Settings = (function () {
    var settings = Config.get('chat.settings') || {};
    Config.addChangeListener('chat.settings', function (tmp) {
        settings = tmp;
    });
    var save = function () {
        var tmp = {};
        for (var k in settings)tmp[k] = settings[k];
        Config.set('chat.settings', tmp);
    };
    var recall = function (type) {
        return function (id, data) {
            if (undefined === data) {
                return undefined !== settings[id] && undefined !== settings[id][type] ? settings[id][type] : null;
            }
            if (undefined === settings[id])
                settings[id] = {};
            settings[id][type] = data;
            save();
        };
    };
    $(document).ready(function () {
        var tmp = [];
        for (var uid in settings) {
            if (!settings[uid].autoopen)continue;
            var wnd = ChatWindow.create(uid);
            if (settings[uid].rooms)
                tmp = tmp.concat(settings[uid].rooms);
        }
        EventHandler.listen("chat_init", function () {
            if (tmp.length != 0) {
                for (var i = 0; i < tmp.length; i++) {
                    var r = Chat.Resource.Manager.getRoom(tmp[i]);
                    if (r)ChatWindow.open(r, true);
                }
            } else if (Character.level < 10) {
                EventHandler.listen("tutorial_finished", function () {
                    var generalRoom = Chat.Resource.Manager.getGeneralRoom();
                    if (generalRoom) {
                        ChatWindow.open(generalRoom, true);
                        Chat.pushSystemMessage("У тебя есть вопросы по игре? Задай их в чате!", false, generalRoom);
                    }
                    return EventHandler.ONE_TIME_EVENT;
                });
            }
            return EventHandler.ONE_TIME_EVENT;
        });
    });
    return {
        appearance: recall("appearance"),
        autoOpen: recall("autoopen"),
        rooms: recall("rooms"),
        getUidForRoom: function (roomid) {
            for (var uid in settings) {
                if (undefined === settings[uid].rooms)
                    continue;
                if (-1 != $.inArray(roomid, settings[uid].rooms))
                    return uid;
            }
            return null;
        },
        save: save
    };
})();
(function () {
    var roomViews = {};
    $(document).ready(function () {
        $("#no_friends").append(new west.gui.Button("Пригласи знакомого", function () {
            FriendslistWindow.open();
        }).getMainDiv());
    });
    EventHandler.listen("chat_init", function () {
        $("#chat_loading").remove();
        return EventHandler.ONE_TIME_EVENT;
    });
    EventHandler.listen("chat_room_added", function (room) {
        var view = new RoomUiView(room), e = $("#ui_chat .container .general ."
            + (view.isWhisper ? "clients" : "rooms"));
        e.append(view.getMainDiv());
        e.children(".chat_channel").sort(function (a, b) {
            return $(".row_title", a).text().toLowerCase() > $(".row_title", b).text().toLowerCase() ? 1 : -1;
        }).appendTo(e);
        roomViews[room.id] = view;
    });
    EventHandler.listen("chat_room_removed", function (room) {
        var view = roomViews[room.id];
        if (!view)return;
        delete roomViews[room.id];
        view.dispose();
    });
    var updateFriendsList = function (client) {
        var friends = Chat.Friendslist.getFriends(), div = $("#ui_chat .container .friend"), client;
        div.children().remove();
        friends.sort(function (a, b) {
            return a.pname.toLowerCase() > b.pname.toLowerCase() ? 1 : -1;
        });
        var ondiv = $("<div class='friends_online' />"), offdiv = $("<div class='friends_offline' />");
        for (var i = 0; i < friends.length; i++) {
            var el = $("<div id='flist_" + friends[i].id + "' class='chat_channel entry_friend' />").append(Chat.Formatter.formatFriendClient(friends[i]));
            if (Chat.Resource.Client.STATUS_OFFLINE == friends[i].statusId)
                offdiv.append(el); else
                ondiv.append(el);
        }
        offdiv.toggle();
        div.append($("<h2>" + "Онлайн" + "</h2>").click(function () {
            ondiv.toggle();
        }), ondiv, $("<h2>" + "Оффлайн" + "</h2>").click(function () {
            offdiv.toggle();
        }), offdiv);
    };
    EventHandler.listen("friend_added", updateFriendsList);
    EventHandler.listen("friend_removed", updateFriendsList);
    EventHandler.listen("friend_left", updateFriendsList);
    var RoomUiView = west.createClass(null, {
        init: function (room) {
            this.room = room;
            this.isWhisper = room instanceof Chat.Resource.RoomClient;
            this.element = $("<div class='chat_channel' id='" + room.id + "'>"
                + "<div class='channelpic-" + room.room + " chat_icons' />"
                + "<div class='vertical_divider' />"
                + "<div class='row_title'>" + room.getTitle() + "</div>"
                + "<img src='https://westrus.innogamescdn.com/images/interface/chat/chat.gif' alt='' class='new_message'"
                + "title='" + "новые письма;" + "' />"
                + "<div class='online_count' />"
                + "<img class='leave_channel' src='https://westrus.innogamescdn.com/images/interface/chat/leavechat.png'"
                + " alt='' title='" + "Покинуть чат" + "' />"
                + "</div>");
            var leaveClick = function () {
                room.leaveClick();
            };
            var titleClick = function () {
                room.openClick();
                room.read(true);
            };
            $('.row_title', this.element).attr('title', "Открыть окно чата").click(titleClick);
            $('.leave_channel', this.element).click(leaveClick);
            if (this.isWhisper) {
                $('.online_count', this.element).remove();
            }
            room.addListener(this.onRoomChange, this);
            EventHandler.listen("chat_room_state_changed_" + room.id, this.updateState, this);
        }, onRoomChange: function (room, type, data) {
            var view;
            if (this.room != room)
                throw"Something went wrong.";
            switch (type) {
                case"ClientJoined":
                case"ClientLeft":
                    this.updateClientCount();
                    break;
                case"TitleChanged":
                    view = roomViews[room.id];
                    $(".row_title", view.getMainDiv()).html(room.getTitle());
                    this.updateClientCount();
                    break;
                case"ReadStateChanged":
                    var state = Chat.active == this.room.id ? true : data[0], inc = $(".new_message", this.element);
                    if (state)inc.hide(); else inc.show();
                    break;
            }
        }, dispose: function () {
            this.element.remove();
            EventHandler.unlisten("chat_room_state_changed_" + this.room.id, this.updateState, this);
            this.room.removeListener(this.onRoomChange, this);
            this.room = null;
        }, getMainDiv: function () {
            return this.element;
        }, updateState: function (roomId, enabled) {
            var onlineCountEl = $('.online_count', this.element), leaveChannelEl = $('.leave_channel', this.element);
            if (enabled) {
                onlineCountEl.show();
                leaveChannelEl.show();
            } else {
                ChatWindow.closeTab(this.room.id);
                onlineCountEl.hide();
                leaveChannelEl.hide();
            }
        }, updateClientCount: function () {
            if (this.isWhisper)return;
            var count = this.room.getClientCount();
            $(".online_count", this.element).text(this.room.getClientCount()).addMousePopup(s("%1 игрок(ов) в %2", count, this.room.getTitle()));
        }
    });
}());
;
(function ($) {
    window.HotelWindow = {};
    wman.registerReloadHandler(/^hotel-\d+/, function (town_id) {
        HotelWindow.open(town_id.match(/\d+/)[0]);
    });
    HotelWindow.townid = null, HotelWindow.pos = null, HotelWindow.window = null, HotelWindow.button = null;
    HotelWindow.open = function (townID) {
        HotelWindow.townid = townID;
        HotelWindow.window = wman.open('hotel-' + HotelWindow.townid).setMiniTitle('Отель').appendToContentPane($('<div class="hotel-content" id="hotel-content-' + HotelWindow.townid + '"/>'));
        HotelWindow.window.setTitle('Отель');
        HotelWindow.init();
    };
    HotelWindow.init = function () {
        Ajax.remoteCallMode("building_hotel", "get_data", {town_id: HotelWindow.townid}, function (data) {
            if (!data.error) {
                HotelWindow.ini_cont(data);
            }
            else new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
        }, HotelWindow);
    };
    HotelWindow.ini_cont = function (data) {
        var main = $('#hotel-content-' + HotelWindow.townid);
        main.empty();
        var body = $('<div class="hotelbody"></div>');
        var hotelimg = $("<div style='float : left;'><img src='https://westrus.innogamescdn.com/images/buildings/" + data.hotel_image + "' alt=''/></div>");
        var subline = $("<div style='padding-left: 15px;padding-top:15px;'><h2 style='width:150px;'>" + "Отель" + " <span style='font-size:14px;'>" + s("%1-й уровень", data.hotel_level) + "</span><br/>" + data.town_name + "</h2></div>");
        var tablebuffer = "<div><table class='rooms'>";
        $.each(data.rooms, function (k, v) {
            var imgbuffer = 'https://westrus.innogamescdn.com/images/hotel_stars/star' + (v.level - 1);
            var classname = '';
            var free;
            var checked;
            if (!v.available) {
                imgbuffer += '_grey';
                classname = 'class="na"';
            }
            imgbuffer += '.png';
            if (v.free)
                free = "$ 0"; else
                free = "$" + v.costs;
            if (data.own_hotel && v.level == data.hotel_level)
                checked = 'checked'; else if (v.free && v.level <= data.hotel_level)
                checked = 'checked'; else
                checked = '';
            tablebuffer += '<tr ' + classname + '><td style="width:20px; vertical-align: middle;"><input id="selectroom-' + k + '" name="selectroom" value="' + k + '" type="radio" ' + checked + '/></td>' + "<td style='width:30px;'><label for='selectroom-" + k + "'><img src='" + imgbuffer + "' alt=''/></label></td>" + "<td style='width:240px;'><label for='selectroom-" + k + "'><span class='room_name'>" + v.name + "</span>" + s('(+ %1 энергии и %2 здоровья)', v.energy, v.health) + "</label></td>" + "<td class='costs'><label for='selectroom-" + k + "'>" + free + "</label></td>" + "</tr>";
        });
        tablebuffer += "</table></div><div class='buttonsleep'></div>";
        var hotelcontentbox = new west.gui.Groupframe("hotelcontentbox", tablebuffer).appendTo(body);
        if (data.attackable)
            $('<div style="width:140px;float:left;">' + "Расстояние:" + ' <span class="way_time">' + data.waytime + '</span></br> ' + "Защита:" + data.attackable + '</br>' + 'Время: 8 часов' + '</div>').appendTo(hotelcontentbox.$('div.buttonsleep')); else
            $('<div style="width:140px;float:left;">' + "Расстояние:" + ' <span class="way_time">' + data.waytime + '</span></br> ' + 'Время: 8 часов' + '</div>').appendTo(hotelcontentbox.$('div.buttonsleep'));
        new west.gui.Button("Спать", function () {
            HotelWindow.start($('input[name=selectroom]:checked', main).val())
        }).addClass('table_back').appendTo(hotelcontentbox.$('div.buttonsleep'));
        main.append(hotelimg);
        subline.appendTo(hotelimg);
        body.appendTo(main);
    };
    HotelWindow.start = function (room) {
        if (!room) {
            new UserMessage('Выбери комнату в отеле', UserMessage.TYPE_ERROR).show();
        } else {
            TaskQueue.add(new TaskSleep(HotelWindow.townid, room));
        }
    };
    HotelWindow.start_barrack_sleep = function (fort_id) {
        TaskQueue.add(new TaskFortSleep(fort_id, HotelWindow.pos.x, HotelWindow.pos.y));
    };
    HotelWindow.refresh_way_time = function (window, pos) {
        var way_time = Map.calcWayTime(Character.position, pos);
        $('span.way_time', window).html(way_time.formatDuration());
    };
})(jQuery);

(function ($) {
    JobWindow = function (id, x, y) {
        this.x = x;
        this.y = y;
        this.jobId = id;
        this.job = null;
        this.waytime = Map.calcWayTime(Character.position, {x: this.x, y: this.y});
        this.buybuttons = [];
        this.pbar_nextlevel = null;
        this.prem_button = null;
        this.pbar_hurt = null;
        this.pbar_motivation = null;
        this.jobmotivation = 0;
        this.currSkillpoints = 0;
        this.reloadInProgress = false;
        this.hasPremium = false;
        this.uid = 'job-' + x + '-' + y + '-' + id;
        this.premiumbutton = new west.gui.Button(west.gui.Icon.get("nugget")[0].outerHTML + ' ' +
            'Заработок'.replace("%d", "50").escapeHTML(), this.buyMoneyPremium, this, null, "<b>Премиум «Заработок»</b>: Получи больше денег, больше ценных вещей и увеличь шансы найти продукт.").setMinWidth(255);
        this.window = wman.open(this.uid, null, "jobwindow noreload wjob-" + id);
        this.DOM = $('div.tw2gui_window.' + this.uid);
        this.init();
    };
    JobWindow.prototype = JobWindow;
    JobWindow.open = function (id, x, y) {
        return new JobWindow(id, x, y);
    };
    JobWindow.initData = function () {
        var that = this;
        window.clearTimeout(this.reloadInProgress);
        Ajax.remoteCallMode("job", "job", {jobId: this.jobId, x: this.x, y: this.y}, function (json) {
            that.reloadInProgress = false;
            if (json.error) {
                that.window.destroy();
                return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            }
            that.job = new west.job.Model(JobList.getJobById(parseInt(json.id)).setSeen());
            that.job.mergeJobObject(json);
            that.hasPremium = json.has_prem;
            that.jobmotivation = parseInt(json.motivation * 100);
            that.currSkillpoints = that.job.jobpoints;
            that.initView();
        });
    };
    JobWindow.init = function () {
        var eventOpts = {boundto: this.window};
        EventHandler.listen('position_change', this.updateWayTime, this, eventOpts);
        EventHandler.listen('jobmotivation_change', this.updateMotivation, this, eventOpts);
        EventHandler.listen('char_skills_changed', this.checkSkillChange, this, eventOpts);
        EventHandler.listen('income_premium_changed', this.initData, this, eventOpts);
        EventHandler.listen('wear_changed', this.checkWearChanged, this, eventOpts);
        this.initData();
    };
    JobWindow.checkWearChanged = function (change) {
        var i, len = Math.max(change.added.length, change.removed.length), refresh = false;
        for (i = 0; i < len && !refresh; i++) {
            if (change.added[i] && change.added[i].hasItemBonus())refresh = true; else if (change.removed[i] && change.removed[i].hasItemBonus())refresh = true;
        }
        if (refresh) {
            if (this.reloadInProgress)window.clearTimeout(this.reloadInProgress);
            this.reloadInProgress = window.setTimeout(this.initData.bind(this), 2000);
        }
    };
    JobWindow.checkSkillChange = function () {
        var newPoints = this.job.jobObj.calcJobPoints();
        if (this.currSkillpoints != newPoints) {
            if (this.reloadInProgress) {
                window.clearTimeout(this.reloadInProgress);
            }
            this.reloadInProgress = window.setTimeout(this.initData.bind(this), 2000);
        }
    };
    JobWindow.getDurationBar = function (base) {
        if (!this.job.basis[base].energy)
            return '';
        var yields = this.job.basis[base].yields;
        var getTitle = function (normal, bonus, sum) {
            return '<table class="job_points_addition">' +
                (bonus && bonus !== '$0' ? '<tr><td class="left">' + 'Основа:' + '</td><td class="right">&nbsp;&nbsp;' + normal + '</td></tr>' + '<tr><td class="left">' + 'Бонус:' + '</td><td class="right"> + ' + bonus + '</td></tr>' + '<tr><td colspan="2"><hr /></td></tr>' : '') + '<tr class="text_bold"><td class="left">' + 'Сумма:' + '</td><td class="right">&nbsp;&nbsp;' + sum + '</td></tr>' + '</table>';
        };
        var xhtml = $('<div class="job_value_experience' + (this.hasPremium ? ' lightgreen' : '') + '" title="' +
            getTitle((this.job.basis[base].experience - this.job.basis[base].bonus_experience), this.job.basis[base].bonus_experience, this.job.basis[base].experience).escapeHTML() + '">' + this.job.basis[base].experience + '</div>' + '<div class="job_value_experience' + (this.hasPremium ? ' lightgreen' : '') + ' nextStage"></div>' + '<div class="job_value_money' + (this.hasPremium ? ' lightgreen' : '') + '" title="' +
            getTitle('$' + (this.job.basis[base].money - this.job.basis[base].bonus_money), '$' + this.job.basis[base].bonus_money, '$' + this.job.basis[base].money).escapeHTML()
            + '">$' + this.job.basis[base].money + '</div>' + '<div class="job_value_money' + (this.hasPremium ? ' lightgreen' : '') + ' nextStage"></div>' + '<div class="job_value_luck' + (this.hasPremium ? ' lightgreen' : '') + '" title="' +
            s('Если повезёт, найдешь предмет стоимостью %1-%2 долларов.', this.job.luck[0], this.job.luck[1]) + '">$' + this.job.luck[1] + '</div>' +
            (yields.length ? '<div class="job_value_yieldfound' + (this.hasPremium ? ' lightgreen' : '') + ' yield1" title="' +
            getTitle(yields[0].prop + '%', yields[0].probBonus + '%', (yields[0].prop + yields[0].probBonus) + '%').escapeHTML() + '">' +
            (yields[0].prop + yields[0].probBonus) + '%</div><div class="job_value_yieldfound yield1 nextStage"></div>' : '') +
            (yields.length > 1 ? '<div class="job_value_yieldfound' + (this.hasPremium ? ' lightgreen' : '') + ' yield2" title="' +
            getTitle(yields[1].prop + '%', yields[1].probBonus + '%', (yields[1].prop + yields[1].probBonus) + '%').escapeHTML() + '">' +
            (yields[1].prop + yields[1].probBonus) + '%</div><div class="job_value_yieldfound yield2 nextStage"></div>' : '') + '<div class="job_value_duration">' + (this.job.basis[base].duration.getTime2EndToken()) + '</div>' + '<div class="job_action job_action_' + base + '"><div class="job_startbutton">' + 'Начать' + '</div></div>' + '<div class="job_value_energy" title="' + s('Необходимо энергии: %1', this.job.basis[base].energy) + '">' + this.job.basis[base].energy + '</div>');
        $(xhtml[7]).addMousePopup("Время работы");
        return xhtml;
    };
    JobWindow.hoverJobstars = function (ev) {
        var starkey = $(ev.target).data('starindex');
        if (this.job.stars == starkey)return false;
        var target = $(ev.target);
        if (target.hasClass('emptystar'))
            target.prevAll().andSelf().addClass(this.job.stage + 'star');
        this.showNextStage(starkey);
    };
    JobWindow.hoverNextStar = function () {
        var nextStep = this.job.nextStarData;
        var starkey = this.job.stage !== nextStep.nextstage ? 6 : nextStep.nextstagestar;
        this.showNextStage(starkey);
    };
    JobWindow.showNextStage = function (starkey) {
        if (!this.job.isVisible)return false;
        var sel = $('div.job_duration_bars', this.DOM);
        var selS = $('div.job_durationbar_short', sel);
        var selM = $('div.job_durationbar_middle', sel);
        var selL = $('div.job_durationbar_long', sel);
        var nextValues = this.job.nextStageValues[starkey];
        var len = objectLength(nextValues);
        $('div.job_durationbar div.job_value_experience, div.job_durationbar div.job_value_money, div.job_value_yieldfound', sel).hide();
        $('div.job_value_experience.nextStage', selS).text(nextValues[0].xp);
        $('div.job_value_money.nextStage', selS).text('$' + nextValues[0].money);
        $('div.yield1.nextStage', selS).text((nextValues[0].items[0].prop + nextValues[0].items[0].probBonus) + '%');
        if (nextValues[0].items.length > 1)
            $('div.yield2.nextStage', selS).text((nextValues[0].items[1].prop + nextValues[0].items[1].probBonus) + '%');
        if (len > 1) {
            $('div.job_value_experience.nextStage', selM).text(nextValues[1].xp);
            $('div.job_value_money.nextStage', selM).text('$' + nextValues[1].money);
            $('div.yield1.nextStage', selM).text((nextValues[1].items[0].prop + nextValues[1].items[0].probBonus) + '%');
            if (nextValues[1].items.length > 1)
                $('div.yield2.nextStage', selM).text((nextValues[1].items[1].prop + nextValues[1].items[1].probBonus) + '%');
        }
        if (len > 2) {
            $('div.job_value_experience.nextStage', selL).text(nextValues[2].xp);
            $('div.job_value_money.nextStage', selL).text('$' + nextValues[2].money);
            $('div.yield1.nextStage', selL).text((nextValues[2].items[0].prop + nextValues[2].items[0].probBonus) + '%');
            if (nextValues[2].items.length > 1)
                $('div.yield2.nextStage', selL).text((nextValues[2].items[1].prop + nextValues[2].items[1].probBonus) + '%');
        }
        $('div.job_durationbar div.nextStage', sel).show();
    };
    JobWindow.hideNextStage = function () {
        var sel = $('div.job_duration_bars', this.DOM);
        $('div.job_durationbar div.job_value_experience, div.job_durationbar div.job_value_money, div.job_durationbar div.job_value_yieldfound', sel).show();
        $('div.job_durationbar div.nextStage', sel).hide();
        $('div.jobstar.emptystar.' + this.job.stage + 'star', this.DOM).removeClass(this.job.stage + 'star');
    };
    JobWindow.getDurationbarHint = function (level) {
        return '<div class="job_disabled_durationbar" title="' + s('Доступно с %1-го уровня', level) + '">' + s('%1-й уровень', level) + '</div>';
    };
    JobWindow.getArrivalTime = function () {
        return s('Приезд на работу: %1', new Date(new Date().getTime() + this.waytime * 1000).toTime());
    };
    JobWindow.getJobFinishTime = function () {
        return s('Завершение: %1', new Date(new Date().getTime() + this.duration * 1000).toTime());
    };
    JobWindow.getWaytimeBox = function () {
        this.waytime = Map.calcWayTime(Character.position, {x: this.x, y: this.y});
        return $('<div class="job_way"><span>' + 'Расстояние:'.escapeHTML() + '</span> <span class="job_way_time">' + this.waytime.formatDuration() + '</span></div>').addMousePopup(this.getArrivalTime.bind(this));
    };
    JobWindow.buildStarsProgressbar = function () {
        var nextStep = this.job.nextStarData;
        var pbar = new west.gui.Progressbar(nextStep.current, nextStep.nextstar).setTextOnly();
        var cont = jq2Html(pbar.getMainDiv().addClass('job_starprogressbar').attr('title', s('+%1 дополнительных очков', this.job.jobpoints)));
        cont += '<img class="job_starprogress_emptyicon" src="https://westrus.innogamescdn.com/images/window/job/jobstar_small_empty.png" />';
        cont += '<img class="job_starprogress_fullicon" src="https://westrus.innogamescdn.com/images/window/job/jobstar_small_' + nextStep.nextstage + '.png" />';
        return cont;
    };
    JobWindow.getSkillsBox = function () {
        var skills = this.job.get('skills');
        var xhtml = '';
        for (var sk in skills) {
            if (skills[sk] == 1)
                xhtml += jq2Html(CharacterSkills.getSkill(sk).getSkillImage()); else {
                for (var j = 0, len = skills[sk]; j < len; ++j)
                    xhtml += jq2Html(CharacterSkills.getSkill(sk).getSkillImage());
            }
        }
        return xhtml;
    };
    JobWindow.getBestWearButton = function () {
        return $('<div class="job_bestwearbutton" title="' +
            '<b>Рабочая одежда</b>: Увеличь свой доход, надев наилучшее снаряжение для этой работы.' + '"><span>' + 'Рабочая одежда' + '</span></div>').click(this.bestWearButtonClicked.bind(this));
    };
    JobWindow.getJobAmountSelector = function () {
        var title = 'Как часто ты хочешь выполнять работу?'.escapeHTML(), cb = this.setJobAmount.bind(this);
        return $(s('<div class="job-amount-selector" title="%1">' + '<div class="job-amount-minus"></div>' + '<div class="job-amount-num">1</div>' + '<div class="job-amount-plus"></div>' + '</div>', title)).click(cb).mousewheel(cb);
    };
    JobWindow.setJobAmount = function (ev, delta) {
        var cls, change = 0, countEl, curVal;
        if ('mousewheel' === ev.type) {
            change = delta > 0 ? 1 : -1;
        } else {
            cls = ev.target.className;
            if ('job-amount-minus' === cls) {
                change = -1;
            } else {
                change = 1;
            }
        }
        if (0 === change)return;
        countEl = this.window.$('.job-amount-num')
        curVal = parseInt(countEl.text(), 10);
        if (isNaN(curVal))return;
        countEl.text(Math.min(TaskQueue.limit.premium, Math.max(1, curVal + change)));
    };
    JobWindow.getJobAmount = function () {
        var amount = parseInt(this.window.$('.job-amount-num').text(), 10);
        return isNaN(amount) ? 1 : amount;
    };
    JobWindow.initView = function () {
        var job = this.job;
        var that = this;
        this.window.setMiniTitle(this.job.get('name').escapeHTML());
        var getJobFeaturedCls = function () {
            if (LinearQuestHandler.hasTutorialQuest())return '';
            if (job.is_gold)return 'gold';
            if (job.is_silver)return 'silver';
            return '';
        };
        var getYieldBoxes = function () {
            var yields = job.basis['short'].yields;
            var cont = [];
            var createYieldBox = function (yObj, ix) {
                if (yObj.random) {
                    return $('<div class="item  item_inventory job_yieldimage">'
                        + '<img alt="fist" src="https://westrus.innogamescdn.com/images/items/unknown.png" style="width: 60px; height: 60px;" class="tw_item">'
                        + '</div>');
                }
                else {
                    var title = '<h4>' + 'Купить продукт' + '</h4><span class="text_bold">' + 'Цена' + ':</span> ' + yObj.buyCost + ' <img src="https://westrus.innogamescdn.com/images/icons/nugget.png" />';
                    var yBuy = Premium.buyable.buyproduct && job.isVisible ? $('<div title="' + title.escapeHTML() + '" data-itemid="' + yObj.itemid + '" data-cost="' + yObj.buyCost + '" class="job_yield_buybutton" />').click(that.buyProductClicked.bind(that)) : '';
                    return new tw2widget.InventoryItem(ItemManager.get(yObj.itemid)).setShowalreadyown(true).getMainDiv().addClass('job_yieldimage').append(yBuy);
                }
            };
            for (var i = 0, leng = yields.length; i < leng; ++i) {
                cont.push(createYieldBox(yields[i]));
            }
            return cont;
        };
        var getBlockContainer = function (cls) {
            return '<div class="job_tutoriallock ' + cls + '_disabled" title="' + 'Будет доступно во время руководства'.escapeHTML() + '">' + '<img src="https://westrus.innogamescdn.com/images/window/job/locked.png?1" />' + '</div>';
        };
        var jobicon = '<div class="job" title="' + job.get('description').escapeHTML().cutIt(150) + '"><div class="featured ' + getJobFeaturedCls() + '"></div>' + '<img src="https://westrus.innogamescdn.com/images/jobs/' + job.get('shortname') + '.png" class="job_icon" /></div>';
        var contentLeftHtml = '<div class="job_leftSide">' + '<div class="job_premium_button"></div>' + '<div class="job_jobstars">' + jq2Html(new tw2widget.jobstars(job.stage, job.stars).getMainDiv()) + '</div>' + '<div class="job_progress_jobstars">' + this.buildStarsProgressbar() + '</div>' + '<div class="job_skills">' + this.getSkillsBox() + '</div>' + '<div class="job_wear_generator"></div>' + '<div class="job_left_divider"></div><div class="job_danger_motivation"><div class="job_dangerbox"></div><div class="job_motivationbox"></div></div>';
        var lockState = TutorialManager.job_tutorial;
        if (lockState >= 3)
            contentLeftHtml += getBlockContainer('job_danger_motivation');
        if (lockState >= 2)
            contentLeftHtml += getBlockContainer('job_jobstars');
        if (lockState >= 1)
            contentLeftHtml += getBlockContainer('job_wear_generator');
        this.window.removeClass('tutorial_lock_3 tutorial_lock_2 tutorial_lock_1').addClass('tutorial_lock_' + lockState);
        contentLeft = $(contentLeftHtml + '</div>');
        if (Premium.hasBonus('money') || !job.isVisible)this.premiumbutton.disable();
        $('div.job_premium_button', contentLeft).append(this.premiumbutton.getMainDiv());
        $('div.job_wear_generator', contentLeft).append(this.getBestWearButton());
        this.pbar_hurt = new tw2widget.gui.CircleProgressbar('danger', job.danger, 100).setTitle(s('<b>Опасность</b>: %1%<br />\nОпасность показывает вероятность получить повреждение на работе. Величина травмы от этого показателя не зависит.', job.danger));
        $('div.job_dangerbox', contentLeft).empty().append(this.pbar_hurt.getMainDiv());
        var jobmoti = parseInt(job.jobmotivation * 100);
        this.pbar_motivation = new tw2widget.gui.TrafficProgressbar('jobmotivation', jobmoti, 100).setTitle(s('<b>Мотивация</b>: %1%<br />\nЧем выше мотивация, тем больше награда.', jobmoti));
        $('div.job_motivationbox', contentLeft).empty().append(this.pbar_motivation.getMainDiv());
        $('img.job_starprogress_fullicon', contentLeft).off('hover').hover(this.hoverNextStar.bind(this), this.hideNextStage.bind(this));
        $('div.tw2gui_jobstars > div', contentLeft).off('hover').hover(this.hoverJobstars.bind(this), this.hideNextStage.bind(this));
        var contentRight;
        if (job.isVisible) {
            contentRight = $('<div class="job_rightSide">' + '<div class="job_waytime"></div>' + '<div class="job_jobtimes">' + '<div class="job_durationlabel">' + '<img class="job_xp_icon_big" src="https://westrus.innogamescdn.com/images/window/job/bigicon_xp.png" title="' + 'Опыт' + '"/><br />' + '<img class="job_money_icon_big" src="https://westrus.innogamescdn.com/images/window/job/bigicon_money.png" title="' + 'Доллары' + '"/><br />' + '<img class="job_luck_icon_big" src="https://westrus.innogamescdn.com/images/window/job/bigicon_luck.png" title="' + 'Стоимость находок' + '"/><br />' + '</div>' + '<div class="job_duration_bars">' + '<div data-base="short" class="job_durationbar job_durationbar_short"></div>' + '<div data-base="middle" class="job_durationbar job_durationbar_middle"></div>' + '<div data-base="long" class="job_durationbar job_durationbar_long"></div>' + '<div class="job_value_yieldline yield1"></div>' +
                (job.basis['short'].yields.length > 1 ? '<div class="job_value_yieldline yield2"></div>' : '') + '</div>' + '</div>' + '</div>');
            $('div.job_waytime', contentRight).append(this.getWaytimeBox());
            $('div.job_durationlabel', contentRight).appendArray(getYieldBoxes());
            contentRight.append(this.getJobAmountSelector());
            if (job.basis['short'].energy)
                $('div.job_durationbar_short', contentRight).append(this.getDurationBar('short')).off('click').click(this.startJobClicked.bind(this));
            (job.basis['middle'].energy ? $('div.job_durationbar_middle', contentRight).append(this.getDurationBar('middle')).off('click').click(this.startJobClicked.bind(this)) : $('div.job_durationbar_middle', contentRight).html(this.getDurationbarHint(10)).addClass('disabled'));
            (job.basis['long'].energy ? $('div.job_durationbar_long', contentRight).append(this.getDurationBar('long')).off('click').click(this.startJobClicked.bind(this)) : $('div.job_durationbar_long', contentRight).html(this.getDurationbarHint(20)).addClass('disabled'));
        }
        else {
            $('div.job_premium_button, div.job_jobstars, div.job_danger_motivation', contentLeft).addClass('opacity05');
            $('div.job_progress_jobstars', contentLeft).css('visibility', 'hidden');
            var title = '<p>' + s('Эта работа станет доступной на %1 уровне.', job.get('level')) + '</p>' + '<p class="job_overlay_desc" style="top: 38px;">' +
                s('Чтобы работа стала доступной, тебе нужно %1 трудовых очков.', job.workpoints) + '</p>' +
                s('Ты вносишь %1 дополнительных трудовых очков', this.currSkillpoints);
            contentRight = $('<div class="job_rightSide job_overlay">' + '<p class="job_overlay_text" title="' + title.escapeHTML() + '">' +
                s(ngettext('Доступно на %1 уровне', new Array('Доступно на %1 уровне', 'Доступно на %1 уровне', 'Доступно на %1 уровне'), this.job.get('level')), this.job.get('level')) + '</p>' + '</div>');
        }
        this.window.setTitle(jobicon + '&nbsp;&nbsp;' + job.get('name').escapeHTML()).clearContentPane().appendToContentPane(contentLeft, '<div class="job_content_divider" />', contentRight);
        var popup = new MousePopup('<div style="width: 250px"><b>' + "Кирки".escapeHTML() + ':</b> ' + "Работоспособность — чем больше трудовых очков ты вносишь в работу, тем больше заработок и выше вероятность найти продукт. Работоспособность показывают серебряные и золотые кирки. Пять золотых кирок означают, что твой доход максимален.".escapeHTML() + '</div>').setRelativePosition(0, 50);
        $('.job_jobstars', this.DOM).addMousePopup(popup);
    };
    JobWindow.updateWayTime = function () {
        this.waytime = Map.calcWayTime(Character.position, {x: this.x, y: this.y});
        $('span.job_way_time', this.DOM).text(this.waytime.formatDuration());
    };
    JobWindow.updateMotivation = function (jobdata) {
        if (!jobdata)return this.initData();
        if (jobdata.job.id !== this.jobId)return false;
        var that = this;
        var backupMoti = this.jobmotivation;
        var getSubMotivation = function (dur) {
            for (var key in that.job.basis) {
                if (dur === that.job.basis[key].duration)
                    return that.job.basis[key].energy;
            }
            if (window.DEBUG)console.log('JobWindow.updateMotivation error - wrong duration time given');
            return null;
        };
        var needsRefresh = function () {
            if (!backupMoti || !that.jobmotivation)return false;
            return parseInt(backupMoti / 25) !== parseInt(that.jobmotivation / 25);
        };
        var subMoti = getSubMotivation(jobdata.duration);
        this.jobmotivation -= (subMoti < this.jobmotivation ? subMoti : 0);
        if (Character.lowMotivationNotifed[this.job.id] == undefined && this.jobmotivation == 0) {
            Character.lowMotivationNotifed[this.job.id] = true;
            WestUi.NotiBar.add(new OnGoingHintEntry(s("Твоя мотивация для работы %1 упала до нуля! Ты всё ещё сможешь получить продукты, но, пока твоя мотивация не восстановится, ты не заработаешь ни денег, ни опыта, и даже не найдёшь предмет.", jobdata.job.name)));
        }
        if (needsRefresh())return this.initData();
        if (!this.pbar_motivation)
            this.pbar_motivation = new tw2widget.gui.TrafficProgressbar('jobmotivation', this.jobmotivation, 100).setTitle(s('<b>Мотивация</b>: %1%<br />\nЧем выше мотивация, тем больше награда.', this.jobmotivation)); else
            this.pbar_motivation.setCurr(this.jobmotivation).setTitle(s('<b>Мотивация</b>: %1%<br />\nЧем выше мотивация, тем больше награда.', this.jobmotivation));
        $('div.job_motivationbox', this.DOM).empty().append(this.pbar_motivation.getMainDiv());
    };
    JobWindow.updateDurationbars = function () {
        var sel = $('div.job_duration_bars', this.DOM);
        if (this.job.basis['short'].energy)$('div.job_durationbar_short', sel).html(this.getDurationBar('short'));
        if (this.job.basis['middle'].energy)$('div.job_durationbar_middle', sel).html(this.getDurationBar('middle'));
        if (this.job.basis['long'].energy)$('div.job_durationbar_long', sel).html(this.getDurationBar('long'));
    };
    JobWindow.buyProductClicked = function (ev) {
        var target = $(ev.target);
        if (!Premium.buyable.buyproduct || !this.job.isVisible)
            return false;
        Premium.confirmUse("buyproduct " + this.job.id + " " + target.data('itemid'), "Купить продукт".escapeHTML(), "Точно купить?".escapeHTML(), target.data('cost'));
    };
    JobWindow.bestWearButtonClicked = function (ev) {
        var cb = function () {
            Bag.searchBest(this.job.get('skills'), this.job.id);
            return EventHandler.ONE_TIME_EVENT;
        }.bind(this);
        if (wman.getById(Inventory.uid)) {
            cb();
            if (!wman.getById(Wear.uid))Wear.open();
        } else {
            EventHandler.listen('inventory_ready', cb);
            Wear.open();
        }
    };
    JobWindow.startJobClicked = function (ev) {
        var base = $(ev.currentTarget).data('base'), jobAmount = this.getJobAmount(), tasks = [];
        while (jobAmount--) {
            tasks.push(new TaskJob(this.job.id, this.x, this.y, this.job.get('duration', base)));
        }
        TaskQueue.add(tasks);
        var animation = this.animateStart(this);
        if (this.job.isVisible)
            animation(ev, $('div.job', this.DOM));
        if (!Config.get('jobs.stayopen'))this.window.destroy();
    };
    JobWindow.startJob = function (id, x, y, duration) {
        TaskQueue.add(new TaskJob(id, x, y, duration));
        JobList.getJobById(id).setSeen();
        return this.animateStart(this);
    };
    JobWindow.buyMoneyPremium = function () {
        if (!Premium.buyable.money)
            return false;
        var that = this;
        Premium.confirmUse("money", "Заработок".escapeHTML(), "Зарплата и вероятность получения продукта повышаются на 50%.\nПредметы, найденные на работе, могут оказаться в полтора раза дороже.".escapeHTML(), this.moneyPrice, null, function () {
            that.activatedPremium();
        });
    };
    JobWindow.activatedPremium = function () {
        if (Premium.hasBonus('money'))
            $('div.job_premium_button', this.DOM).append(this.premiumbutton.disable().getMainDiv());
        EventHandler.signal('income_premium_changed');
    };
    JobWindow.animateStart = function (self) {
        return function (ev, img) {
            var icon = img || $('div.job', this.DOM);
            var copy = icon.clone();
            copy.css({'left': ev.pageX + 'px', 'top': ev.pageY + 'px', 'z-index': 100}).appendTo('#user-interface');
            copy.animate({
                top: ($(document).height() - 100) + 'px',
                left: ($(document).width() - 100) + 'px',
                opacity: 0.5
            }, 900, 'linear', function () {
                $(this).remove();
            });
        };
    };
})(jQuery);
;
(function ($) {
    window.CharacterWindow = {
        Overview: {window: null},
        CharacterClasses: {},
        AvatarMake: {DOM: null},
        Crafting: {tab_heading: ['Профессия', 'Повар', 'Знахарь', 'Кузнец', 'Шорник']}
    };
    CharacterWindow.toggleOpen = function (tab) {
        var wnd = wman.toggleOpen('character');
        if (wnd && 'open' === wnd.status) {
            CharacterWindow.open(tab, wnd.win);
        }
    };
    CharacterWindow.open = function (tab, win_open, onlyAvatar) {
        var tabclick = function (win, id) {
            CharacterWindow.showTab(id);
        }
        CharacterWindow.Overview.window = $("<div class='character-overview'/>");
        CharacterWindow.window = (win_open || wman.open("character")).setMiniTitle("Персонаж").appendToContentPane(CharacterWindow.Overview.window, $('<div class="character-characterclasses"/>'), $('<div class="character-avatarmake"/>'), $('<div class="character-crafting"/>'));
        if (!onlyAvatar) {
            CharacterWindow.window.addTab('Обзор персонажа', 'overview', tabclick);
            CharacterWindow.window.addTab('Портрет персонажа', 'avatarmake', tabclick);
            CharacterWindow.window.addTab('Тип персонажа', 'characterclasses', tabclick);
            CharacterWindow.window.addTab(CharacterWindow.Crafting.tab_heading[Character.professionId || 0], 'crafting', tabclick);
            CharacterWindow.showTab(tab ? tab : 'overview');
            CharacterWindow.onlyAvatar = false;
        } else {
            CharacterWindow.onlyAvatar = true;
            CharacterWindow.window.setTitle('Создай свой персонаж!');
            CharacterWindow.window.addClass("onlyavatar");
            CharacterWindow.window.setModal();
            CharacterWindow.window.addEventListener("WINDOW_DESTROY", function () {
                CharacterWindow.window = undefined;
                $('.linear_quest').fadeIn();
            });
            CharacterWindow.showTab('avatarmake');
        }
        EventHandler.listen('energy', CharacterWindow.updateEnergy, CharacterWindow.window);
        EventHandler.listen('health', CharacterWindow.updateHealth, CharacterWindow.window);
        EventHandler.listen('character_exp_changed', CharacterWindow.updateExperience, CharacterWindow.window);
        EventHandler.listen("character_level_up", CharacterWindow.updateLevel, CharacterWindow.window);
        CharacterWindow.AvatarMake.DOM = CharacterWindow.window.$('div.character-avatarmake');
        CharacterWindow.CharacterClasses.infoShown = false;
    };
    wman.registerReloadHandler(/^character/, function () {
        CharacterWindow.open();
    });
    CharacterWindow.showTab = function (id) {
        if (!CharacterWindow.window)return;
        CharacterWindow.window.removeClass('avatarbg').removeClass('craftingbg').removeClass('classoverviewbg').removeClass('professionchoosebg').removeClass("characteroverview");
        if (id == "characterclasses" && (!CharacterWindow.CharacterClasses.infoShown || !CharacterWindow.window.$('.character-characterclasses').children().length)) {
            CharacterWindow.CharacterClasses.infoShown = false;
            CharacterWindow.window.addClass('classoverviewbg');
        }
        else if (id == "overview")
            CharacterWindow.window.addClass("characteroverview"); else if (id == "avatarmake")
            CharacterWindow.window.addClass('avatarbg'); else if (id == "crafting" && Character.professionId)
            CharacterWindow.window.addClass('craftingbg'); else if (id == 'crafting')
            CharacterWindow.window.addClass('professionchoosebg');
        if (CharacterWindow.window.tabIds[id]) {
            CharacterWindow.window.activateTab(id);
        }
        CharacterWindow.window.$('div.tw2gui_window_content_pane > *').each(function (i, e) {
            if ($(e).hasClass('character-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        west.Feature.removeLock(CharacterWindow.window);
        switch (id) {
            case'overview':
                CharacterWindow.Overview.init();
                break;
            case'characterclasses':
                CharacterWindow.CharacterClasses.init();
                break;
            case'avatarmake':
                CharacterWindow.AvatarMake.init();
                break;
            case'crafting':
                CharacterWindow.Crafting.init();
                break;
        }
    }
    CharacterWindow.Overview.init = function () {
        if (CharacterWindow.window.$('div.character-overview').children().length)return;
        this.elTitle = $("<div class='charoverview-title'/>").append("<div class='title linklike' title='<b>" + "Твоё прозвище" + "</b>'/>", "<div class='editbtn' title='<b>" + "Поменять прозвище" + "</b>'/>");
        this.elAvatarGreen = $("<img />");
        this.elAvatar = $("<div class='charoverview-avatar'/>");
        this.elInfo = $("<ul class='charoverview-info'/>");
        this.elClassTitle = $("<div class='class-title'/>");
        this.elClassInfo = $("<div class='class-info'/>");
        this.elClass = $("<div class='charoverview-class'/>").append(this.elClassTitle, this.elClassInfo);
        this.elClassIcon = $("<img />");
        this.elClassIconName = $("<div class='name'/>");
        this.elClassIcondiv = $("<div class='class-icon'/>").append(this.elClassIcon, this.elClassIconName);
        this.window.append(this.elAvatar, this.elClassIcondiv, this.elTitle, this.elInfo, this.elClass);
        var that = this;
        Ajax.remoteCallMode('character', 'get_info', {}, function (resp) {
            if (resp.avatar.search('greenhorn') == -1) {
                var ava = $(resp.avatar);
                if (ava.is("img"))ava.css({margin: "16px 6px 6px 6px", border: "2px solid #000"});
                that.elAvatar.html(ava);
            }
            else {
                var ava = $("<img />");
                if (ava.is("img"))ava.attr("src", 'https://westrus.innogamescdn.com/images/window/character/greenhorn_ava.png');
                that.elAvatar.html(ava);
            }
            that.elAvatar.prepend($("<div class='overlay'/>"));
            that._initTitleBox(resp.charTitles, resp.titleId);
            that.setCharInfo(resp);
            that._initClassInfo(resp);
        }, CharacterWindow);
    };
    CharacterWindow.Overview.setCharInfo = function (resp) {
        var that = this;
        updateCharacterObject(resp);
        var setInfo = function (cls, title, value) {
            if (undefined === cls || undefined === title || undefined === value)return;
            var e = $("li.charinfo-" + cls, that.elInfo);
            if (0 != e.length)
                e.empty(); else
                that.elInfo.append(e = $("<li class='charinfo-" + cls + "'/>"));
            e.append($("<div class='charinfo-title'>" + title + "</div>"), $("<div class='charinfo-value'>" + value + "</div>"), $("<div class='cb'/>"));
        };
        setInfo("level", "Уровень", resp.level);
        setInfo("exp", "Опыт", (resp.exp - resp.expThis) + " / " + (resp.expNext - resp.expThis));
        setInfo("health", "Здоровье", resp.healthCurrent + " / " + resp.healthMax);
        setInfo("energy", "Энергия", resp.energyCurrent + " / " + resp.energyMax);
        setInfo("speed", "Скорость", resp.speed);
        setInfo("duellevel", "Дуэльный разряд", resp.duelLevel);
        setInfo("duelwon", "Побед на дуэлях", resp.duelWin);
        setInfo("duellost", "Поражений", resp.duelLost);
    };
    var updateCharacterObject = function (data) {
        Character.maxEnergy = data.energyMax;
        Character.setEnergy(Math.floor(data.energyCurrent));
        Character.setHealth(Math.floor(data.healthCurrent));
        Character.setLevel(data.level);
        Character.setExperience(data.exp);
        Character.setDuelLevel(data.duelLevel);
        Character.setDuelWins(data.duelWin);
        Character.setDuelLosts(data.duelLost);
        Character.setCharClass({type: data.classKey, classbonus: data.classBonus});
    };
    CharacterWindow.Overview._initClassInfo = function (resp) {
        var scroll = new west.gui.Scrollpane();
        this.elClassInfo.empty();
        this.elClassTitle.text("Тип: %s".replace("%s", resp.className));
        this.elClassIconName.text(resp.className);
        this.elClassIcon.attr("src", 'https://westrus.innogamescdn.com/images/window/character/' + (resp.classIsDefault ? "symbol_greenhorn" : resp.classKey) + '.png');
        resp.classBonus.each(function (bonus) {
            scroll.appendContent($("<div class='class-bonus'/>").append(bonus.icon, $("<span>" + bonus.desc + "</span>"), $("<div class='cb'/>")));
        });
        this.elClassInfo.append(scroll.getMainDiv());
        if (resp.classIsDefault) {
            this._initClassChooseAvailable(resp.level);
            $("div.tw2gui_scrollpane_verticalscrollbar_area", this.elClassInfo).css("display", "none");
        }
    };
    CharacterWindow.Overview._initClassChooseAvailable = function (level) {
        if (undefined === this.elClass)return;
        var txt = level >= 15 ? 'Теперь ты можешь выбрать тип персонажа.' : 'Тип персонажа ты сможешь выбрать, когда достигнешь 15-го уровня.';
        this.elClass.append($("<div class='class-available'/>"));
        var t = $("<div class='class-available-text'><div style='margin: 8px 0;'>" + txt + "</div></div>");
        $.each(["adventurer", "duelist", "worker", "soldier"], function (k, v) {
            t.append($("<img src='https://westrus.innogamescdn.com/images/class_choose/" + v + ".png' style='margin-left: 10px;' width='52px' height='36px' />"));
        });
        if (Character.level >= 15)t.click(function () {
            CharacterWindow.showTab("characterclasses");
        });
        this.elClass.append(t);
    };
    CharacterWindow.Overview._initTitleBox = function (titles, titleId) {
        this.guiSelect = new west.gui.Selectbox().setWidth(300).addListener(function (key) {
            CharacterWindow.Overview.switchTitle(key, titles);
        }).addItem(0, "Без прозвища");
        if (!jQuery.isEmptyObject(titles)) {
            for (var k in titles) {
                if (!titles.hasOwnProperty(k))continue;
                this.guiSelect.addItem(k, titles[k]);
            }
            if (0 !== titleId)
                cur = titles[titleId];
        }
        var that = this;
        $("div.editbtn", this.elTitle).click(function (e) {
            that.guiSelect.show(e);
        });
        this.updateTitle(titles, titleId);
    };
    CharacterWindow.Overview.updateTitle = function (titles, id) {
        $("div.title", this.elTitle).text(0 != id ? titles[id] : "Без прозвища").off('click').click(function () {
            PlayerProfileWindow.open(Character.playerId);
        });
    }
    CharacterWindow.Overview.switchTitle = function (id, titles) {
        Ajax.remoteCall('character', 'switch_title', {title_id: id}, function (data) {
            new UserMessage(data.msg, (!data.error) ? UserMessage.TYPE_SUCCESS : UserMessage.TYPE_ERROR).show();
            CharacterWindow.Overview.updateTitle(titles, id);
        }, CharacterWindow);
    }
    CharacterWindow.updateEnergy = function (currEnergy, maxEnergy) {
        $('li.charinfo-energy div.charinfo-value', CharacterWindow.Overview.window).html(currEnergy + ' / ' + maxEnergy);
    };
    CharacterWindow.updateHealth = function (currHealth, maxHealth) {
        $('li.charinfo-health div.charinfo-value', CharacterWindow.Overview.window).html(currHealth + ' / ' + maxHealth);
    };
    CharacterWindow.updateExperience = function () {
        $('li.charinfo-exp div.charinfo-value', CharacterWindow.Overview.window).html(Character.getExperience4Level() + ' / ' + Character.getMaxExperience4Level());
    };
    CharacterWindow.updateLevel = function (currLevel) {
        $('li.charinfo-level div.charinfo-value', CharacterWindow.Overview.window).text(currLevel);
    };
    CharacterWindow.CharacterClasses.init = function () {
        west.Feature.lockScreen('classchoose');
        if (!CharacterWindow.window.$('div.character-characterclasses').children().length) {
            Ajax.remoteCall('class_choose', '', {}, function (json) {
                CharacterWindow.CharacterClasses._initContent(json.data);
            }, CharacterWindow);
        }
    };
    CharacterWindow.CharacterClasses._initContent = function (data) {
        var maindiv = $('<div class="characterclasses"></div>');
        var i = 0;
        for (var westclass in data) {
            var width = 169;
            var left = 8 * (i + 1) + width * i;
            if (i == 3)width = 163;
            var info = $('<div style="display:none;" class="class-info class-info-' + westclass + '">'
                + '<div style="position:absolute; left:30px; width:161px; height:106px; background:url(https://westrus.innogamescdn.com/images/class_choose/' + westclass + '.png) no-repeat"/>'
                + '<div style="position:absolute; top:125px; left:25px; font-weight:bold; font-size:14pt;">' + 'Тип персонажа:' + ' ' + data[westclass].classname + '</div>'
                + '<div style="position:absolute; top:20px; width:480px; left:200px;">' + data[westclass].description + '</div>'
                + '</div>');
            var shortinfo = $('<div onclick="CharacterWindow.CharacterClasses.showClassInfo(\'' + westclass + '\')" class="class-short-info" style="cursor:pointer; width:' + width + 'px; height:300px; position:absolute; top:0px; left:' + left + 'px; float:left;">'
                + '<div style="text-align:center; font-weight:bold; font-size:11pt;">' + data[westclass].classname + '</div>'
                + '<div style="position:absolute; width:' + width + 'px; font-style:italic; font-size:11pt; top:145px; text-align:center;">"' + data[westclass]['quote'] + '"</div>'
                + '<div style="position:absolute; width:' + width + 'px; text-align:center; top:185px;"><b>' + 'Преимущества' + '</b></div>'
                + '</div>');
            var bonihtml = '<div style="position:absolute; left:30px; top:160px; width:650px;">';
            for (var j = 0; j < data[westclass].boni.length; j++) {
                var top = 207 + j * 22;
                bonihtml += data[westclass].boni[j]["icon"] + ' ' + data[westclass].boni[j]["description"] + '<br />';
                shortinfo.append($('<div style="position:absolute; width:' + width + 'px; top: ' + top + 'px; text-align:center;" title="&lt;div style=&quot;width:300px; font-weight:bold;&quot;&gt;' + data[westclass].boni[j].description + '&lt;/div&gt;">' + data[westclass].boni[j]["bonusname"] + '</div>'));
            }
            bonihtml += '</div>';
            info.append($(bonihtml));
            var buttons = $('<div style="position:absolute; top:340px;"/>');
            buttons.append($('<div style="position:absolute; left:20px;"/>').append(new west.gui.Button('Назад', CharacterWindow.CharacterClasses.hideClassInfo).getMainDiv()));
            if (Character.charClass == 'greenhorn' && Character.level >= 15 && Character.avatarConfig)
                buttons.append($('<div style="position:absolute; left:550px;"/>').append(new west.gui.Button('Выбрать тип персонажа', CharacterWindow.CharacterClasses.choose, null, [westclass, data[westclass].classname]).getMainDiv())); else if (Character.charClass == 'greenhorn' && Character.level >= 15)
                buttons.append($('<div class="error" style="position:absolute; left:300px; width:380px;"><a href="javascript:void(CharacterWindow.showTab(\'avatarmake\'));">' + 'Прежде чем выбрать тип персонажа, нужно создать портрет.' + '</a></div>')); else if (Character.charClass == 'greenhorn')
                buttons.append($('<div class="error" style="position:absolute; left:300px; width:380px;">' + 'Тип персонажа ты сможешь выбрать, когда достигнешь 15-го уровня.' + '</div>'));
            info.append(buttons);
            var moreinfobutton = $('<div style="position:absolute; top:350px; text-align:center; width:' + width + 'px"/>');
            if (Character.charClass == westclass)
                shortinfo.append($('<div style="width:130px; margin:0px auto; padding-top:320px; font-weight:bold; text-align:center;">' + '&raquo; Твой тип персонажа' + '</div>')); else if (Character.charClass == 'greenhorn')
                shortinfo.append(moreinfobutton.append(new west.gui.Button('Просмотр').getMainDiv())); else
                shortinfo.append(moreinfobutton.append(new west.gui.Button('Детали').getMainDiv()));
            maindiv.append(shortinfo);
            maindiv.append(info);
            i++;
        }
        CharacterWindow.window.$('div.character-characterclasses').empty().append(maindiv);
    };
    CharacterWindow.CharacterClasses.showClassInfo = function (characterclass) {
        CharacterWindow.CharacterClasses.infoShown = true;
        CharacterWindow.window.removeClass('classoverviewbg');
        CharacterWindow.window.$("div.class-short-info").hide();
        CharacterWindow.window.$("div.class-info-" + characterclass).fadeIn();
    };
    CharacterWindow.CharacterClasses.hideClassInfo = function () {
        CharacterWindow.window.$('div.characterclasses > *').each(function (i, e) {
            if ($(e).hasClass('class-info'))
                $(e).hide(); else
                $(e).fadeIn();
        });
        CharacterWindow.CharacterClasses.infoShown = false;
        CharacterWindow.window.addClass('classoverviewbg');
    };
    CharacterWindow.CharacterClasses.choose = function (button, charclass) {
        if (!charclass) {
            new UserMessage("Необходимо выбрать тип персонажа", UserMessage.TYPE_ERROR).show();
            return;
        }
        var msg = null;
        var header = null;
        header = "Выбор типа персонажа";
        msg = "Выбор типа персонажа окончателен и бесповоротен." + "\n\n" + "Ты выбрал следующий тип персонажа:" + " " + charclass[1];
        new west.gui.Dialog(header, msg).addButton('yes', function () {
            CharacterWindow.CharacterClasses._chooseRequest(charclass);
        }).addButton('no').show();
    };
    CharacterWindow.CharacterClasses._chooseRequest = function (charclass) {
        if (!charclass[0])
            return;
        Ajax.remoteCall('class_choose', 'choose', {'charclass': charclass[0]}, function (data) {
            new UserMessage(data.msg, (!data.error) ? UserMessage.TYPE_SUCCESS : UserMessage.TYPE_ERROR).show();
            if (!data.error) {
                Character.lifePointPerHealthSkillBonus = data.lifePointPerHealthSkillBonus;
                for (var type in data.itemLevelRequirementDecrease) {
                    Character.itemLevelRequirementDecrease[type] = data.itemLevelRequirementDecrease[type];
                }
                Character.taskPointModifier.build = data.taskPointModifierBuild;
                Character.setHealth(data.health);
                Character.setCharClass(data.charClass);
                EventHandler.signal('character_values_changed', []);
                if (CharacterWindow.window != undefined)
                    CharacterWindow.window.fireEvent(TWE("WINDOW_RELOAD"), CharacterWindow.window);
            }
        }, CharacterWindow);
    };
    CharacterWindow.AvatarMake.init = function () {
        if (!CharacterWindow.window.$('div.character-avatarmake').children().length)
            CharacterWindow.AvatarMake._initContent();
    };
    CharacterWindow.AvatarMake._initContent = function () {
        var el = CharacterWindow.window.$('div.character-avatarmake');
        var lt = $('<div class="avatar_left_top"></div>');
        el.empty().addClass('avatarpicker');
        el.append(lt, "<div id='avatar_preview' class='avatar_pic'></div>", "<div style='position: absolute;top:247px;left:6px;' id='avatarmake_background'></div>", "<div id='gender_picker'><div id='pick_female' onclick='window.AvatarMake.setGender(\"female\")'>" + 'женский' + "</div><div id='pick_male' onclick='window.AvatarMake.setGender(\"male\")'>" + 'мужской' + "</div></div>", "<div id='skin_picker'><div id='pick_white' onclick='window.AvatarMake.setSkin(\"white\")'></div><div id='pick_brown' onclick='window.AvatarMake.setSkin(\"brown\")'></div><div id='pick_black' onclick='window.AvatarMake.setSkin(\"black\")'></div></div>", "<div id='picker_description_container'>" + "<div class='mouth_desc picker_description'>" + 'Рот' + "</div>" + "<div class='clothing_desc picker_description'>" + 'Костюм' + "</div>" + "<div class='hatsa_desc picker_description'>" + 'Головной убор' + "</div>" + "<div class='skin_1_desc picker_description'>" + 'Лицо' + "</div>" + "<div class='hair_desc picker_description'>" + 'Волосы' + "</div>" + "<div class='beards_desc picker_description'>" + 'Усы и борода' + "</div>" + "<div class='eyes_desc picker_description'>" + 'Глаза' + "</div>" + "<div class='accessoires_desc picker_description'>" + 'Аксессуары' + "</div>" + "<div class='pose_desc picker_description'>" + 'Снаряжение' + "</div>" + "<div class='nose_desc picker_description'>" + 'Нос' + "</div></div>", "<div id='picker_container'>" + "<div class='avatar_mouth_select'>" + "<div class='backward' onclick='window.AvatarMake.switchThing(this,-1)'></div><div class='forward' onclick='window.AvatarMake.switchThing(this,1)'></div>" + "</div><div class='avatar_clothing_select'>" + "<div class='backward' onclick='window.AvatarMake.switchThing(this,-1)'></div><div class='forward' onclick='window.AvatarMake.switchThing(this,1)'></div>" + "</div><div class='avatar_hatsa_select'>" + "<div class='backward' onclick='window.AvatarMake.switchThing(this,-1)'></div><div class='forward' onclick='window.AvatarMake.switchThing(this,1)'></div>" + "</div><div class='avatar_skin_1_select'>" + "<div class='backward' onclick='window.AvatarMake.switchThing(this,-1)'></div><div class='forward' onclick='window.AvatarMake.switchThing(this,1)'></div>" + "</div><div class='avatar_hair_select'>" + "<div class='backward' onclick='window.AvatarMake.switchThing(this,-1)'></div><div class='forward' onclick='window.AvatarMake.switchThing(this,1)'></div>" + "</div><div class='avatar_beards_select'>" + "<div class='backward' onclick='window.AvatarMake.switchThing(this,-1)'></div><div class='forward' onclick='window.AvatarMake.switchThing(this,1)'></div>" + "</div><div class='avatar_eyes_select'>" + "<div class='backward' onclick='window.AvatarMake.switchThing(this,-1)'></div><div class='forward' onclick='window.AvatarMake.switchThing(this,1)'></div>" + "</div><div class='avatar_accessoires_1_select'>" + "<div class='backward' onclick='window.AvatarMake.switchThing(this,-1)'></div><div class='forward' onclick='window.AvatarMake.switchThing(this,1)'></div>" + "</div><div class='avatar_pose_select'>" + "<div class='backward' onclick='window.AvatarMake.switchThing(this,-1)'></div><div class='forward' onclick='window.AvatarMake.switchThing(this,1)'></div>" + "</div><div class='avatar_nose_select'>" + "<div class='backward' onclick='window.AvatarMake.switchThing(this,-1)'></div><div class='forward' onclick='window.AvatarMake.switchThing(this,1)'></div>" + "</div>" + "</div>", "<div id='randomize' onclick='window.AvatarMake.randomize()'> </div>", "<div id='bg_forward'></div>", "<div id='bg_backward'></div>", "<div id='avatar_forward'></div>", "<div id='avatar_undo'></div>", $("<div id='save'></div>").append((this.save = new west.gui.Button("Сохранить", function () {
            window.AvatarMake.save();
        }, null, 'create')).setMinWidth(150).getMainDiv()), $("<div id='reset'></div>").append((this.reset = new west.gui.Button("Сбросить", function () {
            window.AvatarMake.reset();
        }, null, 'create')).setMinWidth(150).getMainDiv()));
        CharacterWindow.AvatarMake._initMode(el);
        window.AvatarMake.init();
    };
    CharacterWindow.AvatarMake._initMode = function (el) {
        var layover;
        if ("greenhorn" != Character.charClass || Character.avatarConfig) {
            layover = $("<div class='avatarpicker_layover' />").css({'position': 'absolute', 'left': '-15px'});
            $("#gender_picker", el).css("position", "relative").empty().append(layover);
            if (Premium.buyable.avatarreset) {
                $('<div class="avatar_right_top"><span class="avatar_right_top_desc">' + 'Изменить портрет?' + '<br />' + 'Полностью изменить портрет персонажа' + '<br />' + 'за несколько самородков!' + '</span></div>').click(resetAvatar4Premium).appendTo('.avatarpicker');
            }
        }
        if (Character.avatarConfig) {
            var save = this.save;
            var reset = this.reset;
            var sclick = save.onclick;
            $(reset.getMainDiv()).click(function () {
                save.setCaption("Сохранить");
                save.onclick = sclick;
            });
            if (!Premium.buyable.avatarreset) {
                layover = $('<div class="avatarpicker_layover" />').css({
                    'position': 'absolute',
                    'left': '-95px',
                    'top': '2px'
                });
                $("#skin_picker", el).empty().append(layover);
            }
            AvatarMake._nonFreeTypes.each(function (k, v) {
                var desc = $("." + k + "_desc", el);
                desc.css({
                    'color': '#bbb',
                    'position': 'relative'
                }).attr("title", "<b>" + "Чтобы изменить эту особенность лица нужны золотые самородки." + "</b>");
                var premium = $("<div class='premium_newbutton'/>").css({
                    'position': 'absolute',
                    'top': '4px',
                    'left': '0px',
                    'margin': '1px',
                    'cursor': 'default'
                });
                desc.append(premium);
            });
        }
    };
    CharacterWindow.AvatarMake._showPremiumSave = function (defclick) {
        var bonusname = "avatarchange2";
        var config = AvatarMake.makeConfig(AvatarMake.config);
        Premium.confirmUse(bonusname, "Операция лица", "С помощью этого премиума, ты можешь изменить свой портрет.", Premium.price[bonusname], config, function () {
            $("#avatar_picture").children().remove();
            $("#avatar_picture").append($("<div class='avatar_pic avatar_small'>" + "<img src='https://westrus.innogamescdn.com/images/avatars/deleted_small.png' alt='' onload='tw2widget.avatarPicture(this.parentNode,\"small\"," + JSON.stringify(config) + ")' />" + "</div>"));
            Character.avatarConfig = config;
            CharacterWindow.open();
            CharacterWindow.showTab('avatarmake');
        });
    };
    CharacterWindow.Crafting.init = function () {
        CharacterWindow.Crafting._initContent();
        west.Feature.lockScreen('crafting');
    };
    CharacterWindow.Crafting._initContent = function () {
        var el = CharacterWindow.window.$('div.character-crafting');
        el.empty().addClass("crafting");
        if (!Bag.loaded) {
            EventHandler.listen('inventory_loaded', function () {
                Crafting.updateResources();
                return EventHandler.ONE_TIME_EVENT;
            });
        }
        Ajax.remoteCall('crafting', '', {}, function (json) {
            if (json.hasOwnProperty('recipes_content') && json.recipes_content.length > 0) {
                initCraftingHeader(json);
                CharacterWindow.Crafting.scrollpane = new west.gui.Scrollpane().appendContent();
                CharacterWindow.Crafting.scrollpane.appendContent(CharacterWindow.window.$('#crafting_recipe_list').children().remove())
                CharacterWindow.window.$('#crafting_recipe_list').append(CharacterWindow.Crafting.scrollpane.getMainDiv())
                for (var i = 0; i < json.recipes_content.length; i++) {
                    Crafting.addRecipe(json.recipes_content[i]);
                }
            }
            else
                initCraftingHeader4NoJob(json);
        }, CharacterWindow);
    };
    var resetAvatar4Premium = function () {
        AvatarMake.togglepremium();
        CharacterWindow.AvatarMake.save.enable();
        CharacterWindow.AvatarMake.save.setCaption("Купить");
        CharacterWindow.AvatarMake.save.onclick = function () {
            Premium.confirmUse("avatarreset " + JSON.stringify(AvatarMake.getStripConf()), "Сбросить настройки портрета", "За несколько самородков ты можешь полностью изменить портрет персонажа. Вперёд!", null, null, function (data) {
                CharacterWindow.window.$('#avatar_picture').html(data.activationdata.avatar_small);
                Character.avatarConfig = AvatarMake.makeConfig(AvatarMake.config);
                Character.resetStatus = false;
                CharacterWindow.open();
                CharacterWindow.showTab('avatarmake');
            });
        };
    };
    var initCraftingHeader = function (json) {
        var el = CharacterWindow.window.$('div.character-crafting');
        el.append('<div id="crafting_div_search">' + '<span style="font-weight:bold;">' + 'Искать:' + '</span>' + '</div>' + '<span class="crafting_cb_materials"></span>' + '<div id="char_crafting_progress"></div>' + '<div id="crafting_recipe_list"></div>');
        var craftingCheckbox = new west.gui.Checkbox('Все ингредиенты', null, Crafting.showAvailable).setId('mats_available');
        $('span.crafting_cb_materials', el).append(craftingCheckbox.getMainDiv());
        var searchfield = new west.gui.Textfield('search');
        searchfield.getField().attr('name', 'search').keyup(function () {
            Crafting.search(this)
        });
        CharacterWindow.window.$('#crafting_div_search').append(searchfield.getMainDiv());
        CharacterWindow.progressCrafting = new west.gui.Progressbar(json.profession_skill, json.profession_maxskill);
        CharacterWindow.window.$("#char_crafting_progress").append(CharacterWindow.progressCrafting.getMainDiv());
    };
    var initCraftingHeader4NoJob = function (json) {
        var content = $('<div style="margin-top: 0px;" />');
        content.append('<div class="crafting_professions_table">' +
            'Выбор профессии позволяет создавать полезные предметы, которые ты сможешь надеть, использовать или продать другим игрокам. Подумай хорошенько — выбор профессии окончателен и бесповоротен.' + '</div><div class="crafting_choose_table"></div>');
        $.each(json.professions, function (k, prof) {
            var tmpProfession = $('<div class="crafting_profession_desc" id="crafting-profession-desc-' + prof.profession_id + '">' + '<span class="text_bold">' + prof.name.escapeHTML() + '</span><br />' + '<div style="width: 380px;float:left;">' + '<span>' + prof.description.escapeHTML() + '</span>' + '</div>' + '<div class="crafting_learn_profession"></div>' + '</div>');
            $('div.crafting_learn_profession', tmpProfession).append(new west.gui.Button('Изучать', Crafting.setProfession, CharacterWindow.window, {profession_id: prof.profession_id}).getMainDiv());
            $('div.crafting_choose_table', content).append(tmpProfession);
        });
        CharacterWindow.window.$('div.character-crafting').append(content);
    };
})(jQuery);
;
(function ($) {
    window.Crafting = {};
    Crafting.recipes = {};
    Crafting.description = "<div class='recipe_difficult hard'></div><span style='margin-left:5px;'>" + 'Большие шансы получить очко мастерства' + "</span><br />" + "<div class='recipe_difficult middle'></div><span style='margin-left:5px;'>" + 'Малые шансы получить очко мастерства' + "</span><br /><div class='recipe_difficult easy'>" + "</div><span style='margin-left:5px;'>" + 'Без шансов получить очко мастерства' + "</span>";
    wman.registerReloadHandler(/^crafting$/, CharacterWindow.Crafting._initContent);
    Crafting.addRecipe = function (recipe) {
        var time_last_craft = recipe.last_craft;
        var recipe = ItemManager.get(recipe.item_id);
        Crafting.recipes[recipe.item_id] = recipe;
        Crafting.recipes[recipe.item_id]['last_craft'] = time_last_craft;
        if (window.CharacterWindow.window != undefined && window.CharacterWindow.window.$('#crafting_recipe_list').length > 0) {
            var recipe_div = $("<div id='recipe" + recipe.item_id + "'></div>");
            var recipe_title_inner_div = $("<div class='recipe_title_inner' onclick='Crafting.collapseRecipe(" + recipe.item_id + ");' />");
            var recipe_title_div = $("<div id='recipe_title_" + recipe.item_id + "' class='recipe_title'></div>");
            var recipe_collapse_div = $("<div id='recipe_collapse_" + recipe.item_id + "' class='recipe_collapse'>+</div>");
            var recipe_difficult_div = $("<div id='recipe_difficult_" + recipe.item_id + "' class='recipe_difficult " + Crafting.getRecipeColor(recipe) + "' title='" + Crafting.description.escapeHTML() + "'></div>");
            var recipe_name_div = $("<div id='recipe_name" + recipe.item_id + "' class='recipe_name shorten'>" + recipe.name + "</div>");
            var recipe_craft_div = $("<div id='recipe_craft_" + recipe.item_id + "' class='recipe_craft'></div>");
            var recipe_content_div = $("<div id='recipe_content_" + recipe.item_id + "' class='recipe_content'></div>").hide();
            var recipe_craftitem_div = $("<div id='recipe_craftitem_" + recipe.item_id + "' class='recipe_craftitem'></div>");
            var recipe_resources_content_div = $("<div id='recipe_resources_content_" + recipe.item_id + "' class='recipe_resources'></div>");
            var recipe_craft_amount_div = $("<div class='recipe_craft_amount'></div>");
            recipe_title_inner_div.append(recipe_collapse_div, recipe_difficult_div, recipe_name_div);
            recipe_title_div.append(recipe_title_inner_div, recipe_craft_amount_div, recipe_craft_div).appendTo(recipe_div);
            var craftitem = $("<div id='craftitem_" + recipe.item_id + "' style='float:none;'/>").append((new tw2widget.CraftingItem(ItemManager.get(recipe.craftitem))).getMainDiv());
            craftitem.appendTo(recipe_craftitem_div);
            var resourceMax = [], maxCraftable = 0, available = true, resourceItem;
            for (var i in recipe.resources) {
                if (!recipe.resources.hasOwnProperty(i))continue;
                resourceItem = ItemManager.get(recipe.resources[i].item);
                var resource = $("<div id='resources_" + recipe.item_id + "_" + resourceItem.item_id + "'></div>");
                var bag_count = Bag.getItemCount(resourceItem.item_id);
                recipe_resources_content_div.append(resource.append(new tw2widget.CraftingItem(resourceItem).setRequired(bag_count, recipe.resources[i].count).setShowLocator(true).getMainDiv()));
                resourceMax.push(Math.floor(bag_count / recipe.resources[i].count));
                var hasItem = Bag.getItemByItemId(resourceItem.item_id);
                if (!hasItem || hasItem.getCount() < recipe.resources[i].count)
                    available = false;
            }
            if (!available) {
                recipe_div.addClass("not_available");
            } else if (time_last_craft) {
                recipe_craft_div.append("<span style='color:yellow; cursor:default;'>" + time_last_craft.formatDurationBuffWay() + "</span>");
            } else {
                if (null !== recipe.blocktime) {
                    maxCraftable = 1;
                } else {
                    maxCraftable = Math.min.apply(Math, resourceMax);
                }
                var amount = new west.gui.Plusminusfield('recipe_button_' + recipe.item_id, 1, 1, maxCraftable, 1, Crafting.buttonLogic, Crafting.buttonLogic);
                recipe_craft_amount_div.append(amount.getMainDiv());
                recipe_craft_div.append("<a style='color:#fff;' href='javascript:Crafting.addCraft(" + recipe.item_id + ");'>" + 'Начать' + "</a>");
            }
            recipe_content_div.append(recipe_craftitem_div, recipe_resources_content_div, $("<br />"));
            recipe_content_div.appendTo(recipe_div);
            CharacterWindow.Crafting.scrollpane.appendContent(recipe_div);
        }
    };
    Crafting.getRecipeColor = function (recipe) {
        if (Character.professionSkill <= recipe.max_level && Character.professionSkill >= recipe.min_level) {
            if (isDefined(recipe.skillcolor)) {
                return recipe.skillcolor;
            }
            var half = Math.round((recipe.max_level - recipe.min_level) / 2);
            if (Character.professionSkill > recipe.min_level + half) {
                return "middle";
            } else {
                return "hard";
            }
        }
        return "easy";
    };
    Crafting.setProfession = function (event) {
        if (!event.hasOwnProperty('data') || !event.data.profession_id)return false;
        var setprofession = (function () {
            Ajax.remoteCall('crafting', 'choose_profession', {profession_id: event.data.profession_id}, function (json) {
                new UserMessage('Поздравляю с выбором профессии', UserMessage.TYPE_SUCCESS).show();
                Character.setProfession(json.profession_id);
                window.CharacterWindow.window.$('.character-crafting').empty();
                CharacterWindow.open();
                CharacterWindow.showTab('crafting');
            });
        });
        new west.gui.Dialog("Выбор профессии", "Выбор профессии окончателен, возможности поменять не будет. Ты действительно хочешь выбрать эту профессию?", west.gui.Dialog.SYS_QUESTION).addButton("yes", setprofession).addButton("no").show();
    };
    Crafting.collapseRecipe = function (id) {
        var cont = window.CharacterWindow.window.$('#recipe_content_' + id);
        var coll = window.CharacterWindow.window.$('#recipe_collapse_' + id);
        cont.css('display') == 'none' ? cont.slideDown() : cont.slideUp();
        coll.html() == '+' ? coll.html('-') : coll.html('+');
    };
    Crafting.showAvailable = function () {
        CharacterWindow.window.$('div.not_available').toggle();
    };
    Crafting.search = function () {
        var myrxp = new RegExp("^.*" + window.CharacterWindow.window.$('#search').val() + "(.*)$", "i");
        for (var k in Crafting.recipes) {
            if (!myrxp.test(this.recipes[k].name)) {
                window.CharacterWindow.window.$('#recipe' + k).slideUp();
            } else {
                window.CharacterWindow.window.$('#recipe' + k).slideDown();
            }
        }
    };
    Crafting.addCraft = function (recipe_id) {
        var craft_amount = parseInt($('#recipe_button_' + recipe_id + ' span.displayValue').text());
        if (craft_amount >= 1) {
            Crafting.startCraft(recipe_id, craft_amount);
        } else {
            new UserMessage('Укажи количество изготовляемых предметов!', UserMessage.TYPE_ERROR).show();
        }
    };
    Crafting.startCraft = function (recipe_id, craft_amount) {
        Ajax.remoteCall('crafting', 'start_craft', {recipe_id: recipe_id, amount: craft_amount}, function (resp) {
            if (resp.error)return new MessageError(resp.msg).show();
            var data = resp.msg;
            CharacterWindow.progressCrafting.setValue(data.profession_skill);
            Character.setProfessionSkill(data.profession_skill);
            CharacterWindow.window.$('#recipe_difficult_' + recipe_id).removeClass('middle hard easy').addClass(Crafting.getRecipeColor(ItemManager.get(recipe_id)));
            EventHandler.signal("inventory_changed");
            Character.updateDailyTask('crafts', data.count);
            return new MessageSuccess(data.msg).show();
        });
    };
    Crafting.updateResources = function () {
        for (var k in Crafting.recipes) {
            var resourceMax = [], maxCraftable = 0, mats_available = true, resourceItem, amountRequired;
            for (var i in Crafting.recipes[k].resources) {
                if (!Crafting.recipes[k].resources.hasOwnProperty((i)))continue;
                resourceItem = ItemManager.get(Crafting.recipes[k].resources[i].item);
                amountRequired = Crafting.recipes[k].resources[i].count;
                var bag_count = Bag.getItemCount(resourceItem.item_id);
                if (bag_count < amountRequired)mats_available = false;
                resourceMax.push(Math.floor(bag_count / amountRequired));
                window.CharacterWindow.window.$('#resources_' + k + '_' + resourceItem.item_id).html(new tw2widget.CraftingItem(resourceItem).setRequired(bag_count, amountRequired).getMainDiv());
            }
            var characterWindow = window.CharacterWindow.window;
            var craftAmountLayer = characterWindow.$('#recipe_title_' + Crafting.recipes[k].item_id + ' .recipe_craft_amount');
            var craftRecipeLayer = characterWindow.$('#recipe_craft_' + Crafting.recipes[k].item_id);
            craftRecipeLayer.empty();
            craftAmountLayer.empty();
            if (mats_available && !Crafting.recipes[k].last_craft) {
                if (null !== Crafting.recipes[k].blocktime) {
                    maxCraftable = 1;
                } else {
                    maxCraftable = Math.min.apply(Math, resourceMax);
                }
                var amount = new west.gui.Plusminusfield('recipe_button_' + Crafting.recipes[k].item_id, 1, 1, maxCraftable, 1, Crafting.buttonLogic, Crafting.buttonLogic);
                craftAmountLayer.append(amount.getMainDiv());
                craftRecipeLayer.append("<a style='color:#FFF;' href='javascript:Crafting.addCraft(" + Crafting.recipes[k].item_id + ");'>" + 'Начать' + "</a>");
            } else if (Crafting.recipes[k].last_craft) {
                craftRecipeLayer.append("<span style='color:yellow; cursor:default;'>" + Crafting.recipes[k].last_craft.formatDurationBuffWay() + "</span>");
            }
            if (mats_available) {
                CharacterWindow.window.$('#recipe' + Crafting.recipes[k].item_id).removeClass("not_available");
            } else {
                CharacterWindow.window.$('#recipe' + Crafting.recipes[k].item_id).addClass("not_available");
            }
        }
    };
    Crafting.buttonLogic = function (event) {
        var butObj = event.data.obj;
        if ($(event.currentTarget).hasClass('butPlus')) {
            if (butObj.current_value + 1 > butObj.max_value)return false;
            butObj.current_value += 1;
        } else {
            if (butObj.current_value - 1 < butObj.min_value)return false;
            butObj.current_value -= 1;
        }
        $('#' + butObj.id + ' span.displayValue', SkillsWindow.DOM).text(butObj.current_value);
        return true;
    };
})(jQuery);
;
(function ($) {
    window.SkillsWindow = {
        DOM: '*',
        GUI: {},
        Attributes: {
            'pmbut_attr_strength': ['pmbut_skill_build', 'pmbut_skill_punch', 'pmbut_skill_tough', 'pmbut_skill_endurance', 'pmbut_skill_health'],
            'pmbut_attr_flexibility': ['pmbut_skill_ride', 'pmbut_skill_reflex', 'pmbut_skill_dodge', 'pmbut_skill_hide', 'pmbut_skill_swim'],
            'pmbut_attr_dexterity': ['pmbut_skill_aim', 'pmbut_skill_shot', 'pmbut_skill_pitfall', 'pmbut_skill_finger_dexterity', 'pmbut_skill_repair'],
            'pmbut_attr_charisma': ['pmbut_skill_leadership', 'pmbut_skill_tactic', 'pmbut_skill_trade', 'pmbut_skill_animal', 'pmbut_skill_appearance']
        },
        Expert: {},
        Shaman: {},
        tutorial: null,
        blockSkills: false,
        blockAttributes: false
    };
    var shamanData, skillwindowData;
    var blockShaman = true;
    var open_attrpoints, open_skillpoints, assigned_attrpoints, assigned_skillpoints, reskill_attrpoints, reskill_skillpoints;
    var attribute_modifications, skill_modifications, skill_modifications4Shaman, attribute_modifications4Shaman;
    SkillsWindow.open = function () {
        if (Character.level < 2) {
            new UserMessage("Будет доступно, когда достигнешь 2-го уровня", 'hint').show();
            return;
        }
        shamanData = {}, skillwindowData = {};
        open_attrpoints = 0, open_skillpoints = 0, assigned_attrpoints = 0, assigned_skillpoints = 0, reskill_attrpoints = 0, reskill_skillpoints = 0;
        attribute_modifications = {}, skill_modifications = {}, skill_modifications4Shaman = {}, attribute_modifications4Shaman = {};
        var tabclick = function (win, id) {
            SkillsWindow.showTab(id);
        }
        SkillsWindow.window = wman.open("playerskills").setMiniTitle('Навыки').addTab('Навыки', 'expert', tabclick).addTab('Шаман', 'shaman', tabclick).appendToContentPane($('<div class="playerskills-expert"/>'), $('<div class="playerskills-shaman"/>'));
        SkillsWindow.DOM = $('div.playerskills');
        getNewJsonData();
    };
    wman.registerReloadHandler(/^playerskills/, function () {
        SkillsWindow.open();
    });
    SkillsWindow.showTab = function (id) {
        if (!SkillsWindow.window)return;
        west.Feature.removeLock(SkillsWindow.window);
        SkillsWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *', SkillsWindow.DOM).each(function (i, e) {
            if ($(e).hasClass('playerskills-' + id)) {
                $(e).children().fadeIn().show();
            }
            else {
                $(e).children().fadeOut().hide();
            }
        });
        switch (id) {
            case'expert':
                SkillsWindow.window.setTitle('Навыки');
                break;
            case'shaman':
                SkillsWindow.window.setTitle('Шаман');
                if (blockShaman)
                    west.Feature.lockScreen('shaman');
                break;
            default:
                SkillsWindow.window.setTitle('Навыки');
                break;
        }
    };
    SkillsWindow.Expert.init = function () {
        var maindiv = generateMainLayout('expert');
        $('span.skop_value', maindiv).attr('id', 'spe_open_attr_points');
        $('span.skos_value', maindiv).attr('id', 'spe_open_skill_points');
        $('<span class="sk_divider_box">&nbsp;</span>').css({'top': '15px', 'left': '180px'}).appendTo(maindiv);
        $('<span class="sk_divider_box">&nbsp;</span>').css({'top': '15px', 'left': '365px'}).appendTo(maindiv);
        $('<span class="sk_divider_box">&nbsp;</span>').css({'top': '15px', 'left': '528px'}).appendTo(maindiv);
        $('div.skills_content', maindiv).append(generateContentRow('strength'), generateContentRow('flexibility'), generateContentRow('dexterity'), generateContentRow('charisma'));
        $('div.skills_footer', maindiv).append(new west.gui.Button('Подтвердить', butExpertOkClicked, null, {}, null, 'sk_button_accept').setMinWidth(140).getMainDiv(), '&nbsp;&nbsp;', new west.gui.Button('Сбросить', butExpertAbortClicked, null, {}).setMinWidth(140).getMainDiv());
        $('div.playerskills-expert', SkillsWindow.DOM).empty().append(maindiv, new west.gui.Checkbox('С бонусом', null, showBonusCheckboxUsed).setId('ske_showItemBonus').setTooltip('Учитывает бонусы снаряжения').setSelected(true).getMainDiv());
        showBonusCheckboxUsed();
    };
    SkillsWindow.freeSkills = function () {
        var sel = $('div.skills-expert', SkillsWindow.DOM);
        $('div.pm_skillbox_disabled.opacity075', sel).removeClass('opacity075');
        SkillsWindow.tutorial = null;
        SkillsWindow.blockSkills = false;
        var tmpSk = null;
        var skillKeys = CharacterSkills.allSkillKeys;
        for (var i = 0; i < skillKeys.length; i++) {
            tmpSk = CharacterSkills.getSkill(skillKeys[i]);
            SkillsWindow.GUI['pmbut_skill_' + skillKeys[i]] = new west.gui.Plusminusfield('pmbut_skill_' + skillKeys[i], tmpSk.getPoints(), tmpSk.getPoints(), tmpSk.getPoints(), tmpSk.getBonus(), logicPlusMinus, logicPlusMinus).setWidth(80).setData({'key': skillKeys[i]}).toggleMinus();
        }
        $('div.pm_skillbox', sel).each(function () {
            $(this).find('div.pm_skillbox_disabled').remove();
        });
    };
    SkillsWindow.freeAttributes = function () {
        SkillsWindow.tutorial = null;
        SkillsWindow.blockAttributes = false;
        var row = $('div.skills-expert div.sk_attr_arrow', SkillsWindow.DOM);
        row.off('click').click(attrLogicPlus);
        row.find('div.pm_attrbox_disabled').remove();
    };
    SkillsWindow.Shaman.init = function () {
        var maindiv = generateMainLayout('shaman');
        var data = shamanData;
        $('span.skop_value', maindiv).attr('id', 'sps_open_attr_points');
        $('span.skos_value', maindiv).attr('id', 'sps_open_skill_points');
        $('<span class="sk_divider_box">&nbsp;</span>').css({
            'top': '4px',
            'left': '325px',
            'height': '20px'
        }).appendTo(maindiv);
        $('<span class="sk_divider_box">&nbsp;</span>').css({'top': '30px', 'left': '325px'}).appendTo(maindiv);
        $('<span class="sk_divider_box">&nbsp;</span>').css({'top': '30px', 'left': '466px'}).appendTo(maindiv);
        if (data.reskill_buyable) {
            $('div.sksb_nuggetbut', maindiv).click(butPremiumShamanClicked);
        }
        else
            $('div.sksb_nuggetbut', maindiv).hide();
        $('div.skills_content4Shaman', maindiv).append(generateContentRow('strength', true), generateContentRow('flexibility', true), generateContentRow('dexterity', true), generateContentRow('charisma', true));
        $('div.skills_footer', maindiv).append(new west.gui.Button('Подтвердить', butShamanOkClicked, null, {}).setMinWidth(140).getMainDiv(), '&nbsp;&nbsp;', new west.gui.Button('Сбросить', butShamanAbortClicked, null, {}).setMinWidth(140).getMainDiv());
        $('#sksh_attr_costs', maindiv).text('$' + data.reskillBuy.attr_costs);
        $('#sksh_skill_costs', maindiv).text('$' + data.reskillBuy.skill_costs);
        $('div.playerskills-shaman', SkillsWindow.DOM).empty().append(maindiv, new west.gui.Checkbox('С бонусом', null, showBonusCheckbox4ShamanUsed).setId('sks_showItemBonus').setTooltip('Учитывает бонусы снаряжения').setSelected(true).getMainDiv());
        showBonusCheckbox4ShamanUsed();
    };
    var getNewJsonData = function () {
        Ajax.remoteCallMode('skill', 'overview', {}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            prepareData(json);
            buildScreens();
        }, SkillsWindow);
    };
    var prepareData = function (data) {
        skillwindowData = {}, shamanData = {};
        open_attrpoints = data.open_attrPoints, open_skillpoints = data.open_skillPoints;
        CharacterSkills.setFreeAttrPoints(open_attrpoints);
        CharacterSkills.setFreeSkillPoints(open_skillpoints);
        assigned_attrpoints = 0, assigned_skillpoints = 0;
        reskill_attrpoints = 0, reskill_skillpoints = 0;
        Shaman.tab_visible = data.shamanVisible;
        blockShaman = !data.shamanVisible;
        CharacterSkills.update(data.attributes, data.skills, data.attributeBonuspoints, data.skillBonuspoints);
        CharacterSkills.initUsedPoints(data.usedAttributes, data.usedSkills);
        skillwindowData = {
            attributeBuy: {'price': data.buyattributes_costs, 'buyable': data.attributes_buyable},
            skillBuy: {'price': data.buyskills_costs, 'buyable': data.skills_buyable}
        };
        shamanData = {
            reskill_buyable: data.reskill_buyable,
            reskillBuy: {
                'attr_costs': data.actualReskillOptions.attribute_costs,
                'skill_costs': data.actualReskillOptions.skill_costs
            }
        };
        Shaman.addPrices(data.actualReskillOptions.attribute_costs, data.actualReskillOptions.skill_costs);
    };
    var updateData = function (data) {
        open_attrpoints = data['char'].attribute_points, open_skillpoints = data['char'].skill_points;
        assigned_attrpoints = 0, assigned_skillpoints = 0;
        reskill_attrpoints = 0, reskill_skillpoints = 0;
        attribute_modifications = {}, skill_modifications = {};
        attribute_modifications4Shaman = {}, skill_modifications4Shaman = {};
        CharacterSkills.update(data['char'].attributes, data['char'].skills, false, false);
        CharacterSkills.setFreeAttrPoints(data['char'].attribute_points);
        CharacterSkills.setFreeSkillPoints(data['char'].skill_points);
        shamanData.reskillBuy['attr_costs'] = data.reskill.attribute_costs;
        shamanData.reskillBuy['skill_costs'] = data.reskill.skill_costs;
        Shaman.addPrices(data.reskill.attribute_costs, data.reskill.skill_costs);
        buildScreens();
    };
    var updateNuggetButtons = function () {
        $('span.skop_nuggetbut', SkillsWindow.DOM).css("display", skillwindowData.attributeBuy.buyable ? "inline-block" : "none");
        $('span.skop_nuggetbut', SkillsWindow.DOM).click(skillwindowData.attributeBuy.buyable ? butPremiumAttributeClicked : null);
        $('span.skos_nuggetbut', SkillsWindow.DOM).css("display", skillwindowData.skillBuy.buyable ? "inline-block" : "none");
        $('span.skos_nuggetbut', SkillsWindow.DOM).click(skillwindowData.skillBuy.buyable ? butPremiumSkillClicked : null);
    };
    var buildScreens = function () {
        SkillsWindow.Expert.init();
        SkillsWindow.Shaman.init();
        updateNuggetButtons();
        SkillsWindow.Shaman.infoShown = false;
        SkillsWindow.showTab('expert');
    };
    SkillsWindow.updatePMSkillBox4Skill = function (key, points, bonuspoints) {
        if (SkillsWindow.GUI.hasOwnProperty('pmbut_skill_' + key)) {
            var tmpObj = SkillsWindow.GUI['pmbut_skill_' + key];
            tmpObj.max_value = (tmpObj.max_value - tmpObj.current_value) + points;
            tmpObj.current_value = points + tmpObj.revision;
            tmpObj.min_value = points;
            tmpObj.extra = bonuspoints;
            tmpObj.extra > 0 ? $('#' + tmpObj.id + ' span.displayValueBonus', SkillsWindow.DOM).addClass('text_green') : $('#' + tmpObj.id + ' span.displayValueBonus', SkillsWindow.DOM).removeClass('text_green');
            $('#' + tmpObj.id + ' span.displayValueBonus', SkillsWindow.DOM).text(tmpObj.current_value + tmpObj.extra);
            $('#' + tmpObj.id + ' span.displayValue', SkillsWindow.DOM).text(tmpObj.current_value);
        }
        if (SkillsWindow.GUI.hasOwnProperty('sh_pmbut_skill_' + key)) {
            var tmpObjSh = SkillsWindow.GUI['sh_pmbut_skill_' + key];
            tmpObjSh.min_value = (tmpObjSh.min_value - tmpObjSh.current_value) + points;
            tmpObjSh.current_value = points + tmpObjSh.revision;
            tmpObjSh.max_value = points;
            tmpObjSh.extra = bonuspoints;
            tmpObjSh.extra > 0 ? $('#' + tmpObjSh.id + ' span.displayValueBonus', SkillsWindow.DOM).addClass('text_green') : $('#' + tmpObjSh.id + ' span.displayValueBonus', SkillsWindow.DOM).removeClass('text_green');
            $('#' + tmpObjSh.id + ' span.displayValueBonus', SkillsWindow.DOM).text(tmpObjSh.current_value + tmpObjSh.extra);
            $('#' + tmpObjSh.id + ' span.displayValue', SkillsWindow.DOM).text(tmpObjSh.current_value);
        }
    };
    SkillsWindow.updatePMAttribute = function (key, points, bonuspoints) {
        if (SkillsWindow.GUI.hasOwnProperty('pmbut_attr_' + key)) {
            var tmpObj = SkillsWindow.GUI['pmbut_attr_' + key];
            tmpObj.max_value = (tmpObj.max_value - tmpObj.current_value) + points;
            tmpObj.current_value = points + tmpObj.revision;
            tmpObj.min_value = points;
            tmpObj.extra = bonuspoints;
            tmpObj.extra > 0 ? $('#' + tmpObj.id + ' span.displayValueBonus', SkillsWindow.DOM).addClass('text_green') : $('#' + tmpObj.id + ' span.displayValueBonus', SkillsWindow.DOM).removeClass('text_green');
            $('#' + tmpObj.id + ' span.displayValueBonus', SkillsWindow.DOM).text(tmpObj.current_value + tmpObj.extra);
            $('#' + tmpObj.id + ' span.displayValue', SkillsWindow.DOM).text(tmpObj.current_value);
        }
        if (SkillsWindow.GUI.hasOwnProperty('sh_pmbut_attr_' + key)) {
            var tmpObjSh = SkillsWindow.GUI['sh_pmbut_attr_' + key];
            tmpObjSh.min_value = (tmpObjSh.min_value - tmpObjSh.current_value) + points;
            tmpObjSh.current_value = points + tmpObjSh.revision;
            tmpObjSh.max_value = points;
            tmpObjSh.extra = bonuspoints;
            tmpObjSh.extra > 0 ? $('#' + tmpObjSh.id + ' span.displayValueBonus', SkillsWindow.DOM).addClass('text_green') : $('#' + tmpObjSh.id + ' span.displayValueBonus', SkillsWindow.DOM).removeClass('text_green');
            $('#' + tmpObjSh.id + ' span.displayValueBonus', SkillsWindow.DOM).text(tmpObjSh.current_value + tmpObjSh.extra);
            $('#' + tmpObjSh.id + ' span.displayValue', SkillsWindow.DOM).text(tmpObjSh.current_value);
        }
    };
    var generateMainLayout = function (tabId) {
        var header = '<div class="skills-' + tabId + '">' + '<div class="pointsbar">' + '<div class="open_attributes_box">' + '<span class="skop_label"><span class="tw_blue">' + 'Нераспределённые' + '</span><br />' + 'очки характеристик' + '</span><span class="skop_value">' + (tabId != 'shaman' ? open_attrpoints : open_attrpoints + reskill_attrpoints) + '</span><span class="skop_nuggetbut"></span>' + '</div>' + '<div class="open_skills_box">' + '<span class="skos_label"><span class="tw_blue">' + 'Нераспределённые' + '</span><br />' + 'очки навыков' + '</span><span class="skos_value">' + (tabId != 'shaman' ? open_skillpoints : open_skillpoints + reskill_skillpoints) + '</span><span class="skos_nuggetbut"></span>' + '</div>';
        if (tabId != 'shaman') {
            header += '<div class="assigned_attributes_box">' + '<span class="skaa_label">' + 'Распределённые' + '<br />' + 'очки характеристик' + '</span><span class="skap_value">' + CharacterSkills.getUsedAttributePoints() + '</span>' + '</div>' + '<div class="assigned_skills_box">' + '<span class="skas_label">' + 'Распределённые' + '<br />' + 'очки навыков' + '</span><span class="skas_value">' + CharacterSkills.getUsedSkillPoints() + '</span>' + '</div></div>';
        }
        else {
            header += '</div>' + '<div class="ske_header_devider"></div>' + '<div class="sks_reskill">' + '<div class="sks_attr_costs" title="' + 'Цена очка характеристики:' + '"><span class="sksh_label_attr">&nbsp;</span>&nbsp;<span class="sksh_costs" id="sksh_attr_costs">$0</span></div>' + '<div class="sks_skill_costs" title="' + 'Цена очка навыка:' + '"><span class="sksh_label_skill">&nbsp;</span>&nbsp;<span class="sksh_costs" id="sksh_skill_costs">$0</span></div>' + '<div class="sks_payload" title="' + 'Общая стоимость характеристик и навыков' + '"><span class="sksh_label_summary">&nbsp;</span>&nbsp;<span class="sksh_costs" id="sksh_sumprice">$0</span></div>' + '<div class="sksb_nuggetbut" title="' + 'Потрафить шаману' + '"></div>' + '</div>';
        }
        return $(header + '<div class="skills_content' + (tabId != 'shaman' ? '' : '4Shaman') + '"></div>' + '<div class="skills_footer"></div>' + '</div>');
    };
    var generateContentRow = function (attrType, forShaman) {
        var row = $('<div class="sk_content_row_' + attrType + '">' + '<div class="sk_attr_arrow">' + '<span class="sk_attr_icon"></span>' + '<span class="sk_attr_content">' + '<span class="sk_attr_name">' + CharacterSkills.getAttribute(attrType).getName() + '</span><br />' + '<span class="sk_attr_plusminus"></span>' + '</span>' + '</div><div class="sk_skills_content"></div>' + '</div>');
        if (forShaman) {
            $('span.sk_attr_icon', row).append(CharacterSkills.getAttribute(attrType).getAttributeIcon());
            $('span.sk_attr_plusminus', row).append(generateAttributePlusMinus4Shaman(attrType));
            $('div.sk_skills_content', row).appendArray(generateSkillboxes4Shaman(attrType));
            $('div.sk_attr_arrow span.butPlus', row).off('click');
            $('div.sk_attr_arrow', row).data('attr_type', attrType).off('click').click(attrLogicMinus4Shaman);
            row.append($('<span class="sk_attr_plusbutton" data-attr_type="' + attrType + '"></span>').click(attrLogicPlus4Shaman));
        }
        else {
            $('span.sk_attr_icon', row).append(CharacterSkills.getAttribute(attrType).getAttributeIcon());
            $('span.sk_attr_plusminus', row).append(generateAttributePlusMinus(attrType));
            $('div.sk_skills_content', row).appendArray(generateSkillboxes4Row(attrType));
            $('div.sk_attr_arrow span.butPlus', row).off('click');
            if (!SkillsWindow.blockAttributes || (SkillsWindow.tutorial && SkillsWindow.tutorial.hasOwnProperty(attrType))) {
                $('div.sk_attr_arrow', row).data('attr_type', attrType).off('click').click(attrLogicPlus);
                row.append($('<span class="sk_attr_minusbutton" data-attr_type="' + attrType + '"></span>').click(attrLogicMinus));
            }
            else
                $('div.sk_attr_arrow', row).append('<div class="pm_attrbox_disabled opacity075" />');
        }
        return row;
    };
    var showSkillingEffect = function (ev) {
        var skillbox = $(ev).hasOwnProperty('target') ? $(ev.target).parents('div.pm_skillbox') : $(ev).parents('div.pm_skillbox');
        skillbox.css({left: '2px', top: '2px'});
        skillbox.animate({left: '0px', top: '0px'}, 200);
    };
    var showAttrEffect = function (attrtype) {
        var attrbox = $('div.sk_content_row_' + attrtype + ' div.sk_attr_arrow', SkillsWindow.DOM);
        attrbox.css({left: '2px', top: '2px'});
        attrbox.animate({left: '0px', top: '0px'}, 200);
    };
    var generateSkillboxes4Row = function (attrKey) {
        var tmp = '';
        var boxes = [];
        var skillKeys = CharacterSkills.getSkillKeys4Attribute(attrKey);
        for (var i = 0; i < skillKeys.length; i++) {
            tmp = $('<div class="pm_skillbox" id="ske_skillbox-' + skillKeys[i] + '">' + '<div class="skb_plusminus"></div>' + '</div>');
            var tmpSk = CharacterSkills.getSkill(skillKeys[i]);
            tmp.prepend(tmpSk.getSkillIcon().click(this, function () {
                $(this).next().find('span.butPlus').click();
            }));
            if (!SkillsWindow.blockSkills)
                SkillsWindow.GUI['pmbut_skill_' + skillKeys[i]] = new west.gui.Plusminusfield('pmbut_skill_' + skillKeys[i], tmpSk.getPoints(), tmpSk.getPoints(), tmpSk.getPoints() + open_skillpoints, tmpSk.getBonus(), logicPlusMinus, logicPlusMinus).setWidth(80).setData({'key': skillKeys[i]}).toggleMinus(); else {
                if (SkillsWindow.tutorial.hasOwnProperty(skillKeys[i]))
                    SkillsWindow.GUI['pmbut_skill_' + skillKeys[i]] = new west.gui.Plusminusfield('pmbut_skill_' + skillKeys[i], tmpSk.getPoints(), tmpSk.getPoints(), tmpSk.getPoints(), tmpSk.getBonus(), logicPlusMinus, logicPlusMinus).setWidth(80).setData({'key': skillKeys[i]}).toggleMinus(); else {
                    SkillsWindow.GUI['pmbut_skill_' + skillKeys[i]] = new west.gui.Plusminusfield('pmbut_skill_' + skillKeys[i], tmpSk.getPoints(), tmpSk.getPoints(), tmpSk.getPoints(), tmpSk.getBonus(), function () {
                    }, function () {
                    }).setWidth(80).setData({'key': skillKeys[i]}).toggleMinus();
                    tmp.append('<div class="pm_skillbox_disabled opacity075" />');
                }
            }
            if (open_skillpoints == 0)SkillsWindow.GUI['pmbut_skill_' + skillKeys[i]].togglePlus();
            $('div.skb_plusminus', tmp).append(SkillsWindow.GUI['pmbut_skill_' + skillKeys[i]].getMainDiv());
            boxes.push(tmp);
        }
        return boxes;
    };
    var generateSkillboxes4Shaman = function (attrKey) {
        var tmp = '';
        var boxes = [];
        var min_points = CharacterSkills.getAttribute(attrKey).getPoints();
        var skillKeys = CharacterSkills.getSkillKeys4Attribute(attrKey);
        for (var i = 0; i < skillKeys.length; i++) {
            tmp = $('<div class="pm_skillbox" id="sks_skillbox-' + skillKeys[i] + '">' + '<div class="sks_plusminus"></div>' + '</div>');
            var tmpSk = CharacterSkills.getSkill(skillKeys[i]);
            tmp.prepend(tmpSk.getSkillIcon().click(this, function () {
                $(this).next().find('span.butMinus').click();
            }));
            SkillsWindow.GUI['sh_pmbut_skill_' + skillKeys[i]] = new west.gui.Plusminusfield('sh_pmbut_skill_' + skillKeys[i], tmpSk.getPoints(), min_points, tmpSk.getPoints(), tmpSk.getBonus(), logicPlusMinus4Shaman, logicPlusMinus4Shaman).setWidth(80).togglePlus().setData({'key': skillKeys[i]});
            $('div.sks_plusminus', tmp).append(SkillsWindow.GUI['sh_pmbut_skill_' + skillKeys[i]].getMainDiv());
            boxes.push(tmp);
        }
        return boxes;
    };
    var generateAttributePlusMinus = function (attr_type) {
        var tmpAttr = CharacterSkills.getAttribute(attr_type);
        SkillsWindow.GUI['pmbut_attr_' + attr_type] = new west.gui.Plusminusfield('pmbut_attr_' + attr_type, tmpAttr.getPoints(), tmpAttr.getPoints(), tmpAttr.getPoints() + open_attrpoints, tmpAttr.getBonus(), attrLogicPlus).setWidth(80).setData({'key': attr_type}).toggleMinus();
        if (open_attrpoints == 0)SkillsWindow.GUI['pmbut_attr_' + attr_type].togglePlus();
        return SkillsWindow.GUI['pmbut_attr_' + attr_type].getMainDiv().data('key', attr_type);
    };
    var generateAttributePlusMinus4Shaman = function (attr_type) {
        var tmpAttr = CharacterSkills.getAttribute(attr_type);
        SkillsWindow.GUI['sh_pmbut_attr_' + attr_type] = new west.gui.Plusminusfield('sh_pmbut_attr_' + attr_type, tmpAttr.getPoints(), 0, tmpAttr.getPoints(), tmpAttr.getBonus(), null, attrLogicPlus4Shaman).setWidth(80).togglePlus().setData({'key': attr_type});
        return SkillsWindow.GUI['sh_pmbut_attr_' + attr_type].getMainDiv().data('key', attr_type);
    };
    var updateShamanHeader = function (changedPoints) {
        var tmpA = Shaman.calcAttributeCosts(reskill_attrpoints);
        var tmpS = Shaman.calcSkillCosts(reskill_skillpoints);
        if (changedPoints == 'attr')
            $('#sksh_attr_costs', SkillsWindow.DOM).text('$' + (Shaman.attribute_price));
        if (changedPoints == 'skill')
            $('#sksh_skill_costs', SkillsWindow.DOM).text('$' + (Shaman.skill_price));
        var sumPrice = parseInt((tmpA || 0) + (tmpS || 0));
        Shaman.summary_costs = sumPrice;
        if (Character.getCapital() < sumPrice)
            $('#sksh_sumprice', SkillsWindow.DOM).text('$' + sumPrice).addClass('text_red'); else
            $('#sksh_sumprice', SkillsWindow.DOM).text('$' + sumPrice).removeClass('text_red');
    };
    SkillsWindow.updateOpenPoints = function (oattr, oskill) {
        if (oattr) {
            open_attrpoints = oattr;
            $('span.skop_value', SkillsWindow.DOM).text(open_attrpoints);
        }
        if (oskill) {
            open_skillpoints = oskill;
            $('span.skos_value', SkillsWindow.DOM).text(open_skillpoints);
        }
    };
    var butExpertOkClicked = function () {
        Ajax.remoteCall('skill', 'save_skill_changes', {
            'modifier': 'add',
            "data": JSON.stringify({
                "attribute_modifications": attribute_modifications,
                "skill_modifications": skill_modifications,
                "attribute_points_used": assigned_attrpoints,
                "skill_points_used": assigned_skillpoints
            })
        }, function (json) {
            if (json.error)return new UserMessage(json.msg).show(); else new UserMessage(json.msg, UserMessage.TYPE_SUCCESS).show();
            CharacterSkills.initUsedPoints(CharacterSkills.getUsedAttributePoints() + assigned_attrpoints, CharacterSkills.getUsedSkillPoints() + assigned_skillpoints);
            updateData(json);
            Character.calcMaxHealth();
            EventHandler.signal('health', [Character.health, Character.maxHealth]);
        }, SkillsWindow);
    };
    var butExpertAbortClicked = function () {
        open_attrpoints += assigned_attrpoints;
        open_skillpoints += assigned_skillpoints;
        assigned_attrpoints = 0, assigned_skillpoints = 0;
        attribute_modifications = {}, skill_modifications = {};
        SkillsWindow.Expert.init();
        updateNuggetButtons();
    };
    var butShamanOkClicked = function () {
        Ajax.remoteCall('skill', 'save_skill_changes', {
            'modifier': 'sub',
            "data": JSON.stringify({
                "attribute_modifications": attribute_modifications4Shaman,
                "skill_modifications": skill_modifications4Shaman,
                "attribute_points_used": reskill_attrpoints,
                "skill_points_used": reskill_skillpoints
            })
        }, function (json) {
            if (json.error)return new UserMessage(json.msg).show(); else new UserMessage(json.msg, UserMessage.TYPE_SUCCESS).show();
            Character.setMoney(json['char'].money);
            Character.setDeposit(json['char'].deposit);
            CharacterSkills.initUsedPoints(CharacterSkills.getUsedAttributePoints() - reskill_attrpoints, CharacterSkills.getUsedSkillPoints() - reskill_skillpoints);
            updateData(json);
            Shaman.addPrices(json.reskill.attribute_costs, json.reskill.skill_costs);
            Character.calcMaxHealth();
            EventHandler.signal('health', [Character.health, Character.maxHealth]);
        }, SkillsWindow);
    };
    var butShamanAbortClicked = function () {
        attribute_modifications4Shaman = {}, skill_modifications4Shaman = {};
        reskill_attrpoints = 0, reskill_skillpoints = 0;
        SkillsWindow.Shaman.init();
        Shaman.addPrices(Shaman.start_attribute_price, Shaman.start_skill_price);
    };
    var butPremiumAttributeClicked = function () {
        if (Premium.buyable['buyskills']) {
            Premium.confirmUse('buyskills attributes', 'Купить очко характеристики'.escapeHTML(), 'Точно купить очко характеристики?'.escapeHTML(), skillwindowData.attributeBuy.price, null, function (data) {
                if (data.error)return false;
                skillwindowData.attributeBuy.price = data.activationdata.new_costs;
                open_attrpoints++;
                CharacterSkills.addFreeAttrPoints(1);
                $('span.skop_value', SkillsWindow.DOM).text(open_attrpoints);
                for (var k in SkillsWindow.Attributes) {
                    SkillsWindow.GUI[k].max_value++;
                    SkillsWindow.GUI[k].togglePlus();
                }
            });
        }
    };
    var butPremiumSkillClicked = function () {
        if (Premium.buyable['buyskills']) {
            Premium.confirmUse('buyskills skills', 'Купить очко навыка'.escapeHTML(), 'Точно купить очко навыка?'.escapeHTML(), skillwindowData.skillBuy.price, null, function (data) {
                if (data.error)return false;
                skillwindowData.skillBuy.price = data.activationdata.new_costs;
                open_skillpoints++;
                CharacterSkills.addFreeSkillPoints(1);
                $('span.skos_value', SkillsWindow.DOM).text(open_skillpoints);
                for (var a in SkillsWindow.Attributes) {
                    for (var i = 0; i < SkillsWindow.Attributes[a].length; i++) {
                        SkillsWindow.GUI[SkillsWindow.Attributes[a][i]].max_value++;
                        SkillsWindow.GUI[SkillsWindow.Attributes[a][i]].togglePlus();
                    }
                }
            });
        }
    };
    var butPremiumShamanClicked = function () {
        if (Premium.buyable['reskill']) {
            Premium.confirmUse('reskill', 'Потрафить шаману'.escapeHTML(), 'Умиротворённый шаман вернёт свои расценки к первоначальному уровню.'.escapeHTML(), Premium.getPrice('reskill'), null, function (data) {
                if (data.error)return false; else {
                    Shaman.resetShaman();
                    $('#sksh_attr_costs', SkillsWindow.DOM).text('$' + Shaman.attribute_price);
                    $('#sksh_skill_costs', SkillsWindow.DOM).text('$' + Shaman.skill_price);
                }
                return true;
            });
        }
    };
    var logicPlusMinus = function (event) {
        var butObj = event.data.obj;
        if ($(event.currentTarget).hasClass('butPlus')) {
            if (butObj.current_value + 1 > open_skillpoints + butObj.current_value)return false;
            butObj.current_value += 1;
            butObj.revision++;
            skill_modifications[butObj.data['key']] = (skill_modifications[butObj.data['key']] || 0) + 1;
            $('#' + butObj.id + ' span.displayValue, #' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).addClass('text_gold');
            open_skillpoints--;
            assigned_skillpoints++;
        }
        else {
            if (butObj.current_value - 1 < butObj.min_value)return false;
            butObj.current_value -= 1;
            butObj.revision--;
            skill_modifications[butObj.data['key']] -= 1;
            if (butObj.current_value == butObj.min_value)
                $('#' + butObj.id + ' span.displayValue, #' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).removeClass('text_gold');
            open_skillpoints++;
            assigned_skillpoints--;
        }
        $('#' + butObj.id + ' span.displayValue', SkillsWindow.DOM).text(butObj.current_value);
        $('#' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).text(butObj.current_value + butObj.extra);
        showSkillingEffect($(event.currentTarget));
        butObj.max_value = open_skillpoints + butObj.current_value;
        $('#spe_open_skill_points', SkillsWindow.DOM).text(open_skillpoints);
        return true;
    };
    var attrLogicPlus = function (event) {
        var butObj = null;
        var tmpObj = null;
        var attrType = $(event.currentTarget).data('attr_type');
        butObj = SkillsWindow.GUI['pmbut_attr_' + attrType];
        if (butObj.current_value + 1 > open_attrpoints + butObj.current_value)return false;
        butObj.current_value += 1;
        butObj.revision++;
        attribute_modifications[butObj.data['key']] = (attribute_modifications[butObj.data['key']] || 0) + 1;
        $('#' + butObj.id + ' span.displayValue, #' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).addClass('text_gold');
        open_attrpoints--;
        assigned_attrpoints++;
        $.each(SkillsWindow.Attributes[butObj.id], function (k, v) {
            tmpObj = SkillsWindow.GUI[v];
            tmpObj.current_value += 1;
            tmpObj.revision++;
            tmpObj.min_value += 1;
            tmpObj.max_value += 1;
            $('#' + v + ' span.displayValue', SkillsWindow.DOM).text(tmpObj.current_value);
            $('#' + v + ' span.displayValueBonus', SkillsWindow.DOM).text(tmpObj.current_value + tmpObj.extra);
        });
        $('#' + butObj.id + ' span.displayValue', SkillsWindow.DOM).text(butObj.current_value);
        $('#' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).text(butObj.current_value + butObj.extra);
        showAttrEffect(attrType);
        butObj.max_value = open_attrpoints + butObj.current_value;
        $('#spe_open_attr_points', SkillsWindow.DOM).text(open_attrpoints);
        return true;
    };
    var attrLogicMinus = function (event) {
        var butObj = null;
        var tmpObj = null;
        var attrType = $(event.currentTarget).data('attr_type');
        butObj = SkillsWindow.GUI['pmbut_attr_' + attrType];
        if (butObj.current_value - 1 < butObj.min_value)return false;
        butObj.current_value -= 1;
        butObj.revision--;
        attribute_modifications[butObj.data['key']] -= 1;
        if (butObj.current_value == butObj.min_value)
            $('#' + butObj.id + ' span.displayValue, #' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).removeClass('text_gold');
        open_attrpoints++;
        assigned_attrpoints--;
        $.each(SkillsWindow.Attributes[butObj.id], function (k, v) {
            tmpObj = SkillsWindow.GUI[v];
            tmpObj.current_value -= 1;
            tmpObj.revision--;
            tmpObj.min_value -= 1;
            tmpObj.max_value -= 1;
            $('#' + v + ' span.displayValue', SkillsWindow.DOM).text(tmpObj.current_value);
            $('#' + v + ' span.displayValueBonus', SkillsWindow.DOM).text(tmpObj.current_value + tmpObj.extra);
        });
        $('#' + butObj.id + ' span.displayValue', SkillsWindow.DOM).text(butObj.current_value);
        $('#' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).text(butObj.current_value + butObj.extra);
        showAttrEffect(attrType);
        butObj.max_value = open_attrpoints + butObj.current_value;
        $('#spe_open_attr_points', SkillsWindow.DOM).text(open_attrpoints);
        return true;
    };
    var logicPlusMinus4Shaman = function (event) {
        var butObj = event.data.obj;
        if ($(event.currentTarget).hasClass('butMinus')) {
            if (butObj.current_value - 1 < butObj.min_value)return false;
            butObj.current_value -= 1;
            butObj.revision--;
            skill_modifications4Shaman[butObj.data['key']] = (skill_modifications4Shaman[butObj.data['key']] || 0) - 1;
            $('#' + butObj.id + ' span.displayValue, #' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).addClass('text_gold');
            reskill_skillpoints++;
            Shaman.updateSkillPrice();
        }
        else {
            if (butObj.current_value + 1 > butObj.max_value)return false;
            butObj.current_value += 1;
            butObj.revision++;
            skill_modifications4Shaman[butObj.data['key']] += 1;
            $('#' + butObj.id + ' span.displayValue', SkillsWindow.DOM).text(butObj.current_value);
            $('#' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).text(butObj.current_value + butObj.extra);
            if (butObj.current_value == butObj.max_value)
                $('#' + butObj.id + ' span.displayValue, #' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).removeClass('text_gold');
            reskill_skillpoints--;
            Shaman.updateSkillPrice(true);
        }
        $('#' + butObj.id + ' span.displayValue', SkillsWindow.DOM).text(butObj.current_value);
        $('#' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).text(butObj.current_value + butObj.extra);
        showSkillingEffect($(event.currentTarget));
        $('#sps_open_skill_points', SkillsWindow.DOM).text(open_skillpoints + reskill_skillpoints);
        updateShamanHeader('skill');
        return true;
    };
    var attrLogicPlus4Shaman = function (event) {
        var tmpObj = null;
        var butObj = null;
        var attrType = $(event.currentTarget).data('attr_type');
        butObj = SkillsWindow.GUI['sh_pmbut_attr_' + attrType];
        if (butObj.current_value + 1 > butObj.max_value)return false;
        butObj.current_value += 1;
        butObj.revision++;
        attribute_modifications4Shaman[butObj.data['key']] += 1;
        reskill_attrpoints--;
        if (butObj.current_value == butObj.max_value)
            $('#' + butObj.id + ' span.displayValue, #' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).removeClass('text_gold');
        $.each(SkillsWindow.Attributes[butObj.id.replace('sh_', '')], function (k, v) {
            tmpObj = SkillsWindow.GUI['sh_' + v];
            tmpObj.current_value += 1;
            tmpObj.revision++;
            tmpObj.min_value += 1;
            tmpObj.max_value += 1;
            $('#sh_' + v + ' span.displayValue', SkillsWindow.DOM).text(tmpObj.current_value);
            $('#sh_' + v + ' span.displayValueBonus', SkillsWindow.DOM).text(tmpObj.current_value + tmpObj.extra);
        });
        Shaman.updateAttributePrice(true);
        $('#' + butObj.id + ' span.displayValue', SkillsWindow.DOM).text(butObj.current_value);
        $('#' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).text(butObj.current_value + butObj.extra);
        showAttrEffect(attrType);
        $('#sps_open_attr_points', SkillsWindow.DOM).text(open_attrpoints + reskill_attrpoints);
        updateShamanHeader('attr');
        return true;
    };
    var attrLogicMinus4Shaman = function (event) {
        var tmpObj = null;
        var butObj = null;
        var attrType = $(event.currentTarget).data('attr_type');
        butObj = SkillsWindow.GUI['sh_pmbut_attr_' + attrType];
        if (butObj.current_value - 1 < butObj.min_value)return false;
        butObj.current_value -= 1;
        butObj.revision--;
        attribute_modifications4Shaman[butObj.data['key']] = (attribute_modifications4Shaman[butObj.data['key']] || 0) - 1;
        $('#' + butObj.id + ' span.displayValue, #' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).addClass('text_gold');
        reskill_attrpoints++;
        $.each(SkillsWindow.Attributes[butObj.id.replace('sh_', '')], function (k, v) {
            tmpObj = SkillsWindow.GUI['sh_' + v];
            tmpObj.current_value -= 1;
            tmpObj.revision--;
            tmpObj.min_value -= 1;
            tmpObj.max_value -= 1;
            $('#sh_' + v + ' span.displayValue', SkillsWindow.DOM).text(tmpObj.current_value);
            $('#sh_' + v + ' span.displayValueBonus', SkillsWindow.DOM).text(tmpObj.current_value + tmpObj.extra);
        });
        Shaman.updateAttributePrice();
        $('#' + butObj.id + ' span.displayValue', SkillsWindow.DOM).text(butObj.current_value);
        $('#' + butObj.id + ' span.displayValueBonus', SkillsWindow.DOM).text(butObj.current_value + butObj.extra);
        showAttrEffect(attrType);
        $('#sps_open_attr_points', SkillsWindow.DOM).text(open_attrpoints + reskill_attrpoints);
        updateShamanHeader('attr');
        return true;
    };
    var showBonusCheckboxUsed = function () {
        if ($('#ske_showItemBonus', SkillsWindow.DOM).hasClass('tw2gui_checkbox_checked')) {
            $('div.skills_content span.displayValue', SkillsWindow.DOM).hide();
            $('div.skills_content span.displayValueBonus', SkillsWindow.DOM).css('display', 'inline-block');
        }
        else {
            $('div.skills_content span.displayValueBonus', SkillsWindow.DOM).hide();
            $('div.skills_content span.displayValue', SkillsWindow.DOM).css('display', 'inline-block');
        }
    };
    var showBonusCheckbox4ShamanUsed = function () {
        if ($('#sks_showItemBonus', SkillsWindow.DOM).hasClass('tw2gui_checkbox_checked')) {
            $('div.skills_content4Shaman span.displayValue', SkillsWindow.DOM).hide();
            $('div.skills_content4Shaman span.displayValueBonus', SkillsWindow.DOM).css('display', 'inline-block');
        }
        else {
            $('div.skills_content4Shaman span.displayValueBonus', SkillsWindow.DOM).hide();
            $('div.skills_content4Shaman span.displayValue', SkillsWindow.DOM).css('display', 'inline-block');
        }
    };
})(jQuery);
;
(function ($) {
    window.PremiumBuyWindow = {
        easyPayDialog: null, easPayHost: null, closeEasyPay: function () {
            var wrapper = PremiumBuyWindow.easyPayDialog;
            if (!wrapper)return;
            PremiumBuyWindow.easyPayDialog = null;
            wrapper.animate({top: -600}, 200, 'linear', function () {
                wrapper.remove();
            });
            EventHandler.unlisten('window_resized', PremiumBuyWindow.updateEasyPayPosition);
        }, onMessage: function (e) {
            if (e.originalEvent.origin != PremiumBuyWindow.easyPayHost)return;
            switch (e.originalEvent.data) {
                case'close_easypay_window':
                    PremiumBuyWindow.closeEasyPay();
                    break;
                case'open_payment_window':
                    PremiumBuyWindow.closeEasyPay();
                    PremiumBuyWindow.open(null, true);
                    break;
            }
        }, getIframeSrc: function (host, path, request) {
            return 'https://' + host + '/' + path + '?' + request;
        }, getIframeHtml: function (width, height) {
            return '<iframe ' + 'width="' + width + '" height="' + height + '" id="easy-pay-iframe" ' + 'name="InnoGames Payments" scrolling="no" marginheight="0" ' + 'marginwidth="0" frameborder="0">' + '</iframe>';
        }, updateEasyPayPosition: function () {
            var el = PremiumBuyWindow.easyPayDialog;
            if (!el)return;
            el.css({left: Map.width - 250});
        }
    };
    $(window).on('message', PremiumBuyWindow.onMessage);
    PremiumBuyWindow.open = function (origin, noEasyPay) {
        Ajax.remoteCall('premium_buy', '', {origin: origin, ep: !noEasyPay}, function (json) {
            var iframe, wrapper;
            if (json.error) {
                return new UserMessage(json.msg).show();
            }
            if (json.easyPay) {
                PremiumBuyWindow.closeEasyPay();
                PremiumBuyWindow.easyPayHost = 'https://' + json.payHost;
                iframe = $(PremiumBuyWindow.getIframeHtml(244, 530));
                iframe.load(function () {
                    if (!iframe.attr('src'))return;
                    wrapper.animate({top: 0});
                    wman.getById('premium') && wman.getById('premium').destroy();
                });
                PremiumBuyWindow.easyPayDialog = wrapper = $('<div class="easy-pay-wrapper"/>').css({left: Map.width - 250}).append(iframe).appendTo($('#windows'));
                iframe.attr('src', PremiumBuyWindow.getIframeSrc(json.payHost, 'easy-pay/standalone', json.request));
                EventHandler.listen('window_resized', PremiumBuyWindow.updateEasyPayPosition);
            } else {
                iframe = $(PremiumBuyWindow.getIframeHtml(790, 560)).attr('src', PremiumBuyWindow.getIframeSrc(json.payHost, 'payment-window', json.request));
                PremiumBuyWindow.window = wman.open('premium-buy', "Покупка премиума").addEventListener("WINDOW_CLOSE", PremiumBuyWindow.refreshPremiumPoints).setMiniTitle("Покупка премиума").setSize(840, 655).center().appendToContentPane(iframe);
            }
        });
    };
    wman.registerReloadHandler(/^premium-buy$/, function () {
        PremiumBuyWindow.open("premium_window_reopen", true);
    });
    PremiumBuyWindow.refreshPremiumPoints = function () {
        Ajax.remoteCall('premium_buy', 'get_balance', {}, function (json) {
            Character.setNuggets(json.points);
        });
    };
    window.PremiumWindow = {use: {window: null, rows: {}}, log: {}};
    PremiumWindow.use.renew = {};
    PremiumWindow.open = function () {
        PremiumWindow.use.window = $("<div class='premium-use'/>");
        PremiumWindow.log.window = $("<div class='premium-log'/>");
        PremiumWindow.window = wman.open('premium', null, "noreload").setMiniTitle("Премиум").addTab('Включить', 'use', function () {
            PremiumWindow.showTab('use')
        }).addTab('Журнал', 'log', function () {
            PremiumWindow.showTab('log')
        }).addTab('Купить', 'buy', function () {
            PremiumBuyWindow.open('premium_main', true)
        }).appendToContentPane(PremiumWindow.use.window, PremiumWindow.log.window);
        PremiumWindow.showTab("use");
        EventHandler.listen('char_nuggets_changed', setNuggets, null, {boundto: PremiumWindow.window});
    };
    PremiumWindow.showTab = function (id) {
        if (!PremiumWindow.window)return;
        PremiumWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *').each(function (i, e) {
            PremiumWindow.window.removeClass($(e).attr('class'));
            if ($(e).hasClass('premium-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
                PremiumWindow.window.addClass('premium-' + id);
            } else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case"log":
                PremiumWindow.log.init();
                break;
            case"use":
                PremiumWindow.use.init();
                break;
        }
    };
    PremiumWindow.use.init = function () {
        PremiumWindow.window.setTitle(null);
        if (PremiumWindow.use.window.children().length)return;
        var premiumContainer = $('<div style="width: 684px;height:297px;margin-left:20px;margin-top:93px;" />');
        var entryContainer = $('<div />');
        PremiumWindow.use.scrollpane = new west.gui.Scrollpane().appendContent();
        PremiumWindow.use.scrollpane.appendContent(entryContainer);
        premiumContainer.append('<span style="width:280px;float:left;">' + 'Название'.escapeHTML() + '</span><span style="width:224px;float:left;">' + 'Срок'.escapeHTML() + '</span><span style="width:40px;">' + 'Продление'.escapeHTML() + '</span><span style="width:100px;float:right;">' + 'Активация'.escapeHTML() + '</span>', PremiumWindow.use.scrollpane.getMainDiv());
        PremiumWindow.use.window.append(premiumContainer, $('<div style="cursor:pointer;position:absolute;width:420px;height:40px;left:150px;top:25px;text-align:center;color:#FFF;line-height:40px;vertical-align:middle;font-size:16pt;">' + "Покупка премиума" + '</div>').click(function () {
            return PremiumBuyWindow.open('premium_top', true)
        }));
        Ajax.remoteCallMode('premium', 'tabUse', {}, function (resp) {
            $('<div id="premium_window_points"></div>').appendTo(PremiumWindow.use.window);
            setNuggets(Character.getNuggets());
            for (var i = 0; i < resp.boni.length; i++) {
                var bonus = resp.boni[i].bonus_id;
                PremiumWindow.use.rows[bonus] = {};
                PremiumWindow.use.rows[bonus].needChange = !resp.boni[i].is_instant;
                var hasBonus = !resp.boni[i].is_instant && !resp.boni[i].hasBonus;
                var imageString = hasBonus ? bonus + '_grey' : bonus;
                var premiumEntry = $('<div id="premium_row_' + bonus + '" style="background: url(https://westrus.innogamescdn.com/images/window/premium/tabel_bg.png);height:69px;width:667px;" />');
                PremiumWindow.use.rows[bonus].image = $('<div title="' + resp.boni[i].description + '" style="width:213px;height:60px;float:left;background-image:url(https://westrus.innogamescdn.com/images/premium/' + imageString + '.png);background-repeat:no-repeat;background-position:7px 7px;padding:0px 0 0 65px;" />');
                var premiumSmallImage = $('<img src="https://westrus.innogamescdn.com/images/premium/' + bonus + '_small.png" alt="" id="premium_small_icon_' + bonus + '" />');
                PremiumWindow.use.rows[bonus].title = $('<h4 style="margin-top:12px;' + (hasBonus ? "color:#666;" : "") + '" />').text(resp.boni[i].title);
                var durationCol = $('<div style="width:224px;height:60px;float:left;margin-left:3px;margin-top:3px;" />');
                durationCol.append("<b>" + 'Время:' + "</b> " + (resp.boni[i].days == 0 ? 'Сейчас' : s(ngettext('%1 день', new Array('%1 день', '%1 дня', '%1 дней'), resp.boni[i].days), resp.boni[i].days)), $('<br/>'), "<b>" + 'Цена:' + "</b> " + s(ngettext('%1 самородок', new Array('%1 самородок', '%1 самородка', '%1 самородков'), resp.boni[i].cost), resp.boni[i].cost), $('<br/>'), "<span id='" + bonus + "_exp_date_text' style='display:" + ((resp.boni[i].expiration == null || hasBonus) ? "none;" : "block;") + "'><b>" + 'До:' + "</b> <span id='" + bonus + "_exp_date'>" + resp.boni[i].expiration + "</span></span>");
                var renewCol = $('<div style="width:40px;float:left;padding-left:20px;padding-top:25px;" />');
                if (!resp.boni[i].is_instant) {
                    var renewBox = $('<input type="checkbox" title="' + "Продлевает премиум автоматически, пока хватает золотых самородков." + '" onchange="PremiumWindow.toggleRenewal(\'' + bonus + '\');" />');
                    renewBox.attr('checked', resp.boni[i].renew);
                    PremiumWindow.use.renew[bonus] = resp.boni[i].renew;
                    renewCol.append(renewBox);
                }
                var useCol = $('<div title="' + resp.boni[i].description + '" style="width:100px;float:left;padding-top:18px" />');
                var label = (resp.boni[i].is_instant || !resp.boni[i].hasBonus) ? 'Включить' : 'Продлить';
                PremiumWindow.use.rows[bonus].button = new west.gui.Button(label, function (key) {
                    return function () {
                        Premium.actionUse(key)
                    }
                }(bonus));
                useCol.append(PremiumWindow.use.rows[bonus].button.getMainDiv());
                PremiumWindow.use.rows[bonus].image.append(PremiumWindow.use.rows[bonus].title, premiumSmallImage);
                PremiumWindow.use.rows[bonus].image.appendTo(premiumEntry);
                durationCol.appendTo(premiumEntry);
                renewCol.appendTo(premiumEntry);
                useCol.appendTo(premiumEntry);
                premiumEntry.appendTo(entryContainer);
            }
        }, PremiumWindow);
    }
    PremiumWindow.toggleRenewal = function (key) {
        PremiumWindow.use.renew[key] = !PremiumWindow.use.renew[key];
        if (!PremiumWindow.use.saveInProgress) {
            PremiumWindow.use.saveInProgress = true;
            Ajax.remoteCall('premium', 'set_renewal', PremiumWindow.use.renew, function () {
                PremiumWindow.use.saveInProgress = false;
            });
        }
    };
    PremiumWindow.updateBonus = function (bonus, data) {
        bonus = bonus.split(" ")[0];
        var row = $('#premium_row_' + bonus);
        if (row.length == 0 || !PremiumWindow.use.rows[bonus].needChange)return;
        $('#' + bonus + '_exp_date').text(data.time);
        $('#' + bonus + '_exp_date_text').show();
        PremiumWindow.use.rows[bonus].title.css('color', '#000');
        PremiumWindow.use.rows[bonus].image.css('background-image', 'url(https://westrus.innogamescdn.com/images/premium/' + bonus + '.png)');
        PremiumWindow.use.rows[bonus].button.setCaption('Продлить');
    };
    PremiumWindow.log.init = function () {
        if ($('#premium-log-table').length)return;
        PremiumWindow.window.setTitle("Журнал");
        $('<br />').appendTo(PremiumWindow.log.window);
        PremiumWindow.log.pagenavi = new west.gui.Pagebar(0, 0, PremiumWindow.log.switchPage);
        PremiumWindow.log.table = new west.gui.Table().setId('premium-log-table').appendTo(PremiumWindow.window.$('div.premium-log', PremiumWindow.DOM)).addColumn("premium_date").addColumn("premium_change").addColumn("premium_old").addColumn("premium_new").addColumn("premium_detail").appendToCell("head", "premium_date", 'Дата', '&nbsp;').appendToCell("head", "premium_change", 'Изменение', '&nbsp;').appendToCell("head", "premium_old", 'Было', '&nbsp;').appendToCell("head", "premium_new", 'Стало', '&nbsp;').appendToCell("head", "premium_detail", 'Дополнительная информация', '&nbsp;').appendToCell("foot", "premium_detail", $('<div class="rl_pagenavi"></div>').append(PremiumWindow.log.pagenavi.getMainDiv()));
        PremiumWindow.log.switchPage(1);
    };
    PremiumWindow.log.switchPage = function (page) {
        Ajax.remoteCallMode('premium', 'log', {page: page - 1}, function (resp) {
            var pages = Math.ceil(resp.count / resp.limit);
            PremiumWindow.log.table.clearBody();
            PremiumWindow.log.pagenavi.update(page, pages, pages > page);
            var tmpCells = {};
            for (var i = 0; i < 9 && i < resp.data.length; i++) {
                tmpCells['premium_date'] = resp.data[i].date;
                tmpCells['premium_change'] = resp.data[i].premium_points;
                tmpCells['premium_old'] = resp.data[i].old_premium_points;
                tmpCells['premium_new'] = resp.data[i].new_premium_points;
                tmpCells['premium_detail'] = resp.data[i].detail.cutIt(40);
                PremiumWindow.log.table.buildRow('premiumlog_' + i, tmpCells, PremiumWindow.escapeRow);
            }
        }, PremiumWindow);
    };
    var setNuggets = function (amount) {
        $('#premium_window_points', PremiumWindow.use.window).text(s(ngettext('У тебя %1 золотой самородок.', new Array('У тебя %1 золотой самородок.', 'У тебя %1 золотых самородка.', 'У тебя %1 золотых самородков.'), amount), format_money(amount)));
    }
})(jQuery);

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.premium.buy', class_parent = 'west.game.window.tab.model', class_object = {
        _class_path: class_path,
        data: {
            ongoing_request: false,
            size: {x: 790, y: 560},
            payHost: null,
            payPath: 'payment-window',
            payRequest: null,
            origin: null,
            frame: null
        },
        l10n: {window: {'title': null, 'tab_name': 'Купить'}},
        setOngoingRequest: function (bool) {
            this.setData('ongoing_request', bool);
            return this;
        },
        hasOngoingRequest: function () {
            return this.getData('ongoing_request');
        },
        getSize: function () {
            return this.getData('size');
        },
        setPayHost: function (payHost) {
            this.setData('payHost', payHost);
            return this;
        },
        getPayHost: function () {
            return this.getData('payHost');
        },
        hasPayHost: function () {
            return !!this.getPayHost();
        },
        getPayPath: function () {
            return this.getData('payPath');
        },
        setPayRequest: function (PayRequest) {
            this.setData('payRequest', PayRequest);
            return this;
        },
        getPayRequest: function () {
            return this.getData('payRequest');
        },
        setOrigin: function (origin) {
            this.setData('origin', origin);
            return this;
        },
        getOrigin: function () {
            return this.getData('origin');
        },
        setFrame: function (frame) {
            this.setData('frame', frame, true);
            return this;
        },
        getFrame: function () {
            return this.getData('frame');
        },
        hasFrame: function () {
            return !!this.getFrame();
        },
        clearData: function () {
            this.setData({payHost: null, payRequest: null, origin: null, frame: null});
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.premium.buy', class_parent = 'west.game.window.tab.view', class_object = {
        _class_path: class_path, renderContent: function () {
            var root = this.getRoot(), model = this.getModel(), $frame;
            if (!root || !model.hasPayHost()) {
                return this;
            }
            if (model.hasFrame()) {
                $frame = model.getFrame();
            } else {
                $frame = this.getFrameHtml();
                model.setFrame($frame);
            }
            if (!$frame.parent().is(root)) {
                $(root).empty().append($frame);
            }
            this.updateFrameSrc();
            return this;
        }, updateFrameSrc: function () {
            var frame = this.getModel().getFrame(), new_src = this.getFrameSrc();
            if (new_src !== frame.attr('src')) {
                frame.attr('src', new_src);
            }
            return this;
        }, getFrameSrc: function (request) {
            var model = this.getModel(), host = model.getPayHost(), path = model.getPayPath(), request = request || model.getPayRequest();
            return 'https://' + host + '/' + path + (request ? '?' + request : '');
        }, getFrameHtml: function () {
            var size = this.getModel().getSize();
            return $('<iframe ' + 'width="' + size.x + '" height="' + size.y + '" id="easy-pay-iframe" ' + 'name="InnoGames Payments" scrolling="no" marginheight="0" ' + 'marginwidth="0" frameborder="0">' + '</iframe>');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.premium.buy', class_parent = 'west.game.window.tab.controller', class_object = {
        _class_id: 'buy',
        _namespace: 'west.window.premium',
        _class_path: class_path,
        _tab_id: 'buy',
        _tab_class: 'premium_window_buy',
        prepareWindow: function () {
            this.callParent();
            var wnd = this.getWindow(), model = this.getModel(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title).removeClass('noreload').setMiniTitle(l10n.window.mini_title).center();
            return this;
        },
        reRender: function () {
            var model = this.getModel(), view = this.getView();
            view.renderContent();
            return this;
        },
        show: function (options) {
            options = options || {};
            var wnd = this.getWindow(), model = this.getModel(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title);
            this.callParent();
            if (!model.hasPayHost() || options.origin !== model.getOrigin()) {
                this.requestFrameData(options.origin);
            }
            return this;
        },
        requestFrameData: function (origin, noEasyPay) {
            var that = this, model = this.getModel(), wnd = this.getWindow(), easyPay = false;
            if (model.hasOngoingRequest()) {
                return this;
            }
            model.setOrigin(origin);
            wnd.showTabLoader(this.getTabId());
            if (wnd.currentActiveTabId === this.getTabId()) {
                wnd.showLoader();
            }
            model.setOngoingRequest(true);
            Ajax.remoteCall('premium_buy', '', {origin: origin, ep: easyPay}, function (json) {
                if (json.error) {
                    return new UserMessage(json.msg).show();
                }
                model.setOngoingRequest(false).setPayHost(json.payHost).setPayRequest(json.request);
                that.reRender();
                wnd.hideLoader();
            });
        },
        windowDestroy: function () {
            this.getModel().clearData();
            this.callParent.apply(this, arguments);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.premium.log', class_parent = 'west.game.window.tab.model', class_object = {
        _class_path: class_path,
        data: {'log_table': null, 'log_pager': null, 'page_no': 0},
        l10n: {
            'window': {'title': 'Журнал', 'tab_name': 'Журнал'},
            'log_table': {
                'headers': {
                    'date': 'Дата',
                    'change': 'Изменение',
                    'old': 'Было',
                    'new': 'Стало',
                    'more_info': 'Дополнительная информация'
                }
            },
            'message': 'Журнал сердец содержит историю их сбора.'
        },
        getTabName: function () {
            return this.getL10n('window').tab_name;
        },
        setLogTable: function (log_table) {
            this.setData('log_table', log_table);
            return this;
        },
        getLogTable: function () {
            return this.getData('log_table');
        },
        setCurrentPage: function (page_no) {
            this.setData('page_no', page_no, true);
            return this;
        },
        getCurrentPage: function () {
            return this.getData('page_no');
        },
        setPager: function (new_pager) {
            this.setData('log_pager', new_pager);
            return this;
        },
        getPager: function () {
            return this.getData('log_pager');
        },
        updatePager: function (page, pages, has_next) {
            this.getPager().update(page, pages, has_next);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.premium.log', class_parent = 'west.game.window.tab.view', class_object = {
        _class_path: class_path, renderContent: function () {
            var root = this.getRoot(), controller = this.getController(), model = this.getModel(), l10n = model.getL10n(), log_table = new west.gui.Table(), pager = new west.gui.Pagebar(1, null, controller.changePage, controller, false);
            root = $(root).empty();
            log_table.setId('premium-log-table').addClass('logs_container').addColumn("premium_date").addColumn("premium_change").addColumn("premium_old").addColumn("premium_new").addColumn("premium_detail").appendToCell("head", "premium_date", l10n.log_table.headers['date'], '&nbsp;').appendToCell("head", "premium_change", l10n.log_table.headers['change'], '&nbsp;').appendToCell("head", "premium_old", l10n.log_table.headers['old'], '&nbsp;').appendToCell("head", "premium_new", l10n.log_table.headers['new'], '&nbsp;').appendToCell("head", "premium_detail", l10n.log_table.headers['more_info'], '&nbsp;').appendToFooter('premium_detail', $('<div class="rl_pagenavi"></div>').append(pager.getMainDiv().addClass('pager')));
            model.setLogTable(log_table).setPager(pager);
            log_table.appendTo(root);
            return this;
        }, addLogRows: function (rows_data) {
            var i = 0, l = rows_data.length;
            for (i; i < l; i++) {
                this.addLogRow(rows_data[i]);
            }
            return this;
        }, addLogRow: function (row_data) {
            var table = this.getModel().getLogTable(), new_row = {
                'premium_date': row_data.date,
                'premium_change': row_data.premium_points,
                'premium_old': row_data.old_premium_points,
                'premium_new': row_data.new_premium_points,
                'premium_detail': row_data.detail.cutIt(40)
            };
            table.buildRow(null, new_row);
            return this;
        }, clearLogTable: function () {
            this.getModel().getLogTable().clearBody();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.premium.log', class_parent = 'west.game.window.tab.controller', class_object = {
        _class_id: 'log',
        _namespace: 'west.window.premium',
        _class_path: class_path,
        _tab_id: 'log',
        _tab_class: 'premium_window_log premium-log',
        show: function () {
            var wnd = this.getWindow(), model = this.getModel(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title);
            this.requestLogData();
            this.callParent();
            return this;
        },
        changePage: function (direction) {
            var model = this.getModel(), current_page = model.getCurrentPage(), page;
            if ('next' === direction) {
                page = current_page + 1;
            } else if ('first' === direction) {
                page = 0;
            } else {
                page = current_page - 1;
            }
            this.requestLogData(page);
            return this;
        },
        requestLogData: function (page_no) {
            var view = this.getView(), model = this.getModel(), wnd = wnd = this.getWindow(), opt = {
                page: page_no || 0,
                limit: 15
            };
            wnd.showTabLoader(this.getTabId());
            if (wnd.currentActiveTabId === this.getTabId()) {
                wnd.showLoader();
            }
            Ajax.remoteCallMode('premium', 'log', opt, function (response) {
                var pages = Math.ceil(response.count / response.limit);
                view.clearLogTable().addLogRows(response.data || {});
                model.setCurrentPage(response.page).updatePager(response.page + 1, pages, pages > (response.page + 1));
                wnd.hideLoader();
            });
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.game.premium.easyPay', class_parent = 'west.game.model', class_object = {
        _class_path: class_path,
        data: {size: {x: 244, y: 530}, payHost: null, payPath: 'easy-pay/standalone', payRequest: null, frame: null},
        l10n: {},
        getSize: function () {
            return this.getData('size');
        },
        setPayHost: function (payHost) {
            this.setData('payHost', payHost);
            return this;
        },
        getPayHost: function () {
            return this.getData('payHost');
        },
        hasPayHost: function () {
            return !!this.getPayHost();
        },
        getPayPath: function () {
            return this.getData('payPath');
        },
        setPayRequest: function (PayRequest) {
            this.setData('payRequest', PayRequest);
            return this;
        },
        getPayRequest: function () {
            return this.getData('payRequest');
        },
        setFrame: function (frame) {
            this.setData('frame', frame, true);
            return this;
        },
        getFrame: function () {
            return this.getData('frame');
        },
        hasFrame: function () {
            return !!this.getFrame();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.game.premium.easyPay', class_parent = 'west.game.view', class_object = {
        _class_path: class_path, addStructure: {}, renderContent: function () {
            var model = this.getModel(), $root = $('<div class="easy-pay-wrapper"/>'), $frame;
            this.setRoot($root);
            var $frame = this.getFrameHtml();
            model.setFrame($frame);
            $root.append($frame);
            this.updateFrameSrc().updatePosition();
            $frame.load(function () {
                if (!$frame.attr('src')) {
                    return this;
                }
                ;
                $root.animate({top: 0});
            });
            $('#windows').append($root);
            return this;
        }, updatePosition: function () {
            this.getRoot().css({left: Map.width - 250});
            return this;
        }, updateFrameSrc: function () {
            var frame = this.getModel().getFrame(), new_src = this.getFrameSrc();
            if (new_src !== frame.attr('src')) {
                frame.attr('src', new_src);
            }
            return this;
        }, getFrameSrc: function (request) {
            var model = this.getModel(), host = model.getPayHost(), path = model.getPayPath(), request = request || model.getPayRequest();
            return 'https://' + host + '/' + path + (request ? '?' + request : '');
        }, getFrameHtml: function () {
            var size = this.getModel().getSize();
            return $('<iframe ' + 'width="' + size.x + '" height="' + size.y + '" id="easy-pay-iframe" ' + 'name="InnoGames Payments" scrolling="no" marginheight="0" ' + 'marginwidth="0" frameborder="0">' + '</iframe>');
        }, destroy: function () {
            this.getRoot().remove();
            this.callParent.apply(this, arguments);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.game.premium.easyPay', class_parent = 'west.game.controller', class_object = {
        _class_id: 'premium_easyPay',
        _namespace: class_path,
        _class_path: class_path,
        init: function () {
            this.callParent.apply(this, arguments);
            this.getView().renderContent();
            return this;
        },
        updatePosition: function () {
            this.getView().updatePosition();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.premium', class_parent = 'west.game.window.tab.model', class_object = {
        _class_path: class_path,
        data: {easyPay: null, origin: null},
        l10n: {
            'window': {
                'mini_title': "Покупка премиума",
                'tabs': {
                    'buy': {'name': 'Купить', 'window_title': null},
                    'log': {'name': 'Журнал', 'window_title': "Журнал"}
                }
            }, 'easyPay': {'log_button': "Журнал"}
        },
        setEasyPay: function (easyPay) {
            this.setData('easyPay_host', easyPay, true);
            return this;
        },
        getEasyPay: function () {
            return this.getData('easyPay_host');
        },
        hasEasyPay: function () {
            return !!this.getEasyPay();
        },
        clearEasyPay: function () {
            this.setEasyPay(null);
            return this;
        },
        setOrigin: function (origin) {
            this.setData('origin', origin);
            return this;
        },
        getOrigin: function () {
            return this.getData('origin');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.premium', class_parent = 'west.game.window.tab.view', class_object = {
        _class_path: class_path,
        updateEasyPayPosition: function () {
            var model = this.getModel();
            if (model.hasEasyPay()) {
                model.getEasyPay().updatePosition();
            }
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var single_instance = true, class_name = 'controller', class_path = 'west.window.premium', class_parent = 'west.game.window.controller', class_object = {
        _class_id: 'premium',
        _namespace: class_path,
        _class_path: class_path,
        _window_id: 'premium_window',
        _window_class: 'premium_window',
        init: function () {
            this.callParent.apply(this, arguments);
            this.initTabs().setInitEventListeners();
            return this;
        },
        initTabs: function () {
            this.setTab(new west.window.premium.buy.controller({'window_controller': this}));
            this.setTab(new west.window.premium.log.controller({'window_controller': this}));
            return this;
        },
        initSubcontrollers: function () {
            this.easyPay = this._getOrInitClass('west.window.premium.easyPay.controller', {controllers: {window: this}});
            return this;
        },
        setInitEventListeners: function () {
            var view = this.getView();
            this.removeInitEventListeners();
            $(window).on('message.premium', this.onMessage.bind(this));
            EventHandler.listen('window_resized', view.updateEasyPayPosition.bind(view));
            return this;
        },
        removeInitEventListeners: function () {
            var view = this.getView();
            $(window).off('.premium');
            EventHandler.unlisten('window_resized', view.updateEasyPayPosition.bind(view));
            return this;
        },
        onMessage: function (e) {
            var model = this.getModel(), has_easy_pay = model.hasEasyPay();
            if (!has_easy_pay || e.originalEvent.origin !== 'https://' + model.getEasyPay().getModel().getPayHost()) {
                return;
            }
            switch (e.originalEvent.data) {
                case'close_easypay_window':
                    this.closeEasyPay();
                    break;
                case'open_payment_window':
                    this.open(null, true);
                    break;
            }
        },
        prepareWindow: function () {
            this.callParent();
            var wnd = this.getWindow(), model = this.getModel(), l10n = model.getL10n();
            wnd.setMiniTitle(l10n.window.mini_title).setSize(820, 635).addClass('noreload').center();
            return this;
        },
        showEasyPay: function (payHost, payRequest) {
            var model = this.getModel();
            this.closeEasyPay();
            model.setEasyPay(new west.game.premium.easyPay.controller({
                window_controller: this,
                data: {payHost: payHost, payRequest: payRequest}
            }));
            return this;
        },
        closeEasyPay: function () {
            var model = this.getModel();
            if (model.hasEasyPay()) {
                model.getEasyPay().destroy();
                model.clearEasyPay();
            }
            return this;
        },
        requestFrameData: function (origin, noEasyPay) {
            var that = this, model = this.getModel(), easyPay = !noEasyPay;
            if (easyPay && (model.hasEasyPay() && origin === model.getOrigin())) {
                return this;
            }
            Ajax.remoteCall('premium_buy', '', {origin: origin, ep: easyPay}, function (json) {
                if (json.error) {
                    return new UserMessage(json.msg).show();
                }
                model.setOrigin(origin);
                if (json.easyPay) {
                    that.showEasyPay(json.payHost, json.request);
                } else {
                    that.getTab('buy').getModel().setPayHost(json.payHost).setPayRequest(json.request).setOrigin(origin);
                    that.open(origin, true);
                }
            });
            return this;
        },
        open: function (origin, noEasyPay) {
            this.closeEasyPay();
            if (this.hasWindow() || noEasyPay) {
                this.callParent({showTab: 'buy', origin: origin});
            } else {
                this.requestFrameData(origin, noEasyPay);
            }
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
    if (single_instance) {
        west.window.premium = new west.window.premium.controller;
    }
});

(function ($) {
    window.CemeteryWindow = {};
    CemeteryWindow.fortId = null;
    CemeteryWindow.open = function (fortId, battleId, data) {
        CemeteryWindow.fortId = fortId;
        CemeteryWindow.window = wman.open('cemetery').setMiniTitle('Кладбище').appendToContentPane($('<div class="cemetery-content"/><div class="footer"/>'));
        CemeteryWindow.window.setTitle('Кладбище');
        CemeteryWindow.DOM = $('div.cemetery');
        CemeteryWindow.currentStats = null;
        if (!battleId)
            CemeteryWindow.init(); else
            CemeteryWindow.showStatInit(battleId, data);
    };
    CemeteryWindow.init = function () {
        $('.tw2gui_window_content_pane .info', CemeteryWindow.DOM).remove();
        CemeteryWindow.table = new west.gui.Table().setId('battle_list').createEmptyMessage('В последнее время здесь не было битв').addColumn("battle_num").addColumn("battle_dat").addColumn("battle_def").addColumn("battle_res").addColumn("battle_atk").appendToThCell("head", "battle_num", 'Количество боев за форты', '#').appendToThCell("head", "battle_dat", 'Дата', 'Дата').appendToThCell("head", "battle_def", 'Защитник', 'Защитник').appendToThCell("head", "battle_res", 'Результат', 'Результат').appendToThCell("head", "battle_atk", 'Нападающий', 'Нападающий');
        $('div.cemetery-content', CemeteryWindow.DOM).empty().append(CemeteryWindow.table.getMainDiv());
        CemeteryWindow.initData();
    };
    CemeteryWindow.initData = function () {
        Ajax.remoteCallMode("fort_battleresultpage", "", {fort_id: CemeteryWindow.fortId}, function (data) {
            if (data.error)return new UserMessage(data.msg).show();
            CemeteryWindow.updateTable(data);
        }, CemeteryWindow);
    };
    CemeteryWindow.updateTable = function (data) {
        CemeteryWindow.table.clearBody();
        var battlestr;
        if (data.battleCount)
            battlestr = s(ngettext('Здесь прошла %1 битва.', new Array('Здесь прошла %1 битва.', 'Здесь прошли %1 битвы.', 'Здесь прошло %1 битв.'), data.battleCount), data.battleCount); else
            battlestr = 'Здесь ещё не было битв';
        $('div.footer', CemeteryWindow.DOM).empty().append(battlestr + "</br>" + data.logtime);
        var tmpCells = {};
        var row = data.battleList;
        for (var i = 0; i < row.length; i++) {
            var rd = row[i];
            tmpCells['battle_num'] = data.battleCount - i;
            tmpCells['battle_dat'] = '<a title="' + 'Посмотреть статистику' + ' "href="javascript:CemeteryWindow.showStatInit(' + rd.battleresult_id + ');">' + rd.result_date + '</a>';
            tmpCells['battle_def'] = (rd.defender_town_name) ? '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.defender_x + ',' + rd.defender_y + ');\' > ' + rd.defender_town_name + '</a>' : '<em style="font-size:3pt">Verwittert</em>';
            tmpCells['battle_res'] = rd.defender_count + " <img src='https://westrus.innogamescdn.com/images/fort/battle/" + rd.battle_outcome.toLowerCase() + ".png' title='" + outcomes(rd.battle_outcome) + "'/> " + rd.attacker_count;
            tmpCells['battle_atk'] = (rd.attacker_town_name) ? '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.attacker_x + ',' + rd.attacker_y + ');\' > ' + rd.attacker_town_name + '</a>' : '<em style="font-size:3pt">Verwittert</em>';
            CemeteryWindow.table.buildRow('battle_nr_' + tmpCells['battle_num'], tmpCells);
        }
    };
    var outcomes = function (out) {
        switch (out) {
            case'unknown':
                return "";
            case'ATTACKER_WIPED':
                return 'Атака отбита';
            case'DEFENDER_WIPED':
                return 'Защитник пал';
            case'FINALROUND':
                return 'Форт удержан';
            case'FLAGLOST':
                return 'Флаг захвачен';
        }
    };
    var sortByObj = {sortBy: 'name', orderBy: 'ASC'};
    CemeteryWindow.showStatInit = function (battle_id, data) {
        CemeteryWindow.table = new west.gui.Table().setId('battle_stat').createEmptyMessage('В последнее время здесь не было битв').addColumn("battle_nam", {sortBy: 'name'}).addColumn("battle_tow", {sortBy: 'townname'}).addColumn("battle_shp", {sortBy: 'starthp'}).addColumn("battle_ehp", {sortBy: 'finishedhp'}).addColumn("battle_fla", {sortBy: 'flagholdcount'}).addColumn("battle_hco", {sortBy: 'hitcount'}).addColumn("battle_fco", {sortBy: 'misscount'}).addColumn("battle_dco", {sortBy: 'totalcauseddamage'}).addColumn("battle_ohi", {sortBy: 'takenhits'}).addColumn("battle_ofa", {sortBy: 'dodgecount'}).addColumn("battle_odm", {sortBy: 'takendamage'}).addColumn("battle_avd", {sortBy: 'avg_damage'}).addColumn("battle_okh", {sortBy: 'ko_shots'}).addColumn("battle_onl", {sortBy: 'onlinecount'}).appendToThCell("head", "battle_nam", 'Имя', 'Имя').appendToThCell("head", "battle_tow", 'Город', 'Город').appendToThCell("head", "battle_shp", 'Исходное здоровье', '&nbsp;').appendToThCell("head", "battle_ehp", 'Здоровье после битвы', '&nbsp;').appendToThCell("head", "battle_fla", 'Количество раундов у флага', '&nbsp;').appendToThCell("head", "battle_hco", 'Количество попаданий', '&nbsp;').appendToThCell("head", "battle_fco", 'Количество промахов', '&nbsp;').appendToThCell("head", "battle_dco", 'Нанесённый урон', '&nbsp;').appendToThCell("head", "battle_ohi", 'Количество полученных ударов', '&nbsp;').appendToThCell("head", "battle_ofa", 'Количество уклонений', '&nbsp;').appendToThCell("head", "battle_odm", 'Полученный урон', '&nbsp;').appendToThCell("head", "battle_avd", 'Средний нанесённый урон', '&nbsp;').appendToThCell("head", "battle_okh", 'Количество обезвреженных противников', '&nbsp;').appendToThCell("head", "battle_onl", 'Количество раундов онлайн', '&nbsp;')
        $('div.cemetery-content', CemeteryWindow.DOM).empty().append(CemeteryWindow.table.getMainDiv());
        $('div.row_head', CemeteryWindow.DOM).click(startSortDispatcher);
        CemeteryWindow.showStatInitData(battle_id, data);
    };
    var startSortDispatcher = function (ev) {
        var sortBy = '';
        if ($(ev.target).context.tagName == 'SPAN') {
            sortBy = $(ev.target).parent('div.cell').data('sortBy');
        }
        else {
            sortBy = $(ev.target).data('sortBy');
        }
        if (sortByObj.sortBy == sortBy) {
            sortByObj.orderBy = sortByObj.orderBy == 'asc' ? 'desc' : 'asc';
            CemeteryWindow.currentStats.reverse();
        }
        else {
            sortByObj.sortBy = sortBy;
            sortByObj.orderBy = 'asc';
            switch (sortBy) {
                case'name':
                case'townname':
                    CemeteryWindow.currentStats.sort(sortStrings(sortBy));
                    break;
                case'ko_shots':
                    CemeteryWindow.currentStats.sort(sortLength(sortBy));
                    break;
                default:
                    if ($.isNumeric(CemeteryWindow.currentStats[0][sortBy]))CemeteryWindow.currentStats.sort(sortNumbers(sortBy));
                    break;
            }
        }
        updatePlayerStatTable(CemeteryWindow.currentStats);
    };
    var sortLength = function (col) {
        return function (a, b) {
            return a[col].length - b[col].length;
        };
    };
    var sortNumbers = function (col) {
        return function (a, b) {
            return a[col] - b[col];
        };
    };
    var sortStrings = function (col) {
        return function (a, b) {
            return a[col].toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") > b[col].toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") ? 1 : -1;
        };
    };
    CemeteryWindow.showStatInitData = function (battle_id, data) {
        var callback = function (data) {
            CemeteryWindow.showStatUpdateTable(data);
        };
        if (data) {
            callback(data);
        } else {
            Ajax.remoteCallMode('fort_battleresultpage', "get_battle", {battle_id: battle_id}, function (data) {
                if (data.error)return new UserMessage(data.msg).show();
                CemeteryWindow.currentStats = data.stats;
                callback(data.stats);
            }, CemeteryWindow);
        }
    }
    var updatePlayerStatTable = function () {
        CemeteryWindow.table.clearBody();
        var tmpCells = {};
        for (var i = 0; i < CemeteryWindow.currentStats.length; i++) {
            var rd = CemeteryWindow.currentStats[i];
            tmpCells['battle_nam'] = rd.name;
            tmpCells['battle_tow'] = rd.townname;
            tmpCells['battle_shp'] = rd.starthp;
            tmpCells['battle_ehp'] = rd.finishedhp;
            tmpCells['battle_fla'] = rd.flagholdcount;
            tmpCells['battle_hco'] = rd.hitcount;
            tmpCells['battle_fco'] = rd.misscount;
            tmpCells['battle_dco'] = rd.totalcauseddamage;
            tmpCells['battle_ohi'] = rd.takenhits;
            tmpCells['battle_ofa'] = rd.dodgecount;
            tmpCells['battle_odm'] = rd.takendamage;
            tmpCells['battle_avd'] = rd.avg_damage;
            tmpCells['battle_okh'] = rd.ko_shots.length;
            tmpCells['battle_onl'] = rd.onlinecount;
            CemeteryWindow.table.buildRow('battlestat ' + (rd.battle_type == 'defender' ? 'tw_blue' : 'tw_red'), tmpCells, addKoShotTitle(rd.ko_shots));
        }
    };
    var addKoShotTitle = function (koShots) {
        return function (row) {
            if (koShots.length) {
                $('.battle_okh', row).attr('title', koShots.join(', '));
            }
            return row;
        }
    };
    CemeteryWindow.showStatUpdateTable = function (data) {
        CemeteryWindow.currentStats = [];
        var preparePlayerData = function (rowData) {
            rowData['avg_damage'] = rowData.hitcount > 0 ? Math.floor(rowData.totalcauseddamage / rowData.hitcount + .5) : 0;
            rowData['ko_shots'] = killer[rowData.westid] ? killer[rowData.westid] : [];
            CemeteryWindow.currentStats.push(rowData);
            return rowData;
        };
        var resmessages = {
            ATTACKER_WIPED: 'Отстояли! Противник отступил!',
            DEFENDER_WIPED: 'Форт пал, оборона разбита.',
            FINALROUND: 'Форт выстоял. После тяжёлой битвы агрессор вынужден был отступить.',
            FLAGLOST: 'Форт пал. В ходе кровопролитного сражения противник захватил флаг и деморализовал защитников форта.'
        };
        var playersbyid = {};
        for (i = 0; i < data.result.attackerlist.length; i += 1) {
            var item = data.result.attackerlist[i];
            playersbyid[item.westid] = item;
        }
        for (i = 0; i < data.result.defenderlist.length; i += 1) {
            var item = data.result.defenderlist[i];
            playersbyid[item.westid] = item;
        }
        var killer = {};
        for (var z in playersbyid) {
            if (!playersbyid.hasOwnProperty(z))continue;
            if (playersbyid[z].killedby == -1)continue;
            if (killer[playersbyid[z].killedby])
                killer[playersbyid[z].killedby].push(playersbyid[z].name); else
                killer[playersbyid[z].killedby] = [playersbyid[z].name];
        }
        var tmpCells = {};
        var defenderdied = 0;
        var attackerdied = 0;
        var row = data.result.attackerlist;
        for (var i = 0; i < row.length; i++) {
            var rd = preparePlayerData(row[i]);
            CemeteryWindow.currentStats[i]['battle_type'] = 'attacker';
            if (rd.finishedhp <= 0)attackerdied++;
            tmpCells['battle_nam'] = rd.name;
            tmpCells['battle_tow'] = rd.townname;
            tmpCells['battle_shp'] = rd.starthp;
            tmpCells['battle_ehp'] = rd.finishedhp;
            tmpCells['battle_fla'] = rd.flagholdcount;
            tmpCells['battle_hco'] = rd.hitcount;
            tmpCells['battle_fco'] = rd.misscount;
            tmpCells['battle_dco'] = rd.totalcauseddamage;
            tmpCells['battle_ohi'] = rd.takenhits;
            tmpCells['battle_ofa'] = rd.dodgecount;
            tmpCells['battle_odm'] = rd.takendamage;
            tmpCells['battle_avd'] = rd.avg_damage;
            tmpCells['battle_okh'] = rd.ko_shots.length;
            tmpCells['battle_onl'] = rd.onlinecount;
            CemeteryWindow.table.buildRow('battlestat tw_red', tmpCells, addKoShotTitle(rd.ko_shots));
        }
        row = data.result.defenderlist;
        for (var j = 0; j < row.length; j++) {
            var rd = preparePlayerData(row[j]);
            CemeteryWindow.currentStats[i + j]['battle_type'] = 'defender';
            if (rd.finishedhp <= 0)defenderdied++;
            tmpCells['battle_nam'] = rd.name;
            tmpCells['battle_tow'] = rd.townname;
            tmpCells['battle_shp'] = rd.starthp;
            tmpCells['battle_ehp'] = rd.finishedhp;
            tmpCells['battle_fla'] = rd.flagholdcount;
            tmpCells['battle_hco'] = rd.hitcount;
            tmpCells['battle_fco'] = rd.misscount;
            tmpCells['battle_dco'] = rd.totalcauseddamage;
            tmpCells['battle_ohi'] = rd.takenhits;
            tmpCells['battle_ofa'] = rd.dodgecount;
            tmpCells['battle_odm'] = rd.takendamage;
            tmpCells['battle_avd'] = rd.avg_damage;
            tmpCells['battle_okh'] = rd.ko_shots.length;
            tmpCells['battle_onl'] = rd.onlinecount;
            CemeteryWindow.table.buildRow('battlestat tw_blue', tmpCells, addKoShotTitle(rd.ko_shots));
        }
        var txfight = '<span class="tw_red text_bold">' + s(ngettext('%1 боец напал на форт.', new Array('%1 боец напал на форт.', '%1 бойца напали на форт.', '%1 бойцов напали на форт.'), data.attacker_count), data.attacker_count) + '</span>';
        txfight += " " + '<span class="tw_blue text_bold">' + s(ngettext('%1 боец вышел на защиту форта.', new Array('%1 боец вышел на защиту форта.', '%1 бойца вышли на защиту форта.', '%1 бойцов вышли на защиту форта.'), data.defender_count), data.defender_count) + '</span>';
        var txdied = '<span class="tw_red text_bold">' + s(ngettext('%1 атакующий пал в бою.', new Array('%1 атакующий пал в бою.', '%1 атакующих пали в бою.', '%1 атакующих пали в бою.'), attackerdied), attackerdied) + '</span>';
        txdied += " " + '<span class="tw_blue text_bold">' + s(ngettext('%1 защитник пал в бою.', new Array('%1 защитник пал в бою.', '%1 защитника пали в бою.', '%1 защитников пали в бою.'), defenderdied), defenderdied) + '</span>';
        $('div.tw2gui_window_content_pane', CemeteryWindow.DOM).append('<div class="info">' + resmessages[data.battle_outcome] + '</div>');
        $('div.footer', CemeteryWindow.DOM).empty().append(txfight + "</br>", txdied + "</br>", data.maneuver ? 'К счастью, это были всего лишь учения.' : "<a href='javascript:CemeteryWindow.init();'>" + 'Назад' + "</a>");
    }
})(jQuery);
;
(function ($) {
    window.DailyActivitiesWindow = {
        listTable: null,
        weekTable: null,
        tasks: {},
        finished_activities: 0,
        days_finished: 0,
        today: 0,
        week_progressbar: null,
        logTable: null,
        List: {DOM: null},
        Log: {DOM: null}
    };
    DailyActivitiesWindow.open = function () {
        if (Character.level < west.Feature.daily) {
            new UserMessage(s("Ежедневные квесты (Дежавю) будут доступны, когда достигнешь %1-го уровня.", west.Feature.daily), 'hint').show();
            return;
        }
        var tabclick = function (win, id) {
            DailyActivitiesWindow.showTab(id);
        }
        DailyActivitiesWindow.window = wman.open("daily_activity").setMiniTitle('Задания').addTab('Задания', 'list', tabclick).addTab('Облигации', 'log', tabclick).appendToContentPane($('<div class="daily_activity-list"/>'), $('<div class="daily_activity-log"/>'));
        DailyActivitiesWindow.tasks['playerduels'] = '<span title="' + 'Дуэли с любыми игроками на карте' + '">' + 'Дуэли с игроками' + '</span>';
        DailyActivitiesWindow.tasks['quests'] = '<span title="' + 'Выполненные сегодня задания' + '">' + 'Ежедневные задания' + '</span>';
        DailyActivitiesWindow.tasks['crafts'] = '<span title="' + 'Изготовленные предметы твоей профессии' + '">' + 'Изготовленные предметы' + '</span>';
        DailyActivitiesWindow.tasks['npcduels'] = '<span title="' + 'Дуэли с неигровыми бандитами' + '">' + 'Дуэли с бандитами' + '</span>';
        DailyActivitiesWindow.window.setTitle('Ежедневные задания');
        DailyActivitiesWindow.Log.infoShown = false;
        DailyActivitiesWindow.List.init();
        EventHandler.listen('activity_changed', DailyActivitiesWindow.updateActivityStatus, null, {boundto: DailyActivitiesWindow.window});
    };
    wman.registerReloadHandler(/^daily_activity/, DailyActivitiesWindow.open);
    DailyActivitiesWindow.showTab = function (id) {
        if (!DailyActivitiesWindow.window)return;
        DailyActivitiesWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *', DailyActivitiesWindow.DOM).each(function (i, e) {
            if ($(e).hasClass('daily_activity-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'list':
                DailyActivitiesWindow.window.setTitle('Ежедневные задания');
                DailyActivitiesWindow.List.init();
                break;
            case'log':
                DailyActivitiesWindow.window.setTitle('Журнал облигаций Ю.П.');
                DailyActivitiesWindow.Log.init();
                break;
            default:
                DailyActivitiesWindow.window.setTitle('Ежедневные задания');
                DailyActivitiesWindow.List.init();
                break;
        }
    }
    DailyActivitiesWindow.List.init = function () {
        var maindiv = $('<div class="daily_activities"></div>');
        DailyActivitiesWindow.listTable = new west.gui.Table().setId('dailyactivity_table').createEmptyMessage('Ничего не найдено!').appendTo(maindiv).addColumn("dal_task").addColumn("dal_status").appendToThCell("head", "dal_task", 'Ежедневные задания', '<span class="task_icon">&nbsp;</span>&nbsp;' + 'Поручения').appendToThCell("head", "dal_status", 'Состояние (достаточно / не достаточно)', '<span class="status_icon">&nbsp;</span>&nbsp;' + 'Статус').appendToFooter('dal_task', 'Сегодняшние поручения')
        $('<br /><div class="group_devider">&nbsp;</div>').appendTo(maindiv);
        DailyActivitiesWindow.weekTable = new west.gui.Table().setId('weekstatus_table').createEmptyMessage('Ничего не найдено!').appendTo(maindiv).addColumn("dal_monday").addColumn("dal_tuesday").addColumn("dal_wednesday").addColumn("dal_thursday").addColumn("dal_friday").addColumn("dal_saturday").addColumn("dal_sunday").appendToThCell("head", "dal_monday", 'Понедельник', 'Пн').appendToThCell("head", "dal_tuesday", 'Вторник', 'Вт').appendToThCell("head", "dal_wednesday", 'Среда', 'Ср').appendToThCell("head", "dal_thursday", 'Четверг', 'Чт').appendToThCell("head", "dal_friday", 'Пятница', 'Пт').appendToThCell("head", "dal_saturday", 'Суббота', 'Сб').appendToThCell("head", "dal_sunday", 'Воскресенье', 'Вс');
        DailyActivitiesWindow.week_progressbar = new west.gui.Progressbar(0, 5);
        DailyActivitiesWindow.window.$('div.daily_activity-list', DailyActivitiesWindow.DOM).empty().append(maindiv);
        DailyActivitiesWindow.List.initData();
    }
    DailyActivitiesWindow.List.initData = function () {
        Ajax.remoteCallMode('daily', 'get_data', {}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            Character.setDailyTasks(json.status);
            DailyActivitiesWindow.List.updateTable(json);
        }, DailyActivitiesWindow);
    }
    DailyActivitiesWindow.updateActivityStatus = function (key) {
        if (!key)return false;
        var rowObj = DailyActivitiesWindow.window.$('div.activityListData_' + key);
        var status = parseInt(Character.dailyTasks[key].finished);
        $('div.dal_status', rowObj).html(new west.gui.Progressbar(status, Character.dailyTasks[key].required).setEndless().getMainDiv());
        if (status == parseInt(Character.dailyTasks[key].required)) {
            DailyActivitiesWindow.finished_activities++;
            DailyActivitiesWindow.window.$('div.row_foot div.dal_status').html(new west.gui.Progressbar(DailyActivitiesWindow.finished_activities, 3).setEndless().getMainDiv());
            new UserMessage('Ежедневные поручения выполнены', UserMessage.TYPE_SUCCESS).show();
        }
        setStatus4Today();
    }
    var setStatus4Today = function () {
        if (DailyActivitiesWindow.finished_activities >= 3) {
            DailyActivitiesWindow.window.$('#weekstatus_table div.tbody div.cell_' + DailyActivitiesWindow.today).html('<img src="https://westrus.innogamescdn.com/images/window/dailyactivity/positive.png" />');
            new UserMessage('Все сегодняшние поручения выполнены', UserMessage.TYPE_SUCCESS).show();
        }
    }
    DailyActivitiesWindow.List.updateTable = function (data) {
        DailyActivitiesWindow.listTable.clearBody();
        DailyActivitiesWindow.weekTable.clearBody();
        var tmpCells = {};
        DailyActivitiesWindow.finished_activities = 0;
        DailyActivitiesWindow.days_finished = 0;
        DailyActivitiesWindow.today = data.today;
        var fillTaskRow = function (key, actual, target) {
            if (actual >= target) {
                DailyActivitiesWindow.finished_activities++;
            }
            tmpCells['dal_task'] = DailyActivitiesWindow.tasks[key];
            tmpCells['dal_status'] = new west.gui.Progressbar(actual, target).setEndless().getMainDiv().jq2Html();
            DailyActivitiesWindow.listTable.buildRow('activityListData_' + key, tmpCells);
        }
        for (var t in data.status) {
            fillTaskRow(t, data.status[t]["finished"], data.status[t]["required"]);
        }
        DailyActivitiesWindow.window.$('div.row_foot div.dal_status').html(new west.gui.Progressbar(DailyActivitiesWindow.finished_activities, 3).getMainDiv());
        tmpCells = {};
        var i = 0;
        $.each({
            'mon': 'monday',
            'tue': 'tuesday',
            'wed': 'wednesday',
            'thu': 'thursday',
            'fri': 'friday',
            'sat': 'saturday',
            'sun': 'sunday'
        }, function (k, v) {
            if (data.days[i])DailyActivitiesWindow.days_finished++;
            tmpCells['dal_' + v] = i < DailyActivitiesWindow.today ? '<img src="' + (data.days[i] ? 'https://westrus.innogamescdn.com/images/window/dailyactivity/positive.png' : 'https://westrus.innogamescdn.com/images/window/dailyactivity/negative.png') + '" />' : '';
            i++;
        });
        DailyActivitiesWindow.weekTable.buildRow('dal_activityWeekList', tmpCells);
        setStatus4Today();
        if (DailyActivitiesWindow.days_finished >= 5)
            new UserMessage('Все недельные поручения выполнены', UserMessage.TYPE_SUCCESS).show();
    }
    DailyActivitiesWindow.Log.init = function () {
        DailyActivitiesWindow.Log.DOM = $('div.daily_activity-log', DailyActivitiesWindow.window);
        var maindiv = $('<div class="upb-list"></div>');
        DailyActivitiesWindow.logTable = new west.gui.Table().setId('upblog_table').createEmptyMessage('Ничего не найдено!').appendTo(maindiv).addColumn("upbl_date").addColumn("upbl_diff").addColumn("upbl_oldupb").addColumn("upbl_newupb").addColumn("upbl_infos").appendToThCell("head", "upbl_date", 'Дата смены', 'Дата').appendToThCell("head", "upbl_diff", 'Изменение', 'Изменение').appendToThCell("head", "upbl_oldupb", 'Старое количество облигаций Ю.П.', 'Было').appendToThCell("head", "upbl_newupb", 'Новое количество облигаций Ю.П.', 'Стало').appendToThCell("head", "upbl_infos", 'Дополнительная информация', 'Информация');
        DailyActivitiesWindow.window.$('div.daily_activity-log', DailyActivitiesWindow.Log.DOM).empty().append(maindiv);
        DailyActivitiesWindow.Log.initData();
    }
    DailyActivitiesWindow.Log.initData = function () {
        Ajax.remoteCallMode('daily', 'log', {}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            DailyActivitiesWindow.Log.updateTable(json.msg.log);
        }, DailyActivitiesWindow);
    }
    var prepareData = function (logObj) {
        var obj = {};
        obj['log_date'] = logObj['log_date_fmt'];
        obj['diff'] = logObj['coupon_change'];
        obj['newupb'] = logObj['coupon_carrying'];
        obj['oldupb'] = parseInt(logObj['coupon_carrying'] - logObj['coupon_change']);
        obj['infos'] = getLogInfo(logObj);
        return obj;
    }
    var getReason4Add = function (additional) {
        if (additional.containsString('finished activities') || additional.containsString('active week'))
            return 'Ежедневные задания'; else if (additional.containsString('fortbattle'))
            return 'Битва за форт'; else if (additional.containsString('jobID'))
            return 'Найдено во время работы'; else if (additional.containsString('travelling'))
            return 'Награда цирка'; else
            return 'Другое';
    };
    var getLogInfo = function (logObj) {
        if (logObj.reason.containsString('wof'))
            return 'Колесо удачи';
        switch (logObj.reason) {
            case'itemshop':
                return 'Покупка в магазине Юнион Пасифик';
                break;
            case'quest':
                return 'Вознаграждение за задание';
                break;
            case'achievement':
                return 'Вознаграждение за достижение';
                break;
            case'admintool':
                return 'Администратор';
                break;
            case'itemuse':
                return 'Использованный предмет';
                break;
            case'add':
                return getReason4Add(logObj.additional);
                break;
            default:
                return 'Другое';
                break;
        }
    };
    DailyActivitiesWindow.Log.updateTable = function (data) {
        DailyActivitiesWindow.logTable.clearBody();
        var tmpCells = {};
        for (var i = 0; i < data.length; i++) {
            var a = prepareData(data[i]);
            tmpCells['upbl_date'] = a.log_date;
            tmpCells['upbl_diff'] = a.diff;
            tmpCells['upbl_oldupb'] = a.oldupb;
            tmpCells['upbl_newupb'] = a.newupb;
            tmpCells['upbl_infos'] = a.infos;
            DailyActivitiesWindow.logTable.buildRow('upbListData_' + i, tmpCells);
        }
    }
})(jQuery);
;
(function ($) {
    window.MarketWindow = {
        DOM: '*',
        WhatIsHot: {},
        Buy: {currentPage: 1, sort: 'bid', order: 'asc', searchById: false},
        Sell: {},
        Offer: {},
        Watchlist: {},
        townId: 0,
        is_attown: false,
        wihTable: null,
        buyTable: null,
        buyTable2: null,
        sellTable: null,
        offerTable: null,
        watchlistTable: null,
        dataStore: [],
        filterRadioValue: 2,
        maxstage: 10,
        currentStage: 1
    };
    MarketWindow.open = function (town_id, currStage) {
        var tabclick = function (win, id) {
            MarketWindow.showTab(id);
        }
        this.townId = town_id;
        this.currentStage = currStage;
        MarketWindow.window = wman.open("marketplace").setMiniTitle('Рынок').addTab('Завершающиеся', 'whatishot', tabclick).addTab('Покупка', 'buy', tabclick).addTab('Продажа', 'sell', tabclick).addTab('Ставки', 'offer', tabclick).addTab('Наблюдение', 'watchlist', tabclick).appendToContentPane($('<div class="marketplace-whatishot"/>'), $('<div class="marketplace-buy"/>'), $('<div class="marketplace-sell"/>'), $('<div class="marketplace-offer"/>'), $('<div class="marketplace-watchlist"/>'));
        MarketWindow.DOM = $('div.marketplace');
        MarketWindow.Buy.infoShown = false;
        MarketWindow.Sell.infoShown = false;
        MarketWindow.Offer.infoShown = false;
        MarketWindow.Watchlist.infoShown = false;
        MarketWindow.showTab('whatishot');
        MarketWindow.window.setTitle('Завершающиеся');
        Inventory.open(MarketWindow.window, {callback: this.onInventoryClick, context: this, window: this.window});
    };
    MarketWindow.onInventoryClick = function (item) {
        if (this.window.currentActiveTabId != 'sell')
            return false;
        this.createMarketOffer(item.obj.item_id);
        return true;
    };
    wman.registerReloadHandler(/^marketplace/, function () {
        MarketWindow.open(this.townId, this.currentStage);
    });
    MarketWindow.showTab = function (id) {
        if (!MarketWindow.window)return;
        MarketWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *', MarketWindow.DOM).each(function (i, e) {
            if ($(e).hasClass('marketplace-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'whatishot':
                MarketWindow.WhatIsHot.init();
                MarketWindow.window.setTitle('Завершающиеся');
                break;
            case'buy':
                MarketWindow.window.setTitle('Купить');
                MarketWindow.Buy.init();
                break;
            case'sell':
                MarketWindow.window.setTitle('Продажа');
                MarketWindow.Sell.init();
                break;
            case'offer':
                MarketWindow.window.setTitle('Твои ставки');
                MarketWindow.Offer.init();
                break;
            case'watchlist':
                MarketWindow.window.setTitle('Наблюдаемые предложения');
                MarketWindow.Watchlist.init();
                break;
            default:
                MarketWindow.window.setTitle('Завершающиеся');
                MarketWindow.WhatIsHot.init();
                break;
        }
    }
    MarketWindow.getLevelFilter = function (id, maxLevel, steps) {
        if ("number" != typeof(maxLevel) || maxLevel < 1)maxLevel = 150;
        if ("number" != typeof(steps) || steps < 1)steps = 10;
        var lv = new west.gui.Combobox(id).setWidth(100).addItem('0-', 'Все уровни').select('0-');
        for (var i = 1; i <= (maxLevel / steps); i++) {
            var end = i * steps;
            var start = end - (steps - 1);
            var range = "%1 — %2".replace("%1", start).replace("%2", end);
            lv.addItem(start + '-' + end, range);
        }
        return lv;
    };
    MarketWindow.WhatIsHot.init = function () {
        MarketWindow.dataStore = [];
        var maindiv = $('<div class="market-whatishot"></div>');
        var invBox = $('<div id="wih_marketoffers"/>').click(function () {
            west.window.shop.open('market_window');
        }).css('cursor', 'pointer');
        $('<span id="label4WihBanner">' + 'Магазин Ю.П.' + '</span>').appendTo(invBox);
        var filter = $('<div class="searchfilter">'
            + '<div class="filter_usable"/>'
            + '<div class="filter_offercategory" title="' + 'Рассортировать предложения по категориям' + '" />'
            + '<div class="filter_level" title="' + 'Рассортировать предложения по уровню игроков' + '"/></div>');
        $('div.filter_usable', filter).append(new west.gui.Checkbox('<img src="https://westrus.innogamescdn.com/images/icons/icon_usable.png" />' + 'Подобранные' + '&nbsp;&nbsp;').setSelected(true).setId('wihFilterIsUsable').setTooltip('Только предметы, которыми может пользоваться твой персонаж').getMainDiv(), $('<br />'), new west.gui.Checkbox('<img src="https://westrus.innogamescdn.com/images/icons/icon_consumable.png" />' + 'Используемые').setId('wihFilterHasEffect').setTooltip('Только предметы, которые можно использовать').getMainDiv());
        if (Character.townRights > 0) {
            $('div.filter_offercategory', filter).append
            (new west.gui.Combobox('wih_offercat').setWidth(80).addItem(0, '<img src="https://westrus.innogamescdn.com/images/icons/town_new.png" />&nbsp;' + 'Город').addItem(1, '<img src="https://westrus.innogamescdn.com/images/icons/friends.png" />&nbsp;' + 'Альянс').addItem(2, '<img src="https://westrus.innogamescdn.com/images/icons/welt.png" />&nbsp;' + 'Мир').select(2).addListener(MarketWindow.WhatIsHot.initData).getMainDiv());
        }
        $('div.filter_level', filter).append(MarketWindow.getLevelFilter('wih_filterLevel').addListener(MarketWindow.WhatIsHot.initData).getMainDiv());
        maindiv.append(invBox, filter, $('<div class="market_devider_top" />'), $('<div class="market_devider_bottom" />'));
        $('div.filter_usable > div', maindiv).click(MarketWindow.WhatIsHot.initData);
        MarketWindow.wihTable = new west.gui.Table().setId('market_wihtable').createEmptyMessage('Нет соответствующих предложений').appendTo(maindiv).addColumn("wih_itemimage").addColumn("wih_article").addColumn("wih_stack").addColumn("wih_buynow").addColumn("wih_bid").addColumn("wih_distance").addColumn("wih_timeto").addColumn("wih_vendor").addColumn("wih_pickup").appendToThCell("head", "wih_article", 'Предлагаемые предметы', '&nbsp;').appendToThCell("head", "wih_stack", 'Количество', '&nbsp;').appendToThCell("head", "wih_buynow", 'Цена без торга', '&nbsp;').appendToThCell("head", "wih_bid", 'Ставка', '&nbsp;').appendToThCell("head", "wih_distance", 'Расстояние', '&nbsp;').appendToThCell("head", "wih_timeto", 'Предложение всё ещё в силе', '&nbsp;').appendToThCell("head", "wih_vendor", 'Продавец', '&nbsp;').appendToThCell("head", "wih_pickup", 'Наблюдать за торгами' + ' / ' + 'сделать ставку', '&nbsp;');
        $('div.wih_vendor', maindiv).data('sortBy', 'wih_vendor');
        $('div.wih_stack', maindiv).data('sortBy', 'wih_stack');
        $('div.wih_article', maindiv).data('sortBy', 'wih_article');
        $('div.wih_buynow', maindiv).data('sortBy', 'wih_buynow');
        $('div.wih_bid', maindiv).data('sortBy', 'wih_bid');
        $('div.wih_distance', maindiv).data('sortBy', 'wih_distance');
        $('div.wih_timeto', maindiv).data('sortBy', 'wih_timeto');
        $('div.wih_vendor, div.wih_stack, div.wih_article, div.wih_buynow, div.wih_bid, div.wih_distance, div.wih_timeto', maindiv).click(sortDataDispatcher);
        MarketWindow.window.$('div.marketplace-whatishot', MarketWindow.DOM).empty().append(maindiv);
        MarketWindow.WhatIsHot.initData();
    }
    MarketWindow.WhatIsHot.initData = function () {
        var sort = 'price';
        var view_cat = $('#wih_offercat', MarketWindow.DOM).data('value');
        view_cat = typeof view_cat == 'number' ? view_cat : 2;
        var usable = $("#wihFilterIsUsable", MarketWindow.DOM).hasClass('tw2gui_checkbox_checked');
        var effect = $("#wihFilterHasEffect", MarketWindow.DOM).hasClass('tw2gui_checkbox_checked');
        var level = $('#wih_filterLevel', MarketWindow.DOM).data('value').toString().split('-');
        var fromLevel = level[0];
        var toLevel = level[1];
        Ajax.remoteCall('building_market', 'search_hot', {
            sort: sort,
            level_range_min: fromLevel,
            level_range_max: toLevel,
            usable: usable,
            has_effect: effect,
            visibility: view_cat
        }, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            if (json.msg.search_result.length == 0) {
                MarketWindow.wihTable.clearBody();
                $('#market_wihtable div.no-content', MarketWindow.DOM).show();
                return true;
            }
            MarketWindow.WhatIsHot.updateTable(json.msg.search_result);
        }, MarketWindow);
    }
    var prepareData = function (offerObj, itemData) {
        offerObj.currentBid = offerObj.current_bid || offerObj.auction_price;
        offerObj.itemName = itemData.name;
        offerObj.itemLabel = new tw2widget.TableRowItem(itemData);
        offerObj.distance = marketDistance(offerObj.market_town_x, offerObj.market_town_y);
        offerObj['singlePrice'] = offerObj.item_count > 1 ? parseInt(offerObj.currentBid / offerObj.item_count) : offerObj.currentBid;
        offerObj['singleMaxPrice'] = offerObj.item_count > 1 ? parseInt(offerObj.max_price / offerObj.item_count) : offerObj.max_price;
        if (offerObj.description != null && offerObj.description != '') {
            offerObj.description = offerObj.description.prepareTextblock(50);
            offerObj.descriptionImg = '<img src="https://westrus.innogamescdn.com/images/infopoint.png" title="' + offerObj.description.escapeHTML() + '" />&nbsp;';
        }
        else
            offerObj.descriptionImg = '';
        if (offerObj.auction_ends_in <= 0) {
            offerObj.auction_ends_in = 0;
            offerObj.pickupIcon = '<img id="mpo_marketFetch_' + offerObj.market_offer_id + '" src="https://westrus.innogamescdn.com/images/market/fetch.png" title="' + 'Забрать товар' + '" alt="" />';
            offerObj.bidIcon = '';
            offerObj.watchIcon = '';
            offerObj.isFinished = true;
        }
        else {
            if (!isNaN(parseInt(offerObj.max_price)) && offerObj.current_bid == parseInt(offerObj.max_price)) {
                offerObj.auction_ends_in = 0;
                offerObj.pickupIcon = '<img id="mpo_marketFetch_' + offerObj.market_offer_id + '" src="https://westrus.innogamescdn.com/images/market/fetch.png" title="' + 'Забрать товар' + '" alt="" />';
                offerObj.bidIcon = '';
                offerObj.watchIcon = '';
                offerObj.isFinished = true;
            }
            else {
                offerObj.pickupIcon = '';
                offerObj.bidIcon = '<img src="https://westrus.innogamescdn.com/images/icons/bid.png" title="' + 'Ставка' + '" alt="" />';
                offerObj.watchIcon = '<img src="https://westrus.innogamescdn.com/images/icons/watch.png" title="' + 'Наблюдение' + '" alt="" />';
                offerObj.isFinished = false;
            }
        }
        if (offerObj.is_watched) {
            offerObj.watchIcon = '';
        }
        if (Character.playerId == offerObj.seller_player_id || offerObj.is_highest_bidder) {
            offerObj.pickupIcon = '';
            offerObj.bidIcon = '';
            offerObj.watchIcon = '';
        }
        return offerObj;
    }
    MarketWindow.escapeRow = function (row) {
        $('img', row).attr('title', function (ix, attr) {
            if (attr)return attr.escapeHTML();
            return undefined;
        });
        return row;
    };
    MarketWindow.WhatIsHot.updateTable = function (data) {
        MarketWindow.wihTable.clearBody();
        $('#market_wihtable div.no-content', MarketWindow.DOM).hide();
        var a;
        var itemData;
        var tmpCells = {};
        for (var i = 0; i < data.length; i++) {
            itemData = ItemManager.get(data[i].item_id);
            a = prepareData(data[i], itemData);
            if (a.isFinished)continue;
            tmpCells['wih_itemimage'] = '&nbsp;';
            tmpCells['wih_article'] = '<span title="' + a.itemLabel.obj.name + '">' + MarketWindow.getClearName(a.itemLabel.obj) + '</span>';
            tmpCells['wih_stack'] = '<div style="width: 16px;cursor:help" title="' + 'Количество' + ': ' + a.item_count + '">' + a.item_count + '</div>';
            tmpCells['wih_buynow'] = (a.max_price != null ? '<span title="' + s("Цена: %1", '$' + format_money(a.singleMaxPrice)).escapeHTML() + '">$' + format_money(a.max_price) + '</span>' : '');
            tmpCells['wih_bid'] = (a.currentBid != null ? '<span title="' + s("Цена: %1", '$' + format_money(a.singlePrice)).escapeHTML() + '">$' + format_money(a.currentBid) + '</span>' : '');
            tmpCells['wih_distance'] = '<span id="wih_distance_' + a.market_offer_id + '" class="linkstyle" title="' + 'Место продажи' + ': ' + a.market_town_name + '">' + a.distance + '</span>';
            tmpCells['wih_timeto'] = '<span title="' + s('Срок действия предложения: %1', a.auction_end_date.getFormattedTimeString4Timestamp()) + '">' + getTime2EndString(a.auction_ends_in) + '</span>';
            var playerhover = a.seller_town_name ? s('%1 из %2', a.seller_name, a.seller_town_name) : a.seller_name + " (" + "Без города".escapeHTML() + ")";
            tmpCells['wih_vendor'] = a.descriptionImg + '<span class="linkstyle" id="wih_vendor_' + a.market_offer_id + '" title="' + playerhover + '">' + a.seller_name + '</span>';
            tmpCells['wih_pickup'] = '';
            MarketWindow.wihTable.buildRow('marketWhatIsHotData_' + a.market_offer_id, tmpCells, MarketWindow.escapeRow);
            var rowSel = $('div.marketWhatIsHotData_' + a.market_offer_id, MarketWindow.DOM);
            $('div.wih_itemimage', rowSel).html(a.itemLabel.getMainDiv());
            if (a.is_highest_bidder)
                rowSel.css('font-weight', 'bold');
            if (a.watchIcon != '')
                rowSel.children('div.wih_pickup', MarketWindow.DOM).append($(a.watchIcon).attr('id', 'wih_marketOfferWatch_' + a.market_offer_id));
            if (a.bidIcon != '')
                rowSel.children('div.wih_pickup', MarketWindow.DOM).append($(a.bidIcon).attr('id', 'wih_marketOfferBid_' + a.market_offer_id));
            $('#wih_vendor_' + a.market_offer_id, rowSel).click
            ((function (id) {
                return function () {
                    PlayerProfileWindow.open(id);
                };
            })(a.seller_player_id));
            $('#wih_distance_' + a.market_offer_id, rowSel).click
            ((function (id, x, y) {
                return function () {
                    TownWindow.open(x, y);
                };
            })(a.market_town_id, a.market_town_x, a.market_town_y));
            $('#wih_marketOfferBid_' + a.market_offer_id, rowSel).click
            ((function (css, offerData) {
                return function () {
                    bid(css, offerData);
                };
            })('div.marketWhatIsHotData_' + a.market_offer_id, a));
            $('#wih_marketOfferWatch_' + a.market_offer_id, rowSel).click
            ((function (id) {
                return function () {
                    add2Watchlist(id);
                };
            })(a.market_offer_id));
        }
        MarketWindow.dataStore = data;
    }
    MarketWindow.Buy.updateCategory = function (category, data) {
        if (undefined === this['market_' + category])return;
        this['market_' + category].clearContent().setContent(getFilledContentbox(data));
        $('p.accordion_contentRow', MarketWindow.DOM).setDraggable();
    }
    var getFilledContentbox = function (data) {
        var scrollp = new west.gui.Scrollpane('', true);
        var items = convertArray2Items(data);
        for (var i = 0; i < items.length; i++) {
            scrollp.appendContent(items[i].click(clickHandler4Accordion));
        }
        return scrollp.getMainDiv();
    }
    var convertArray2Items = function (itemArray) {
        var itemlist = [];
        var tmpData = {};
        for (var i = 0; i < itemArray.length; i++) {
            tmpData = ItemManager.get(itemArray[i]);
            itemlist.push($('<p class="accordion_contentRow shorten">' + MarketWindow.getClearName(tmpData) + '</p>').data('itemId', tmpData.item_id).addMousePopup(new ItemPopup(tmpData).popup));
        }
        return itemlist;
    }
    MarketWindow.Buy.init = function () {
        MarketWindow.Buy.currentPage = 1;
        MarketWindow.Buy.sort = 'bid';
        MarketWindow.Buy.order = 'asc';
        MarketWindow.Buy.searchById = false;
        MarketWindow.dataStore = [];
        var maindiv = $('<div class="market-buy" />');
        var invBox = $('<div id="mpb_marketoffers"/>');
        invBox.append(new west.gui.Searchbox('market_search', searchForMarketOffers).setWidth(175).getMainDiv());
        var that = this;
        var categories = [['belt', 'Пояс'], ['body', 'Одежда'], ['right_arm', 'Дуэльное оружие'], ['head', 'Головной убор'], ['left_arm', 'Боевое оружие'], ['neck', 'Шейная повязка'], ['pants', 'Штаны'], ['yield', 'Продукт'], ['recipe', 'Совет мастера'], ['animal', 'Верховая езда'], ['foot', 'Обувь']];
        for (var i = 0; i < categories.length; i++) {
            that['market_' + categories[i][0]] = new west.gui.Accordion("mpb_" + categories[i][0], categories[i][1], 'marketBuy');
            invBox.append(that['market_' + categories[i][0]].getMainDiv().data('category', categories[i][0]));
        }
        var filter = $('<div class="searchfilter">'
            + '<div class="filter_usable"/>'
            + '<div class="filter_offercategory" title="' + 'Рассортировать предложения по категориям' + '" />'
            + '<div class="filter_level" title="' + 'Рассортировать предложения по уровню игроков' + '"/></div>');
        $('div.filter_usable', filter).append(new west.gui.Checkbox('<img src="https://westrus.innogamescdn.com/images/icons/icon_usable.png" />' + 'Подобранные' + '&nbsp;&nbsp;').setSelected(true).setId('buyFilterIsUsable').setTooltip('Только предметы, которыми может пользоваться твой персонаж').getMainDiv(), $('<br />'), new west.gui.Checkbox('<img src="https://westrus.innogamescdn.com/images/icons/icon_consumable.png" />' + 'Используемые').setId('buyFilterHasEffect').setTooltip('Только предметы, которые можно использовать').getMainDiv());
        if (Character.townRights > 0) {
            $('div.filter_offercategory', filter).append
            (new west.gui.Combobox('mpb_offercat').setWidth(80).addItem(0, '<img src="https://westrus.innogamescdn.com/images/icons/town_new.png" />&nbsp;' + 'Город').addItem(1, '<img src="https://westrus.innogamescdn.com/images/icons/friends.png" />&nbsp;' + 'Альянс').addItem(2, '<img src="https://westrus.innogamescdn.com/images/icons/welt.png" />&nbsp;' + 'Мир').select(2).getMainDiv());
        }
        $('div.filter_level', filter).append(MarketWindow.getLevelFilter('mpb_filterLevel').getMainDiv());
        filter.append(new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/icon_search.png', searchForMarketOffers, null, null).addClass('iconBut_mpb_refresh').getMainDiv());
        $('span.iSearchbox span.tw2gui_textfield input:text', invBox).keypress(function (e) {
            if (e.which == 13)$('span.iconBut_mpb_refresh', filter).click();
        });
        maindiv.append($('<div id="mpb_marketoffersBG"></div>'), invBox, filter, $('<div class="market_devider_top" />'), $('<div class="market_devider_bottom" />'));
        $('div.tw2gui_accordion_categorybar', maindiv).click(searchItems4Accordion);
        MarketWindow.buyTable = new west.gui.Table().setId('market_buytable').createEmptyMessage('Нет соответствующих предложений').appendTo(maindiv).addColumn("mpb_itemimage").addColumn("mpb_article").addColumn("mpb_stack").addColumn("mpb_buynow").addColumn("mpb_bid").addColumn("mpb_distance").addColumn("mpb_timeto").addColumn("mpb_vendor").addColumn("mpb_pickup").appendToThCell("head", "mpb_article", 'Предлагаемые предметы', '&nbsp;').appendToThCell("head", "mpb_stack", 'Количество', '&nbsp;').appendToThCell("head", "mpb_buynow", 'Цена без торга', '&nbsp;').appendToThCell("head", "mpb_bid", 'Ставка', '&nbsp;').appendToThCell("head", "mpb_distance", 'Расстояние', '&nbsp;').appendToThCell("head", "mpb_timeto", 'Предложение всё ещё в силе', '&nbsp;').appendToThCell("head", "mpb_vendor", 'Продавец', '&nbsp;').appendToThCell("head", "mpb_pickup", 'Наблюдать за торгами' + ' / ' + 'сделать ставку', '&nbsp;');
        $('div.mpb_article', maindiv).data('sortBy', 'article').click(sortTableContent);
        $('div.mpb_stack', maindiv).data('sortBy', 'stack').click(sortTableContent);
        $('div.mpb_buynow', maindiv).data('sortBy', 'buynow').click(sortTableContent);
        $('div.mpb_bid', maindiv).data('sortBy', 'bid').click(sortTableContent);
        $('div.mpb_distance', maindiv).data('sortBy', 'distance').click(sortTableContent);
        $('div.mpb_timeto', maindiv).data('sortBy', 'timeto').click(sortTableContent);
        $('div.mpb_vendor', maindiv).data('sortBy', 'vendor').click(sortTableContent);
        $('#market_buytable', maindiv).asDropzone(null, false, dragHandler4Accordion);
        $('div.row_foot', maindiv).empty().append($('<div id="m_pagenavi"></div>'));
        MarketWindow.window.$('div.marketplace-buy', MarketWindow.DOM).empty().append(maindiv);
    };
    MarketWindow.getClearName = function (obj) {
        if (obj.type == "recipe") {
            var name = obj.name.split(":");
            if (name.length != 2) {
                return obj.name;
            } else {
                return name[1];
            }
        }
        return obj.name;
    };
    MarketWindow.Buy.updateTable = function (data) {
        MarketWindow.buyTable.clearBody();
        var a;
        var itemData;
        var tmpCells = {};
        for (var i = 0; i < data.length; i++) {
            itemData = ItemManager.get(data[i].item_id);
            a = prepareData(data[i], itemData);
            if (a.isFinished)continue;
            tmpCells['mpb_itemimage'] = '&nbsp;';
            tmpCells['mpb_article'] = '<span title="' + a.itemLabel.obj.name + '">' + MarketWindow.getClearName(a.itemLabel.obj) + '</span>';
            tmpCells['mpb_stack'] = '<div style="width: 16px;cursor:help" title="' + 'Количество' + ': ' + a.item_count + '">' + a.item_count + '</div>';
            tmpCells['mpb_buynow'] = (a.max_price != null ? '<span title="' + s("Цена: %1", '$' + format_money(a.singleMaxPrice)).escapeHTML() + '">$' + format_money(a.max_price) + '</span>' : '');
            tmpCells['mpb_bid'] = (a.currentBid != null ? '<span title="' + s("Цена: %1", '$' + format_money(a.singlePrice)).escapeHTML() + '">$' + format_money(a.currentBid) + '</span>' : '');
            tmpCells['mpb_distance'] = '<span id="mpb_distance_' + a.market_offer_id + '" class="linkstyle" title="' + 'Место продажи' + ': ' + a.market_town_name + '">' + a.distance + '</span>';
            tmpCells['mpb_timeto'] = '<span title="' + s('Срок действия предложения: %1', a.auction_end_date.getFormattedTimeString4Timestamp()) + '">' + getTime2EndString(a.auction_ends_in) + '</span>';
            var playerhover = a.seller_town_name ? s('%1 из %2', a.seller_name, a.seller_town_name) : a.seller_name + " (" + "Без города".escapeHTML() + ")";
            tmpCells['mpb_vendor'] = a.descriptionImg + '<span class="linkstyle" id="mpb_vendor_' + a.market_offer_id + '" title="' + playerhover + '">' + a.seller_name + '</span>';
            tmpCells['mpb_pickup'] = '';
            MarketWindow.buyTable.buildRow('marketOffersData_' + a.market_offer_id, tmpCells, MarketWindow.escapeRow);
            var rowSel = $('div.marketOffersData_' + a.market_offer_id, MarketWindow.DOM);
            $('div.mpb_itemimage', rowSel).html(a.itemLabel.getMainDiv());
            if (a.is_highest_bidder)
                rowSel.css('font-weight', 'bold');
            if (a.watchIcon != '')
                $('div.mpb_pickup', rowSel).append($(a.watchIcon).attr('id', 'mpb_marketOfferWatch_' + a.market_offer_id));
            if (a.bidIcon != '')
                $('div.mpb_pickup', rowSel).append($(a.bidIcon).attr('id', 'mpb_marketOfferBid_' + a.market_offer_id));
            $('#mpb_vendor_' + a.market_offer_id, rowSel).click
            ((function (id) {
                return function () {
                    PlayerProfileWindow.open(id);
                };
            })(a.seller_player_id));
            $('#mpb_distance_' + a.market_offer_id, rowSel).click
            ((function (x, y) {
                return function () {
                    TownWindow.open(x, y);
                };
            })(a.market_town_x, a.market_town_y));
            $('#mpb_marketOfferBid_' + a.market_offer_id, rowSel).click
            ((function (css, offerData) {
                return function () {
                    bid(css, offerData);
                };
            })('div.marketOffersData_' + a.market_offer_id, a));
            $('#mpb_marketOfferWatch_' + a.market_offer_id, rowSel).click
            ((function (id) {
                return function () {
                    add2Watchlist(id);
                };
            })(a.market_offer_id));
        }
    };
    MarketWindow.Sell.collectAll = function (window) {
        var errorTown = false;
        var refreshList = function () {
            if (errorTown) {
                new MessageError(errorTown).show();
                return true;
            }
            EventHandler.signal('inventory_changed');
            MarketWindow[window].initData();
        };
        var action = ('Sell' === window) ? 'fetch_town_offers' : 'fetch_town_bids';
        Ajax.remoteCall('building_market', action, {}, function (resp) {
            errorTown = (resp.error) ? resp.msg : false;
            if (!resp.error) {
                Character.setDeposit(resp.deposit);
                Character.setMoney(resp.cash);
                return new MessageSuccess(resp.msg).show();
            }
        }, MarketWindow).done(function () {
            if (!Premium.buyable['marketdelivery'])return false;
            var action = ('Sell' === window) ? 'get_foreign_town_offers_price' : 'get_foreign_town_bids_price';
            Ajax.get('building_market', action, {}, function (resp) {
                if (resp.price) {
                    var context = ('Sell' === window) ? 'offers' : 'bids';
                    Premium.confirmUse("marketdelivery all " + MarketWindow.townId + " " + context, "Доставка", "У тебя до сих пор есть товар на других рынках. За несколько самородков ты его можешь получить прямо сейчас. Хочешь?", resp.price, null, function (resp) {
                        Character.setDeposit(resp.activationdata.deposit);
                        Character.setMoney(resp.activationdata.money);
                        EventHandler.signal('inventory_changed');
                        MarketWindow[window].initData();
                    }, refreshList);
                } else {
                    refreshList();
                }
            }, MarketWindow);
        });
    };
    MarketWindow.Sell.init = function () {
        MarketWindow.dataStore = [];
        var maindiv = $('<div class="market-sell"></div>');
        MarketWindow.sellTable = new west.gui.Table().setId('market_selltable').createEmptyMessage('На рынке нет твоих предложений').appendTo(maindiv).addColumn("mps_itemimage").addColumn("mps_article").addColumn("mps_stack").addColumn("mps_buynow").addColumn("mps_bid").addColumn("mps_distance").addColumn("mps_timeto").addColumn("mps_bestbidder").addColumn("mps_pickup").appendToThCell("head", "mps_article", 'Предлагаемые предметы', '&nbsp;').appendToThCell("head", "mps_stack", 'Количество', '&nbsp;').appendToThCell("head", "mps_buynow", 'Цена без торга', '&nbsp;').appendToThCell("head", "mps_bid", 'Текущая ставка', '&nbsp;').appendToThCell("head", "mps_distance", 'Расстояние до города', '&nbsp;').appendToThCell("head", "mps_timeto", 'До завершения осталось', '&nbsp;').appendToThCell("head", "mps_bestbidder", 'Наивысшая ставка', '&nbsp;').appendToThCell("head", "mps_pickup", 'Управление предложениями', '&nbsp;').appendToFooter('mps_pickup', s('<span title="%1">&nbsp;</span>', 'Забрать всё'));
        $('div.mps_article', maindiv).data('sortBy', 'mps_article');
        $('div.mps_stack', maindiv).data('sortBy', 'mps_stack');
        $('div.mps_buynow', maindiv).data('sortBy', 'mps_buynow');
        $('div.mps_bid', maindiv).data('sortBy', 'mps_bid');
        $('div.mps_distance', maindiv).data('sortBy', 'mps_distance');
        $('div.mps_timeto', maindiv).data('sortBy', 'mps_timeto');
        $('div.mps_bestbidder', maindiv).data('sortBy', 'mps_bestbidder');
        $('div.mps_article, div.mps_stack, div.mps_buynow, div.mps_bid, div.mps_bestbidder, div.mps_distance, div.mps_timeto', maindiv).click(sortDataDispatcher);
        $('.row_foot div.mps_pickup', maindiv).click(function () {
            MarketWindow.Sell.collectAll('Sell');
        });
        $('#market_selltable', maindiv).asDropzone('img.tw_item', false, MarketWindow.createMarketOffer);
        MarketWindow.window.$('div.marketplace-sell', MarketWindow.DOM).empty().append(maindiv);
        MarketWindow.Sell.initData();
    };
    MarketWindow.Sell.initData = function () {
        Ajax.remoteCall('building_market', 'fetch_offers', {page: 0}, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            if (json.msg.search_result.length == 0) {
                $('div.market-offer div.no-content', MarketWindow.DOM).show();
            }
            MarketWindow.Sell.updateTable(json.msg.search_result);
        }, MarketWindow);
    };
    var prepareSellData = function (sellObj, itemData) {
        sellObj.currentBid = sellObj.current_bid || sellObj.auction_price;
        sellObj.itemLabel = new tw2widget.TableRowItem(itemData);
        sellObj.itemName = sellObj.itemLabel.obj.name;
        sellObj.bidder_name = sellObj.bidder_name || '';
        sellObj.singlePrice = sellObj.item_count > 1 ? parseInt(sellObj.currentBid / sellObj.item_count) : sellObj.currentBid;
        sellObj.singleMaxPrice = sellObj.item_count > 1 ? parseInt(sellObj.max_price / sellObj.item_count) : sellObj.max_price;
        sellObj.distance = marketDistance(sellObj.market_town_x, sellObj.market_town_y);
        if (sellObj.description != null && sellObj.description != '') {
            sellObj.description = sellObj.description.prepareTextblock(50);
            sellObj.descriptionImg = '<img src="https://westrus.innogamescdn.com/images/infopoint.png" title="' + sellObj.description.escapeHTML() + '" />&nbsp;';
        }
        else
            sellObj.descriptionImg = '';
        if (sellObj.auction_ends_in <= 0) {
            sellObj.auction_ends_in = 0;
            if (sellObj.current_bid > 0) {
                sellObj.moneyIcon = '<img id="mps_marketFetchMoney_' + sellObj.market_offer_id + '" src="https://westrus.innogamescdn.com/images/market/fetch_money.png" title="' + (!isInTown(sellObj.market_town_x, sellObj.market_town_y) ? 'Забрать деньги' + ' (' + sellObj.market_town_name + ' - ' + 'Расстояние' + ': ' + sellObj.distance + ')' : 'Забрать деньги') + '" alt="" />';
                sellObj.offerIcon = '';
                sellObj.abortIcon = '';
            }
            else {
                sellObj.moneyIcon = '';
                sellObj.offerIcon = '<img id="mps_marketFetchOfferItem_' + sellObj.market_offer_id + '" src="https://westrus.innogamescdn.com/images/market/fetch.png" title="' + (!isInTown(sellObj.market_town_x, sellObj.market_town_y) ? 'Забрать товар' + ' (' + sellObj.market_town_name + ' - ' + 'Расстояние' + ': ' + sellObj.distance + ')' : 'Забрать товар') + '" alt="" />';
                sellObj.abortIcon = '';
            }
        }
        else {
            if (!isNaN(parseInt(sellObj.max_price)) && sellObj.current_bid == parseInt(sellObj.max_price)) {
                sellObj.auction_ends_in = 0;
                sellObj.moneyIcon = '<img id="mps_marketFetchMoney_' + sellObj.market_offer_id + '" src="https://westrus.innogamescdn.com/images/market/fetch_money.png" title="' + (!isInTown(sellObj.market_town_x, sellObj.market_town_y) ? 'Забрать деньги' + ' (' + sellObj.market_town_name + ' - ' + 'Расстояние' + ': ' + sellObj.distance + ')' : 'Забрать деньги') + '" alt="" />';
                sellObj.offerIcon = '';
                sellObj.abortIcon = '';
            }
            else {
                if (sellObj.current_bid > 0) {
                    sellObj.moneyIcon = '';
                    sellObj.offerIcon = '';
                    sellObj.abortIcon = '';
                }
                else {
                    sellObj.moneyIcon = '';
                    sellObj.offerIcon = '';
                    sellObj.abortIcon = '<img id="mps_marketAbortOffer_' + sellObj.market_offer_id + '" src="https://westrus.innogamescdn.com/images/icons/delete.png" title="' + (!isInTown(sellObj.market_town_x, sellObj.market_town_y) ? 'Отменить предложение' + ' (' + sellObj.market_town_name + ' - ' + 'Расстояние' + ': ' + sellObj.distance + ')' : 'Отменить предложение') + '" alt="" />';
                }
            }
        }
        return sellObj;
    }
    MarketWindow.Sell.updateTable = function (data) {
        MarketWindow.sellTable.clearBody();
        var sl;
        var itemData;
        var tmpCells = {};
        for (var i = 0; i < data.length; i++) {
            itemData = ItemManager.get(data[i].item_id);
            sl = prepareSellData(data[i], itemData);
            tmpCells['mps_itemimage'] = '&nbsp;';
            tmpCells['mps_article'] = '<span id="mps_article_' + sl.market_offer_id + '" title="' + sl.itemLabel.obj.name + '">' + MarketWindow.getClearName(sl.itemLabel.obj) + '</span>';
            tmpCells['mps_stack'] = sl.item_count;
            tmpCells['mps_buynow'] = (sl.max_price != null ? '<span title="' + s("Цена: %1", '$' + format_money(sl.singleMaxPrice)).escapeHTML() + '">$' + format_money(sl.max_price) + '</span>' : '');
            tmpCells['mps_bid'] = (sl.currentBid != null ? '<span title="' + s("Цена: %1", '$' + format_money(sl.singlePrice)).escapeHTML() + '">$' + format_money(sl.currentBid) + '</span>' : '');
            tmpCells['mps_distance'] = '<span id="mps_distance_' + sl.market_offer_id + '" class="linkstyle" title="' + 'Место продажи' + ': ' + sl.market_town_name + '">' + sl.distance + '</span>';
            tmpCells['mps_timeto'] = '<span title="' + s('Срок действия предложения: %1', sl.auction_end_date.getFormattedTimeString4Timestamp()) + '">' + getTime2EndString(sl.auction_ends_in) + '</span>';
            tmpCells['mps_bestbidder'] = (sl.bidder_name != null ? '<span class="linkstyle" id="mps_bestbidder_' + sl.market_offer_id + '" title="' + sl.bidder_name + '">' + sl.bidder_name + '</span>' : '');
            tmpCells['mps_pickup'] = '';
            MarketWindow.sellTable.buildRow('marketSellsData_' + sl.market_offer_id, tmpCells, MarketWindow.escapeRow);
            var rowSel = $('div.marketSellsData_' + sl.market_offer_id, MarketWindow.DOM);
            $('div.mps_itemimage', rowSel).html(sl.itemLabel.getMainDiv());
            $('div.mps_pickup', rowSel).append($(sl.moneyIcon).attr('id', 'mps_fetchMoney_' + sl.market_offer_id), $(sl.offerIcon).attr('id', 'mps_fetchArticle_' + sl.market_offer_id), $(sl.abortIcon).attr('id', 'mps_abortOffer_' + sl.market_offer_id));
            $('#mps_bestbidder_' + sl.market_offer_id, rowSel).click
            ((function (id) {
                return function () {
                    PlayerProfileWindow.open(id);
                };
            })(sl.bidder_player_id));
            $('#mps_go2markettown_' + sl.market_offer_id, rowSel).click
            ((function (x, y) {
                return function () {
                    TownWindow.open(x, y);
                };
            })(sl.market_town_x, sl.market_town_y));
            $('#mps_distance_' + sl.market_offer_id, rowSel).click
            ((function (x, y) {
                return function () {
                    TownWindow.open(x, y);
                };
            })(sl.market_town_x, sl.market_town_y));
            $('#mps_fetchMoney_' + sl.market_offer_id + ', #mps_fetchArticle_' + sl.market_offer_id, rowSel).click
            ((function (id, x, y, ix) {
                return function () {
                    fetch(id, x, y, ix);
                };
            })(sl.market_offer_id, sl.market_town_x, sl.market_town_y, $(rowSel).prevAll().length));
            $('#mps_abortOffer_' + sl.market_offer_id, rowSel).click
            ((function (id, x, y, ix) {
                return function () {
                    deleteFromMarket(id, x, y, ix);
                };
            })(sl.market_offer_id, sl.market_town_x, sl.market_town_y, $(rowSel).prevAll().length));
        }
        MarketWindow.dataStore = data;
    };
    MarketWindow.Offer.init = function () {
        MarketWindow.dataStore = [];
        var maindiv = $('<div class="market-offer"></div>');
        MarketWindow.offerTable = new west.gui.Table().createEmptyMessage('Не найдено ни одной твоей ставки').appendTo(maindiv).addColumn("mpo_itemimage").addColumn("mpo_article").addColumn("mpo_stack").addColumn("mpo_buynow").addColumn("mpo_bid").addColumn("mpo_distance").addColumn("mpo_timeto").addColumn("mpo_vendor").addColumn("mpo_pickup").appendToThCell("head", "mpo_article", 'Предлагаемые предметы', '&nbsp;').appendToThCell("head", "mpo_stack", 'Количество', '&nbsp;').appendToThCell("head", "mpo_buynow", 'Цена без торга', '&nbsp;').appendToThCell("head", "mpo_bid", 'Ставка', '&nbsp;').appendToThCell("head", "mpo_distance", 'Расстояние до города', '&nbsp;').appendToThCell("head", "mpo_timeto", 'До завершения осталось', '&nbsp;').appendToThCell("head", "mpo_vendor", 'Продавец', '&nbsp;').appendToThCell("head", "mpo_pickup", 'Забрать товар', '&nbsp;').appendToFooter('mpo_pickup', s('<span title="%1">&nbsp;</span>', 'Забрать всё'));
        $('div.mpo_vendor', maindiv).data('sortBy', 'mpo_vendor');
        $('div.mpo_article', maindiv).data('sortBy', 'mpo_article');
        $('div.mpo_stack', maindiv).data('sortBy', 'mpo_stack');
        $('div.mpo_buynow', maindiv).data('sortBy', 'mpo_buynow');
        $('div.mpo_bid', maindiv).data('sortBy', 'mpo_bid');
        $('div.mpo_distance', maindiv).data('sortBy', 'mpo_distance');
        $('div.mpo_timeto', maindiv).data('sortBy', 'mpo_timeto');
        $('div.mpo_vendor, div.mpo_article, div.mpo_stack, div.mpo_buynow, div.mpo_bid, div.mpo_distance, div.mpo_timeto', maindiv).click(sortDataDispatcher);
        $('.row_foot div.mpo_pickup', maindiv).click(function () {
            MarketWindow.Sell.collectAll('Offer');
        });
        MarketWindow.window.$('div.marketplace-offer', MarketWindow.DOM).empty().append(maindiv);
        MarketWindow.Offer.initData();
    };
    MarketWindow.Offer.initData = function () {
        Ajax.remoteCall('building_market', 'fetch_bids', {}, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            if (json.msg.search_result.length == 0) {
                $('div.market-offer div.no-content', MarketWindow.DOM).show();
            }
            MarketWindow.Offer.updateTable(json.msg.search_result);
        }, MarketWindow);
    }
    MarketWindow.Offer.updateTable = function (data) {
        MarketWindow.offerTable.clearBody();
        $('div.market-offer div.no-content', MarketWindow.DOM).hide();
        var a;
        var tmpCells = {};
        for (var i = 0; i < data.length; i++) {
            var itemData = ItemManager.get(data[i].item_id);
            a = prepareData(data[i], itemData);
            var playerhover;
            if (a.seller_name) {
                playerhover = a.seller_town_name ? s('%1 из %2', a.seller_name, a.seller_town_name) : a.seller_name + " (" + "Без города".escapeHTML() + ")";
            }
            else {
                playerhover = "Игрок больше не существует";
                a.seller_name = "Удалено";
            }
            tmpCells['mpo_itemimage'] = '&nbsp;';
            tmpCells['mpo_article'] = '<span id="mpo_article_' + a.market_offer_id + '" title="' + a.itemLabel.obj.name + '">' + MarketWindow.getClearName(a.itemLabel.obj) + '</span>';
            tmpCells['mpo_stack'] = a.item_count;
            tmpCells['mpo_buynow'] = (a.max_price != null ? '<span title="' + s("Цена: %1", '$' + format_money(a.singleMaxPrice)).escapeHTML() + '">$' + format_money(a.max_price) + '</span>' : '');
            tmpCells['mpo_bid'] = (a.currentBid != null ? '<span title="' + s("Цена: %1", '$' + format_money(a.singlePrice)).escapeHTML() + '">$' + format_money(a.currentBid) + '</span>' : '');
            tmpCells['mpo_distance'] = '<span id="mpo_distance_' + a.market_offer_id + '" class="linkstyle" title="' + 'Место продажи' + ': ' + a.market_town_name + '">' + a.distance + '</span>';
            tmpCells['mpo_timeto'] = '<span title="' + s('Срок действия предложения: %1', a.auction_end_date.getFormattedTimeString4Timestamp()) + '">' + getTime2EndString(a.auction_ends_in) + '</span>';
            tmpCells['mpo_vendor'] = a.descriptionImg + '<span class="linkstyle" id="mpo_vendor_' + a.market_offer_id + '" title="' + playerhover + '">' + a.seller_name + '</span>';
            tmpCells['mpo_pickup'] = '<img id="mpo_marketOfferBid_' + a.market_offer_id + '" src="https://westrus.innogamescdn.com/images/icons/bid.png" title="' + 'Ставка' + '" alt="" />';
            MarketWindow.offerTable.buildRow('marketBidsData_' + a.market_offer_id, tmpCells, MarketWindow.escapeRow);
            var rowSel = $('div.marketBidsData_' + a.market_offer_id, MarketWindow.DOM);
            $('div.mpo_itemimage', rowSel).html(a.itemLabel.getMainDiv());
            if (a.pickupIcon != '') {
                $('#mpo_marketOfferBid_' + a.market_offer_id, rowSel).remove();
                $('div.mpo_pickup', rowSel).append($(a.pickupIcon).attr('id', 'mpo_marketFetch_' + a.market_offer_id));
            }
            $('#mpo_vendor_' + a.market_offer_id, rowSel).click
            ((function (id) {
                return function () {
                    PlayerProfileWindow.open(id);
                };
            })(a.seller_player_id));
            $('#mpo_distance_' + a.market_offer_id, rowSel).click
            ((function (x, y) {
                return function () {
                    TownWindow.open(x, y);
                };
            })(a.market_town_x, a.market_town_y));
            $('#mpo_marketOfferBid_' + a.market_offer_id, rowSel).click
            ((function (css, offerData) {
                return function () {
                    bid(css, offerData);
                };
            })('#mpo_marketOfferBid_' + a.market_offer_id, a));
            $('#mpo_marketFetch_' + a.market_offer_id, rowSel).click
            ((function (id, x, y, ix) {
                return function () {
                    fetch(id, x, y, ix);
                };
            })(a.market_offer_id, a.market_town_x, a.market_town_y, $(rowSel).prevAll().length));
        }
        MarketWindow.dataStore = data;
    };
    MarketWindow.Watchlist.init = function () {
        MarketWindow.dataStore = [];
        var maindiv = $('<div class="market-watchlist"></div>');
        MarketWindow.watchlistTable = new west.gui.Table().createEmptyMessage('Пусто').appendTo(maindiv).addColumn("mpw_itemimage").addColumn("mpw_article").addColumn("mpw_stack").addColumn("mpw_buynow").addColumn("mpw_bid").addColumn("mpw_distance").addColumn("mpw_timeto").addColumn("mpw_vendor").addColumn("mpw_pickup").appendToThCell("head", "mpw_article", 'Предлагаемые предметы', '&nbsp;').appendToThCell("head", "mpw_stack", 'Количество', '&nbsp;').appendToThCell("head", "mpw_buynow", 'Цена без торга', '&nbsp;').appendToThCell("head", "mpw_bid", 'Ставка', '&nbsp;').appendToThCell("head", "mpw_distance", 'Расстояние до города', '&nbsp;').appendToThCell("head", "mpw_timeto", 'До завершения осталось', '&nbsp;').appendToThCell("head", "mpw_vendor", 'Продавец', '&nbsp;').appendToThCell("head", "mpw_pickup", 'сделать ставку', '&nbsp;');
        $('div.mpw_vendor', maindiv).data('sortBy', 'mpw_vendor');
        $('div.mpw_article', maindiv).data('sortBy', 'mpw_article');
        $('div.mpw_stack', maindiv).data('sortBy', 'mpw_stack');
        $('div.mpw_buynow', maindiv).data('sortBy', 'mpw_buynow');
        $('div.mpw_bid', maindiv).data('sortBy', 'mpw_bid');
        $('div.mpw_distance', maindiv).data('sortBy', 'mpw_distance');
        $('div.mpw_timeto', maindiv).data('sortBy', 'mpw_timeto');
        $('div.mpw_vendor, div.mpw_article, div.mpw_stack, div.mpw_buynow, div.mpw_bid, div.mpw_distance, div.mpw_timeto', maindiv).click(sortDataDispatcher);
        MarketWindow.window.$('div.marketplace-watchlist', MarketWindow.DOM).empty().append(maindiv);
        MarketWindow.Watchlist.initData();
    };
    MarketWindow.Watchlist.initData = function () {
        Ajax.remoteCall('building_market', 'get_watchlist', {}, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            if (json.msg.length == 0) {
                $('div.market-watchlist div.no-content', MarketWindow.DOM).show();
                return true;
            }
            MarketWindow.Watchlist.updateTable(json.msg);
        }, MarketWindow);
    }
    MarketWindow.Watchlist.updateTable = function (data) {
        MarketWindow.watchlistTable.clearBody();
        $('div.market-watchlist div.no-content', MarketWindow.DOM).hide();
        var a;
        var itemData;
        var tmpCells = {};
        for (var i = 0; i < data.length; i++) {
            itemData = ItemManager.get(data[i].item_id);
            a = prepareData(data[i], itemData);
            tmpCells['mpw_itemimage'] = '&nbsp;';
            tmpCells['mpw_article'] = '<span id="mpw_article_' + a.market_offer_id + '" title="' + a.itemLabel.obj.name + '">' + MarketWindow.getClearName(a.itemLabel.obj) + '</span>';
            tmpCells['mpw_stack'] = a.item_count;
            tmpCells['mpw_buynow'] = (a.max_price != null ? '<span title="' + s("Цена: %1", '$' + format_money(a.singleMaxPrice)).escapeHTML() + '">$' + format_money(a.max_price) + '</span>' : '');
            tmpCells['mpw_bid'] = (a.currentBid != null ? '<span title="' + s("Цена: %1", '$' + format_money(a.singlePrice)).escapeHTML() + '">$' + format_money(a.currentBid) + '</span>' : '');
            tmpCells['mpw_distance'] = '<span id="mpw_distance_' + a.market_offer_id + '" class="linkstyle" title="' + 'Место продажи' + ': ' + a.market_town_name + '">' + a.distance + '</span>';
            tmpCells['mpw_timeto'] = '<span title="' + s('Срок действия предложения: %1', a.auction_end_date.getFormattedTimeString4Timestamp()) + '">' + getTime2EndString(a.auction_ends_in) + '</span>';
            var playerhover = a.seller_town_name ? s('%1 из %2', a.seller_name, a.seller_town_name) : a.seller_name + " (" + "Без города".escapeHTML() + ")";
            tmpCells['mpw_vendor'] = a.descriptionImg + '<span class="linkstyle" id="mpw_vendor_' + a.market_offer_id + '" title="' + playerhover + '">' + a.seller_name + '</span>';
            tmpCells['mpw_pickup'] = '';
            MarketWindow.watchlistTable.buildRow('marketWatchData_' + a.market_offer_id, tmpCells, MarketWindow.escapeRow);
            var rowSel = $('div.marketWatchData_' + a.market_offer_id, MarketWindow.DOM);
            $('div.mpw_itemimage', rowSel).html(a.itemLabel.getMainDiv());
            if (a.bidIcon != '')
                $('div.mpw_pickup', rowSel).append($(a.bidIcon).attr('id', 'mpw_marketBidWatched_' + a.market_offer_id), '&nbsp;');
            $('div.mpw_pickup', rowSel).append($('<img id="mpw_marketDelWatched_' + a.market_offer_id + '" src="https://westrus.innogamescdn.com/images/icons/delete.png" title="' + 'Удалить из списка наблюдения' + '" alt="" />'));
            $('#mpw_vendor_' + a.market_offer_id, rowSel).click
            ((function (id) {
                return function () {
                    PlayerProfileWindow.open(id);
                };
            })(a.seller_player_id));
            $('#mpw_distance_' + a.market_offer_id, rowSel).click
            ((function (x, y) {
                return function () {
                    TownWindow.open(x, y);
                };
            })(a.market_town_x, a.market_town_y));
            $('#mpw_marketBidWatched_' + a.market_offer_id, rowSel).click
            ((function (css, obj) {
                return function () {
                    bid(css, obj);
                };
            })('div.marketWatchData_' + a.market_offer_id, a));
            $('#mpw_marketDelWatched_' + a.market_offer_id, rowSel).click
            ((function (id, ix) {
                return function () {
                    deleteFromWatchlist(id, ix);
                };
            })(a.market_offer_id, $(rowSel).prevAll().length));
        }
        MarketWindow.dataStore = data;
    };
    var searchItems4Accordion = function () {
        if ($(this).hasClass('accordion_closed'))return;
        var pattern = $("div.market-buy .iSearchbox input", MarketWindow.DOM).val();
        var category = '';
        if ($('div.market-buy .accordiongroup_marketBuy.accordion_opened', MarketWindow.DOM).length > 0)
            category = $('.market-buy .accordiongroup_marketBuy.accordion_opened', MarketWindow.DOM).data('category');
        Ajax.remoteCall('building_market', 'search_accordion', {pattern: pattern, type: category}, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            MarketWindow.Buy.updateCategory(category, json.items);
        }, MarketWindow);
    };
    var searchForMarketOffers = function (new_page) {
        if (MarketWindow.buyTable == null)return;
        var search = $("div.market-buy .iSearchbox input", MarketWindow.DOM).val();
        var store = $('#market_buytable div.trows', MarketWindow.DOM).data();
        if (store.hasOwnProperty('item_id')) {
            $('#market_buytable div.trows', MarketWindow.DOM).removeData();
            store = {};
        }
        var sort = store.hasOwnProperty('sort') ? store['sort'] : 'bid';
        var order = store.hasOwnProperty('order') ? store['order'] : 'asc';
        var navi = typeof new_page == 'object' || new_page == undefined ? 'first' : new_page;
        var page = getNewPageNo(navi);
        var view_cat = $('#mpb_offercat', MarketWindow.DOM).data('value');
        view_cat = typeof view_cat == 'number' ? view_cat : 2;
        var usable = $("#buyFilterIsUsable", MarketWindow.DOM).hasClass('tw2gui_checkbox_checked');
        var effect = $("#buyFilterHasEffect", MarketWindow.DOM).hasClass('tw2gui_checkbox_checked');
        var level = $('#mpb_filterLevel', MarketWindow.DOM).data('value').toString().split('-');
        var fromLevel = level[0];
        var toLevel = level[1];
        var category = '';
        if ($('div.market-buy .accordiongroup_marketBuy.accordion_opened', MarketWindow.DOM).length > 0) {
            category = $('div.market-buy .accordiongroup_marketBuy.accordion_opened', MarketWindow.DOM).data('category');
        }
        var reqObj = {
            pattern: search,
            nav: navi,
            page: page,
            sort: sort,
            order: order,
            type: category,
            level_range_min: fromLevel,
            level_range_max: toLevel,
            usable: usable,
            has_effect: effect,
            visibility: view_cat
        };
        $('#market_buytable div.trows', MarketWindow.DOM).data(reqObj);
        Ajax.remoteCall('building_market', 'search', reqObj, function (json) {
            if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            $('#market_buytable div.trows', MarketWindow.DOM).removeData().data(reqObj);
            if (json.msg.search_result.length == 0) {
                MarketWindow.buyTable.clearBody();
                return new UserMessage('Нет соответствующих предложений', UserMessage.TYPE_ERROR).show();
            }
            MarketWindow.Buy.currentPage = page;
            MarketWindow.Buy.updateTable(json.msg.search_result);
            if (MarketWindow.Buy.searchById) {
                $('#m_pagenavi', MarketWindow.DOM).empty();
                if (json.msg.next)
                    createPagebar(searchForMarketOffers, true, true);
            }
            else if (json.msg.next)
                createPagebar(searchForMarketOffers, false, true); else
                createPagebar(searchForMarketOffers, false, false);
        }, MarketWindow);
    }
    var dragHandler4Accordion = function (source) {
        $('#market_buytable div.trows', MarketWindow.DOM).data('item_id', $(source).data('itemId'));
        searchOffersByItemId();
    }
    var clickHandler4Accordion = function () {
        $('#market_buytable div.trows', MarketWindow.DOM).data('item_id', $(this).data('itemId'));
        searchOffersByItemId();
    }
    var getNewPageNo = function (pagebarReturn) {
        switch (pagebarReturn) {
            case'next':
                return parseInt(MarketWindow.Buy.currentPage + 1);
            case'prev':
                return parseInt(MarketWindow.Buy.currentPage - 1);
            default:
                return 1;
        }
    }
    var createPagebar = function (callback, changed, hasNext) {
        var pagebar = $('#m_pagenavi', MarketWindow.DOM);
        var bar = new west.gui.Pagebar(MarketWindow.Buy.currentPage, null, callback, null, hasNext).getMainDiv();
        pagebar.html(bar);
        if (!changed)return;
        MarketWindow.Buy.searchById = MarketWindow.Buy.searchById ? false : true;
        MarketWindow.Buy.currentPage = 1;
    }
    var searchOffersByItemId = function (navi) {
        var store = $('#market_buytable div.trows', MarketWindow.DOM).data();
        var id = store['item_id'];
        if (id > 0) {
            if (MarketWindow.buyTable == null)return;
            if (store.hasOwnProperty('pattern')) {
                $('#market_buytable div.trows', MarketWindow.DOM).removeData();
                store = {};
            }
            var nav = typeof navi == 'object' || navi == undefined ? 'first' : navi;
            var newpage = getNewPageNo(nav);
            var sort = store.hasOwnProperty('sort') ? store['sort'] : 'bid';
            var order = store.hasOwnProperty('order') ? store['order'] : 'asc';
            var reqObj = {item_id: id, page: newpage, nav: nav, sort: sort, order: order};
            $('#market_buytable div.trows', MarketWindow.DOM).data(reqObj);
            Ajax.remoteCall('building_market', 'search', reqObj, function (json) {
                if (json.error)return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
                $('#market_buytable div.trows', MarketWindow.DOM).removeData().data(reqObj);
                if (json.msg.search_result.length == 0) {
                    MarketWindow.buyTable.clearBody();
                    return new UserMessage('Нет соответствующих предложений', UserMessage.TYPE_ERROR).show();
                }
                MarketWindow.Buy.currentPage = newpage;
                MarketWindow.Buy.updateTable(json.msg.search_result);
                if (!MarketWindow.Buy.searchById) {
                    $('#m_pagenavi', MarketWindow.DOM).empty();
                    if (json.msg.next)
                        createPagebar(searchOffersByItemId, true, true);
                }
                else if (json.msg.next)
                    createPagebar(searchOffersByItemId, false, true); else
                    createPagebar(searchOffersByItemId, false, false);
            }, MarketWindow);
        }
    }
    var deleteFromMarket = function (offerId, x, y, dataStoreIndex) {
        if (Map.calcWayTime(Character.getPosition(), {x: x, y: y}) > 0 && Premium.buyable['marketdelivery']) {
            Premium.confirmUse("marketdelivery " + offerId + " " + MarketWindow.townId + " offtake", "Доставка", "Ты не можешь получить товар или деньги не находясь в соответствующем городе. Однако за несколько самородков тебе могут доставить твоё имущество. Хочешь?", null, null, function () {
                $('.marketBidsData_' + offerId, MarketWindow.DOM).remove();
                $('.marketSellsData_' + offerId, MarketWindow.DOM).remove();
                MarketWindow.dataStore.rar(dataStoreIndex);
                EventHandler.signal('inventory_changed');
            });
        }
        else {
            Ajax.remoteCall('building_market', 'offtake', {offer_id: offerId}, function (json) {
                if (json.error)new UserMessage(json.msg, UserMessage.TYPE_ERROR).show(); else {
                    if (json.money == -1)
                        new UserMessage('Предложение отозвано, комиссия не возвращается', UserMessage.TYPE_SUCCESS).show(); else {
                        new UserMessage(s('Предложение отозвано, %1$ комиссии возвращается', json.money), UserMessage.TYPE_SUCCESS).show();
                        Character.addMoney(parseInt(json.money));
                    }
                    $('.marketSellsData_' + offerId, MarketWindow.DOM).remove();
                    MarketWindow.dataStore.rar(dataStoreIndex);
                    EventHandler.signal('inventory_changed');
                }
            }, MarketWindow);
        }
    }
    var bid = function (sourceSelector, offerdata) {
        if (Character.playerId === offerdata.seller_player_id)return;
        var rmRow = function () {
            $(sourceSelector).remove();
        }
        var func = function (bidtype) {
            if (bidtype != 0 && bidtype != 1)return;
            var input_market_offer_money = $('#market_offer_money', bidWindow).val().replace(/\D/g, '');
            var bid = parseInt(input_market_offer_money, 10) || 0;
            var minbid = Math.max(Math.min(offerdata.max_price || 0, offerdata.auction_price || 0) - 1, offerdata.current_bid || 0);
            if (bid < minbid) {
                new UserMessage('Слишком низкая ставка');
                return true;
            }
            if (offerdata.max_price != null && bid > offerdata.max_price) {
                new west.gui.Dialog().setTitle("Подтвердить").setText("<div class='txcenter'>" + s('Ставка не должна быть выше цены покупки без торга. Сделать ставку равную цене без торга? (%1$)', offerdata.max_price) + "</div>").addButton('yes', function () {
                    bid = offerdata.max_price;
                    Ajax.remoteCall('building_market', 'bid', {
                        bidtype: bidtype,
                        bid: bid,
                        market_offer_id: offerdata.market_offer_id
                    }, function (resp) {
                        if (resp.error)return new UserMessage(resp.msg).show(); else {
                            if (resp.instantBuy) {
                                new UserMessage((Character.charSex == 'female') ? "Ты выиграла эти торги" : "Ты выиграл эти торги", UserMessage.TYPE_SUCCESS).show();
                            }
                            else {
                                new UserMessage((Character.charSex == 'female') ? "Ты сделала ставку" : "Ты сделал ставку", UserMessage.TYPE_SUCCESS).show();
                            }
                            Character.setMoney(resp.msg.money);
                            Character.setDeposit(resp.msg.deposit);
                            rmRow();
                        }
                    }, MarketWindow);
                }).addButton('no').show();
                return true;
            }
            else {
                Ajax.remoteCall('building_market', 'bid', {
                    bidtype: bidtype,
                    bid: bid,
                    market_offer_id: offerdata.market_offer_id
                }, function (resp) {
                    if (resp.error)return new UserMessage(resp.msg).show(); else {
                        if (resp.msg.instantBuy) {
                            new UserMessage((Character.charSex == 'female') ? "Ты выиграла эти торги" : "Ты выиграл эти торги", UserMessage.TYPE_SUCCESS).show();
                        }
                        else {
                            new UserMessage((Character.charSex == 'female') ? "Ты сделала ставку" : "Ты сделал ставку", UserMessage.TYPE_SUCCESS).show();
                        }
                        Character.setMoney(resp.msg.money);
                        Character.setDeposit(resp.msg.deposit);
                        if (/\.marketWatchData_/i.test(sourceSelector)) {
                            $(sourceSelector).remove();
                        }
                        rmRow();
                        if (/mpo/i.test(sourceSelector)) {
                            MarketWindow.Offer.initData();
                        }
                    }
                }, MarketWindow);
            }
        };
        new west.gui.Dialog().setTitle("Покупка предмета").setText("<div class='txcenter marketBid_messageBox'>"
            + (offerdata.description ? s('Описание: %1', offerdata.description.escapeHTML()) + "<br />" : '')
            + (offerdata.max_price ? s('Цена продажи без торга: %1$', format_money(offerdata.max_price)) + "<br />" : '')
            + (offerdata.auction_price ? s('Начальная ставка: %1$', format_money(Math.max(offerdata.auction_price - 1, offerdata.current_bid || 0) + 1)) + "<br />" : "")
            + s('Окончание торгов: %1', new Date(offerdata.auction_end_date * 1000).toDateTimeString()) + "<br />"
            + 'Твоя ставка:' + " $ <input type='text' id='market_offer_money' class='input_layout' style='text-align: center;' size='7' value='" +
            format_money((offerdata.auction_price ? (Math.max(offerdata.auction_price - 1, offerdata.current_bid || 0) + 1) : offerdata.max_price)) + "' />&nbsp;&nbsp;</div>").addButton("Наличные", function () {
            func(0);
        }).addButton("Банковский счёт", function () {
            func(1);
        }).addButton("Отмена").show();
        var bidWindow = $('div.marketBid_messageBox');
        if (offerdata.max_price > 0)
            bidWindow.append($('<span class="linkstyle">(' + format_money(offerdata.max_price) + ')</span>').click(function () {
                $('#market_offer_money', bidWindow).val(format_money(offerdata.max_price));
            }));
    };
    MarketWindow.fetchAll = function (townId) {
        Ajax.remoteCall('building_market', 'fetch_all', {'townId': townId}, function (data) {
            MarketWindow.handleFetchData(data, data.msg);
        });
    };
    var fetch = function (offer_id, x, y, dataStoreIndex) {
        if (Map.calcWayTime(Character.getPosition(), {x: x, y: y}) > 0 && Premium.buyable['marketdelivery']) {
            Premium.confirmUse("marketdelivery " + offer_id + " " + MarketWindow.townId + " fetch", "Доставка", "Ты не можешь получить товар или деньги не находясь в соответствующем городе. Однако за несколько самородков тебе могут доставить твоё имущество. Хочешь?", null, null, function () {
                $('div.marketBidsData_' + offer_id, MarketWindow.DOM).remove();
                $('div.marketSellsData_' + offer_id, MarketWindow.DOM).remove();
                MarketWindow.dataStore.rar(dataStoreIndex);
                EventHandler.signal('inventory_changed');
            });
        }
        else {
            Ajax.remoteCall('building_market', 'fetch', {market_offer_id: offer_id}, function (resp) {
                if (MarketWindow.handleFetchData(resp, resp.msg)) {
                    $('div.marketBidsData_' + offer_id, MarketWindow.DOM).remove();
                    $('div.marketSellsData_' + offer_id, MarketWindow.DOM).remove();
                    MarketWindow.dataStore.rar(dataStoreIndex);
                    EventHandler.signal('inventory_changed');
                }
            }, MarketWindow);
        }
    }
    MarketWindow.handleFetchData = function (resp, msg) {
        if (resp.error) {
            new UserMessage(resp.msg || resp.error).show();
        }
        else {
            new UserMessage((Character.charSex == 'female') ? 'Ты расписалась в получении' : 'Ты расписался в получении', UserMessage.TYPE_SUCCESS).show();
            Character.setMoney(msg.money);
            return true;
        }
        return false;
    }
    var add2Watchlist = function (offerId) {
        Ajax.remoteCall('building_market', 'to_watchlist', {offer_id: offerId}, function (json) {
            if (json.error)new UserMessage(json.msg).show(); else {
                new UserMessage(json.msg, UserMessage.TYPE_SUCCESS).show();
                $('#wih_marketOfferWatch_' + offerId, MarketWindow.DOM).remove();
                $('#mpb_marketOfferWatch_' + offerId, MarketWindow.DOM).remove();
            }
        }, MarketWindow);
    }
    var deleteFromWatchlist = function (offerId, dataStoreIndex) {
        Ajax.remoteCall('building_market', 'delete_from_watchlist', {offer_id: offerId}, function (json) {
            if (json.error)new UserMessage(json.msg).show(); else {
                new UserMessage(json.msg, UserMessage.TYPE_SUCCESS).show();
                $('div.marketWatchData_' + offerId, MarketWindow.DOM).remove();
                MarketWindow.dataStore.rar(dataStoreIndex);
            }
        }, MarketWindow);
    }
    MarketWindow.createMarketOffer = function (source) {
        var item_id = (typeof source == 'number' ? source : $(source).data('itemId'));
        if (item_id === undefined) {
            var itemObj = $(this).data('dnd_droppedObj');
            item_id = itemObj.data('itemId');
        }
        var itemData = ItemManager.get(item_id);
        if (!itemData.auctionable)return new UserMessage('Этот предмет нельзя выставить на торги').show();
        Ajax.remoteCall('building_market', 'get_other_offers', {
            item_id: item_id,
            town_id: MarketWindow.townId
        }, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            if (json.is_at_town || Premium.buyable['expresssell']) {
                if ($('#market_createoffer_window', MarketWindow.DOM).length == 0) {
                    MarketWindow.is_attown = json.is_at_town;
                    sellDialog(itemData, json.msg);
                }
            }
            else
                new UserMessage('Чтобы торговать, тебе нужно быть в городе', UserMessage.TYPE_ERROR).show();
        }, MarketWindow);
    }
    var sellDialog = function (item, offerArr) {
        try {
            $('#market_createoffer_window').parent().remove();
            var item2Sell = new tw2widget.Item(item);
            var n = Bag.getItemByItemId(item2Sell.getId()).getCount();
            var unitprice = 0;
            var refreshPrices = function () {
                var maxPrice = parseInt($('#market_max_price', sellWindow).val(), 10) || 0;
                var minPrice = parseInt($('#market_min_bid', sellWindow).val(), 10) || 0;
                var max_days = parseInt($('#market_days', sellWindow).data('value'), 10) || 0;
                var itemStack = $('#market_sell_itemStack', sellWindow).val();
                if (itemStack > n || itemStack < 1) {
                    $('#market_sell_itemStack', sellWindow).val(n);
                    itemStack = n;
                }
                var auctions = $('#market_sell_itemAuctions', sellWindow).val() || 1;
                calcPossibleAuctions(itemStack, auctions);
                var unitPrice = calcUnitPrice(minPrice, maxPrice, itemStack);
                showMarketFees(minPrice, maxPrice, max_days, auctions);
                $('#mps_market_unitprice', sellWindow).text('$ ' + unitPrice);
                unitprice = unitPrice;
                $('#mps_market_price4all', sellWindow).text('$ ' + Math.max(minPrice, maxPrice));
            }
            var showMarketFees = function (minPrice, maxPrice, max_days, auctions) {
                var tmpFee = 0;
                var fee = 0;
                if (arguments.length < 4) {
                    maxPrice = parseInt($('#market_max_price', sellWindow).val(), 10) || 0;
                    minPrice = parseInt($('#market_min_bid', sellWindow).val(), 10) || 0;
                    max_days = parseInt($('#market_days', sellWindow).data('value'), 10) || 0;
                    auctions = $('#market_sell_itemAuctions', sellWindow).val() || 1;
                }
                if (maxPrice == 0 && minPrice == 0)return 0;
                tmpFee = parseInt((((maxPrice && minPrice ? Math.min(maxPrice, minPrice) : Math.max(maxPrice, minPrice)) * 0.02) * MarketWindow.maxstage) + (max_days * 3));
                fee = Math.ceil((tmpFee / MarketWindow.currentStage) * (MarketWindow.townId == Character.homeTown.town_id ? 1 : 2)) * auctions;
                $('#market_fee', sellWindow).text('$ ' + fee).fadeIn();
                return true;
            }
            var calcUnitPrice = function (startPrice, instantBuy, itemStack) {
                var price = 0;
                if (arguments.length < 3) {
                    instantBuy = $('#market_max_price', sellWindow).val() || 0;
                    startPrice = $('#market_min_bid', sellWindow).val() || 0;
                    itemStack = $('#market_sell_itemStack', sellWindow).val();
                }
                if (instantBuy == 0 && startPrice == 0)return 0;
                if (instantBuy && !startPrice)price = instantBuy; else if (!instantBuy && startPrice)price = startPrice; else price = instantBuy;
                if (itemStack > n) {
                    $('#market_sell_itemStack', sellWindow).val(n);
                    itemStack = n;
                }
                return Math.ceil(price / itemStack);
            }
            var calcPossibleAuctions = function (stack, auctions) {
                if (arguments.length < 2) {
                    stack = $('#market_sell_itemStack', sellWindow).val();
                    auctions = $('#market_sell_itemAuctions', sellWindow).val();
                }
                if (auctions > n || auctions < 1) {
                    $('#market_sell_itemAuctions', sellWindow).val(n);
                    auctions = n;
                }
                var res = parseInt(n / (stack > 1 ? stack : 1));
                if (auctions > res)
                    $('#market_sell_itemAuctions', sellWindow).val(res);
                $('#msd_max_auctions', sellWindow).html('(' + res + ')').click(function () {
                    $('#market_sell_itemAuctions', sellWindow).val(res);
                    refreshPrices();
                });
            }
            var charHasTown = Character.homeTown.town_id != null;
            var currBids = '';
            if (offerArr.length == 0)currBids += '<tr><td colspan="4" style="text-align:center;">' + 'Нет соответствующих предложений' + '</td></tr>';
            for (var i = 0; i < (offerArr.length > 5 ? 5 : offerArr.length); i++) {
                currBids += '<tr><td class="left">' + offerArr[i].name.cutIt(10) + '</td><td>' + offerArr[i].item_count + 'x</td><td>' + (isDefined(offerArr[i].max_price) ? '$' + offerArr[i].max_price : ' - ') + '</td>' + '<td>' + (isDefined(offerArr[i].current_bid) ? '$' + offerArr[i].current_bid : '<span title="' + 'Минимальная ставка' + '" style="color:#777;">' + (isDefined(offerArr[i].auction_price) ? '$' + offerArr[i].auction_price : ' - ') + '</span>') + '</td></tr>';
            }
            var iMinBid = new west.gui.Textfield("market_min_bid").setSize(7).getMainDiv();
            var iMaxBid = new west.gui.Textfield("market_max_price").setSize(7).getMainDiv();
            var iAuctions = new west.gui.Textfield("market_sell_itemAuctions").setSize(2).getMainDiv();
            var iStack = new west.gui.Textfield("market_sell_itemStack").setSize(2).getMainDiv();
            var taDesc = $('<span/>').append(new west.gui.Textarea(null, null).setId("auction_description").setWidth(282).setHeight(50).getMainDiv());
            var tooltip4Desc = '<span class="w250">' + "Записочка для потенциальных покупателей." + '</span>';
            var tooltip4MinBid = '<span class="w250">' + "Стартовая цена — это начальная ставка, самая низкая цена, за которую может уйти лот. При указанной цене продажи без торга, это поле можно оставить пустым. В этом случае торгов не будет." + '</span>';
            var tooltip4MaxBid = '<span class="w250">' + "Если установлена цена продажи без торга, лот будет отдан тому, кто первый уплатит эту сумму. Если установлена стартовая цена, это поле можно оставить пустым. В этом случае товар можно купить только с торгов." + '</span>';
            var tooltip4MaxDays = '<span class="w250">' + "Если до конца торгов лот не куплен, предложение можно либо продлить, либо забрать товар." + '</span>';
            var tooltip4MarketFee = '<span class="w250">' + "Размер комиссии зависит от уровня постройки рынка, продолжительности торгов и стартовой цены (в случае отсутствия — цены продажи без торга). Комиссия не возвращается, даже если товар не продан." + '</span>';
            var tooltip4Stack = '<span class="w250">' + "Укажи количество предмета, которое ты хочешь продать" + '</span>';
            var tooltip4Auctions = '<span class="w250">' + "Здесь можно определить количество твоих предложений" + '</span>';
            var tooltip4UnitPrice = '<span class="w250">' + "Цена за единицу" + '</span>';
            var tooltip4Summary = '<span class="w250">' + "Общая стоимость всех предметов" + '</span>';
            new west.gui.Dialog().setTitle("Выставить лот".escapeHTML()).setId('market_createoffer_window').setText('<div class="txcenter">'
                + '<table style="margin: 0 auto"><tr><td><span id="auction_item_slot"></span></td>'
                + '<td style="text-align: center;"><label for="auction_description" title="' + tooltip4Desc.escapeHTML() + '">' + "Прикрепить записочку:"
                + '</label><br />' + taDesc.html() + '</td></tr></table>'
                + '<table style="clear:both;margin:auto">'
                + '<tr>'
                + '<td><label for="market_min_bid" title="' + tooltip4MinBid.escapeHTML() + '">'
                + "Стартовая цена:" + '</label> $</td>'
                + '<td>' + iMinBid.html() + '</td>'
                + '<td><label for="market_max_bid" title="' + tooltip4MaxBid.escapeHTML() + '">'
                + "Цена продажи без торга:" + '</label> $</td>'
                + '<td>' + iMaxBid.html() + '</td>'
                + '</tr>'
                + (n > 1 ? '<tr><td colspan="4" /></tr><tr>'
                + '<td><label for="market_sell_itemStack" title="' + tooltip4Stack.escapeHTML() + '">'
                + "Количество:" + '</label></td>'
                + '<td>' + iStack.html() + '</td>'
                + '<td><label for="market_sell_itemAuctions" title="' + tooltip4Auctions.escapeHTML() + '">'
                + "Продажи:" + '</label></td>'
                + '<td>' + iAuctions.html() + '<span id="msd_max_auctions" class="linkstyle"></span></td>'
                + '</tr>'
                + '<tr><td title="' + tooltip4UnitPrice.escapeHTML() + '">' + "Цена за единицу" + ':</td>'
                + '<td title="' + tooltip4UnitPrice.escapeHTML() + '" id="mps_market_unitprice"></td>'
                + '<td title="' + tooltip4Summary.escapeHTML() + '">' + "Общая стоимость" + ':</td>'
                + '<td title="' + tooltip4Summary.escapeHTML() + '" id="mps_market_price4all"></td></tr><tr><td colspan="4" /></tr>' : '')
                + '<tr>'
                + '<td title="' + tooltip4MaxDays.escapeHTML() + '">' + "Продолжительность торгов" + ':</td>'
                + '<td id="msd_days"></td>'
                + '<td title="' + tooltip4MarketFee.escapeHTML() + '">'
                + "Комиссия" + ':'
                + '</td><td id="market_fee"></td>'
                + '</tr>'
                + '<tr><td colspan="4" style="text-align: center;">' + (charHasTown ? ('<span id="msd_rights"/>') : '') + '</td></tr>'
                + '</table><br /><span style="display: inline-block; width: 375px; height: 6px; background: url(https://westrus.innogamescdn.com/images/fort/battle/divider.png) repeat-x;" /><br /><h4>' + "Похожие предложения" + '</h4>'
                + '<table id="mps_otheroffers" style="width: 320px;margin: 0 auto;"><tr><th>' + "Продавец" + '</th><th>' + "Количество" + '</th><th>' + "Цена без торга" + '</th><th>' + "Ставка" + '</th></tr>' + currBids + '</table>'
                + '</div>').addButton('yes', function () {
                var sellWindow = $('#market_createoffer_window');
                var min_bid = parseInt($('#market_min_bid', sellWindow).val(), 10) || 0;
                var max_price = parseInt($('#market_max_price', sellWindow).val(), 10) || 0;
                var nsell = $('#market_sell_itemStack', sellWindow) && parseInt($('#market_sell_itemStack', sellWindow).val(), 10) || 1;
                var nauctions = $('#market_sell_itemAuctions', sellWindow) && $('#market_sell_itemAuctions', sellWindow).val() || 1;
                var days = parseInt($('#market_days', sellWindow).data('value'), 10) || 0;
                var rights = $('#market_rights', sellWindow) ? parseInt($('#market_rights', sellWindow).data('value'), 10) : 2;
                var description = $('#auction_description', sellWindow).val() || '';
                if (!min_bid && !max_price) {
                    new west.gui.Dialog('Подсказка', 'Нужно указать либо стартовую цену, либо цену для продажи без торга.', west.gui.Dialog.SYS_USERERROR).addButton("ok").show();
                    $('#market_min_bid, #market_max_price', sellWindow).css('border', '1px solid #f00');
                    return false;
                }
                if (min_bid && max_price && max_price <= min_bid) {
                    new west.gui.Dialog('Подсказка', 'Начальная ставка должна быть ниже цены продажи без торга.', west.gui.Dialog.SYS_USERERROR).addButton("ok").show();
                    $('#market_min_bid, #market_max_price', sellWindow).css('border', '1px solid #f00');
                    return false;
                }
                if (unitprice < item2Sell.obj.sell_price) {
                    new west.gui.Dialog('Подсказка', 'Продажная цена этого предмета слишком низка.', west.gui.Dialog.SYS_USERERROR).addButton("ok").show();
                    $('#market_min_bid, #market_max_price', sellWindow).css('border', '1px solid #f00');
                    return false;
                }
                if (nsell > n) {
                    new west.gui.Dialog('Подсказка', 'Ты не можешь выставить на продажу больше, чем в этой стопке.', west.gui.Dialog.SYS_USERERROR).addButton("ok").show();
                    $('#market_sell_itemStack', sellWindow).css('border', '1px solid #f00');
                    return false;
                }
                if (description.escapeHTML().length > 50 && !description.parseTextblock(50) && false) {
                    $('#auction_description', sellWindow).css('border', '1px solid #f00');
                    new west.gui.Dialog('Подсказка', s('Комментарий содержит слишком длинное слово. (%1 должно быть не длиннее 50 символов).', description.escapeHTML().length), west.gui.Dialog.SYS_USERERROR).addButton("ok").show();
                    return false;
                }
                var offerObj = MarketWindow.Offer.getOfferObject(item.item_id, min_bid, max_price, nsell, nauctions, (charHasTown ? rights : 2), days, description)
                if (!MarketWindow.is_attown && Premium.buyable['expresssell']) {
                    var str = JSON.stringify(offerObj);
                    Premium.confirmUse("expresssell " + str, "Экспресс доставка", "Ты не можешь сделать предложение на рынке не находясь в городе. Однако за несколько самородков тебе могут доставить твой товар. Хочешь?", null, null, function (data) {
                        EventHandler.signal('inventory_changed');
                        MarketWindow.Sell.initData();
                        Character.setDeposit(data.activationdata.deposit);
                        Character.setMoney(data.activationdata.cash);
                    });
                }
                else {
                    MarketWindow.Offer.send(offerObj);
                }
            }).addButton('no').show();
            var sellWindow = $('#market_createoffer_window');
            $('#msd_days', sellWindow).append(new west.gui.Combobox('market_days').addItem(1, '1 день').addItem(2, '2 дня').addItem(3, '3 дня').addItem(4, '4 дня').addItem(5, '5 дней').addItem(6, '6 дней').addItem(7, '7 дней').setWidth(55).select(1).addListener(showMarketFees).getMainDiv());
            $('#msd_rights', sellWindow).append(new west.gui.Combobox('market_rights').addItem(2, 'Продажа всем желающим').addItem(1, 'Продажа только участникам твоего альянса').addItem(0, 'Продажа только жителям твоего города').select(2).setWidth(250).getMainDiv());
            $('#auction_item_slot', sellWindow).append(item2Sell.getMainDiv());
            $('#market_max_price, #market_min_bid', sellWindow).keyup(refreshPrices);
            $('#market_days', sellWindow).change(showMarketFees);
            $('#market_sell_itemStack', sellWindow).val(1).change(refreshPrices);
            $('#market_sell_itemAuctions', sellWindow).val(1).change(refreshPrices);
            $('#msd_max_auctions', sellWindow).css('cursor', 'pointer');
            calcPossibleAuctions();
        }
        catch (e) {
            console.log(e);
            if (console.trace)console.trace();
        }
    }
    MarketWindow.Offer.getOfferObject = function (item_id, min_bid, max_price, nsell, nauctions, sellrights, days, desc) {
        var obj = {
            town_id: MarketWindow.townId,
            item_id: item_id,
            itemcount: nsell,
            auctioncount: nauctions,
            sellrights: sellrights,
            auctionlength: days,
            description: desc
        };
        if (min_bid)
            $.extend(obj, {auctionprice: min_bid});
        if (max_price)
            $.extend(obj, {maxprice: max_price});
        return obj;
    }
    MarketWindow.Offer.send = function (offerObj) {
        var params = offerObj;
        Ajax.remoteCall('building_market', 'putup', params, function (resp) {
            if (resp.error)return new UserMessage(resp.msg).show(); else {
                Character.setMoney(resp.msg.money);
                Character.setDeposit(resp.msg.deposit)
                new UserMessage(s('Лот выставлен на торг, комиссия составила %1$', resp.msg.costs), UserMessage.TYPE_SUCCESS).show();
                EventHandler.signal('inventory_changed');
                MarketWindow.Sell.initData();
            }
        }, MarketWindow);
    }
    var getTime2EndString = function (timestamp) {
        var result = timestamp.timestamp2TimeObject();
        if (result.days > 0)
            return result.days + 'д.';
        if (result.hours > 0)
            return result.hours + 'ч.';
        if (result.minutes > 0)
            return result.minutes + 'м.';
        if (result.seconds > 0)
            return result.seconds + 'с.'; else
            return 'Завершены';
    };
    var marketDistance = function (market_x, market_y) {
        return Map.calcWayTime(Character.position, {x: market_x, y: market_y}).formatDuration();
    };
    var isInTown = function (x, y) {
        if (Character.position.x == x && Character.position.y == y) {
            return true;
        }
        else {
            return false;
        }
    };
    var sortTableContent = function () {
        if ($('#market_buytable div.row', MarketWindow.DOM).length < 2)return;
        var sortBy = $(this).data('sortBy');
        var order = 'asc';
        var store = $('#market_buytable div.trows', MarketWindow.DOM);
        if (sortBy == MarketWindow.Buy.sort) {
            order = MarketWindow.Buy.order == 'asc' ? 'desc' : 'asc';
        }
        else {
            MarketWindow.Buy.sort = sortBy;
            MarketWindow.Buy.order = 'asc';
        }
        MarketWindow.Buy.order = order;
        store.data({'sort': sortBy, 'order': order});
        MarketWindow.Buy.currentPage = 1;
        if (store.data('item_id') > 0) {
            searchOffersByItemId();
        }
        else {
            searchForMarketOffers();
        }
    };
    var sortDataDispatcher = function () {
        if (MarketWindow.dataStore.length < 2)return;
        var sorting = $(this).data('sortBy').split('_');
        switch (sorting[0]) {
            case'wih':
                if (sortDataWorker(sorting[1], $(this).hasClass('sorted_desc'))) {
                    $(this).toggleClass('sorted_desc');
                    MarketWindow.WhatIsHot.updateTable(MarketWindow.dataStore);
                }
                break;
            case'mps':
                if (sortDataWorker(sorting[1], $(this).hasClass('sorted_desc'))) {
                    $(this).toggleClass('sorted_desc');
                    MarketWindow.Sell.updateTable(MarketWindow.dataStore);
                }
                break;
            case'mpo':
                if (sortDataWorker(sorting[1], $(this).hasClass('sorted_desc'))) {
                    $(this).toggleClass('sorted_desc');
                    MarketWindow.Offer.updateTable(MarketWindow.dataStore);
                }
                break;
            case'mpw':
                if (sortDataWorker(sorting[1], $(this).hasClass('sorted_desc'))) {
                    $(this).toggleClass('sorted_desc');
                    MarketWindow.Watchlist.updateTable(MarketWindow.dataStore);
                }
                break;
            default:
        }
    };
    var sortDataWorker = function (sortBy, asc) {
        try {
            switch (sortBy) {
                case'bid':
                case'singleprice':
                    asc ? MarketWindow.dataStore.sort(sortBySingleAuctionPrice) : MarketWindow.dataStore.sort(sortBySingleAuctionPriceDESC);
                    break;
                case'buynow':
                case'singlemaxprice':
                    asc ? MarketWindow.dataStore.sort(sortBySingleMaxPrice) : MarketWindow.dataStore.sort(sortBySingleMaxPriceDESC);
                    break;
                case'timeto':
                    asc ? MarketWindow.dataStore.sort(sortByAuctionEnd) : MarketWindow.dataStore.sort(sortByAuctionEndDESC);
                    break;
                case'article':
                    asc ? MarketWindow.dataStore.sort(sortByItemName) : MarketWindow.dataStore.sort(sortByItemNameDESC);
                    break;
                case'stack':
                    asc ? MarketWindow.dataStore.sort(sortByItemCount) : MarketWindow.dataStore.sort(sortByItemCountDESC);
                    break;
                case'distance':
                    asc ? MarketWindow.dataStore.sort(sortByDistance) : MarketWindow.dataStore.sort(sortByDistanceDESC);
                    break;
                case'vendor':
                    asc ? MarketWindow.dataStore.sort(sortBySellerName) : MarketWindow.dataStore.reverse();
                    break;
                case'bestbidder':
                    asc ? MarketWindow.dataStore.sort(sortByBidderName) : MarketWindow.dataStore.sort(sortByBidderNameDESC);
                    break;
            }
            return true;
        }
        catch (e) {
            return false;
        }
    };
    var sortBySingleAuctionPrice = function (a, b) {
        if (a.singlePrice == null && b.singlePrice != null)
            return a.singleMaxPrice - b.singlePrice; else if (b.singlePrice == null && a.singlePrice != null)
            return a.singlePrice - b.singleMaxPrice;
        return a.singlePrice - b.singlePrice;
    };
    var sortBySingleAuctionPriceDESC = function (a, b) {
        if (a.singlePrice == null && b.singlePrice != null)
            return b.singlePrice - a.singleMaxPrice; else if (b.singlePrice == null && a.singlePrice != null)
            return b.singleMaxPrice - a.singlePrice;
        return b.singlePrice - a.singlePrice;
    };
    var sortBySellerName = function (a, b) {
        return a.seller_name.toString().toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") > b.seller_name.toString().toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") ? 1 : -1;
    };
    var sortByBidderName = function (a, b) {
        return a.bidder_name.toString().toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") > b.bidder_name.toString().toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") ? 1 : -1;
    };
    var sortByBidderNameDESC = function (a, b) {
        return (a.bidder_name.toString().toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") || '') < (b.bidder_name.toString().toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") || '') ? 1 : -1;
    };
    var sortByItemName = function (a, b) {
        return a.itemName.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") > b.itemName.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") ? 1 : -1;
    };
    var sortByItemNameDESC = function (a, b) {
        return a.itemName.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") < b.itemName.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") ? 1 : -1;
    };
    var sortByItemCount = function (a, b) {
        return a.item_count - b.item_count;
    };
    var sortByItemCountDESC = function (a, b) {
        return b.item_count - a.item_count;
    };
    var sortBySingleMaxPrice = function (a, b) {
        if (a.singleMaxPrice == null && b.singleMaxPrice != null)
            return 1; else if (b.singleMaxPrice == null && a.singleMaxPrice != null)
            return -1;
        return a.singleMaxPrice - b.singleMaxPrice;
    };
    var sortBySingleMaxPriceDESC = function (a, b) {
        if (a.singleMaxPrice == null && b.singleMaxPrice != null)
            return -1; else if (b.singleMaxPrice == null && a.singleMaxPrice != null)
            return 1;
        return b.singleMaxPrice - a.singleMaxPrice;
    };
    var sortByAuctionEnd = function (a, b) {
        return a.auction_ends_in - b.auction_ends_in;
    };
    var sortByAuctionEndDESC = function (a, b) {
        return b.auction_ends_in - a.auction_ends_in;
    };
    var sortByDistance = function (a, b) {
        return a.distance.replaceAll(':', '') - b.distance.replaceAll(':', '');
    };
    var sortByDistanceDESC = function (a, b) {
        return b.distance.replaceAll(':', '') - a.distance.replaceAll(':', '');
    };
})(jQuery);
;
(function ($) {
    window.SheriffWindow = {DOM: '*'};
    var town_id = 0;
    var createData = {};
    var distanceWanteds = [], duelWanteds = [], moneyWanteds = [];
    var pagebars = {distance: null, duel: null, prize: null};
    var koTicker = null;
    var wantedname = null;
    var startTabId = 'distance';
    SheriffWindow.open = function (townId, tabId, wanted) {
        wantedname = wanted;
        SheriffWindow.window = wman.open('sheriff').setMiniTitle('Шериф');
        town_id = townId;
        SheriffWindow.DOM = $('div.tw2gui_window.sheriff');
        if (tabId)startTabId = tabId;
        if (townId === Character.homeTown.town_id) {
            var tabclick = function (win, id) {
                showTab(id);
            }
            SheriffWindow.window.addTab('Расстояние', 'distance', tabclick).addTab('Вознаграждение', 'prize', tabclick).addTab('Дуэльный разряд', 'duellevel', tabclick).addTab('Статистика', 'statistic', tabclick).addTab('Назначить', 'create', tabclick).appendToContentPane($('<div class="sheriff-distance"/>'), $('<div class="sheriff-prize"/>'), $('<div class="sheriff-duellevel"/>'), $('<div class="sheriff-statistic"/>'), $('<div class="sheriff-create"/>')).setTitle('Расстояние');
            initData4OwnSheriff(tabId);
        }
        else {
            SheriffWindow.window.appendToContentPane($('<div id="tb_sheriff" />')).setTitle('Награда за голову');
            showLockedWindow();
        }
    };
    wman.registerReloadHandler(/^sheriff/, function () {
        SheriffWindow.open(town_id);
    });
    var showTab = function (id) {
        if (!SheriffWindow.window)return;
        SheriffWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *', SheriffWindow.DOM).each(function (i, e) {
            if ($(e).hasClass('sheriff-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'distance':
                SheriffWindow.window.setTitle('Расстояние');
                break;
            case'prize':
                SheriffWindow.window.setTitle('Вознаграждение');
                break;
            case'duellevel':
                SheriffWindow.window.setTitle('Дуэльный разряд');
                break;
            case'statistic':
                SheriffWindow.window.setTitle('Статистика');
                break;
            case'create':
                SheriffWindow.window.setTitle('Назначить награду');
                break;
            default:
                SheriffWindow.window.setTitle('Расстояние');
                break;
        }
    }
    var updateWantedBox = function (tabKey, wanteds) {
        var content = getGeneralLayout(0);
        for (var i = 0; i < wanteds.length; i++) {
            if (i < 5)$(content[1]).append(createWantedPoster(wanteds[i])); else if (i < 10)$(content[3]).append(createWantedPoster(wanteds[i])); else i = wanteds.length;
        }
        $('div.ownsheriff-' + tabKey, SheriffWindow.DOM).empty().append(content);
        setTicker();
    }
    var initDistanceTab = function (pages) {
        $('div.sheriff-distance', SheriffWindow.DOM).empty().append('<div class="ownsheriff-distance"></div>');
        updateWantedBox('distance', distanceWanteds);
        if (pages > 1) {
            pagebars.distance = new west.gui.Pagebar(1, pages, switchPage4WantedList);
            $('div.ownsheriff-distance > div.tbsh_footer', SheriffWindow.DOM).append(pagebars.distance.getMainDiv().data('tab_key', 'distance'))
        }
    };
    var initPrizeTab = function (pages) {
        $('div.sheriff-prize', SheriffWindow.DOM).empty().append('<div class="ownsheriff-prize"></div>');
        updateWantedBox('prize', moneyWanteds);
        if (pages > 1) {
            pagebars.prize = new west.gui.Pagebar(1, pages, switchPage4WantedList);
            $('div.ownsheriff-prize > div.tbsh_footer', SheriffWindow.DOM).append(pagebars.prize.getMainDiv().data('tab_key', 'prize'));
        }
    };
    var initDuellevelTab = function (pages) {
        $('div.sheriff-duellevel', SheriffWindow.DOM).empty().append('<div class="ownsheriff-duel"></div>');
        updateWantedBox('duel', duelWanteds);
        if (pages > 1) {
            pagebars.duel = new west.gui.Pagebar(1, pages, switchPage4WantedList);
            $('div.ownsheriff-duel > div.tbsh_footer', SheriffWindow.DOM).append(pagebars.duel.getMainDiv().data('tab_key', 'duel'));
        }
    };
    var initStatisticTab = function (data) {
        var maindiv = $('<div class="ownsheriff-statistic"></div>');
        var scrollpane = new west.gui.Scrollpane('tbsh_statisticbox').appendContent(buildStatTable(data, 'player', 'Игрок').getMainDiv()).appendContent(buildStatTable(data, 'town', 'Город').getMainDiv()).appendContent(buildStatTable(data, 'world', 'Мир').getMainDiv());
        maindiv.append(scrollpane.getMainDiv());
        $('div.sheriff-statistic', SheriffWindow.DOM).empty().append(maindiv);
    };
    var initCreateTab = function () {
        var maindiv = $('<div class="ownsheriff-create"></div>');
        var charnameInput = new west.gui.Textfield("tbsh_iCharname").setSize(30).setValue((wantedname) ? wantedname : "");
        var selReason = new west.gui.Combobox('tbsh_create_reason').setWidth(150).addItem(0, '&nbsp;').select(0);
        var rewardInput = new west.gui.Textfield("tbsh_iReward").setSize(10);
        var tooltip1 = '<span class="text_bold">' + 'Живым или мёртвым' + ':</span>&nbsp;' + 'Вознаграждение выплачивается в случае победы на дуэли.';
        var tooltip2 = '<span class="text_bold">' + 'Смерть' + ':</span>&nbsp;' + 'Вознаграждение выплачивается только если игрок лишился сознания.';
        var cbAlive = new west.gui.Checkbox('Живым или мёртвым', 'tbsh_cb_deadoralive', deadOrAliveChecked).setRadiobutton().setSelected(true);
        var cbDead = new west.gui.Checkbox('Смерть', 'tbsh_cb_deadoralive', deadOrAliveChecked).setRadiobutton();
        var butCreatePoster = new west.gui.Button('Назначить', createWantedPosterButtonClicked, null, null).setMinWidth(175);
        for (var k in createData.reasons) {
            selReason.addItem(k, createData.reasons[k]);
        }
        var boxes = $('<table id="tbsh_create_deadoralive"><tr><td class="small"><span id="tbsh_wanted_fee_factor">' + createData.fee_factor + '</span> % ' + 'Комиссия' + '</td>' + '<td class="small"><span id="tbsh_wanted_fee_factor">' + createData.fee_factor_dead + '</span> % ' + 'Комиссия' + '</td></tr>' + '<tr><td><img class="tbsh_create_imgAlive" src="https://westrus.innogamescdn.com/images/window/sheriff/wanted_dod.jpg" /></td><td><img class="tbsh_create_imgDead opacity05" src="https://westrus.innogamescdn.com/images/window/sheriff/wanted_dead.jpg" /></td></tr>' + '<tr><td class="tbsh_create_cbAlive" title="' + tooltip1.escapeHTML() + '"></td>' + '<td class="tbsh_create_cbDead" title="' + tooltip2.escapeHTML() + '"></td></tr></table>');
        $('td.tbsh_create_cbAlive', boxes).append(cbAlive.getMainDiv().data('type', 'alive'));
        $('td.tbsh_create_cbDead', boxes).append(cbDead.getMainDiv().data('type', 'dead'));
        maindiv.append('<p>' + 'Имя' + ':</p>', charnameInput.getMainDiv(), '<br /><p>' + 'В розыске за' + ':</p>', selReason.getMainDiv(), '<br /><p>' + 'Вознаграждение' + ':</p>', rewardInput.getMainDiv(), boxes, butCreatePoster.getMainDiv());
        $('div.sheriff-create', SheriffWindow.DOM).empty().append(maindiv);
    };
    var initData4OwnSheriff = function () {
        Ajax.remoteCallMode('building_sheriff', 'index', {town_id: town_id}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            prepareData(json);
            SheriffWindow.timeleft = json.timeleft;
            buildScreens(json);
        }, SheriffWindow);
    };
    var prepareData = function (data) {
        distanceWanteds = [], duelWanteds = [], moneyWanteds = [];
        if (data.hasOwnProperty('create')) {
            createData = {};
            createData = data.create;
        }
        distanceWanteds = data.distanceWanteds;
        duelWanteds = data.duelWanteds;
        moneyWanteds = data.moneyWanteds;
    };
    var buildScreens = function (data) {
        initDistanceTab(data.distanceCount);
        initPrizeTab(data.moneyCount);
        initDuellevelTab(data.duelCount);
        if (data.hasOwnProperty('allStats'))initStatisticTab(data.allStats);
        initCreateTab();
        setTicker();
        showTab(startTabId);
    };
    var setTicker = function () {
        if (SheriffWindow.timeleft && SheriffWindow.timeleft > 10) {
            if (!koTicker || !koTicker.active) {
                koTicker = new Ticker(refreshKoTime);
                koTicker.setPeriod(2000);
                koTicker.start();
            }
            resetCountdown(SheriffWindow.timeleft);
        }
    }
    SheriffWindow.createWantedTooltip = function (playerObj) {
        var data = playerObj;
        var tooltip = '<div class="tbsh_tooltip_head"><p class="center">' + data.name.escapeHTML() + '</p><p class="tbsh_tooltip_avatar center">' + data.avatarpic + '</p><p class="center">' + 'Разыскивается за' + ':</p></div>' + '<ul class="tbsh_tooltip_reasons">';
        for (var r in data.reasons) {
            tooltip += '<li>' + data.reasons[r].reason + '</li>';
        }
        tooltip += '</ul>' + '<div class="horizontal-divider"></div>' + '<div class="tbsh_tooltip_prizes"><h4>' + 'Вознаграждение' + ':</h4><p>' + 'Мёртвым' + ':&nbsp;$' + data.amount + '</p><p>' + 'Живым' + ':&nbsp;$' + (data.not_dead_amount || 0) + '</p></div>' + '<div class="horizontal-divider"></div>' + '<div class="tbsh_tooltip_data"><h4>' + 'Противник' + ':</h4><p>' + 'Дуэльный разряд' + ':&nbsp;' + data.duellevel + '</p><p>' + 'Расстояние' + ':&nbsp;' + Map.calcWayTime(Character.getPosition(), {
                x: data.x,
                y: data.y
            }).formatDuration() + '</p></div>';
        return tooltip;
    }
    var createWantedPoster = function (data) {
        var poster = $('<div class="tbsh_wantedbox" onclick="javascript:PlayerProfileWindow.open(' + data.player_id + ')">' + '<div class="tbsh_wantedposter1">' + data.avatarpic + '</div><div title="' + SheriffWindow.createWantedTooltip(data).escapeHTML() + '" class="tbsh_wantedposter2"><p>' + data.name.escapeHTML() + '</p><span class="tbsh_wantedposter_avatar">&nbsp;</span>' + '<span class="tbsh_wantedposter_amount">$' + data.amount + '</span></div>' + '</div>');
        return poster;
    };
    var getGeneralLayout = function () {
        return $('<div class="tbsh_kotime_box">' + 'Ты готов!' + '</div>' + '<div class="tbsh_wanted_row"></div><br style="clear:left;" /><div class="tbsh_wanted_row"></div><div class="tbsh_footer"></div>');
    };
    var buildStatTable = function (data, key, label) {
        var table = new west.gui.Table().setId('tbsh_table_' + key).removeFooter().addColumn("tbsh_statlabel").addColumn("tbsh_statvalue").appendToThCell("head", "tbsh_statlabel", s('Статистика для %1', label), label).appendToThCell("head", "tbsh_statvalue", s('Стоит от %1', label), '&nbsp;');
        var tmpCells = {};
        for (var i = 0; i < data[key].length; i++) {
            tmpCells['tbsh_statlabel'] = data[key][i].display + ':';
            tmpCells['tbsh_statvalue'] = data[key][i].value;
            table.buildRow('tbsh_stats_' + key, tmpCells);
        }
        return table;
    };
    var createWantedPosterButtonClicked = function () {
        var name = $('#tbsh_iCharname', SheriffWindow.DOM).val();
        var reward = $('#tbsh_iReward', SheriffWindow.DOM).val();
        var reason = $('#tbsh_create_reason_value', SheriffWindow.DOM).val();
        if ($('div.tbsh_cb_deadoralive.tw2gui_checkbox_checked', SheriffWindow.DOM).length)
            var dead = $('div.tbsh_cb_deadoralive.tw2gui_checkbox_checked', SheriffWindow.DOM).data('type') == 'dead' ? true : false;
        if (name != '' && reward != '' && reason > 0 && isDefined(dead)) {
            Ajax.remoteCall('building_sheriff', 'create_wanted', {
                player_name: name,
                reason_id: reason,
                reward: reward,
                dead: dead
            }, function (json) {
                if (json.error)return new UserMessage(json.msg).show(); else new UserMessage('Объявление о награде за голову игрока создано.', UserMessage.TYPE_SUCCESS).show();
                prepareData(json);
                SheriffWindow.timeleft = json.timeleft;
                buildScreens(json);
                return true;
            }, SheriffWindow);
        }
        else return new UserMessage('В твоём объявлении чего-то не хватает.').show();
    };
    var deadOrAliveChecked = function () {
        var selThis = $('div.tbsh_cb_deadoralive.tw2gui_checkbox_checked', SheriffWindow.DOM);
        $('img.tbsh_create_imgAlive, img.tbsh_create_imgDead', SheriffWindow.DOM).removeClass('opacity05');
        if (selThis.data('type') == 'alive') {
            $('img.tbsh_create_imgDead', SheriffWindow.DOM).addClass('opacity05');
        }
        else if (selThis.data('type') == 'dead') {
            $('img.tbsh_create_imgAlive', SheriffWindow.DOM).addClass('opacity05');
        }
    };
    var switchPage4WantedList = function (pagebarReturn) {
        var tabKey = $('div.tw2gui_pagebar:visible', SheriffWindow.DOM).data('tab_key');
        var post;
        if (tabKey == 'prize')post = 'money'; else if (tabKey == 'duel')post = 'duel_level';
        Ajax.remoteCall('building_sheriff', 'load_page', {page: pagebarReturn - 1, type: post}, function (json) {
            if (json.error) {
                new UserMessage(json.msg).show();
                return null;
            }
            updateWantedBox(tabKey, json.result);
            pagebars[tabKey] = new west.gui.Pagebar(json.page + 1, json.count, switchPage4WantedList);
            $('div.ownsheriff-' + tabKey + ' > div.tbsh_footer', SheriffWindow.DOM).append(pagebars[tabKey].getMainDiv().data('tab_key', tabKey));
        }, SheriffWindow);
    };
    var refreshKoTime = function (id, diff) {
        if (diff > 0) {
            $('span.tbsh_ko_time', SheriffWindow.DOM).text(diff.getTime2EndString());
            return true;
        }
        else {
            $('div.tbsh_kotime_box', SheriffWindow.DOM).html('Ты готов!');
            return false;
        }
    }
    var resetCountdown = function (timeleft) {
        koTicker.add2Queue('tbsh_kotimer', timeleft + Math.round(new Date() / 1000));
        $('div.tbsh_kotime_box', SheriffWindow.DOM).html('Продолжительность комы' + ':&nbsp;<span class="tbsh_ko_time">' + timeleft.getTime2EndString() + '</span>');
        if (!koTicker.active)koTicker.start();
    }
    var showLockedWindow = function () {
        var maindiv = $('<div class="fts_content"><div class="fts_textbox">' +
            'Шериф не принимает чужаков' + '</div></div>');
        SheriffWindow.window.$('#tb_sheriff').empty().append(maindiv);
    };
})(jQuery);
;
(function ($) {
    window.MorticianWindow = {};
    wman.registerReloadHandler(/^mortician/, function () {
        MorticianWindow.init();
    });
    MorticianWindow.townid = null;
    MorticianWindow.open = function (townID) {
        MorticianWindow.townid = townID;
        MorticianWindow.window = wman.open('mortician-' + MorticianWindow.townid).setMiniTitle('Могильщик').appendToContentPane($('<div class="mortician-content" id="mortician-content-' + MorticianWindow.townid + '"/>'));
        MorticianWindow.window.setTitle('Могильщик');
        MorticianWindow.init();
    };
    MorticianWindow.init = function () {
        Ajax.remoteCallMode("building_mortician", "get_data", {town_id: MorticianWindow.townid}, function (data) {
            if (!data.error) {
                MorticianWindow.ini_cont(data.data);
            }
            else {
                new UserMessage(data.msg, UserMessage.TYPE_ERROR).show();
            }
        }, MorticianWindow);
    };
    MorticianWindow.ini_cont = function (stats) {
        var main = $('<div class="mortician"></div>').appendTo($('#mortician-content-' + MorticianWindow.townid).empty());
        var body = $('<div class="morticianbody"></div>').appendTo(main);
        var table = new west.gui.Table().appendTo(body).addColumn("namestat").addColumn("stat").appendToCell('head', 'namestat', '<span class="mortician_header center">' + s("Статистика города %1", stats.town_name) + '</span>');
        var duels_won;
        var duels_lost;
        var swoon_enemies;
        var swoon_member;
        MorticianWindow.controw(table, "Всего дуэлей", stats.duels_total ? "<strong>" + stats.duels_total + "</strong>" : "--");
        if (stats.duels_won > stats.duels_lost)
            duels_won = "<span style='font-weight: bold; color: green;'>" + stats.duels_won + "</span>"; else
            duels_won = stats.duels_won;
        MorticianWindow.controw(table, "Побед на дуэлях", duels_won);
        if (stats.duels_lost > stats.duels_won)
            duels_lost = "<span style='font-weight: bold; color: darkred;'>" + stats.duels_lost + "</span>"; else
            duels_lost = stats.duels_lost;
        MorticianWindow.controw(table, "Поражений", duels_lost);
        MorticianWindow.controw(table, "Разница", stats.duels_diff);
        if (stats.swoon_enemies > stats.swoon_members)
            swoon_enemies = "<span style='font-weight: bold; color: green;'>" + stats.swoon_enemies + "</span>"; else
            swoon_enemies = stats.swoon_enemies;
        MorticianWindow.controw(table, "Враги, потерявшие сознание", swoon_enemies);
        if (stats.swoon_members > stats.swoon_enemies)
            swoon_member = "<span style='font-weight: bold; color: darkred;'>" + stats.swoon_members + "</span>"; else
            swoon_member = stats.swoon_members;
        MorticianWindow.controw(table, "Жители, потерявшие сознание", swoon_member);
        var jsplink = "<a onclick=javascript:PlayerProfileWindow.open(";
        var row = {};
        row['best_total_damage_member'] = 'Лучший дуэлянт города';
        row['best_total_damage_enemy'] = 'Лучший противник';
        row['best_hit_member'] = 'Лучший нанесённый удар';
        row['best_hit_enemy'] = 'Лучший удар противника';
        for (var base in row) {
            MorticianWindow.controw(table, row[base], stats[base] ? s("%1 урон", stats[base]) + jsplink + stats[base + '_player_id'] + ");> (" + stats[base + '_name'] + ")</a>" : "--");
        }
        $("<div class='morticianpic'><img src='https://westrus.innogamescdn.com/images/buildings/mortician1.png' alt='' /></div>").appendTo(main);
        $("<div style='padding-top: 10px;width:100px; padding-left: 20px;'>" + "<h2>" + 'Могильщик' + "</h2>" + "<div class='divlink' onclick='TownWindow.open(" + stats.x + ", " + stats.y + ");'>" + stats.town_name + "</div>" + "</div>").appendTo(main);
    };
    MorticianWindow.controw = function (table, namestat, stat) {
        if (!stat)
            stat = '--';
        table.appendRow().appendToCell(-1, "namestat", namestat).appendToCell(-1, "stat", stat);
    }
})(jQuery);

var WORLDMAP_COEFF_500 = 0.010737;
;
(function ($) {
    wman.registerReloadHandler(/^ally-\d+/, function (ally_id) {
        AllianceWindow.open(ally_id.match(/\d+/)[0]).initData();
    });
    AllianceWindow = function (ally_id) {
        this.ally_id = ally_id;
        this.uid = 'ally-' + ally_id;
        this.window = wman.open(this.uid, null, "ally-window").setMiniTitle('Альянс').addEventListener("WINDOW_DESTROY", function () {
            delete instances[this.ally_id];
        }, this);
        this.init();
    }
    AllianceWindow.prototype = AllianceWindow;
    var instances = {};
    AllianceWindow.open = function (ally_id) {
        if (!instances[ally_id]) {
            instances[ally_id] = new AllianceWindow(ally_id);
        }
        return instances[ally_id];
    }
    AllianceWindow.init = function () {
        var self = this;
        var tabclick = function (win, id) {
            self.showTab(id);
        }
        self.window.addTab('Обзор', 'overview', tabclick).addTab('Форты', 'forts', tabclick).addTab('Статистика', 'stats', tabclick).addTab('Карта', 'map', tabclick).appendToContentPane($('<div class="ally-overview"/>'), $('<div class="ally-forts"/>'), $('<div class="ally-stats"/>'), $('<div class="ally-map"/>'));
        this.Overviewinit();
        this.Fortinit();
        this.Statinit();
        this.window.$('div.row_head div').click({"that": this}, sortHandler);
        this.initData();
        this.showTab('overview');
    }
    AllianceWindow.Statinit = function () {
        var maindiv = $('<div class="ally-stats-content"></div>');
        this.statTable = new west.gui.Table().addClass("stats").appendTo(maindiv).addColumn("bnd_stats_name").addColumn("bnd_stats_val").appendToThCell("head", "bnd_stats_name", 'Статистика альянса', 'Статистика альянса');
        this.window.$('div.ally-stats').empty().append(maindiv);
    }
    AllianceWindow.StatinitCont = function (data) {
        this.statTable.clearBody();
        var tmpCells = {};
        var count = 0, avg_lvl = 0, fk = 0, difclass = 0;
        for (var key in data.chars) {
            count += parseInt(data.chars[key].cnt);
            avg_lvl += parseInt(data.chars[key].avg_level) * data.chars[key].cnt;
            fk += parseInt(data.chars[key].fbcnt);
            difclass++;
            tmpCells['bnd_stats_name'] = Game.InfoHandler.getLocalString4Charclass(data.chars[key]['class']);
            tmpCells['bnd_stats_val'] = '<span title="' + 'Количество' + '" class="mem"></span> ' + data.chars[key].cnt + ' <span title="' + 'Средний уровень' + '" class="avg"></span> ' + data.chars[key].avg_level + ' <span title="' + 'Фортовых битв' + '" class="fortbattle"></span> ' + data.chars[key].fbcnt;
            this.statTable.buildRow('bnd_stats', tmpCells);
        }
        avg_lvl = count > 0 ? avg_lvl / count : 0;
        tmpCells['bnd_stats_name'] = 'Всего';
        tmpCells['bnd_stats_val'] = '<span title="' + 'Количество' + '" class="mem"></span> ' + count + ' <span title="' + 'Средний уровень' + '" class="avg"></span> ' + Math.round(avg_lvl) + ' <span title="' + 'Фортовых битв' + '" class="fortbattle"></span> ' + fk;
        this.statTable.buildRow('bnd_stats', tmpCells);
        var stat_names = {
            "fb_done": 'Рекорд: Сражения за форт',
            "fb_win": 'Рекорд: Фортовые победы',
            "maxdmg": 'Рекорд: Нанесённый урон',
            "maxko": 'Рекорд: Убитые противники в одной битве'
        };
        for (var key in data.stats) {
            var rd = data.stats[key];
            tmpCells['bnd_stats_name'] = stat_names[key];
            tmpCells['bnd_stats_val'] = (rd.val != null ? '<a title="' + 'Показать профиль игрока' + '" href=\'javascript:PlayerProfileWindow.open(' + rd.player_id + ');\' > ' + s("%1 — %2", rd.name, rd.val) + ' </a>' : '--');
            this.statTable.buildRow('bnd_stats', tmpCells);
        }
    }
    AllianceWindow.Fortinit = function () {
        var maindiv = $('<div class="ally-forts-content"></div>');
        this.fortTable = new west.gui.Table().addClass("forts").appendTo(maindiv).addColumn("bnd_fort_name").addColumn("bnd_fort_battle").addColumn("bnd_fort_size").appendToThCell("head", "bnd_fort_name", 'Название форта', 'Название форта').appendToThCell("head", "bnd_fort_battle", 'Битвы', '&nbsp;').appendToThCell("head", "bnd_fort_size", 'Размер форта', 'Размер');
        this.fortTownTable = new west.gui.Table().addClass("towns").appendTo(maindiv).addColumn("bnd_fort_town_name").addColumn("bnd_fort_town_mem").addColumn("bnd_fort_town_points").appendToThCell("head", "bnd_fort_town_name", 'Владелец форта', 'Владелец форта').appendToThCell("head", "bnd_fort_town_mem", 'Количество членов', '&nbsp;').appendToThCell("head", "bnd_fort_town_points", 'Очки города', '&nbsp;');
        this.window.$('div.ally-forts').empty().append(maindiv);
        this.fortTable.getMainDiv().data("select", 0);
    }
    AllianceWindow.FortinitCont = function (forts) {
        this.fortTable.clearBody();
        var tmpCells = {};
        for (var i = 0; i < forts.length; i++) {
            var rd = forts[i];
            var fort = '<a title="' + 'Показать профиль форта' + '" href=\'javascript:void(FortWindow.open(' + rd.fort_id + ',' + rd.x + ',' + rd.y + '));\' > ' + rd.name + '</a>';
            tmpCells['bnd_fort_name'] = fort;
            tmpCells['bnd_fort_battle'] = '<a title="' + 'Показать статистику' + '" href=\'javascript:CemeteryWindow.open(' + rd.fort_id + ');\' > ' + rd.battle_count + '</a>';
            tmpCells['bnd_fort_size'] = (rd.type) ? (rd.type == 2) ? 'Большой' : 'Средний' : 'Малый';
            var highlight_row = false;
            var select = this.fortTable.getMainDiv().data("select");
            if ((select == 0 && i == 0) || select == rd.fort_id) {
                this.fortTable.getMainDiv().data("select_row", i);
                if (select == 0)
                    this.fortTable.getMainDiv().data("select", rd.fort_id);
                highlight_row = true
                this.fortTownTable.clearBody();
                var tmpTownCells = {};
                for (var z = 0; z < rd.towns.length; z++) {
                    var town_row = rd.towns[z];
                    var town = '<a href="javascript:Map.center(' + town_row.x + ', ' + town_row.y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
                    town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:void(TownWindow.open(' + town_row.x + ', ' + town_row.y + '));\'> ' + town_row.name + '</a>';
                    tmpTownCells['bnd_fort_town_name'] = town;
                    tmpTownCells['bnd_fort_town_mem'] = town_row.member_count;
                    tmpTownCells['bnd_fort_town_points'] = town_row.town_points;
                    this.fortTownTable.buildRow('bnd_forts', tmpTownCells);
                }
            }
            this.fortTable.buildRow('bnd_forts_' + rd.fort_id, tmpCells, (highlight_row) ? function (row) {
                row.addClass("highlight_row");
                return row;
            } : null);
            this.window.$('.bnd_forts_' + rd.fort_id).click({"fort_id": rd.fort_id, "that": this}, function (event) {
                var that = event.data.that;
                that.fortTable.getMainDiv().data("select", event.data.fort_id);
                that.FortinitCont(that.data.forts);
            });
        }
    }
    AllianceWindow.Overviewinit = function () {
        var maindiv = $('<div class="ally-overview-content"></div>');
        this.overviewprofile = new west.gui.Scrollpane("bnd_profile");
        new west.gui.Groupframe("bnd_profile_group").appendToContentPane(this.overviewprofile.getMainDiv()).appendTo(maindiv);
        this.overviewTable = new west.gui.Table().appendTo(maindiv).addColumn("bnd_town_name").addColumn("bnd_town_mem").addColumn("bnd_town_points").appendToThCell("head", "bnd_town_name", 'Города альянса', 'Города альянса').appendToThCell("head", "bnd_town_mem", 'Количество членов', '&nbsp;').appendToThCell("head", "bnd_town_points", 'Очки города', '&nbsp;');
        this.window.$('div.ally-overview').empty().append(maindiv);
    }
    AllianceWindow.initData = function () {
        var self = this;
        Ajax.remoteCallMode("alliance", "get_data", {alliance_id: self.ally_id}, function (resp) {
            if (resp.error) {
                new UserMessage(resp.error, UserMessage.TYPE_ERROR).show();
                self.window.destroy();
                return;
            }
            self.OverviewinitCont(resp.data);
            self.FortinitCont(resp.data.forts);
            self.StatinitCont(resp.data);
            self.MapInit(resp.data.forts, resp.data.towns);
        }, AllianceWindow);
    }
    AllianceWindow.OverviewChange = function () {
        var mainDiv = $('<div class="bnd_change_box"></div>');
        var textbox = new west.gui.Textarea(this.data.allianceDescription, "bnd_profile_change").setWidth("395px").setHeight("200px");
        $('textarea', textbox.getMainDiv()).attr('maxlength', this.data.char_len);
        mainDiv.append(new west.gui.Bbcodes(textbox).getMainDiv(), textbox.getMainDiv(), "<div class='charcounter'> </div>");
        $('.charcounter', mainDiv).text('Описание:' + textbox.getContent().length + ' / ' + this.data.char_len);
        var that = this;
        $('textarea', textbox.getMainDiv()).on('keyup', function () {
            $('.charcounter', mainDiv).text('Описание:' + textbox.getContent().length + ' / ' + that.data.char_len);
        });
        var submitnew = function (profile) {
            Ajax.remoteCall('alliance', 'save_description', {desc: profile}, function (resp) {
                if (resp.error)return new UserMessage(resp.error, UserMessage.TYPE_ERROR).show(); else {
                    new UserMessage(resp.message, UserMessage.TYPE_SUCCESS).show();
                    that.overviewprofile.getContentPane().empty();
                    that.overviewprofile.appendContent(resp.parseddesc);
                    that.data.allianceDescription = profile;
                }
            });
        };
        new west.gui.Dialog("Редактировать описание альянса", mainDiv).addButton('change', function () {
            submitnew(textbox.getContent());
        }).addButton('cancel').show();
    }
    AllianceWindow.OverviewUpdateTable = function (towns) {
        this.overviewTable.clearBody();
        var tmpCells = {};
        for (var i = 0; i < towns.length; i++) {
            var rd = towns[i];
            var town = '<a href="javascript:Map.center(' + rd.x + ', ' + rd.y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
            town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:void(TownWindow.open(' + rd.x + ', ' + rd.y + '));\' > ' + rd.name + '</a>';
            tmpCells['bnd_town_name'] = town;
            tmpCells['bnd_town_mem'] = rd.member_count;
            tmpCells['bnd_town_points'] = rd.town_points;
            this.overviewTable.buildRow('bnd_towns', tmpCells);
        }
    }
    AllianceWindow.OverviewinitCont = function (data) {
        this.overviewprofile.getContentPane().empty();
        this.overviewprofile.appendContent(data.allianceDescriptionParse);
        if (data.rights) {
            this.window.$('div.bnd_profile').addClass("change_btn");
            var change_btn = new west.gui.Button('Изменить', function () {
                this.OverviewChange();
            }, this)
            this.window.$('div.ally-overview').append(change_btn.getMainDiv());
        }
        this.data = data;
        this.OverviewUpdateTable(data.towns);
    };
    var calcCoord4Worldmap = function (coordArr) {
        return {x: parseInt((coordArr[0]) * WORLDMAP_COEFF_500), y: parseInt((coordArr[1]) * WORLDMAP_COEFF_500) - 4};
    };
    var createPosPoint4Alliancemap = function (offset) {
        var coord = {};
        if ((coord = calcCoord4Worldmap([Character.getPosition().x, Character.getPosition().y]))) {
            return $('<img title="' + 'Твоё местоположение' + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_pos.png" class="mmap_wmappoint" />').css({
                left: coord.x + offset.left + 'px',
                top: coord.y + offset.top + 'px'
            });
        }
        return $([]);
    };
    var createAlliPoints4Alliancemap = function (data, type, offset) {
        var coords = [];
        for (var i = 0; i < data.length; i++) {
            var tmp = data[i];
            var coord = {};
            if ((coord = calcCoord4Worldmap([tmp.x, tmp.y]))) {
                coords.push($('<img title="' + tmp.name + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_alliance_' + type + '.png" class="mmap_wmappoint" />').css({
                    left: coord.x + offset.left + 'px',
                    top: coord.y + offset.top + 'px'
                }));
            }
        }
        return coords;
    };
    var createLegendBox = function (name, label, title) {
        return $('<span class="ally_legendbox_' + name + '"' + (title ? ' title="' + title.escapeHTML() + '"' : '') + '>&nbsp;<img src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_' + name + '.png" />&nbsp;' + label + '</span>');
    };
    AllianceWindow.MapInit = function (forts, towns) {
        var maindiv = $('<div class="ally-map-content">' + '<p class="ally_worldmap_desc">' + 'Показывает все союзные форты и города.' + '</p>' + '<div class="ally_worldmap"></div>' + '<div class="ally_worldmap_legend"></div>' + '</div>');
        $('div.ally_worldmap_legend', maindiv).append(createLegendBox('pos', 'Твоё местоположение', 'Показывает твое текущее месторасположение на карте.'), createLegendBox('alliance_forts', 'Форты альянса', 'Показывает форты твоего альянса на карте.'), createLegendBox('alliance_towns', 'Города альянса', 'Показывает города твоего альянса на карте.'));
        var map = $('<div class="alliance_worldmap"></div>');
        $('div.ally_worldmap', maindiv).append(map);
        var offset = map.position();
        map.appendArray(createAlliPoints4Alliancemap(towns, 'towns', offset)).appendArray(createAlliPoints4Alliancemap(forts, 'forts', offset)).append(createPosPoint4Alliancemap(offset));
        this.window.$('div.ally-map').empty().append(maindiv);
    };
    AllianceWindow.showTab = function (id) {
        if (!this.window)return;
        this.window.activateTab(id).$('div.tw2gui_window_content_pane > *').each(function (i, e) {
            if ($(e).hasClass('ally-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'overview':
                this.window.setTitle('Альянс');
                break;
            case'forts':
                this.window.setTitle('Форты');
                break;
            case'stats':
                this.window.setTitle('Статистика');
                break;
            case'map':
                this.window.setTitle('Карта альянса');
                break;
        }
    }
    var sortHelper = function (table, sort_key, sort_functions, data) {
        if (table.data("sort_by") == "ASC_" + sort_key) {
            table.data("sort_by", "DESC_" + sort_key);
            data.sort(sort_functions[0]);
        } else {
            table.data("sort_by", "ASC_" + sort_key);
            data.sort(sort_functions[1]);
        }
    }
    var sortHandler = function (event) {
        var that = event.data.that;
        if ($(this).hasClass('bnd_town_name')) {
            sortHelper(that.overviewTable.getMainDiv(), "NAME", new Array(sortByNameDESC, sortByNameASC), that.data.towns);
            that.OverviewUpdateTable(that.data.towns);
        }
        else if ($(this).hasClass('bnd_town_mem')) {
            sortHelper(that.overviewTable.getMainDiv(), "MEM", new Array(sortByTownMEMDESC, sortByTownMEMASC), that.data.towns);
            that.OverviewUpdateTable(that.data.towns);
        }
        else if ($(this).hasClass('bnd_town_points')) {
            sortHelper(that.overviewTable.getMainDiv(), "Points", new Array(sortByTownPointsDESC, sortByTownPointsASC), that.data.towns);
            that.OverviewUpdateTable(that.data.towns);
        }
        else if ($(this).hasClass('bnd_fort_name')) {
            sortHelper(that.fortTable.getMainDiv(), "Name", new Array(sortByNameDESC, sortByNameASC), that.data.forts);
            that.FortinitCont(that.data.forts);
        }
        else if ($(this).hasClass('bnd_fort_battle')) {
            sortHelper(that.fortTable.getMainDiv(), "Battlecount", new Array(sortByFortBattleDESC, sortByFortBattleASC), that.data.forts);
            that.FortinitCont(that.data.forts);
        }
        else if ($(this).hasClass('bnd_fort_size')) {
            sortHelper(that.fortTable.getMainDiv(), "Size", new Array(sortByFortSizeDESC, sortByFortSizeASC), that.data.forts);
            that.FortinitCont(that.data.forts);
        }
        else if ($(this).hasClass('bnd_fort_town_name')) {
            var fort_row = that.fortTable.getMainDiv().data("select_row");
            sortHelper(that.fortTable.getMainDiv(), "Name", new Array(sortByNameDESC, sortByNameASC), that.data.forts[fort_row].towns);
            that.FortinitCont(that.data.forts);
        }
        else if ($(this).hasClass('bnd_fort_town_mem')) {
            var fort_row = that.fortTable.getMainDiv().data("select_row");
            sortHelper(that.fortTownTable.getMainDiv(), "Mem", new Array(sortByTownMEMDESC, sortByTownMEMASC), that.data.forts[fort_row].towns);
            that.FortinitCont(that.data.forts);
        }
        else if ($(this).hasClass('bnd_fort_town_points')) {
            var fort_row = that.fortTable.getMainDiv().data("select_row");
            sortHelper(that.fortTownTable.getMainDiv(), "Points", new Array(sortByTownPointsDESC, sortByTownPointsASC), that.data.forts);
            that.FortinitCont(that.data.forts);
        }
    }
    var sortByFortSizeASC = function (a, b) {
        return a.type - b.type;
    }
    var sortByFortSizeDESC = function (a, b) {
        return b.type - a.type;
    }
    var sortByFortBattleASC = function (a, b) {
        return a.battle_count - b.battle_count;
    }
    var sortByFortBattleDESC = function (a, b) {
        return b.battle_count - a.battle_count;
    }
    var sortByNameDESC = function (a, b) {
        return a.name.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") < b.name.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") ? 1 : -1;
    }
    var sortByNameASC = function (a, b) {
        return a.name.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") > b.name.toUpperCase().replace(/^Ä/, "A").replace(/^Ö/, "O").replace(/^Ü/, "U").replace(/^É/, "E") ? 1 : -1;
    }
    var sortByTownMEMASC = function (a, b) {
        return a.member_count - b.member_count;
    }
    var sortByTownMEMDESC = function (a, b) {
        return b.member_count - a.member_count;
    }
    var sortByTownPointsASC = function (a, b) {
        return a.town_points - b.town_points;
    }
    var sortByTownPointsDESC = function (a, b) {
        return b.town_points - a.town_points;
    }
})(jQuery);

window.Survey = {};
Survey.open = function (sob) {
    Survey.sob = sob;
    var questions;
    var win = Survey.window = wman.open("survey", "Опрос").setMiniTitle("Опрос").appendToContentPane((Survey.questions = questions = new west.gui.Scrollpane("survey_panel")).getMainDiv());
    questions.appendContent("<div class='survey_question'>" + sob.title_text + "</div>");
    questions.appendContent("<a onclick='Survey.cancel()' class='survey_cancel_link'>" + "Я не хочу принимать участие в этом опросе…" + "</a>");
    var i, j;
    for (i = 0; i < sob.questiongroups.length; i += 1) {
        var grp = sob.questiongroups[i];
        var gel = $('<div class="answers"></div>');
        questions.appendContent("<div class='question_text'>" + s("Вопрос %1:", i + 1) + " " + grp.question_text + "</div>").appendContent(gel);
        for (j = 0; j < grp.answers.length; j += 1) {
            var a = grp.answers[j];
            gel.append("<div class='answer'><input " + (grp.question_type == 'radiobuttons' ? "type='radio' name='_group_id_" + grp.questiongroup_id + "'" : "type='checkbox'") + " id='_answer_id_" + a.answer_id + "' /><label for='_answer_id_" + a.answer_id + "'>" + a.answer_text + "</label></div>");
        }
    }
    questions.appendContent(new west.gui.Button("Отправить", Survey.vote).setMinWidth(340).getMainDiv());
}
wman.registerReloadHandler(/^survey$/, function () {
    Survey.open(Survey.sob)
});
Survey.vote = function () {
    var answers = [];
    var i, j;
    var sob = Survey.sob;
    for (i = 0; i < sob.questiongroups.length; i += 1) {
        var grp = sob.questiongroups[i];
        for (j = 0; j < grp.answers.length; j += 1) {
            var a = grp.answers[j];
            answers.push({
                answer_id: a.answer_id,
                result_value: Survey.window.$('#_answer_id_' + a.answer_id).attr('checked') ? 1 : 0
            })
        }
    }
    Survey.questions.getContentPane().empty().append("<div class='survey_thx'>"
        + "Отправление…" + "</div>");
    Ajax.remoteCall('survey', 'vote', {answers: JSON.stringify(answers)}, function (json) {
        if (json != 'OK') {
            Survey.questions.getContentPane().empty().append("<div class='survey_thx'>"
                + "Возможно, произошла непредусмотренная ошибка, сайт временно недоступен или перегружен." + "</div>");
            if (json.error) {
                return new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
            }
        }
        else Survey.questions.getContentPane().empty().append("<div class='survey_thx'>"
            + "Спасибо за участие в опросе!" + "</div>");
    });
}
Survey.cancel = function () {
    Survey.questions.getContentPane().empty().append("<div class='survey_thx'>"
        + "Жаль, спасибо за потраченное время!" + "</div>");
    Ajax.remoteCall('survey', 'cancelvote', {}, function (json) {
    });
}
;
(function ($) {
    BugreportWindow = {List: {}, Report: {}, Known: {}};
    BugreportWindow.open = function (tab) {
        var tabclick = function (win, id) {
            BugreportWindow.showTab(id);
        };
        BugreportWindow.window = wman.open("bugreport").setMiniTitle('Bugreport').addTab('Report new bug', 'report', tabclick).addTab('Your bugs', 'list', tabclick).addTab('Known bugs', 'known', tabclick).addEventListener("WINDOW_DESTROY", function () {
            Map.hideCoords();
        }).appendToContentPane($('<div class="bugreport-report"/>'), $('<div class="bugreport-list"/>'), $('<div class="bugreport-known"/>'));
        BugreportWindow.showTab((tab == undefined ? 'report' : tab));
        BugreportWindow.window.setTitle('Bugreport');
        Map.showCoords();
    };
    wman.registerReloadHandler(/^bugreport/, function () {
        BugreportWindow.open();
    });
    BugreportWindow.showTab = function (id) {
        if (!BugreportWindow.window)return;
        BugreportWindow.window.activateTab(id).$('div.tw2gui_window_content_pane > *').each(function (i, e) {
            if ($(e).hasClass('bugreport-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            } else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        switch (id) {
            case'list':
                BugreportWindow.List.init();
                break;
            case'known':
                BugreportWindow.Known.init();
                break;
            default:
                BugreportWindow.Report.init();
                break;
        }
    };
    BugreportWindow.List.init = function () {
        if (!BugreportWindow.window.$('div.bugreport-list').children().length)
            BugreportWindow.List.initStructure();
        Ajax.remoteCall('bugreport', '', {}, function (json) {
            if (json.error) {
                new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            BugreportWindow.List.fillContent(json);
        });
    };
    BugreportWindow.List.initStructure = function () {
        BugreportWindow.List.table = new west.gui.Table().addColumn('date').addColumn('desc').addColumn('status').appendToCell('head', 'date', 'Report date').appendToCell('head', 'desc', 'Description').appendToCell('head', 'status', 'Status').appendTo(BugreportWindow.window.$('div.bugreport-list'));
    };
    BugreportWindow.List.fillContent = function (data) {
        BugreportWindow.List.table.clearBody();
        for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];
            var statusText = '';
            switch (r.status) {
                case 1:
                    statusText = '<span class="confirmed">confirmed</span>';
                    break;
                case 2:
                    statusText = '<span class="rejected" title="' + r.response + '">rejected</span>';
                    break;
                case 3:
                    statusText = '<span class="confirmed">resolved</span>';
                    break;
                case 4:
                    statusText = 'duplicate';
                    break;
                default:
                    statusText = 'open';
                    break;
            }
            BugreportWindow.List.table.appendRow().appendToCell(-1, 'date', r.report_date).appendToCell(-1, 'desc', $("<span>" + r.details.replace(/<br(\s?)(\/?)>/g, "").cutIt(70) + "</span>").attr('title', r.details)).appendToCell(-1, 'status', statusText);
        }
    };
    BugreportWindow.Report.init = function () {
        var mdiv = BugreportWindow.window.$('div.bugreport-report');
        if (!mdiv.children().length) {
            BugreportWindow.Report.desc = new west.gui.Textarea().setHeight(140).setWidth(625);
            var bbcode = new west.gui.Bbcodes(BugreportWindow.Report.desc, ["player", "town", "alliance", "fort"]);
            var btn = new west.gui.Button('Send report', BugreportWindow.Report.send);
            mdiv.append($('<div class="report-header">'
                + 'Here you can report bugs to the support team. The first person to report each new real bug gets 5 <img src="https://westrus.innogamescdn.com/images/nuggets.png"/> nuggets!<br /><br />'
                + 'Please only use this form to submit <strong>minor, easily reproducible bugs</strong>. If the issue is critical, '
                + 'time sensitive or specific to your account, send a ticket via the support system or use the forum bug tracker instead.<br /><br />'
                + 'Remember to first disable all userscripts, clear your cache and refresh the game. If the bug still occurs, '
                + 'please provide a step by step description of how to reproduce the bug and describe what happens. '
                + '<em>Include the map coordinates where applicable.</em><br /><br />' + +'</div>'));
            mdiv.append(bbcode.getMainDiv()).append(BugreportWindow.Report.desc.getMainDiv()).append('<br/>');
            if (TheWestApi.length().length > 0 || typeof(TWPro) !== "undefined" || typeof(TWPU) !== "undefined" || typeof(dyMarketHelper) !== "undefined" || typeof(TWDB) !== "undefined") {
                mdiv.append($('<div class="report-ext">Our check detected that TWPro, or some other extensions are enabled in your browser. Please disable these before reporting bugs!</div>'));
            } else {
                mdiv.append(btn.getMainDiv());
            }
        }
    };
    BugreportWindow.Report.send = function () {
        var msg = BugreportWindow.Report.desc.getContent();
        if (msg.length < 30) {
            new UserMessage('Please provide a longer description!', UserMessage.TYPE_ERROR).show();
            return;
        }
        var openWins = [];
        for (var k in wman.windowIds) {
            openWins.push({id: wman.windowIds[k].id, tab: wman.windowIds[k].currentActiveTabId});
        }
        var otherInfo = JSON.stringify({
            jsErrorLog: (typeof(ErrorLog) !== "undefined" && typeof(ErrorLog.list) !== "undefined") ? ErrorLog.list : '',
            openWindows: openWins
        });
        Ajax.remoteCall('bugreport', 'report', {details: msg, other: otherInfo}, function (json) {
            if (json.error) {
                new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            new UserMessage(json.msg, UserMessage.TYPE_SUCCESS).show();
            BugreportWindow.showTab('list');
        });
    };
    BugreportWindow.Known.init = function () {
        if (!BugreportWindow.window.$('div.bugreport-known').children().length)
            BugreportWindow.Known.initStructure();
        Ajax.remoteCall('bugreport', '', {confirmed: true}, function (json) {
            if (json.error) {
                new UserMessage(json.msg, UserMessage.TYPE_ERROR).show();
                return;
            }
            BugreportWindow.Known.fillContent(json);
        });
    };
    BugreportWindow.Known.initStructure = function () {
        BugreportWindow.Known.table = new west.gui.Table().addColumn('desc').appendToCell('head', 'desc', 'Already known or confirmed bugs').appendTo(BugreportWindow.window.$('div.bugreport-known'));
    };
    BugreportWindow.Known.fillContent = function (data) {
        BugreportWindow.Known.table.clearBody();
        for (var i = 0; i < data.list.length; i++) {
            var r = data.list[i];
            BugreportWindow.Known.table.appendRow().appendToCell(-1, 'desc', $('<span>' + (r.title ? r.title : r.details.replace(/<br(\s?)(\/?)>/g, "").cutIt(100)) + '</span>').attr('title', r.details));
        }
    };
    BugreportWindow.addButton = function () {
        $('#bugreport-cont').append(new west.gui.Button('Report a bug', function () {
            BugreportWindow.open('report');
        }).getMainDiv());
    };
})(jQuery);

(function ($) {
    FortWindow = function (fortid, x, y) {
        var that = this;
        this.window = wman.open('fort-' + fortid, null, 'fort');
        Ajax.remoteCallMode("fort", "display", {fortid: fortid, x: x, y: y}, function (resp) {
            if (resp.error) {
                that.window.destroy();
                return new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
            }
            that.fortid = resp.data ? resp.data.fortid : 0
            that.x = resp.data ? resp.data.x : x;
            that.y = resp.data ? resp.data.y : y;
            if (that.fortid == 0 && Character.townRights < 2) {
                that.window.destroy();
                return new UserMessage('Только члены городского правления могут возводить форты!', UserMessage.TYPE_ERROR).show();
            }
            that.uid = "fort-" + that.fortid;
            that.window.destroy();
            that.window = wman.open(that.uid, null, "fort").setMiniTitle('Форт');
            if (resp.dtype)that.init(resp.data); else if (resp.found)FortFoundWindow.init(resp, that.window); else that.window.appendToContentPane(resp.page);
        }, FortWindow);
    }
    FortWindow.prototype = FortWindow;
    FortWindow.open = function (fortid, x, y) {
        if (undefined === fortid && (undefined == x && undefined == y))
            return false;
        return new FortWindow(fortid, x, y);
    }
    FortWindow.init = function (data) {
        this.x = data.x;
        this.y = data.y;
        this.window.setTitle(data.name + " <a class='tw2gui_inner_window_title_divider'"
            + " href='javascript:Map.center(" + this.x + "," + this.y + ");'"
            + " title='<b>" + "Показать на карте" + "</b>'></a>"
            + " <span style='font-size: 12px; color: white; vertical-align: middle;'>"
            + s(ngettext('(%1 очко)', new Array('(%1 очко)', '(%1 очка)', '(%1 очков)'), data.points), data.points)
            + "</span>");
        this.window.addClass("fortmain");
        this.initProfile(data);
        this.initMap(data.buildings, data.ismember);
        this.initBattle(data.battle);
    }
    FortWindow.initProfile = function (data) {
        var box = new west.gui.Window.extension.box(this.window);
        var c = $("<div class='selectable' />");
        if (data.profile.showImage)
            c.append('<div><img src="img.php?type=fort_logo&amp;id=' +
                this.fortid + '" alt="" /></div>');
        c.append(Game.TextHandler.parse(data.profile.description));
        box.setContent(c);
        var head = $("<div/>");
        var info = [];
        info.push({icon: "flag", val: " |", title: "Размер форта: %s".replace("%s", data.typename)});
        info.push({icon: "home", val: data.towns, title: "Количество владельцев форта"});
        if (data.detail) {
            info.push({icon: "dollar", val: data.detail.money, title: "Казна"});
            info.push({
                icon: "bookshelf",
                val: data.detail.slotused + " /  " + data.detail.slotlimit,
                title: "Складировано сырья"
            });
        }
        $.each(info, function (i, d) {
            head.append($("<div title='<b>" + d.title.escapeHTML()
                + "</b>' style='display: inline-block; margin: 5px 0 0 15px;'/>").append(west.gui.Icon.get(d.icon), "<span style='margin-left: 5px; vertical-align: middle;'>" + d.val + "</span>"));
        });
        box.setHead(head).setVisible(false);
    }
    FortWindow.initMap = function (buildings, isMember) {
        var that = this;
        var mapname = "map_fort_" + this.x + "_" + this.y;
        this.map = $("<map id='" + mapname + "' name='" + mapname + "'/>");
        this.window.appendToContentPane("<img class='empty' usemap='#"
            + mapname + "' alt='' src='https://westrus.innogamescdn.com/images/transparent.png'/>");
        this.window.appendToContentPane(this.map);
        $.each(buildings, function (i, b) {
            var callback = undefined;
            if (b.clickable) {
                callback = function () {
                    switch (b.key) {
                        case"storage":
                            if (!isMember) {
                                new UserMessage('Склад разрешено смотреть только членам форта.').show();
                                break;
                            }
                            FortStorageWindow.open(that.fortid);
                            break;
                        case"headquarter":
                            FortHeadquarterWindow.open(that.fortid);
                            break;
                        case"barracks":
                            FortBarracksWindow.open(that.fortid);
                            break;
                        case"flag":
                            FortFlagWindow.open(that.fortid);
                            break;
                        case"battlepage":
                            AjaxWindow.show("fort_battlepage", {fort_id: that.fortid}, "" + that.fortid + "");
                            break;
                        default:
                            AjaxWindow.show('fort_building_' + b.key, {fort_id: that.fortid}, "" + that.fortid + "");
                    }
                };
            }
            that.addMapShape(b, callback);
        });
        this.addMapShape({
            key: "battleresults",
            name: "Кладбище",
            description: "Тихое кладбище за фортом напоминает о павших в минувших боях.",
            imgMap: "101,3, 150,17, 170,45, 68,71, 40,40"
        }, function () {
            CemeteryWindow.open(that.fortid);
        });
        this.addMapShape({
            key: "fingerboard",
            name: "Дорога в форт",
            description: "Указатель показывает направление к форту.",
            imgMap: "518,353 ,547,307, 551,281, 514,278, 510,301"
        }, function () {
            Guidepost.show(that.fortid, that.x, that.y, 'fort');
        });
    }
    FortWindow.initBattle = function (battle) {
        if (!battle.fortBattlesEnabled)return;
        var that = this;
        var battlebtn = $("<div class='fort_battle_button'/>");
        battlebtn.addClass(battle.fortBattlesIcon);
        if (battle.fortBattleStart)
            battlebtn.append("<div class='fort_battle_clock' id='fort_window_clock_"
                + this.fortid + "'/>");
        this.addMapShape({
            key: "battlepage",
            name: "Битва за форт",
            description: "К оружию!",
            imgMap: "625,316,30",
            shape: "circle"
        }, function () {
            FortBattleWindow.open(that.fortid);
        });
        this.window.appendToContentPane(battlebtn);
        if (battle.fortBattleStart)
            this.clockUpdate("fort_window_clock_" + this.fortid, battle.fortBattleStart);
    }
    FortWindow.clockUpdate = function (id, starttime) {
        var start = new Date().getTime() + starttime * 1000;
        var el = $('#fort_window_clock_' + this.fortid);
        var rest;
        var update = function () {
            if (!el)return;
            var t = start - new Date().getTime()
            t = Math.floor(t / 1000 + .5);
            if (t < 0) {
                el.hide();
                return;
            }
            window.setTimeout(update, 500);
            if (t == rest)return;
            rest = t.formatDuration();
            el.text(rest);
        };
        update();
    };
    FortWindow.addMapShape = function (b, callback) {
        var popup, poly;
        popup = "<b>" + b.name.escapeHTML() + "</b> "
            + (b.stage ? "(%d)".replace("%d", b.stage) : "")
            + "<br/>" + b.description.escapeHTML();
        poly = $("<area shape='" + (b.shape ? b.shape : "poly")
            + "' class='imagemap_" + b.key + "'"
            + " coords='" + b.imgMap + "' title='" + popup + "' />");
        if (undefined !== callback) {
            poly.css("cursor", "pointer");
            poly.click(callback);
        }
        this.map.append(poly);
        if (b.imgName) {
            var left, top;
            left = b.imgPos[0] + 30;
            top = b.imgPos[1] + 6;
            this.window.appendToContentPane("<img src='https://westrus.innogamescdn.com/images/window/fort/main/" + b.imgName + "'"
                + " style='position: absolute; left: " + left + "px;"
                + " top: " + top + "px; z-index: 2' alt='' />");
        }
    }
})(jQuery);
(function ($) {
    FortFoundWindow = {};
    var fortnameInput = null;
    var fortObj = {x: 0, y: 0};
    var buttonfound = null;
    FortFoundWindow.init = function (data, window) {
        fortObj.x = data.coordX;
        fortObj.y = data.coordY;
        FortFoundWindow.window = window;
        FortFoundWindow.window.addClass("foundfort");
        FortFoundWindow.window.appendToContentPane($('<div class="found-fort-content" />'));
        FortFoundWindow.DOM = $('.found-fort-content');
        FortFoundWindow.DOM.append('<img src="https://westrus.innogamescdn.com/images/jobs/fort/fortfound_' + data.fortsize + '.png" class="job_icon" /><div class="job_top_bg"></div>' + '<div class="job_head">' + data.foundTypeName + '</div><div class="foundfort_bg"></div><div class="foundfort_divider"></div><div class="job_content"></div>');
        FortFoundWindow.window.setTitle('Строительство форта');
        var textbox = '<div>' + s('Чтобы начать строительство этого форта твоему городу необходимо %1$, а тебе %2 энергии.', data.foundCost, data.foundEnergy) + '</div><div class="info">' + 'Расстояние' + ': ' + getDistance2Fort(fortObj) + ' - ' + 'Время' + ': ' + data.foundDuration + '</div>';
        fortnameInput = new west.gui.Textfield("fortname").setSize(41).addListener(foundfort, this);
        buttonfound = new west.gui.Button('Строительство', foundfort, null, null).setMinWidth(135);
        var formbox = $('<div class="formbox"></div>');
        var tn_lable = $('<span class="tn_lable">' + 'Название форта' + '</span>');
        formbox.append(fortnameInput.getMainDiv(), buttonfound.getMainDiv(), tn_lable);
        $("#fortname", formbox).focus(function () {
            $('.job_content .tn_lable', FortFoundWindow.DOM).hide();
        });
        tn_lable.click(function () {
            $("#fortname", formbox).focus();
        });
        $("#fortname", formbox).focusout(function () {
            if (fortnameInput.getValue() == "")
                $('.job_content .tn_lable', FortFoundWindow.DOM).show();
        });
        $('.job_content', FortFoundWindow.DOM).empty().append(textbox, formbox);
        EventHandler.listen("char_position_changed", function () {
            $('.job_content .info', FortFoundWindow.DOM).text('Расстояние' + ': ' + getDistance2Fort(fortObj) + ' - ' + 'Время' + ': ' + data.foundDuration);
        }, null, {boundto: FortFoundWindow.window});
    }
    var getDistance2Fort = function (coord) {
        return Map.calcWayTime(Character.position, {x: coord.x, y: coord.y}).formatDuration();
    };
    var foundfort = function () {
        TaskQueue.add(new TaskFortFound(fortObj.x, fortObj.y, fortnameInput.getValue()));
    };
})(jQuery);

var WORLDMAP_COEFF = 0.00513;
var COUNTYMAP_COEFF_IMG2MAP = 28.0793;
var localStore4Minimap = {
    adventures_cbEnabled: true,
    jobs_cbEnabled: true,
    pos_cbEnabled: true,
    quests_cbEnabled: true,
    own_town_cbEnabled: true,
    own_forts_cbEnabled: true,
    foreign_forts_cbEnabled: true,
    alliance_forts_cbEnabled: true,
    markers_cbEnabled: true,
    foreign_towns_cbEnabled: false,
    ghost_towns_cbEnabled: false,
    friends_cbEnabled: false,
    alliance_towns_cbEnabled: false,
    townmembers_cbEnabled: false,
    market_items_cbEnabled: false,
    fortbattles_cbEnabled: false,
    hidden_background: false,
    minimapData: null
};
(function ($) {
    window.MinimapWindow = {DOM: '*'};
    MinimapWindow.open = function (searchterm) {
        var eopts, leftPos;
        MinimapWindow.window = wman.open('minimap').setMiniTitle('Мини-карта').appendToContentPane($('<div class="minimap_content"/>'));
        eopts = {boundto: MinimapWindow.window};
        EventHandler.listen(['map-dragged', 'map-center-changed'], MinimapWindow.countyAreaChanged, null, eopts);
        EventHandler.listen('questemployer_changed', MinimapWindow.refreshWindow, null, eopts);
        EventHandler.listen('position_change', MinimapWindow.updateOwnPosition, null, eopts);
        MinimapWindow.DOM = $('div.minimap');
        MinimapWindow.window.center = function () {
            leftPos = $(window).outerWidth() - MinimapWindow.DOM.outerWidth() - 100;
            if ($('body').height() < 700)MinimapWindow.DOM.css({
                left: leftPos + 'px',
                top: '12px'
            }); else MinimapWindow.DOM.css({left: leftPos + 'px', top: '40px'});
        };
        MinimapWindow.window.center();
        searchTerm = searchterm ? searchterm : null;
        EventHandler.listen('marker-added', MinimapWindow.addMarker, null, eopts);
        EventHandler.listen('marker-deleted', MinimapWindow.deleteMarker, null, eopts);
        EventHandler.listen('marker-updated', MinimapWindow.updateMarker, null, eopts);
        init();
    };
    MinimapWindow.addMarker = function (marker) {
        cbMarkers.addItem(marker.id, marker.desc);
        Map.center(marker.x, marker.y);
        updateMarkerPoints4Worldmap();
        updatePoints4Markers();
    };
    MinimapWindow.deleteMarker = function (marker_id) {
        cbMarkers.removeItem(marker_id);
        updateMarkerPoints4Worldmap();
        updatePoints4Markers();
    };
    MinimapWindow.updateMarker = function (marker) {
        MinimapWindow.initMarkers();
        updatePoints4Markers();
    };
    MinimapWindow.initMarkers = function () {
        cbMarkers = new west.gui.Combobox().modalBoxDirectionTop(true).addListener(function (val) {
            if (false === Markers.get(val))return;
            var marker = Markers.get(val);
            Map.center(marker.x, marker.y);
        });
        cbMarkers.addItem(0, 'Выбрать флажок').select(0);
        Markers.each(function (marker) {
            cbMarkers.addItem(marker.id, marker.desc);
        });
        updateMarkerPoints4Worldmap();
        $('#mmap_markers_select', MinimapWindow.DOM).empty().append(cbMarkers.getMainDiv());
    };
    var mmapData = null;
    var jobsearchData = {};
    var displayedCounty = {};
    var jobsSearchbar = null;
    var refreshInProgress = null;
    var searchTerm = null;
    var cbMarkers = null;
    wman.registerReloadHandler(/^minimap/, function () {
        MinimapWindow.open(searchTerm);
    });
    var init = function () {
        MinimapWindow.DOM.css({width: '', height: ''});
        var maindiv = $('<div class="minimap-left"><div id="mmap_worldmap"></div><p id="mmap_disable_countybg">' + 'Скрыть фон' + '</p><div id="mmap_countymap"></div></div>' + '<div class="minimap-right"></div>');
        $('div.minimap_content', MinimapWindow.DOM).empty().append(maindiv, $('<div id="minimap_resizer" class="opened" />').click(toggleResizeWindow));
        if (searchTerm && localStore4Minimap.minimapData) {
            mmapData = localStore4Minimap.minimapData;
            initContent();
        } else {
            initData();
        }
    };
    var initData = function () {
        if (refreshInProgress) {
            window.clearTimeout(refreshInProgress);
        }
        Ajax.get('map', 'get_minimap', {}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            prepareData(json);
            initContent();
        }, MinimapWindow);
    };
    var initContent = function () {
        initWorldMap();
        initControlBox();
        updateContent();
        MinimapWindow.initMarkers();
        if (searchTerm) {
            MinimapWindow.resetSearchContext();
            if ($.isNumeric(searchTerm)) {
                MinimapWindow.findItemById(searchTerm);
            } else {
                $('input.tw2gui_jobsearch_string', MinimapWindow.DOM).val(searchTerm).keyup();
            }
        }
    };
    MinimapWindow.refreshWindow = function () {
        if (refreshInProgress) {
            window.clearTimeout(refreshInProgress);
        }
        refreshInProgress = window.setTimeout(initData, 2000);
    };
    var prepareData = function (json) {
        mmapData = json;
        Map.Counties.initCountiesFromBE(json.counties);
        Map.Counties.current_county_id = mmapData.current_county;
        Map.Counties.viewed_county_id = Map.Helper.getCountyId4View();
        try {
            displayedCounty = Map.Counties.getCounty(Map.Counties.viewed_county_id);
            mmapData.ownForts = [];
            mmapData.allianceForts = [];
            mmapData.foreignForts = [];
            mmapData.fortBattles = [];
            mmapData.fortCreationAreas = [];
            west.common.forEach(mmapData.forts, function (locations_in_x, x) {
                west.common.forEach(locations_in_x, function (location, y) {
                    var fort = {x: parseInt(x, 10), y: parseInt(y, 10), fort_id: 0, fort_name: ''};
                    if ('object' === typeof location) {
                        fort.fort_id = location.fort.fort_id;
                        fort.fort_name = location.fort.name;
                        if (Map.Helper.isPlannedFortBattle(location.fort)) {
                            mmapData.fortBattles.push(fort);
                        }
                        if (Map.Helper.isForeignFort(location.fort, location.townIds, mmapData.towns)) {
                            mmapData.foreignForts.push(fort);
                        } else if (Map.Helper.isAllianceFort(location.fort, location.townIds, mmapData.towns)) {
                            mmapData.allianceForts.push(fort);
                        } else if (Map.Helper.isOwnFort(location.fort, location.townIds)) {
                            mmapData.ownForts.push(fort);
                        } else {
                            if (window.DEBUG) {
                                console.log('do not know what that fort is!?!', location);
                            }
                        }
                    } else {
                        mmapData.fortCreationAreas.push(fort);
                    }
                });
            });
            mmapData.allianceTowns = [];
            mmapData.foreignTowns = [];
            mmapData.npcTowns = [];
            mmapData.ghostTowns = [];
            mmapData.adventures = [{id: 13373, name: 'Контроль Тумстоун', x: 22859, y: 9378}];
            for (var tid in mmapData.towns) {
                var tmpTown = mmapData.towns[tid];
                if (Map.Helper.isGhostTown(tmpTown)) {
                    mmapData.ghostTowns.push(tmpTown);
                } else if (Map.Helper.isAllianceTown(tmpTown)) {
                    mmapData.allianceTowns.push(tmpTown);
                } else if (Map.Helper.isNpcTown(tmpTown)) {
                    mmapData.npcTowns.push(tmpTown);
                } else if (Map.Helper.isForeignTown(tmpTown)) {
                    mmapData.foreignTowns.push(tmpTown);
                }
            }
            if (!JobsModel.Jobs.length)
                JobsModel.initJobs();
            Quests.Employer.initEmployerCoordinatesFromBE(mmapData.quest_locations);
        } catch (e) {
            if (json.hasOwnProperty('current_county'))
                displayedCounty = Map.Counties.getCounty(Map.Counties.viewed_county_id);
        }
        delete mmapData.towns;
        delete mmapData.forts;
        delete mmapData.counties;
        delete mmapData.map_counties;
        delete mmapData.qinf;
        localStore4Minimap.minimapData = mmapData;
    };
    var initControlBox = function () {
        $('div.minimap-right', MinimapWindow.DOM).empty().append('<div class="mmap_title"></div>' + '<div class="mmap_jobs"></div>' + '<div class="mmap_pos"></div>' + '<div class="mmap_adventures"></div>' + '<div class="mmap_questemployers"></div>' + '<div class="mmap_towns"></div>' + '<div class="mmap_forts"></div>' + '<div class="mmap_others"></div>' + '<div class="mmap_save_pos"><span id="mmap_cbbox_markers" title="' + 'Показывает все флажки на карте.'.escapeHTML() + '">' + '<input id="mmap_markers_checkbox" type="checkbox" name="markers" value="1"' + (localStore4Minimap.markers_cbEnabled ? ' checked="checked"' : '') + ' />' + '&nbsp;<img src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_markers.png?2" />&nbsp;</span><span id="mmap_markers_select"></span></div>');
        var createCheckboxRow = function (name, label, title, checked) {
            return $('<span id="mmap_cbbox_' + name + '"' + (title ? ' title="' + title.escapeHTML() + '"' : '') + '>&nbsp;<img src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_' + name + '.png?2" />&nbsp;' + label + '</span>').prepend($('<input type="checkbox" name="' + name + '" value="1"' + (checked ? ' checked="checked"' : '') + ' />').click(interfaceCheckboxChecked));
        };
        jobsSearchbar = new tw2widget.jobsearchbar(jobSelected, 500).setWidth(205).setAllJobsButton();
        $('div.mmap_jobs', MinimapWindow.DOM).append(createCheckboxRow('jobs', 'Работа', 'Показывает выбранную работу на карте.', localStore4Minimap.jobs_cbEnabled), '<br />', jobsSearchbar.getMainDiv());
        $('div.mmap_pos', MinimapWindow.DOM).append(createCheckboxRow('pos', 'Твоё местоположение', 'Показывает твое текущее месторасположение на карте.', localStore4Minimap.pos_cbEnabled));
        $('div.mmap_adventures', MinimapWindow.DOM).append(createCheckboxRow('adventures', 'Перестрелки', 'Показывает место перестрелки на карте.', localStore4Minimap.adventures_cbEnabled));
        $('div.mmap_questemployers', MinimapWindow.DOM).append(createCheckboxRow('quests', 'Квестодатель', 'Показывает квестодателей на карте.', localStore4Minimap.quests_cbEnabled));
        $('div.mmap_towns', MinimapWindow.DOM).append(createCheckboxRow('own_town', 'Твой город', 'Показывает твой город на карте.', localStore4Minimap.own_town_cbEnabled), '<br />', createCheckboxRow('foreign_towns', 'Чужие города', 'Показывает чужие города на карте.', localStore4Minimap.foreign_towns_cbEnabled), '<br />', createCheckboxRow('ghost_towns', 'Города-призраки', 'Показывает города-призраки на карте.', localStore4Minimap.ghost_towns_cbEnabled));
        $('div.mmap_forts', MinimapWindow.DOM).append(createCheckboxRow('own_forts', 'Свои форты', 'Показывает свои форты на карте.', localStore4Minimap.own_forts_cbEnabled), '<br />', createCheckboxRow('foreign_forts', 'Чужие форты', 'Показывает чужие форты на карте.', localStore4Minimap.foreign_forts_cbEnabled), '<br />', createCheckboxRow('alliance_forts', 'Форты альянса', 'Показывает форты твоего альянса на карте.', localStore4Minimap.alliance_forts_cbEnabled));
        $('div.mmap_others', MinimapWindow.DOM).append(createCheckboxRow('friends', 'Друзья', 'Показывает твоих друзей на карте.', localStore4Minimap.friends_cbEnabled), '<br />', createCheckboxRow('alliance_towns', 'Альянс', 'Показывает города твоего альянса на карте.', localStore4Minimap.alliance_towns_cbEnabled), '<br />', createCheckboxRow('townmembers', 'Жители города', 'Показывает жителей твоего города на карте.', localStore4Minimap.townmembers_cbEnabled), '<br />', createCheckboxRow('market_items', 'Рынки', 'Показывает на карте твои предметы и деньги на рынке.', localStore4Minimap.market_items_cbEnabled), '<br />', createCheckboxRow('fortbattles', 'Битвы', 'Показывает текущие битвы на карте.', localStore4Minimap.fortbattles_cbEnabled))
        $('#mmap_markers_checkbox', MinimapWindow.DOM).click(interfaceCheckboxChecked);
        if (!Character.homeTown.town_id)
            $('#mmap_cbbox_own_town, #mmap_cbbox_own_forts, #mmap_cbbox_alliance_forts, #mmap_cbbox_alliance_towns, #mmap_cbbox_townmembers', MinimapWindow.DOM).addClass('opacity05');
        $('#mmap_disable_countybg', MinimapWindow.DOM).off('click').click(hideShowCountyBackgroundClicked);
        if (localStore4Minimap.hidden_background && !$('#mmap_disable_countybg', MinimapWindow.DOM).hasClass('disabled'))
            $('#mmap_disable_countybg', MinimapWindow.DOM).click();
        $('input.tw2gui_jobsearch_string', MinimapWindow.DOM).focus();
    };
    var updateContent = function () {
        var countyBox = getCountyBox4Minimap(mmapData);
        countyBox.click(countyPositionClicked);
        checkLayerVisibility4Checkboxes(countyBox);
        if ($('#mmap_disable_countybg', MinimapWindow.DOM).hasClass('disabled'))
            $('div.mmap_disabled_map', countyBox).toggle();
        $('#mmap_countymap', MinimapWindow.DOM).empty().append(countyBox);
        $('div.mmap_title', MinimapWindow.DOM).text(displayedCounty.countyName.cutIt(15));
        showCurrentArea();
        $('span.imagemap_county.current_county', MinimapWindow.DOM).removeClass('current_county');
        $('#imagemap_county_' + displayedCounty.id, MinimapWindow.DOM).addClass('current_county');
        updatePoints4Markers();
    };
    var initWorldMap = function () {
        $('#mmap_worldmap', MinimapWindow.DOM).empty();
        var generateArea = function (countyObj, offset) {
            var left = parseInt(countyObj.startX * WORLDMAP_COEFF);
            var top = parseInt(countyObj.startY * WORLDMAP_COEFF);
            var coords = {
                'left': left + offset.left,
                'top': top + offset.top,
                'width': parseInt(countyObj.endX * WORLDMAP_COEFF) - left,
                'height': parseInt(countyObj.endY * WORLDMAP_COEFF) - top
            };
            var area = $('<span title="' + countyObj.countyName.escapeHTML() + '" id="imagemap_county_' + countyObj.id + '" class="imagemap_county" />').css(coords).data('id', countyObj.id).click(areaOnWorldClicked);
            return area;
        };
        var map = $('<div id="minimap_worldmap"></div>');
        $('#mmap_worldmap', MinimapWindow.DOM).append(map, '<div class="mmap_disabled_map mmap_worldmap" />');
        if (localStore4Minimap.hidden_background)
            $('div.mmap_disabled_map.mmap_worldmap', MinimapWindow.DOM).show();
        var offset = map.position();
        map.append(createPosPoint4Worldmap(offset), createCircusPoint4Worldmap(offset)).appendArray(createFortbattlePoints4Worldmap(offset));
        for (var cid in Map.Counties.countyObjects) {
            var tmpObj = Map.Counties.getCounty(cid);
            map.append(generateArea(tmpObj, offset));
        }
    };
    var checkLayerVisibility4Checkboxes = function (countyBox) {
        var sel = $('div.minimap-right', MinimapWindow.DOM);
        $('div.mmap_county_layer', countyBox).each(function (ix, el) {
            if ($('input:checkbox[name=' + $(el).data('type') + ']', sel).is(':checked'))
                $(el).show(); else if ($(el).data('type') == 'fort_creation')
                $(el).show(); else if ($(el).data('type') == 'npc_towns')
                $(el).show(); else if ($(el).data('type') == 'markers')
                $(el).show(); else if ($(el).data('type') == 'circus')
                $(el).show(); else
                $(el).hide();
        });
    };
    var interfaceCheckboxChecked = function (ev) {
        if ($(ev.currentTarget).is(':checked')) {
            $('#mmap_layer_' + displayedCounty.id + '_' + $(ev.currentTarget).attr('name'), MinimapWindow.DOM).show();
            localStore4Minimap[$(ev.currentTarget).attr('name') + '_cbEnabled'] = true;
        }
        else {
            $('#mmap_layer_' + displayedCounty.id + '_' + $(ev.currentTarget).attr('name'), MinimapWindow.DOM).hide();
            localStore4Minimap[$(ev.currentTarget).attr('name') + '_cbEnabled'] = false;
        }
    };
    var jobSelected = function (ev) {
        var jobId = (ev ? $(ev.target).data('job_id') : (jobsSearchbar.value.value || 0));
        var currLayer = $('#mmap_layer_' + displayedCounty.id + '_jobs', MinimapWindow.DOM).data('jobId') == jobId;
        var jobsCbChecked = $('div.mmap_jobs input:checked').length == 1;
        if (ev && !jobId) {
            if (window.DEBUG)console.log('jobSelected error - unknown job id');
            $('div.mmap_layer_jobs', MinimapWindow.DOM).remove();
            return false;
        }
        else if (jobId && !currLayer) {
            $('div.mmap_layer_jobs', MinimapWindow.DOM).remove();
            updatePoints4Job(jobId, mmapData.job_groups[JobList.getJobById(jobId).groupid]);
            if (!jobsCbChecked)$('div.mmap_layer_jobs', MinimapWindow.DOM).hide();
        }
        if (ev) {
            updateSearchTerm($(ev.target).data('job_id'), $(ev.target).data('job_name'));
            jobsSearchbar.hideResults();
        }
    };
    var updateSearchTerm = function (job_id, job_name) {
        jobsSearchbar.value.value = job_id;
        $('input.tw2gui_jobsearch_string', MinimapWindow.DOM).val(job_name);
        jobsSearchbar.value.label = job_name;
        searchTerm = job_name;
    };
    var toggleResizeWindow = function () {
        MinimapWindow.DOM.toggleClass('resizedWindow');
        $('div.tw2gui_window_content_pane', MinimapWindow.DOM).toggleClass('resizedWindow');
        $('div.minimap-right', MinimapWindow.DOM).toggle();
        $('#minimap_resizer', MinimapWindow.DOM).toggleClass('opened');
    };
    var hideShowCountyBackgroundClicked = function () {
        var sel = $('#mmap_disable_countybg', MinimapWindow.DOM);
        sel.toggleClass('disabled');
        if (sel.hasClass('disabled')) {
            sel.text('Показать фон');
            $('div.mmap_disabled_map', MinimapWindow.DOM).show();
            localStore4Minimap.hidden_background = true;
        }
        else {
            sel.text('Скрыть фон');
            $('div.mmap_disabled_map', MinimapWindow.DOM).hide();
            localStore4Minimap.hidden_background = false;
        }
    };
    var areaOnWorldClicked = function (ev) {
        displayedCounty = Map.Counties.getCounty(parseInt($(ev.currentTarget).data('id')));
        updateContent();
        jobSelected();
    };
    MinimapWindow.countyAreaChanged = function () {
        Map.Counties.viewed_county_id = Map.Helper.getCountyId4View();
        if (Map.Counties.viewed_county_id && displayedCounty.id != Map.Counties.viewed_county_id) {
            displayedCounty = Map.Counties.getCounty(Map.Counties.viewed_county_id);
            updateContent();
            jobSelected();
        }
        else
            showCurrentArea();
    };
    var countyPositionClicked = function (ev) {
        var scrolltoX;
        var scrolltoY;
        var el = $(ev.target);
        if (el.hasClass('ownPos')) {
            scrolltoX = Character.position.x;
            scrolltoY = Character.position.y;
        } else if (el.hasClass('ownTown')) {
            scrolltoX = Character.homeTown.x;
            scrolltoY = Character.homeTown.y;
        } else if (el.hasClass('quest') || el.hasClass('job') || el.hasClass('fort')) {
            scrolltoX = el.attr('class').match(/x-([0-9]*)/)[1];
            scrolltoY = el.attr('class').match(/y-([0-9]*)/)[1];
        } else {
            var boxOffset = $('#mmap_countybox_' + displayedCounty.id, MinimapWindow.DOM).offset();
            var countyOffsetX = displayedCounty.startX;
            var countyOffsetY = displayedCounty.startY;
            scrolltoX = parseInt((ev.clientX - boxOffset.left + $(window).scrollLeft()) * COUNTYMAP_COEFF_IMG2MAP) + countyOffsetX;
            scrolltoY = parseInt((ev.clientY - boxOffset.top + $(window).scrollTop()) * COUNTYMAP_COEFF_IMG2MAP) + countyOffsetY;
        }
        Map.center(scrolltoX, scrolltoY);
        wman.minimizeAll(['minimap']);
        showCurrentArea();
    };
    var showCurrentArea = function () {
        var topX = ((-Map.mapEl.position().left - displayedCounty.startX) * COUNTYMAP_COEFF_MAP2IMG);
        var topY = ((-Map.mapEl.position().top - displayedCounty.startY) * COUNTYMAP_COEFF_MAP2IMG);
        if (Map.Helper.isViewInCounty(displayedCounty.id)) {
            var width = Map.visible.x * Map.tileSize * COUNTYMAP_COEFF_MAP2IMG;
            var height = Map.visible.y * Map.tileSize * COUNTYMAP_COEFF_MAP2IMG;
            $('span.mmap_current_area', MinimapWindow.DOM).css({
                top: topY + 'px',
                left: topX + 'px',
                width: width + 'px',
                height: height + 'px'
            }).show();
        }
        else
            $('span.mmap_current_area', MinimapWindow.DOM).hide();
    };
    MinimapWindow.updateOwnPosition = function () {
        if (!displayedCounty)return false;
        $('#mmap_layer_' + displayedCounty.id + '_pos', MinimapWindow.DOM).empty().appendArray(createPoint4OwnPos());
        var map = $('#minimap_worldmap', MinimapWindow.DOM);
        var offset = map.position();
        $('#mmap_wmicon_pos', MinimapWindow.DOM).remove();
        map.append(createPosPoint4Worldmap(offset));
    };
    var createPosPoint4Worldmap = function (offset) {
        var coord = {};
        if ((coord = calcCoord4Worldmap([Character.getPosition().x, Character.getPosition().y]))) {
            return $('<img title="' + 'Твоё местоположение' + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_pos.png?2" id="mmap_wmicon_pos" class="mmap_wmappoint" />').css({
                left: coord.x + offset.left + 'px',
                top: coord.y + offset.top + 'px'
            });
        }
        return $([]);
    };
    var createFortbattlePoints4Worldmap = function (offset) {
        var coords = [];
        for (var i = 0; i < mmapData.fortBattles.length; i++) {
            var tmp = mmapData.fortBattles[i];
            var coord = {};
            if ((coord = calcCoord4Worldmap([tmp.x, tmp.y]))) {
                coords.push($('<img title="' + 'Фронтовые сводки' + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_fortbattles.png?2" class="mmap_wmappoint" />').css({
                    left: coord.x + offset.left + 'px',
                    top: coord.y + offset.top + 'px'
                }));
            }
        }
        return coords;
    };
    var createMarkerPoints4Worldmap = function (offset) {
        var coords = [];
        for (var key in Markers.markers) {
            var tmp = Markers.markers[key];
            var coord = {};
            if ((coord = calcCoord4Worldmap([tmp.x, tmp.y]))) {
                coords.push($('<img title="' + tmp.desc.escapeHTML() + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_markers.png?2" class="mmap_wmappoint mmap_wmap_markers" />').css({
                    left: coord.x + offset.left + 'px',
                    top: coord.y + offset.top + 'px'
                }));
            }
        }
        return coords;
    };
    var createCircusPoint4Worldmap = function (offset) {
        if (!mmapData.fair.hasOwnProperty('x'))return $([]);
        var coord = {};
        if ((coord = calcCoord4Worldmap([mmapData.fair.x, mmapData.fair.y]))) {
            return $('<img title="' + "Ярмарка" + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_circus.png?2" id="mmap_wmicon_circus" class="mmap_wmappoint" />').css({
                left: coord.x + offset.left + 'px',
                top: coord.y + offset.top + 'px'
            });
        }
        return $([]);
    };
    var calcCoord4Worldmap = function (coordArr) {
        return {x: parseInt((coordArr[0]) * WORLDMAP_COEFF), y: parseInt((coordArr[1]) * WORLDMAP_COEFF) - 4};
    };
    var createPoint4Adventures = function (adventures) {
        var jqObjects = [];
        adventures.forEach(function (adventure) {
            var coord = {};
            if (!adventure.hasOwnProperty('x'))return [];
            if ((coord = displayedCounty.calcCoord4Map([adventure.x, adventure.y]))) {
                var cssObj = {left: coord.x + 'px', top: coord.y + 'px'};
                jqObjects.push($('<img title="' + adventure.name.escapeHTML() + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_adventures.png?2" id="mmap_icon_pos" class="mmap_mappoint big adventure" />').css(cssObj));
            }
        });
        return jqObjects;
    };
    var createPoint4OwnPos = function () {
        var jqObjects = [];
        var coord = {};
        if ((coord = displayedCounty.calcCoord4Map([Character.getPosition().x, Character.getPosition().y]))) {
            var cssObj = {left: coord.x - 10 + 'px', top: coord.y - 10 + 'px'};
            jqObjects.push($('<img title="' + 'Твоё местоположение' + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_pos.png?2" id="mmap_icon_pos" class="mmap_mappoint big ownPos" />').css(cssObj));
        }
        return jqObjects;
    };
    var createPoint4Circus = function (circusPos) {
        if (!circusPos.hasOwnProperty('x'))return [];
        var jqObjects = [];
        var coord = {};
        if ((coord = displayedCounty.calcCoord4Map([circusPos.x, circusPos.y]))) {
            var cssObj = {left: coord.x + 'px', top: coord.y + 'px'};
            jqObjects.push($('<img title="' + "Ярмарка" + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_circus.png?2" id="mmap_icon_pos" class="mmap_mappoint" />').css(cssObj));
        }
        return jqObjects;
    };
    var createPoint4OwnTown = function () {
        var jqObjects = [];
        var coord = {};
        if (Character.homeTown.town_id > 0 && (coord = displayedCounty.calcCoord4Map([Character.homeTown.x, Character.homeTown.y]))) {
            var cssObj = {left: coord.x - 10 + 'px', top: coord.y - 10 + 'px'};
            jqObjects.push($('<img title="' + 'Твой город' + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_own_town.png?2" id="mmap_icon_own_town" class="mmap_mappoint big ownTown" />').css(cssObj));
        }
        return jqObjects;
    };
    var createPoints4Quests = function () {
        var jqObjects = [];
        var employer = Quests.Employer.getAllEmployer();
        for (var k in employer) {
            var coords = employer[k].getCoordinates();
            var coord = {};
            for (var i = 0; i < coords.length; i++) {
                if ((coord = displayedCounty.calcCoord4Map([coords[i][0], coords[i][1]]))) {
                    var cssObj = {left: coord.x - 10 + 'px', top: coord.y - 10 + 'px'};
                    jqObjects.push($('<img title="' + employer[k].employerName.escapeHTML() + '" width="10" height="10" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_quests.png?4" class="mmap_icon_quests mmap_mappoint big quest x-' + coords[i][0] + ' y-' + coords[i][1] + '" />').css(cssObj));
                }
            }
        }
        return jqObjects;
    };
    var createPoints4Job = function (data, jobObj) {
        var jqObjects = [];
        var coord = {};
        for (var i = 0; i < data.length; i++) {
            if ((coord = displayedCounty.calcCoord4Map(data[i]))) {
                var cssObj = {left: coord.x - 10 + 'px', top: coord.y - 10 + 'px'};
                jqObjects.push($('<img title="' + Map.PopupHandler.getJobPopup(jobObj).escapeHTML() + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_jobs.png?2" class="mmap_icon_jobs mmap_mappoint big job x-' + data[i][0] + ' y-' + data[i][1] + '" />').css(cssObj));
            }
        }
        return jqObjects;
    };
    var createPoints4Markers = function () {
        var jqObjects = [];
        var coord = {};
        for (var k in Markers.markers) {
            if ((coord = displayedCounty.calcCoord4Map([Markers.markers[k].x, Markers.markers[k].y]))) {
                var cssObj = {left: coord.x + 'px', top: coord.y + 'px'};
                jqObjects.push($('<img title="' + Markers.markers[k].desc.escapeHTML() + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_markers.png?2" class="mmap_icon_markers mmap_mappoint" />').css(cssObj));
            }
        }
        return jqObjects;
    };
    var updatePoints4Job = function (id, data) {
        var jqObjects = createPoints4Job(data, JobList.getJobById(id));
        $('#mmap_countybox_' + displayedCounty.id, MinimapWindow.DOM).append(createLayer('jobs', data).data('jobId', id));
        $('#mmap_layer_' + displayedCounty.id + '_jobs', MinimapWindow.DOM).empty().appendArray(jqObjects);
    };
    var updateMarkerPoints4Worldmap = function () {
        var map = $('#minimap_worldmap', MinimapWindow.DOM);
        if (map.length) {
            $('img.mmap_wmap_markers', map).remove();
            var offset = map.position();
            map.append(createMarkerPoints4Worldmap(offset));
        }
    };
    var updatePoints4Markers = function () {
        var cmap_layer = $('#mmap_layer_' + displayedCounty.id + '_markers', MinimapWindow.DOM);
        if (cmap_layer.length) {
            cmap_layer.empty().appendArray(createPoints4Markers());
            if (!$('#mmap_cbbox_markers input:checkbox[name=markers]', MinimapWindow.DOM).is(':checked'))
                cmap_layer.hide();
        }
    };
    var createPoints4Countymap = function (key, data, name) {
        var jqObjects = [];
        var coord = {};
        for (var i = 0, len = data.length; i < len; i++) {
            if ((coord = displayedCounty.calcCoord4Map([data[i].x, data[i].y]))) {
                if (key == 'foreign_towns')name = data[i].name + ' (' + 'Чужие города' + ')'; else if (key == 'alliance_towns')name = data[i].name + ' (' + 'Города альянса' + ')'; else if (key == 'foreign_forts')name = data[i].fort_name + ' (' + 'Чужие форты' + ')'; else if (key == 'alliance_forts')name = data[i].fort_name + ' (' + 'Форты альянса' + ')';
                if (undefined !== data[i].fort_id) {
                    var cls = 'big fort x-' + data[i].x + ' y-' + data[i].y;
                    var cssObj = {left: coord.x - 10 + 'px', top: coord.y - 10 + 'px'};
                } else {
                    var cssObj = {left: coord.x + 'px', top: coord.y + 'px'};
                }
                jqObjects.push($('<img title="' + name.escapeHTML() + '" src="https://westrus.innogamescdn.com/images/map/minimap/icons/miniicon_' + key + '.png?2" id="mmap_icon_' + key + '" class="mmap_mappoint ' + cls + '" />').css(cssObj));
            }
        }
        return jqObjects;
    };
    var createLayer = function (type, data) {
        var jqObjects = [];
        var layerEl = $('<div id="mmap_layer_' + displayedCounty.id + '_' + type + '" class="mmap_county_layer" style="z-index: ' + Map.Counties.layerPriorities[type] + ';" />').addClass('mmap_layer_' + type).data('type', type);
        switch (type) {
            case'pos':
                jqObjects = createPoint4OwnPos();
                break;
            case'own_town':
                jqObjects = createPoint4OwnTown();
                break;
            case'quests':
                jqObjects = createPoints4Quests();
                break;
            case'circus':
                jqObjects = createPoint4Circus(data);
                break;
            case'jobs':
                break;
            case'markers':
                break;
            case'ghost_towns':
                jqObjects = createPoints4Countymap(type, data, 'Город-призрак');
                break;
            case'alliance_towns':
                jqObjects = createPoints4Countymap(type, data, 'Города альянса');
                break;
            case'foreign_towns':
                jqObjects = createPoints4Countymap(type, data, 'Чужие города');
                break;
            case'friends':
                jqObjects = createPoints4Countymap(type, data, 'Друзья');
                break;
            case'market_items':
                jqObjects = createPoints4Countymap(type, data, 'Рынки');
                break;
            case'townmembers':
                jqObjects = createPoints4Countymap(type, data, 'Жители города');
                break;
            case'fortbattles':
                jqObjects = createPoints4Countymap(type, data, 'Фронтовые сводки');
                break;
            case'own_forts':
                jqObjects = createPoints4Countymap(type, data, 'Свои форты');
                break;
            case'alliance_forts':
                jqObjects = createPoints4Countymap(type, data, 'Форты альянса');
                break;
            case'foreign_forts':
                jqObjects = createPoints4Countymap(type, data, 'Чужие форты');
                break;
            case'fort_creation':
                jqObjects = createPoints4Countymap(type, data, 'Подходящее место для возведения форта');
                break;
            case'npc_towns':
                jqObjects = createPoints4Countymap(type, data, 'Город первых поселенцев');
                break;
            case'adventures':
                jqObjects = createPoint4Adventures(data);
                break;
            default:
                break;
        }
        return layerEl.appendArray(jqObjects);
    };
    var getCountyBox4Minimap = function (mmapData) {
        var mapBox = $('<div id="mmap_countybox_' + displayedCounty.id + '" class="mmap_countybox" />').css('background', 'url(https://westrus.innogamescdn.com/images/map/minimap/county_' + displayedCounty.id + '.jpg?2) no-repeat');
        if (mmapData) {
            mapBox.append('<span class="mmap_current_area"></span>', '<div class="mmap_disabled_map mmap_county_layer" />', createLayer('pos'), createLayer('own_town'), createLayer('jobs'), createLayer('ghost_towns', mmapData.ghostTowns), createLayer('foreign_towns', mmapData.foreignTowns), createLayer('alliance_towns', mmapData.allianceTowns), createLayer('friends', mmapData.friend_locations), createLayer('market_items', mmapData.market_locations), createLayer('townmembers', mmapData.town_members), createLayer('own_forts', mmapData.ownForts), createLayer('alliance_forts', mmapData.allianceForts), createLayer('foreign_forts', mmapData.foreignForts), createLayer('quests'), createLayer('fortbattles', mmapData.fortBattles), createLayer('fort_creation', mmapData.fortCreationAreas), createLayer('npc_towns', mmapData.npcTowns), createLayer('markers'), createLayer('circus', mmapData.fair), createLayer('adventures', mmapData.adventures));
        }
        if (displayedCounty.id == 4 || displayedCounty.id == 11 || displayedCounty.id == 15)mapBox.css('height', '250px');
        return mapBox;
    };
    MinimapWindow.resetSearchContext = function () {
        try {
            jobsSearchbar.currentData.jobs = jobsearchData.jobs;
            jobsSearchbar.currentData.yields = jobsearchData.yields;
        }
        catch (e) {
        }
    };
    MinimapWindow.findItemById = function (item_id) {
        if (!item_id || !MinimapWindow.DOM.is(':visible'))return false;
        $('div.tw2gui_jobsearchbar_results', MinimapWindow.DOM).empty().show();
        jobsSearchbar.searchPattern(ItemManager.get(item_id).name);
        jobsSearchbar.hijackSearchHandler();
        return true;
    };
    MinimapWindow.clickQuicklink = function (name, type) {
        MinimapWindow.resetSearchContext();
        if (isDefined(wman.getById('minimap')) && MinimapWindow.DOM.is(':visible') && !MinimapWindow.DOM.hasClass('resizedWindow')) {
            if (type == 'inventory_changed')
                MinimapWindow.findItemById(name); else if (name)
                $('input.tw2gui_jobsearch_string', MinimapWindow.DOM).val(name).keyup();
        }
        else {
            MinimapWindow.open(name);
        }
    };
    MinimapWindow.getQuicklink = function (name, type) {
        return "<span class='quest_mmaplink' title='" + "Найти нужную работу на мини-карте."
            + "' onclick='void(MinimapWindow.clickQuicklink(\"" + name + "\", \"" + type + "\"))'>" + "<img src='https://westrus.innogamescdn.com/images/icons/compass.png' /></span>&nbsp;";
    };
})(jQuery);
;
(function ($) {
    wman.registerReloadHandler(/^fortheadquarter-\d+/, function (uid) {
        FortHeadquarterWindow.open(parseInt(uid.match(/\d+/)[0]));
    });
    FortHeadquarterWindow = function (fortid) {
        var classObj = this;
        this.buildData = {}, this.townsData = {}, this.logData = {}, this.invData = {}, this.adminData = {}, this.fortObj = {};
        this.Build = {};
        this.Towns = {};
        this.tabclick = function (win, id) {
            classObj.showTab(id);
        };
        this.fortObj['fort_id'] = fortid || 0;
        this.window = wman.open("fortheadquarter-" + this.fortObj.fort_id).setMiniTitle('Штаб').addTab('Строительство', 'build', this.tabclick).addTab('Города', 'towns', this.tabclick).appendToContentPane($('<div class="fortheadquarter-build"/>'), $('<div class="fortheadquarter-towns"/>'));
        classObj.DOM = this.window.getMainDiv();
        this.showTab = function (id) {
            if (!classObj.window)return;
            if (id != 'invited') {
                classObj.window.activateTab(id).$('div.tw2gui_window_content_pane > *').each(function (i, el) {
                    if ($(el).hasClass('fortheadquarter-' + id)) {
                        $(el).children().fadeIn();
                        $(el).show();
                    }
                    else {
                        $(el).children().fadeOut();
                        $(el).hide();
                    }
                });
            }
            switch (id) {
                case'build':
                    classObj.window.setTitle('Здание');
                    break;
                case'towns':
                    classObj.window.setTitle('Города');
                    break;
                case'log':
                    classObj.window.setTitle('Журнал');
                    classObj.updateLogTable();
                    break;
                case'invitation':
                    classObj.window.setTitle('Приглашение');
                    classObj.updateInvitationTable();
                    break;
                case'profile':
                    classObj.window.setTitle('Профиль форта');
                    break;
                case'maneuver':
                    classObj.window.setTitle('Учения');
                    break;
                case'invited':
                    FortinviteWindow.open(classObj.fortObj.fort_id);
                    break;
                default:
                    classObj.window.setTitle('Здание');
                    break;
            }
        };
        this.unlockBuildingButtonClicked = function (event) {
            var buildingKey = event.data.building;
            Ajax.remoteCall('fort_building_headquarter', 'enable_next_stage', {
                building: buildingKey,
                fort_id: classObj.fortObj.fort_id
            }, function (json) {
                if (json.error)return new UserMessage(json.error).show();
                var selector = $('div.fbhq_building_' + buildingKey, classObj.DOM);
                $('span.fbhq_build_form', selector).empty().append(new west.gui.Button('Строить', classObj.constructBuildingButtonClicked, null, {building: buildingKey}).setMinWidth(120).getMainDiv());
                $('div.fbhq_build_building_rightside', selector).empty().append(new west.gui.Progressbar(0, 100).showPercentOnly(true).getMainDiv()).addClass('buildinprogress');
            }, classObj);
        };
        this.toggleDetailbox = function (ev) {
            var sel = classObj.window.$('#' + ev.target.id + '_details');
            if (sel.is(':empty'))
                classObj.getTownMember(sel);
            sel.siblings('div').hide();
            sel.toggle();
        };
        this.inviteTownButtonClicked = function () {
            Ajax.remoteCall('fort_building_headquarter', 'fort_invitation_invite_town', {
                town_name: $('#fbhq_iTownname', classObj.DOM).val(),
                fort_id: classObj.fortObj.fort_id
            }, function (json) {
                if (json.error)return new UserMessage(json.error).show();
                classObj.invData['invitationList'] = json.invitations;
                classObj.refreshInvitationTableView(json);
                $('#fbhq_iTownname', classObj.DOM).val('');
            }, classObj);
        };
        this.constructBuildingButtonClicked = function (event) {
            if (event.data.building) {
                BuildWindow.open(classObj.fortObj.fort_id, classObj.fortObj.x, classObj.fortObj.y, event.data.building, true);
            }
            else {
                new UserMessage('Ты должен выбрать здание').show();
            }
        };
        this.removeTownInvitation = function (ev) {
            Ajax.remoteCall('fort_building_headquarter', 'fort_invitation_delete_town', {
                town_id: $(ev.target).data('townId'),
                fort_id: classObj.fortObj.fort_id
            }, function (json) {
                if (json.error)return new UserMessage(json.error).show();
                classObj.refreshInvitationTableView(json);
            }, classObj);
        };
        this.leaveFortButtonClicked = function (ev) {
            Ajax.remoteCall('fort_building_headquarter', 'leave_fort', {
                town_id: $(ev.currentTarget).data('townId'),
                fort_id: classObj.fortObj.fort_id
            }, function (json) {
                if (json.error)return new UserMessage(json.msg).show();
                FortHeadquarterWindow.open(classObj.fortObj.fort_id);
            }, classObj);
        };
        this.renameFortButtonClicked = function () {
            Ajax.remoteCall('fort_building_headquarter', 'rename_fort', {
                fort_name: $('#fbhq_iFortname', classObj.DOM).val(),
                fort_id: classObj.fortObj.fort_id
            }, function (json) {
                if (json.error)return new UserMessage(json.error).show();
                return new UserMessage('Форт переименован', UserMessage.TYPE_SUCCESS).show();
            }, classObj);
        };
        this.editProfiletextButtonClicked = function () {
            Ajax.remoteCall('fort_building_headquarter', 'save_description', {
                text: $('#fbhq_profiletextarea', classObj.DOM).val(),
                fort_id: classObj.fortObj.fort_id
            }, function (json) {
                if (json.error != '')return new UserMessage(json.error).show();
                new UserMessage("Профиль форта сохранён", TYPE_SUCCESS);
            }, classObj);
        };
        this.previewProfiletextButtonClicked = function () {
            if (this.window.$('.fbhq_butpreview').css('display') !== 'none') {
                var that = this;
                Ajax.remoteCall('fort_building_headquarter', 'preview_description', {
                    text: $('#fbhq_profiletextarea', classObj.DOM).val(),
                    fort_id: classObj.fortObj.fort_id
                }, function (resp) {
                    if (resp.error) {
                        new UserMessage(resp.error).show();
                        return;
                    }
                    that.window.$('#fbhq_profiletextarea').slideUp();
                    that.window.$('.fbhq_profile_preview').html(Game.TextHandler.parse(resp.text)).delay(500).slideDown();
                    that.window.$('.fbhq_butpreview').css('display', 'none');
                    that.window.$('.fbhq_butbackpreview').css('display', 'inline-block');
                }, classObj);
            } else {
                this.window.$('.fbhq_profile_preview').slideUp().empty();
                this.window.$('#fbhq_profiletextarea').delay(500).slideDown();
                this.window.$('.fbhq_butpreview').css('display', 'inline-block');
                this.window.$('.fbhq_butbackpreview').css('display', 'none');
            }
        };
        this.startManeuverButtonClicked = function () {
            ManeuverWindow.start(classObj.fortObj.fort_id);
        };
        this.initData();
    }
    FortHeadquarterWindow.prototype = FortHeadquarterWindow;
    FortHeadquarterWindow.open = function (fortId) {
        if (!isDefined(fortId))return false;
        return new FortHeadquarterWindow(fortId);
    };
    FortHeadquarterWindow.getBackgroundPosition4Building = function (key) {
        switch (key) {
            case'headquarter':
                return '0px -295px';
            case'barracks':
                return '0px -59px';
            case'wall':
                return '0px -354px';
            case'flag':
                return '0px -177px';
            case'storage':
                return '0px -472px';
            case'fronttower':
                return '0px -236px';
            case'tower1':
                return '0px 0px';
            case'tower2':
                return '0px -118px';
            case'tower3':
                return '0px -531px';
            case'tower4':
                return '0px -413px';
            default:
                return '0px 0px';
        }
    };
    FortHeadquarterWindow.createBuildTableRow = function (data) {
        var getRequiredYields = function (requirements) {
            var xhtml = $('<span />');
            var item = null;
            for (var i = 0; i < 3; i++) {
                item = new tw2widget.FortItem(ItemManager.get(requirements[i].item_id));
                item.setRequired(requirements[i].available, requirements[i].required);
                xhtml.append($('<span class="fbhq_build_itemslot' + (i + 1) + '"></span>').html(item.getMainDiv()));
            }
            return xhtml;
        };
        var contentRow = $('<div class="fbhq_build_building_leftside"><h4>' + data.name + '</h4><span class="fbhq_build_form"></span></div>' + '<div class="fbhq_build_level"><h4>' + 'Уровень' + '</h4><h3>' + data.stage + '</h3></div>' + '<div class="fbhq_build_building_rightside"></div>');
        if (data.stage < data.maxStage) {
            if (!data.yieldStageUpRequirement) {
                $('span.fbhq_build_form', contentRow).append(new west.gui.Button('Строить', this.constructBuildingButtonClicked, null, {building: data.key}).setMinWidth(120).getMainDiv());
                $(contentRow[2]).append(new west.gui.Progressbar(data.buildPoints - data.currentStagePoints, data.nextStagePoints - data.currentStagePoints).getMainDiv()).addClass('buildinprogress');
            }
            else if (!data.notEnoughYields) {
                $('span.fbhq_build_form', contentRow).append(new west.gui.Button('Открыть', this.unlockBuildingButtonClicked, null, {building: data.key}).setMinWidth(120).getMainDiv());
                $(contentRow[2]).append(getRequiredYields(data.buildRequirements));
            }
            else {
                $('span.fbhq_build_form', contentRow).text('Не хватает стройматериалов!').addClass('text_red');
                $(contentRow[2]).append(getRequiredYields(data.buildRequirements));
            }
        }
        else {
            $('span.fbhq_build_form', contentRow).text('Здание завершено.');
            $(contentRow[2]).append(new west.gui.Progressbar(100, 100).showPercentOnly(true).getMainDiv()).addClass('buildinprogress');
        }
        return new west.gui.Groupframe('fbhq_building_' + data.key).appendToContentPane(contentRow).getMainDiv();
    };
    FortHeadquarterWindow.initBuild = function () {
        var that = this;
        var maindiv = $('<div class="headquarter-build"></div>');
        var textbox = '<p>' + 'Прежде чем начать постройку очередного уровня здания, нужно внести материалы, требуемые для его закладки. Потом понадобятся материалы для постройки самого уровня.' + '</p><div class="fbhq_builddivider"></div>';
        var buildTable = new west.gui.Scrollpane('fbhq_building_table');
        for (var i = 0; i < that.buildData.buildings.length; i++) {
            var tmpGroup = that.createBuildTableRow(that.buildData.buildings[i]);
            $(tmpGroup).children('div.bg0').css('background-position', that.getBackgroundPosition4Building(that.buildData.buildings[i].key));
            buildTable.appendContent(tmpGroup);
        }
        maindiv.append(textbox, buildTable.getMainDiv());
        that.window.$('div.fortheadquarter-build').empty().append(maindiv);
    };
    FortHeadquarterWindow.initBuild4ForeignFort = function () {
        var that = this;
        var maindiv = $('<div class="headquarter-build"><br /><h3 class="center">' + that.buildData.headQuarterName.escapeHTML() + '&nbsp;<span style="font-size:14px;">' + s('%1-й уровень', that.buildData.headQuarterStage) + '</span></h3></div>');
        var buildTable = new west.gui.Table().addClass('fbhq_buildtable').appendTo(maindiv).addColumn("fbhq_buildinglabel").addColumn("fbhq_buildingstage").appendToThCell("head", "fbhq_buildinglabel", 'Название здания', 'Здание').appendToThCell("head", "fbhq_buildingstage", 'Уровень здания', 'Уровень');
        var tmpCells = {};
        for (var i = 0; i < that.buildData.buildings.length; i++) {
            tmpCells['fbhq_buildinglabel'] = that.buildData.buildings[i].name;
            tmpCells['fbhq_buildingstage'] = that.buildData.buildings[i].stage;
            buildTable.buildRow(null, tmpCells);
        }
        maindiv.append(buildTable.getMainDiv());
        that.window.$('div.fortheadquarter-build').empty().append(maindiv);
    };
    FortHeadquarterWindow.initTowns = function () {
        var that = this;
        that.initTowns4ForeignFort();
        if (that.townsData.playerTownRights == 3) {
            var leaveBut = $('<div class="fbhq_fortleavebutton" title="' + 'Покинуть форт' + '" onclick="">' + '<img style="width: 75px; height: 46px;" src="https://westrus.innogamescdn.com/images/fort/page/headquarter/leave.png" /></div>').data('townId', that.townsData.playerTown).click(that.leaveFortButtonClicked);
            that.window.$('div.headquarter-towns').append(leaveBut);
        }
    };
    FortHeadquarterWindow.initTowns4ForeignFort = function () {
        var that = this;
        var maindiv = $('<div class="headquarter-towns"><h2>' + 'Города' + '</h2><p>' + 'Кликни город, для дополнительных сведений.' + '</p>' + '<p>' + 'Всего городов' + ': <span id="members_count">' + that.townsData.memberCount + '</span></p></div>');
        new west.gui.Groupframe('fbhq_townslist', '<div class="fbhq_membertown_table"></div>').appendTo(maindiv);
        that.window.$('div.fortheadquarter-towns').empty().append(maindiv);
        that.buildTownRows();
        $('div.fbhq_membertown_table', that.DOM).click(that.toggleDetailbox);
    };
    FortHeadquarterWindow.initLog = function () {
        var that = this;
        var maindiv = $('<div class="headquarter-log"></div>');
        that.fortObj['logTable'] = new west.gui.Table().addClass('fbhq_logtable').appendTo(maindiv).addColumn("fbhq_logdate").addColumn("fbhq_logtown").addColumn("fbhq_logevent").appendToThCell("head", "fbhq_logdate", 'Дата', 'Дата').appendToThCell("head", "fbhq_logtown", 'Город', 'Город').appendToThCell("head", "fbhq_logevent", 'Событие', 'Событие');
        maindiv.append(that.fortObj['logTable'].getMainDiv(), $('<div class="fbhq_logmessage center" style="margin: 0 auto; width: 500px;"></div>'));
        that.window.$('div.fortheadquarter-log').empty().append(maindiv);
    };
    FortHeadquarterWindow.updateLogTable = function (page) {
        var that = this;
        Ajax.remoteCallMode('fort_building_headquarter', 'list_log', {
            page: page || 0,
            fort_id: that.fortObj.fort_id
        }, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            that.logData = json.logs;
            if (json.logs.length > 0) {
                var tmpCells = {};
                that.fortObj['logTable'].clearBody();
                for (var i = 0; i < that.logData.length; i++) {
                    tmpCells['fbhq_logdate'] = that.logData[i].log_date;
                    tmpCells['fbhq_logtown'] = (that.logData[i].town_name ? that.logData[i].town_name : '--');
                    tmpCells['fbhq_logevent'] = that.logData[i].data;
                    that.fortObj['logTable'].buildRow(null, tmpCells);
                }
                $('div.fbhq_logmessage', that.DOM).html('<p style="font-weight: bold;">' + json.message + '<span>' + s(ngettext('Записи удаляются по прошествии %1 дня.', new Array('Записи удаляются по прошествии %1 дня.', 'Записи удаляются по прошествии %1 дней.', 'Записи удаляются по прошествии %1 дней.'), json.deleteDay), json.deleteDay) + '</span></p>');
            }
        }, that);
    };
    FortHeadquarterWindow.initInvitation = function () {
        var that = this;
        var maindiv = $('<div class="headquarter-invitation">' + '<br /><div class="fbhq_sendinvitebox"><h2>' + 'Пригласить' + '</h2>' + '<p>' + 'Разошли приглашения в форт другим городам, чтобы они могли помочь в постройке и обороне.' + '</p>' + '<div class="fbhq_invitationbox"><h4 class="center">' + 'Пригласить город' + '</h4></div>' + '</div><br />' + '</div>');
        if (that.fortObj.level > 1) {
            var inviteInput = new west.gui.Textfield("fbhq_iTownname").setSize(40).addListener(this.inviteTownButtonClicked, this);
            var inviteBut = new west.gui.Button('Пригласить', that.inviteTownButtonClicked, null, null).setMinWidth(125);
            $('div.fbhq_invitationbox', maindiv).append($('<span>' + 'Город' + ': </span>'), inviteInput.getMainDiv(), inviteBut.getMainDiv());
        }
        var invitationlog = $('<div class="fbhq_towninvitationlogs"></div>');
        that.fortObj['invitationTable'] = new west.gui.Table().addClass('fbhq_invitationtable').appendTo(maindiv).addColumn("fbhq_invdate").addColumn("fbhq_invtown").addColumn("fbhq_invevent").addColumn("fbhq_invdel").createEmptyMessage('А приглашений-то нет').appendToThCell("head", "fbhq_invdate", 'Дата', 'Дата').appendToThCell("head", "fbhq_invtown", 'Город', 'Город').appendToThCell("head", "fbhq_invevent", 'Событие', 'Событие').appendToThCell("head", "fbhq_invdel", 'Отозвать приглашение', '&nbsp;');
        invitationlog.append(that.fortObj['invitationTable'].getMainDiv());
        maindiv.append(invitationlog);
        that.window.$('div.fortheadquarter-invitation').empty().append(maindiv);
    };
    FortHeadquarterWindow.updateInvitationTable = function () {
        var that = this;
        Ajax.remoteCallMode('fort_building_headquarter', 'ajax_get_invitations', {fort_id: that.fortObj.fort_id}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            that.refreshInvitationTableView(json);
        }, that);
    };
    FortHeadquarterWindow.refreshInvitationTableView = function (data) {
        var that = this;
        that.fortObj['invitationTable'].clearBody();
        if (data.invitations.length > 0) {
            var tmpCells = {};
            for (var i = 0; i < data.invitations.length; i++) {
                tmpCells['fbhq_invdate'] = data.invitations[i].invitation_date;
                tmpCells['fbhq_invtown'] = (data.invitations[i].town_name ? data.invitations[i].town_name.escapeHTML() : '--');
                tmpCells['fbhq_invevent'] = 'Приглашён игроком' + '&nbsp;' + data.invitations[i].from_name;
                tmpCells['fbhq_invdel'] = '<img id="fbhq_delete_' + data.invitations[i].town_id + '" class="fbhq_deletebutton" alt="' + 'Удалить' + '" src="https://westrus.innogamescdn.com/images/icons/delete.png" title="" />';
                that.fortObj['invitationTable'].buildRow(null, tmpCells);
                $('#fbhq_delete_' + data.invitations[i].town_id, FortHeadquarterWindow.DOM).data('townId', data.invitations[i].town_id).click(that.removeTownInvitation);
            }
        }
    };
    FortHeadquarterWindow.initProfile = function () {
        var that = this;
        var maindiv = $('<div class="headquarter-profile"><div class="fbhq_renamebox"></div><div class="fbhq_header_devider"></div><div class="fbhq_editprofilebox"></div></div>');
        var renameInput = new west.gui.Textfield("fbhq_iFortname").setSize(40).addListener(this.renameFortButtonClicked, this);
        var renameBut = new west.gui.Button('Переименовать', that.renameFortButtonClicked, null, null).setMinWidth(125);
        $('div.fbhq_renamebox', maindiv).append($('<span class="text_bold">' + 'Переименовать форт' + ': </span>'), renameInput.getMainDiv(), renameBut.getMainDiv());
        var profileTextarea = new west.gui.Textarea(that.adminData.fortText).setId("fbhq_profiletextarea").setWidth(640).setHeight(200);
        var profileBBCodes = new west.gui.Bbcodes(profileTextarea.textarea[0]).getMainDiv();
        var butPreviewText = new west.gui.Button('Просмотр', that.previewProfiletextButtonClicked, null, null).setMinWidth(125).addClass('fbhq_butpreview').getMainDiv();
        var butBackPreview = new west.gui.Button('Редактировать', that.previewProfiletextButtonClicked, null, null).setMinWidth(125).addClass('fbhq_butbackpreview').getMainDiv();
        var butEditText = new west.gui.Button('Сохранить', that.editProfiletextButtonClicked, null, null).setMinWidth(125).addClass('fbhq_butedit').getMainDiv();
        $('.tw2gui_textarea_wrapper', profileTextarea.getMainDiv()).append($('<div class="fbhq_profile_preview"/>'));
        $('div.fbhq_editprofilebox', maindiv).append($('<span class="fbhq_fortprofilelabel text_bold">' + 'Изменить профиль форта' + ': </span>'), profileBBCodes, profileTextarea.getMainDiv(), butPreviewText, butEditText, butBackPreview);
        that.window.$('div.fortheadquarter-profile').empty().append(maindiv);
    };
    FortHeadquarterWindow.initManeuver = function () {
        var that = this;
        var maindiv = $('<div class="headquarter-maneuver"></div>');
        var selAuthorized = new west.gui.Combobox('fbhq_manv_auth').setWidth(150).addItem(0, 'Владельцы форта').addItem(1, 'Члены альянса').addItem(2, 'Без ограничений').select(0);
        var cbChatChannel = new west.gui.Checkbox('Разделить чаты' + ':&nbsp;', 'fbhq_manv_chat').setTooltip('Если эта опция включена, чаты защитников и нападающих разделены.');
        var cbFullHealth = new west.gui.Checkbox('Восстановить здоровье' + ':&nbsp;', 'fbhq_manv_health').setTooltip('Если эта опция включена, игроки начнут сражение с их максимально возможным здоровьем.');
        var butCallManeuver = new west.gui.Button('Объявить учения', that.startManeuverButtonClicked, null, null).setMinWidth(175);
        new west.gui.Groupframe('fbhq_maneuverform', '<span class="text_bold">' + 'Участники' + ':</span>&nbsp;&nbsp;').appendToContentPane(selAuthorized.getMainDiv()).appendToContentPane(selAuthorized.getMainDiv()).appendToContentPane('<br /><br />').appendToContentPane(cbChatChannel.getMainDiv()).appendToContentPane('<br /><br />').appendToContentPane(cbFullHealth.getMainDiv()).appendToContentPane('<br /><br />').appendToContentPane(butCallManeuver.getMainDiv()).appendTo(maindiv);
        that.window.$('div.fortheadquarter-maneuver').empty().append(maindiv);
    };
    FortHeadquarterWindow.initData = function () {
        var that = this;
        Ajax.remoteCallMode('fort_building_headquarter', 'index', {fort_id: that.fortObj.fort_id}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            if (json.members.isMember) {
                that.window.addTab('Учения', 'maneuver', that.tabclick).appendToContentPane($('<div class="fortheadquarter-maneuver"/>'));
                if (json.level > 1)that.window.addTab('Журнал', 'log', that.tabclick).appendToContentPane($('<div class="fortheadquarter-log"/>'));
                if (json.level > 2) {
                    that.window.addTab('Приглашение', 'invitation', that.tabclick).appendToContentPane($('<div class="fortheadquarter-invitation"/>'));
                    that.window.addTab('Профиль', 'profile', that.tabclick).appendToContentPane($('<div class="fortheadquarter-profile"/>'));
                }
            } else if (json.level == 1) {
                that.window.addTab('Приглашение', 'invited', that.tabclick);
            }
            that.prepareData(json);
            that.buildScreens();
        }, that);
    };
    FortHeadquarterWindow.prepareData = function (data) {
        var that = this;
        that.buildData = {}, that.townsData = {}, that.logData = {}, that.invData = {}, that.adminData = {};
        that.buildData = data.build;
        that.townsData = data.members;
        that.invData = data.invitations;
        that.adminData = data.administration;
        that.fortObj['is_member'] = data.members.isMember;
        that.fortObj['level'] = data.level;
        that.fortObj['x'] = data.x;
        that.fortObj['y'] = data.y;
    };
    FortHeadquarterWindow.buildScreens = function () {
        var that = this;
        if (!that.fortObj.is_member) {
            that.initBuild4ForeignFort();
            that.initTowns4ForeignFort();
        }
        else {
            that.initBuild();
            that.initTowns();
            that.initManeuver();
            if (that.fortObj.level > 1)that.initLog();
            if (that.fortObj.level == 1 || that.fortObj.level == 3)that.initInvitation();
            if (that.fortObj.level > 2) {
                that.initProfile();
            }
        }
        that.showTab('build');
    };
    FortHeadquarterWindow.kickTown = function (townId, fortId) {
        Ajax.remoteCall('fort_building_headquarter', 'leave_fort', {town_id: townId, fort_id: fortId}, function (json) {
            if (json.error)return new UserMessage(json.mg, UserMessage.TYPE_ERROR).show();
            FortHeadquarterWindow.open(fortId);
            return new UserMessage(json.msg, UserMessage.TYPE_SUCCESS).show();
        });
    };
    FortHeadquarterWindow.buildTownRows = function () {
        var that = this;
        var buildTownBox = function (rowId, town) {
            var html = '';
            if (Character.homeTown.town_id == that.townsData.leadingTownId && Character.townRights == 3 && town.id != Character.homeTown.town_id) {
                html += '<img style="float:right;width:40px;margin-top:3px;" src="https://westrus.innogamescdn.com/images/fort/page/headquarter/leave.png" onclick="FortHeadquarterWindow.kickTown(' + town.id + ',' + that.fortObj.fort_id + ')" title="' + 'Исключить город' + '">';
            }
            html += '<p id="' + rowId + '" class="fbhq_memberrow" title="' + 'Кликни, чтобы получить дополнительную информацию.' + '">' + 'Город' + '&nbsp;<a href="javascript:TownWindow.open(' + town.coordX + ',' + town.coordY + ')">' + town.townName.escapeHTML() + '</a>' +
                (town.leader ? ' <span style="font-size: 11px;">(' + 'Владелец форта' + ')</span>' : '') + '<br /><span style="font-size: 10px;">' + 'Количество жителей' + ': ' + town.memberCount + ' ' + 'Очки города' + ': ' + town.townPoints + '</span></p>' + '<div style="display:none;" id="' + rowId + '_details"></div>';
            return html;
        };
        var scrollbox = new west.gui.Scrollpane('fbhq_townmemberlist');
        for (var i in that.townsData.fortTowns) {
            scrollbox.appendContent($(buildTownBox('fbhq_' + that.fortObj.fort_id + '_membertowns_' + i, that.townsData.fortTowns[i])).data('town_id', that.townsData.fortTowns[i].id));
        }
        $('div.fbhq_membertown_table', that.DOM).append(scrollbox.getMainDiv());
    };
    FortHeadquarterWindow.getTownMember = function (elem) {
        var that = this;
        elem.html('&nbsp;');
        Ajax.remoteCallMode('fort_building_headquarter', 'ajax_get_members', {
            town_id: elem.data('town_id'),
            fort_id: that.fortObj.fort_id
        }, function (json) {
            if (json.error)return new UserMessage('Об этом городе нет информации.').show();
            elem.html(that.fillTownDetailBox(json));
        }, that);
    };
    FortHeadquarterWindow.fillTownDetailBox = function (data) {
        var that = this;
        var table = '<table id="fbhq_' + that.fortObj.fort_id + '_membersTable_' + data.requestedTownId + '" class="fbhq_members_table">' + '<tr>' + '<th style="width:40px;"></th>' + '<th style="width:80px;">' + 'Тип' + '</th>' +
            (data.isFortMember ? '<th style="width:30px;"></th>' : '') + '<th style="width:190px;">' + 'Имя персонажа' + '</th>' + '<th style="width:40px;">' + 'Уровень' + '</th>' +
            (data.isFortMember && data.level > 1 ? '<th style="width:100px;">' + 'Строительство' + '</th><th style="width:80px;">' + 'Вклад' + '</th>' : '') + '</tr>';
        for (var i = 0; i < data.members.length; i++) {
            var m = data.members[i];
            var statusImg = '';
            if (m.holiday_date)
                statusImg = '<img src="https://westrus.innogamescdn.com/images/town/cityhall/blue.png" title="' + 'Отпуск' + '" alt=""/>'; else if (m.idleStatus) {
                statusImg = '<img src="https://westrus.innogamescdn.com/images/town/cityhall/' + m.idleStatus + '.png"  alt="" ';
                statusImg += 'title="' + (m.idleStatus == 'green' ? 'Активен' : 'Бездельничает два дня') + '" />';
            }
            else
                statusImg = '<img src="https://westrus.innogamescdn.com/images/town/cityhall/red.png" title="' + 'Бездельничает неделю' + '" alt="" />';
            table += '<tr class="' + ((i % 2) ? 'members_row_b' : 'members_row_a') + '">' + '<td style="padding-left: 5px;">' + m.avatar + '</td>' + '<td class="center"><img src="https://westrus.innogamescdn.com/images/window/duels/charclass_' + m['class'] + '.png" /></td>';
            table += (data.isFortMember ? '<td class="center"><span id="fbhq_idleStatus' + m.playerId + '">' + statusImg + '</span></td>' : '') + '<td style="padding-left: 10px;">' + '<a href="javascript:void(PlayerProfileWindow.open(' + m.playerId + '));">' + m.name + '</a>' + '</td>' + '<td class="center">' + m.level + '</td>';
            if (data.isFortMember && data.level > 1) {
                table += '<td class="center">' + (m.buildTime != '' ? m.buildTime : '0 часов') + '</td>' + '<td class="center">$&nbsp;' + (m.payedInStorage || 0) + '</td>';
            }
            table += '</tr>';
        }
        table += '</table>';
        return table;
    };
    FortHeadquarterWindow.updateBuildProgressbar = function (buildingKey, buildingPercentDone) {
        var that = this;
        var progressbar = new west.gui.Progressbar(buildingPercentDone, 100).showPercentOnly(true).getMainDiv();
        $('div.fbhq_building_' + buildingKey + ' div.fbhq_build_building_rightside', that.DOM).append(progressbar);
    };
    FortHeadquarterWindow.toggleForttextPreview = function () {
        var that = this;
        if ($('#fbhq_profiletextarea:visible', that.DOM).length == 1) {
            $('div.fbhq_editprofilebox', that.DOM).hide();
            $('div.fbhq_profiletextpreviewbox', that.DOM).show();
        }
        else {
            $('div.fbhq_profiletextpreviewbox', that.DOM).hide();
            $('div.fbhq_editprofilebox', that.DOM).show();
        }
    };
})(jQuery);
;
(function ($) {
    window.FortBarracksWindow = {};
    var fortObj = {};
    FortBarracksWindow.open = function (fortId) {
        FortBarracksWindow.window = wman.open('barracks-' + fortId).setMiniTitle('Казарма').appendToContentPane($('<div id="fbb_barracks" />'));
        fortObj['fort_id'] = fortId;
        FortBarracksWindow.window.setTitle('Казарма');
        initData();
    };
    FortBarracksWindow.prototype = FortBarracksWindow;
    wman.registerReopenHandler("/^barracks-/" + fortObj.fort_id, function () {
        FortBarracksWindow.open(fortObj.fort_id);
    });
    var initData = function () {
        Ajax.remoteCallMode('fort_building_barracks', 'index', {fort_id: fortObj.fort_id}, function (json) {
            if (json.error) {
                return json.not_allowed ? showLockedWindow() : new UserMessage(json.msg).show();
            }
            initFortBarracks(json);
        }, FortBarracksWindow);
    }
    var initFortBarracks = function (data) {
        HotelWindow.pos = {x: data.coordX, y: data.coordY};
        HotelWindow.refresh_way_time($('div.tw2gui_window.barracks-' + fortObj.fort_id), HotelWindow.pos);
        FortBarracksWindow.window.setTitle(s('Казарма (Уровень %1)', data.barrackStage));
        var maindiv = $('<div class="fbb_maincontainer"><span class="fbb_wooddivider"></span></div>');
        var pointbox = '<div class="fbb_barrackpoints"><img src="https://westrus.innogamescdn.com/images/hotel_stars/' + data.barrackStage + 'star.png" class="fbb_stageimage" />' + '<h3>' + 'Спальная комната' + '</h3>' + '<div class="fbb_title"><a onclick="javascript:FortWindow.open(' + fortObj.fort_id + ', ' + data.coordX + ', ' + data.coordY + ')">' + data.fortName.escapeHTML() + '</a></div>' + '<br style="clear:left" /><div class="fbb_pointrows"><span class="fbb_rowicons"><img src="https://westrus.innogamescdn.com/images/icons/energy.png" /></span><span class="fbb_rowkeys">' + 'Энергия' + '</span><span class="fbb_rowvalues">' + data.rooms['barracks_room' + data.barrackStage].energy + '</span></div>' + '<div class="fbb_pointrows"><span class="fbb_rowicons"><img src="https://westrus.innogamescdn.com/images/icons/redcross.png" /></span><span class="fbb_rowkeys">' + 'Здоровье' + '</span><span class="fbb_rowvalues">' + data.rooms['barracks_room' + data.barrackStage].health + '</span></div>' + '<div class="fbb_pointrows"><span class="fbb_rowicons"><img src="https://westrus.innogamescdn.com/images/icons/clock.png" /></span><span class="fbb_rowkeys">' + 'Расстояние' + '</span><span class="fbb_rowvalues">' + getDuration(data.coordX, data.coordY) + '</span></div>' + '<div class="fbb_pointrows"><span class="fbb_rowicons"><img src="https://westrus.innogamescdn.com/images/icons/hourglass.png" /></span><span class="fbb_rowkeys">' + 'Время' + '</span><span class="fbb_rowvalues">' + (data.sleepDuration ? data.sleepDuration : 'Неизвестно') + '</span></div>' +
            (data.attackable ? '<div class="fbb_pointrows"><span class="fbb_rowicons"><img src="https://westrus.innogamescdn.com/images/icons/sword.png" /></span><span class="fbb_rowkeys">' + 'Атакуемый' + '</span><span class="fbb_rowvalues">' + data.attackable + '</span></div>' : '') + '</div>';
        var sleepimage = '<img class="fbb_sleepimage" src="https://westrus.innogamescdn.com/images/window/fort/barracks_sleep.jpg" />';
        var formbox = '<div class="fbb_formbox"></div>';
        maindiv.append($('<div class="fbb_aside center"></div>'), pointbox, sleepimage, formbox);
        var sleepButton = new west.gui.Button('Спать', sleepButtonClicked, null, null).setMinWidth(140);
        $('div.fbb_formbox', maindiv).append(sleepButton.getMainDiv());
        FortBarracksWindow.window.$('#fbb_barracks').empty().append(maindiv);
    };
    var getDuration = function (x, y) {
        return Map.calcWayTime(Character.position, {x: x, y: y}).formatDuration();
    }
    var sleepButtonClicked = function () {
        HotelWindow.start_barrack_sleep(fortObj.fort_id);
    }
    var showLockedWindow = function () {
        var maindiv = $('<div class="fbf_content"><img class="citybg_left" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_le.png" /><img class="citybg_top" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_to.jpg" /><img class="citybg_right" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_ri.png" />' + '<img src="https://westrus.innogamescdn.com/images/fort/page/fort_access_denied.jpg" class="image_accessdenied" />' + '<div class="fbf_textbox"><p>' + 'При входе тебя остановил охранник.' + '</p></div></div>');
        FortBarracksWindow.window.$('#fbb_barracks').empty().append(maindiv);
    };
})(jQuery);

(function ($) {
    wman.registerReloadHandler(/^fortstorage-\d+/, function (uid) {
        FortStorageWindow.open(uid.match(/\d+/)[0]);
    });
    FortStorageWindow = function (fortId, tab) {
        var that = this;
        this.uid = "fortstorage";
        this.fortId = fortId;
        if (undefined === tab)tab = "overview";
        var tabclick = function (win, id) {
            that.showTab(id);
        };
        this.window = wman.open(this.uid, null, "fortstorage").addTab("Обзор", "overview", tabclick).addTab("История", "history", tabclick).setMiniTitle("Склад");
        this.Overview = new FortStorageOverview(this.fortId, this);
        this.History = new FortStorageHistory(this.fortId, this);
        this.window.appendToContentPane(this.Overview.window, this.History.window);
        this.window.center();
        this.window.restoreAppearance({
            h: this.window.divMain.offsetHeight,
            w: this.window.divMain.offsetWidth,
            x: this.window.divMain.offsetLeft - Inventory.width / 2 + 15 / 2
        });
        this.showTab(tab);
    }
    FortStorageWindow.prototype = FortStorageWindow;
    FortStorageWindow.open = function (fortId, tab) {
        if (undefined === fortId)return;
        return new FortStorageWindow(fortId, tab);
    }
    FortStorageWindow.onInventoryClick = function (item) {
        if ("overview" != this.currentTab)
            return false;
        this.Overview.putin(item.getImgEl());
        return true;
    };
    FortStorageWindow.showTab = function (id) {
        if (!this.window)return;
        this.currentTab = id;
        this.window.activateTab(id).$('div.tw2gui_window_content_pane > *').each(function (i, e) {
            if ($(e).hasClass('fortstorage-' + id)) {
                $(e).children().fadeIn();
                $(e).show();
            }
            else {
                $(e).children().fadeOut();
                $(e).hide();
            }
        });
        this.window.removeClass("fortoverview");
        switch (id) {
            case"overview":
                this.window.addClass("fortoverview");
                this.Overview.init();
                break;
            case"history":
                this.History.init();
                break;
        }
    };
    FortStorageOverview = function (fortId, parent) {
        this.fortId = fortId;
        this.parent = parent;
        this.window = $("<div class='fortstorage-overview'/>");
    }
    FortStorageOverview.prototype = FortStorageOverview;
    FortStorageOverview.init = function () {
        Inventory.open(this.parent.window, {
            callback: this.parent.onInventoryClick,
            context: this.parent,
            window: this.parent.window
        });
        if (this.window.children().length)return;
        var that = this;
        this.slotUsed = 0;
        this.slotLimit = 0;
        this.cash = 0;
        this.cashLimit = 0;
        this.cashPayable = 0;
        this.inventory = [];
        this.elBanner = $("<div class='overview-banner'/>");
        this.elDetail = $("<div class='overview-detail'/>").append("<div class='detail-cash'/>", "<div class='detail-slots'/>");
        this.elInventory = $("<div id='fortstoragedrop-" + this.fortId + "' class='overview-inventory'/>");
        this.inputPayin = new west.gui.Textfield().setName("payin").setSize(5);
        this.buttonSubmit = new west.gui.Iconbutton(new west.gui.Icon("dollar"), function () {
            that.payin();
        });
        this.elPayin = $("<div class='overview-payin'/>").append(this.inputPayin.getMainDiv(), this.buttonSubmit.getMainDiv());
        this.update();
        this.window.append(this.elBanner, this.elDetail, this.elInventory, this.elPayin);
        $("#fortstoragedrop-" + this.fortId).asDropzone(".item_inventory_img", false, function (el) {
            that.putin(el);
        });
        return this;
    }
    FortStorageOverview.update = function () {
        var that = this;
        Ajax.remoteCallMode("fort_building_storage", "get_storage", {fort_id: this.fortId}, function (resp) {
            if ("string" == typeof resp)
                return new UserMessage(resp, UserMessage.TYPE_ERROR).show();
            if (resp.page)
                return new UserMessage('При входе тебя остановил охранник.', UserMessage.TYPE_ERROR).show();
            that.cashLimit = resp.cashLimit;
            that.slotLimit = resp.slotLimit;
            that.cashPayable = resp.payable;
            that.setCash(resp.cash);
            that.setSlotUsed(resp.slotUsed);
            that.elBanner.text("Склад (%1-й уровень)".replace("%1", resp.buildingStage));
            that.updateInventory(resp.storageInventory);
        }, this.parent);
        return this;
    }
    FortStorageOverview.updateInventory = function (data) {
        this.elInventory.empty();
        this.inventory = [];
        this.slotUsed = 0;
        var that = this;
        $.each(data, function (k, v) {
            that.addItem(v.item_id, v.stack);
        });
    }
    FortStorageOverview.addItem = function (id, count) {
        if ((this.slotUsed + 1) > this.slotLimit)return;
        if (undefined == count)count = 1;
        var itm = this.inventory[id];
        if (undefined !== itm) {
            itm.setCount(parseInt(itm.getCount()) + parseInt(count));
            return;
        }
        var that = this;
        itm = new tw2widget.Item(ItemManager.get(id), 'item_fortstorage');
        itm.getMainDiv().click(function () {
            that.drop(itm);
        });
        itm.setCount(count);
        this.elInventory.append(itm.getMainDiv());
        this.inventory[id] = itm;
        this.setSlotUsed(this.slotUsed + 1);
        return this;
    }
    FortStorageOverview.removeItem = function (id) {
        if (undefined === this.inventory[id])return;
        this.inventory[id].getMainDiv().remove();
        delete this.inventory[id];
        this.setSlotUsed(this.slotUsed - 1);
    }
    FortStorageOverview.setCash = function (cash) {
        if (cash > this.cashLimit)cash = this.cashLimit;
        this.cash = cash;
        $(".detail-cash", this.elDetail).empty().append(west.gui.Icon.get("safe"), "<span>" + cash + " / " + this.cashLimit + " $</span>");
        return this;
    }
    FortStorageOverview.setSlotUsed = function (slots) {
        if (slots > this.slotLimit)slots = this.slotLimit;
        this.slotUsed = slots;
        $(".detail-slots", this.elDetail).empty().append(west.gui.Icon.get("bookshelf"), "<span>" + slots + " / " + this.slotLimit + "</span>");
        return this;
    }
    FortStorageOverview.payin = function () {
        var amount = parseInt(this.inputPayin.getValue());
        if (!amount)
            return new UserMessage("Нужно ввести сумму").show();
        var that = this;
        new west.gui.Dialog("Внесено на хранение на склад", "Точно передать %1$ на склад?".replace("%1", amount), west.gui.Dialog.SYS_QUESTION).addButton('ok', function () {
            Ajax.remoteCall('fort_building_storage', 'payin', {fort_id: that.fortId, payin: amount}, function (resp) {
                if ("string" == typeof resp)
                    return new UserMessage(resp, UserMessage.TYPE_ERROR).show(); else if (resp.error)
                    return new UserMessage(resp.message, UserMessage.TYPE_ERROR).show(); else
                    new UserMessage(s(sextext('Ты внёс в казну форта %1$', 'Ты внесла в казну форта %1$', Character.charSex), amount), UserMessage.TYPE_SUCCESS).show();
                Character.setMoney(resp.money);
                that.cashPayable = resp.payable;
                that.setCash(resp.deposit);
                that.inputPayin.setValue("");
            }, that.parent);
        }).addButton('cancel').show();
    }
    FortStorageOverview.drop = function (item) {
        var that = this;
        new west.gui.Dialog("Удалить предмет", "Точно удалить этот предмет со склада?", west.gui.Dialog.SYS_QUESTION).addButton('ok', function () {
            Ajax.remoteCall('fort_building_storage', 'delete', {
                fort_id: that.fortId,
                item_id: item.getId(),
                count: item.getCount()
            }, function (resp) {
                if ("string" == typeof resp)
                    return new UserMessage(resp, UserMessage.TYPE_ERROR).show(); else if (resp.error)
                    return new UserMessage(resp.msg, UserMessage.TYPE_ERROR).show();
                that.removeItem(item.getId());
            }, that.parent);
        }).addButton('cancel').show();
    }
    FortStorageOverview.putin = function (el) {
        var that = this;
        var elem = $("<span>" + "Сколько ресурсов ты хочешь передать на фортовой склад?" + "</span><br /><br /><input class='item_popup_input' id='fortstorage_popup_input' type='text' value='1' />" + "<span class='item_count_scrolls'><img src='https://westrus.innogamescdn.com/images/scrollbar/scroll_up.png' id='putin_rise_count' alt='" + 'Выше' + "'>" + "<img src='https://westrus.innogamescdn.com/images/scrollbar/scroll_down.png' id='putin_lower_count' alt='" + 'Ниже' + "'></span><span class='item_popup_max_count' id='fortstorage_putin_max_item'>(99)</span>");
        new west.gui.Dialog("Положить на склад", elem, west.gui.Dialog.SYS_QUESTION).addButton('ok', function () {
            var itm = Bag.getItemByItemId($(el).data("itemId"));
            FortStorageOverview.checkMaxPutInCount(itm);
            var c = 1;
            if ($('#fortstorage_popup_input')) {
                c = $('#fortstorage_popup_input').val();
            }
            Ajax.remoteCall("fort_building_storage", "putin", {
                fort_id: that.fortId,
                inv_id: itm.inv_id,
                lid: Bag.getLastInvId(),
                count: c
            }, function (resp) {
                if ("string" == typeof resp)
                    return new UserMessage(resp, UserMessage.TYPE_ERROR).show(); else if (resp.error)
                    return new UserMessage(resp.message, UserMessage.TYPE_ERROR).show();
                that.addItem($(el).data("itemId"), c);
                Bag.updateChanges(resp.pinvchanges);
            }, that.parent);
        }).addButton('cancel').show();
        var itm = Bag.getItemByItemId($(el).data("itemId"));
        $('#fortstorage_putin_max_item').text('(' + itm.count + ')');
        $('#fortstorage_putin_max_item').off('click');
        $('#fortstorage_putin_max_item').on('click', function () {
            FortStorageOverview.maxPutInCount(itm)
        });
        $('#putin_rise_count').off('click');
        $('#putin_rise_count').on('click', function () {
            FortStorageOverview.risePutInCount(itm)
        });
        $('#putin_lower_count').off('click');
        $('#putin_lower_count').on('click', function () {
            FortStorageOverview.lowerPutInCount(itm)
        });
    }
    FortStorageOverview.maxPutInCount = function (item) {
        $('#fortstorage_popup_input').val(item.count);
    }
    FortStorageOverview.checkMaxPutInCount = function (item) {
        var count = parseInt($('#fortstorage_popup_input').val());
        if (isNaN(count) || count <= 0) {
            count = 1;
        } else if (count > item.count) {
            count = item.count;
        }
        $('#fortstorage_popup_input').val(count);
    }
    FortStorageOverview.risePutInCount = function (item) {
        var count = parseInt($('#fortstorage_popup_input').val());
        if (!isNaN(count) && count < item.count) {
            count = count + 1;
            $('#fortstorage_popup_input').val(count);
        }
    }
    FortStorageOverview.lowerPutInCount = function (item) {
        var count = parseInt($('#fortstorage_popup_input').val());
        if (!isNaN(count) && count > 1) {
            count = count - 1;
            $('#fortstorage_popup_input').val(count);
        }
    }
    FortStorageHistory = function (fortId, parent) {
        this.fortId = fortId;
        this.parent = parent;
        this.page = 0;
        this.window = $("<div class='fortstorage-history'/>");
    }
    FortStorageHistory.prototype = FortStorageHistory;
    FortStorageHistory.init = function () {
        if (this.window.children().length)return;
        this.pageNavi = $("<div class='rl_pagenavi'/>");
        var that = this;
        this.elTable = new west.gui.Table().addColumn("op").appendToCell("head", "op", "&nbsp;").addColumn("amount").appendToCell("head", "amount", "&nbsp;").addColumn("putin").appendToCell("head", "putin", "&nbsp;").addColumn("town").appendToCell("head", "town", "Город").addColumn("player").appendToCell("head", "player", "Игрок").addColumn("date").appendToCell("head", "date", "Дата").appendToCell("foot", "putin", new west.gui.Button("Обновить", function () {
            that.onPageJump(that.page);
        }).getMainDiv()).appendToCell("foot", "date", this.pageNavi);
        Ajax.remoteCallMode("fort_building_storage", "get_log", {
            fort_id: this.fortId,
            page: this.page
        }, function (resp) {
            that.page = resp.page;
            that.max = resp.max;
            $.each(resp.logs, function (k, v) {
                that.addLog(v);
            });
            that.pageNavi.append(new west.gui.Pagebar(that.page, that.max, function (newp) {
                that.onPageJump(newp);
            }).getMainDiv());
        }, this.parent);
        this.elTable.appendTo(this.window);
    }
    FortStorageHistory.onPageJump = function (newp) {
        this.page = parseInt(newp);
        this.window.empty();
        this.init();
    }
    FortStorageHistory.addLog = function (data) {
        this.elTable.appendRow();
        this.elTable.appendToCell(-1, "op", west.gui.Icon.get(data.pay_type.match(/remove$/) ? "abort" : "plus")).appendToCell(-1, "amount", "&nbsp;");
        if (data.pay_type.match(/^item/)) {
            this.elTable.appendToCell(-1, "amount", data.amount);
            this.elTable.appendToCell(-1, "putin", (new tw2widget.TableRowItem(ItemManager.get(data.item_id)).getMainDiv())).appendToCell(-1, "putin", "&nbsp;");
        }
        else if (data.pay_type.match(/^money/)) {
            this.elTable.appendToCell(-1, "putin", data.amount + " $");
        }
        this.elTable.appendToCell(-1, "town", data.town_name).appendToCell(-1, "player", data.player_name).appendToCell(-1, "date", data.log_date);
    }
})(jQuery);
;
(function ($) {
    window.FortFlagWindow = {};
    var fortObj = {};
    var DOM = '*';
    FortFlagWindow.open = function (fortId) {
        FortFlagWindow.window = wman.open('fortflag').setMiniTitle('Флагшток').appendToContentPane($('<div id="fbf_fortflag" />'));
        fortObj['fort_id'] = fortId;
        FortFlagWindow.window.setTitle('Флагшток');
        DOM = $('#fbf_fortflag');
        initData();
    };
    wman.registerReloadHandler("/^fortflag/", FortFlagWindow.open);
    var initData = function () {
        Ajax.remoteCallMode('fort_building_flag', 'index', {fort_id: fortObj.fort_id}, function (json) {
            if (json.error) {
                return json.not_allowed ? showLockedWindow() : new UserMessage(json.msg).show();
            }
            initFortFlag(json);
        }, FortFlagWindow);
    }
    var initFortFlag = function (data) {
        var maindiv = $('<div class="fbf_maincontainer"><div class="fbf_leftSide"><h3>' + 'Флагшток' + '</h3>' + '<a onclick="javascript:FortWindow.open(' + fortObj.fort_id + ', ' + data.coordX + ', ' + data.coordY + ')">' + data.fortName.escapeHTML() + '</a>' + '</div></div>');
        var formbox = $('<div class="fbf_formbox"></div>');
        if (data.isCountyRenameAllowed) {
            var iRename = new west.gui.Textfield("fbf_input_rename").setSize(30).setLabel('Переименовать округ' + ':<br />').setValue(data.countyName);
            var butRename = new west.gui.Button('Переименовать', renameButtonClicked, null, null).setMinWidth(80).addClass('fbf_button_rename');
            formbox.append(iRename.getMainDiv(), butRename.getMainDiv(), $('<p>(' + '(макс. 20 знаков)' + ')</p><br />'));
        }
        var formUpload = $('<form name="upload_fort_logo" action="game.php?window=fort_building_flag&amp;action=upload_fort_logo&amp;fort_id=' + fortObj.fort_id + '&h=' + Player.h + '" id="fbf_uploadForm" method="post" enctype="multipart/form-data" target="fbf_uploadFrame"></form>');
        if (data.canUpload) {
            var butDelete = new west.gui.Button('Удалить картинку', deleteButtonClicked, null, null).setMinWidth(80).addClass('fbf_cb_delete');
            var butSend = new west.gui.Button('Отправить', sendButtonClicked, null, null).setMinWidth(80).addClass('fbf_button_send');
            formUpload.append($('<strong>' + 'Загрузить флаг:' + '</strong><br /><input id="iFilepath" type="file" name="image" size="18" /><p>(' + 'до 220x150 пикселей, до 256 кб, jpg, jpeg, png, gif' + ')</p><br />'), butSend.getMainDiv(), butDelete.getMainDiv());
        }
        if (data.showImage) {
            formUpload.append('<br /><div class="fbf_imagebox"><img id="fbf_fortimage' + fortObj.fort_id + '" src="img.php?type=fort_logo&id=' + fortObj.fort_id + '" alt="' + 'А у нас с вами флагшток пустой!' + '" /></div><iframe id="fbf_uploadFrame" name="fbf_uploadFrame" frameborder="0" src="" allowtransparency="true"></iframe>');
        }
        else
            formUpload.append('<br /><div class="fbf_imagebox">' + 'А у нас с вами флагшток пустой!' + '</div><iframe id="fbf_uploadFrame" name="fbf_uploadFrame" frameborder="0" src="" allowtransparency="true"></iframe>');
        formbox.append(formUpload);
        maindiv.append(formbox);
        FortFlagWindow.window.$('#fbf_fortflag').empty().append(maindiv);
    };
    var renameButtonClicked = function () {
        var newName = FortFlagWindow.window.$('#fbf_input_rename').val();
        if (newName) {
            Ajax.remoteCall('fort_building_flag', 'rename_county', {
                fort_id: fortObj.fort_id,
                county_name: newName
            }, function (json) {
                if (json.error)
                    return new UserMessage(json.msg).show();
                return new UserMessage('Округ переименован', UserMessage.TYPE_SUCCESS).show();
            }, FortFlagWindow);
        }
    }
    var sendButtonClicked = function () {
        if ($('#iFilepath', DOM).val() == '')return new UserMessage('Флаг форта не выбран').show();
        $('#fbf_fortimage' + fortObj.fort_id, DOM).remove();
        $('#fbf_uploadFrame', DOM).show();
        $('div.fbf_imagebox', DOM).html('Файл загружается…'.escapeHTML()).append(get_throbber());
        $('#fbf_uploadForm', DOM).submit();
        $('#fbf_uploadFrame', DOM).on('load', function () {
            $('div.fbf_imagebox', DOM).empty();
            $('#iFilepath', DOM).val('');
        });
    }
    var deleteButtonClicked = function () {
        $('#fbf_uploadFrame').show();
        Ajax.remoteCall('fort_building_flag', 'upload_fort_logo', {
            fort_id: fortObj.fort_id,
            del_logo: true
        }, function (json) {
            if (json.error)
                return new UserMessage(json.msg).show();
            $('#fbf_fortimage' + fortObj.fort_id).remove();
            $('#iFilepath', DOM).val('');
            return new UserMessage('Флаг форта удалён', UserMessage.TYPE_SUCCESS).show();
        }, FortFlagWindow);
        $('#fbf_uploadFrame').hide();
    }
    var showLockedWindow = function () {
        var maindiv = $('<div class="fbff_content"><img class="citybg_left" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_le.png" /><img class="citybg_top" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_to.jpg" /><img class="citybg_right" src="https://westrus.innogamescdn.com/images/tw2gui/window/citybg_ri.png" />' + '<img src="https://westrus.innogamescdn.com/images/fort/page/fort_access_denied.jpg" class="image_accessdenied" />' + '<div class="fbf_textbox"><p>' + 'При входе тебя остановил охранник.' + '</p></div>' + '</div>');
        FortFlagWindow.window.$('#fbf_fortflag').empty().append(maindiv);
    };
})(jQuery);

(function ($) {
    window.FortinviteWindow = {DOM: '*'};
    var fortId = 0;
    FortinviteWindow.open = function (fort_id) {
        FortinviteWindow.window = wman.open("fort-invite").setMiniTitle('Приглашения присоединиться к форту').appendToContentPane($('<div class="fort-invite-content"/>'));
        FortinviteWindow.DOM = $('div.fort-invite');
        fortId = fort_id;
        FortinviteWindow.window.setTitle('Приглашения присоединиться к форту');
        FortinviteWindow.init();
        initData(fort_id);
    };
    wman.registerReloadHandler(/^fort-invite/, function () {
        FortinviteWindow.open(fortId);
    });
    FortinviteWindow.init = function () {
        FortinviteWindow.Table = new west.gui.Table().setId('fort_invitations').createEmptyMessage('Приглашений присоединиться к форту нет').addColumn("fortinvite_accept").addColumn("fortinvite_fort").addColumn("fortinvite_by_player").addColumn("fortinvite_date").addColumn("fortinvite_delete").appendToThCell("head", "fortinvite_accept", 'Принять приглашение присоединиться к форту', "&nbsp;").appendToThCell("head", "fortinvite_fort", 'Название форта', 'Форт').appendToThCell("head", "fortinvite_by_player", 'Игрок, выславший приглашение.', 'От').appendToThCell("head", "fortinvite_date", 'Дата приглашения', 'Дата').appendToThCell("head", "fortinvite_delete", 'Отклонить приглашение', "&nbsp;");
        $('div.fort-invite-content', FortinviteWindow.DOM).empty().append(FortinviteWindow.Table.getMainDiv());
    };
    var initData = function (fortId) {
        Ajax.remoteCallMode('fort_building_headquarter', 'ajax_get_invitation', {fort_id: fortId}, function (json) {
            if (json.error)return new UserMessage('Нет приглашений').show();
            updateTable(json.invitations);
        }, FortinviteWindow);
    };
    var updateTable = function (data) {
        FortinviteWindow.Table.clearBody();
        $('div.no-content', FortinviteWindow.DOM).hide();
        var tmpCells = {};
        for (var i = 0; i < data.length; i++) {
            var rd = data[i];
            var fortlink = '<a href="javascript:WMap.scroll_map_to_pos(' + rd.fort_x + ', ' + rd.fort_y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png" /></a>&nbsp;';
            fortlink += '<a title="' + 'Показать профиль форта' + '" href=\'javascript:void(FortWindow.open(' + rd.fort_id + ', ' + rd.fort_x + ', ' + rd.fort_y + '));\'>' + rd.fort_name + '</a>';
            var name_link = '<a href="javascript:void(PlayerProfileWindow.open(' + rd.from_player_id + '));">' + rd.from_name + '</a>';
            tmpCells['fortinvite_accept'] = '<img id="finv_accept_' + rd.fort_id + '" class="pointer" alt="" src="https://westrus.innogamescdn.com/images/icons/friends.png" title="' + 'Принять приглашение присоединиться к форту' + '" style="width: 16px; height: 16px;" />';
            tmpCells['fortinvite_fort'] = fortlink;
            tmpCells['fortinvite_by_player'] = name_link;
            tmpCells['fortinvite_date'] = rd.invitation_date;
            tmpCells['fortinvite_delete'] = '<img id="finv_deny_' + rd.fort_id + '" class="pointer" alt="" src="https://westrus.innogamescdn.com/images/icons/delete.png" title="' + 'Отклонить приглашение присоединится к форту' + '" style="width: 16px; height: 16px;" />';
            FortinviteWindow.Table.buildRow('fortinvite_row_' + rd.fort_id, tmpCells);
            var sel = $('div.fortinvite_row_' + rd.fort_id, FortinviteWindow.DOM);
            $('#finv_accept_' + rd.fort_id, sel).data('id', rd.fort_id).click(acceptInvitation);
            $('#finv_deny_' + rd.fort_id, sel).data('id', rd.fort_id).click(deleteInvitation);
        }
    };
    var acceptInvitation = function () {
        var id = $(this).data('id');
        if (id) {
            Ajax.remoteCall('fort_building_headquarter', 'accept_invitation', {fort_id: id}, function (data) {
                if (data.error) {
                    return new UserMessage(data.msg).show();
                }
                else {
                    if (data.hasOwnProperty('invitations'))updateTable(data.invitations);
                    return new UserMessage("Твой город вступил в состав форта.", UserMessage.TYPE_SUCCESS).show();
                }
            }, FortinviteWindow);
        }
        return false;
    };
    var deleteInvitation = function () {
        var id = $(this).data('id');
        if (id) {
            Ajax.remoteCall('fort_building_headquarter', 'reject_invitation', {fort_id: $(this).data('id')}, function (data) {
                if (data.hasOwnProperty('invitations'))updateTable(data.invitations);
            }, FortinviteWindow);
        }
        return false;
    };
})(jQuery);

(function () {
    window.FortBattleWindow = {};
    FortBattleWindow = function (fortId, maneuver, data) {
        this.fortId = fortId;
        var uid = 'fortbattle-' + (maneuver ? 'm' : '') + fortId, win;
        var title = maneuver ? 'Учения' : 'Битва за форт';
        if (win = wman.getById(uid))win.destroy();
        this.window = wman.open(uid, 'Загрузка…', 'fortbattle noreload').setMiniTitle(title);
        var that = this;
        Ajax.remoteCallMode('fort_battlepage', maneuver ? 'maneuver' : 'index', data || {fort_id: fortId}, function (response) {
            that.window.setTitle(title);
            if (response.isWarDeclared && response.joined && response.inProgress) {
                that.showBattle(response);
            } else if (response.isWarDeclared && response.joined) {
                that.showPreBattle(response);
            } else if (response.isWarDeclared) {
                that.showJoin(response);
            } else {
                that.showDeclare(response);
            }
        }, this.window);
    };
    FortBattleWindow.isWindowOpen = function (fortId, maneuver) {
        var uid = 'fortbattle-' + (maneuver ? 'm' : '') + fortId;
        return !!wman.getById(uid);
    };
    FortBattleWindow.open = function (fortId, maneuver, data) {
        if (!fortId)return;
        new FortBattleWindow(fortId, maneuver, data);
    };
    FortBattleWindow.prototype = FortBattleWindow;
    FortBattleWindow.showJoin = function (response) {
        var fortId = this.fortId;
        var content = $('<div class="fb_join"/>');
        if (!response.couldJoin) {
            content.append('Чтобы иметь возможность принять участие в битве за форт, необходимо быть жителем какого-либо города.');
        } else {
            var joinBattle = function (side) {
                new west.gui.Dialog("Ты уверен, что хочешь сражаться?", "Ты точно хочешь присоединиться к сражению? Если ты падёшь на поле битвы, ты потеряешь всю наличность и силы, но это не помешает тебе принимать участие в дуэлях.").setIcon(west.gui.Dialog.SYS_QUESTION).addButton('ok', function () {
                    Ajax.remoteCall('fort_battlepage', 'joinBattle', {fort_id: fortId, side: side}, function (r) {
                        if (r.error) {
                            var dialog;
                            if (r.detail) {
                                dialog = new west.gui.Dialog('Требования', '<div class="fb-custom-req">' + r.detail + '</div>').addButton('yes').show();
                                dialog.show();
                            }
                            return MessageHint(r.error).show();
                        }
                        FortBattleWindow.open(fortId);
                    });
                }).addButton('cancel').show();
            };
            var joinTxt;
            var defenders = [];
            var attackers = [];
            defenders.push("<b>" + ngettext('Обороняющийся город:', new Array('Обороняющийся город:', 'Обороняющиеся города:', 'Обороняющиеся города:'), response.defendingTowns.length) + "</b>");
            for (var i = 0; i < response.defendingTowns.length; i++) {
                var role = (response.defendingTowns[i].is_primary_defender ? 1 : (response.defendingTowns[i].is_secondary_defender ? 2 : 3));
                defenders.push("<img src='https://westrus.innogamescdn.com/images/fort/battle/defender_" + (role == 1 ? 'primary' : (role == 2 ? 'secondary' : 'freelancer')) + ".png' /> " + response.defendingTowns[i].town_name + " " + (role == 1 ? '(лидер)' : (role == 2 ? '(Союзник)' : '')));
            }
            attackers.push("<b>" + ngettext('Атакующий город:', new Array('Атакующий город:', 'Атакующие города:', 'Атакующие города:'), response.attackingTowns.length) + "</b>");
            attackers.push("<img src='https://westrus.innogamescdn.com/images/fort/battle/attacker_primary.png' /> " + response.attackingTowns[0].town_name + " " + '(Нападающий)');
            for (var i = 1; i < response.attackingTowns.length; i++) {
                attackers.push("<img src='https://westrus.innogamescdn.com/images/fort/battle/attacker_freelancer.png' /> " + response.attackingTowns[i].town_name);
            }
            if (response.isFreelancer) {
                this.window.addClass('freelancer');
                joinTxt = 'Скоро начнётся битва, в которой ты можешь принять участие. Но на чьей стороне?'
            } else {
                this.window.addClass('must' + (response.mustDefend ? 'Defend' : 'Attack'));
                if (response.mustDefend)
                    joinTxt = 'Враг готовит захват форта твоего города, ты хочешь принять участие в обороне?'; else
                    joinTxt = 'Твой альянс готовит нападение на этот форт, ты хочешь присоединиться?';
            }
            var fort_class, fort_popup, player_class, player_popup;
            if (response.rules.takeOver) {
                fort_class = 'fort';
                fort_popup = s('В случае победы нападающей стороны, %1 форт %2 переходит в её владение вместе с деньгами в казне и содержимым склада.', '<strong>', '</strong>');
            } else {
                fort_class = 'fort protected';
                fort_popup = 'Этот форт защищён от захвата даже в случае победы нападающей стороны.'
            }
            if (response.rules.battleHurt) {
                player_class = 'player';
                player_popup = 'В ходе перестрелки участники могут быть ранены и лишиться чувств.';
            } else {
                player_class = 'player protected';
                player_popup = 'Все целы и невредимы — это были учения.';
            }
            content.append($('<div class="battle_attacker"></div>').append(new west.gui.Button('Атака').addClass('attack_button').getMainDiv()).addMousePopup(attackers.join("<br/>")), $('<div class="battle_defender"></div>').append(new west.gui.Button('Защита').addClass('defend_button').getMainDiv()).addMousePopup(defenders.join("<br/>")), '<div class="decide">' + joinTxt + '</div>', $('<div class="battle_bar"></div>').append($('<div class="rules_icon ' + fort_class + '"></div>').addMousePopup(fort_popup), $('<div class="rules_icon ' + player_class + '"></div>').addMousePopup(player_popup), response.startTimeStr ? '<div class="battle_time">' + response.startTimeStr + '</div>' : '', $('<div class="rules"></div>').addMousePopup('Правила битвы')));
            content.on('click', '.rules', function () {
                showRules(response.rules);
            }).on('click', '.battle_attacker', function () {
                joinBattle(1);
            }).on('click', '.battle_defender', function () {
                joinBattle(0);
            });
        }
        this.window.appendToContentPane(content);
    };
    FortBattleWindow.showDeclare = function (response) {
        this.window.addClass('fortbattle_declare');
        var fortId = this.fortId, content = $('<div class="fb_join"/>'), txt = '', can_declare = false;
        var fort_class, fort_popup, player_class, player_popup;
        if (response.rules.takeOver) {
            fort_class = 'fort';
            fort_popup = s('В случае победы нападающей стороны, %1 форт %2 переходит в её владение вместе с деньгами в казне и содержимым склада.', '<strong>', '</strong>');
        } else {
            fort_class = 'fort protected';
            fort_popup = 'Что бы не случилось, форт останется в руках его защитников.';
        }
        if (response.rules.battleHurt) {
            player_class = 'player';
            player_popup = 'В ходе перестрелки участники могут быть ранены и лишиться чувств.';
        } else {
            player_class = 'player protected';
            player_popup = 'Все целы и невредимы — это были учения.';
        }
        content.append('<div class="battle_attacker"></div>', '<div class="decide"></div>', $('<div class="battle_bar"></div>').append($('<div class="rules_icon ' + fort_class + '"></div>').addMousePopup(fort_popup), $('<div class="rules_icon ' + player_class + '"></div>').addMousePopup(player_popup), response.startTimeStr ? '<div class="battle_time">' + response.startTimeStr + '</div>' : '', $('<div class="rules"></div>').addMousePopup('Правила битвы')));
        content.on('click', '.rules', function () {
            showRules(response.rules);
        });
        $('.rules', content).addMousePopup('Правила битвы');
        if (!response.hasDeclareRights) {
            txt = 'Пока что битвы не предвидится.';
        } else if (!response.canDeclare) {
            txt = [response.msg, $('<div></div>').append(new west.gui.Button('Дорога в форт', function () {
                Guidepost.start_walk(fortId, 'fort');
            }).getMainDiv())];
        } else {
            txt = 'До сих пор никто не объявил этому форту войну… может, тебе заняться и созвать несколько бравых вояк?';
            txt += '<br />' + s('Это обойдётся твоему городу в %1$.', response.attackCosts);
            can_declare = true;
        }
        $('.decide', content).append(txt);
        if (can_declare) {
            $('.battle_attacker', content).append(new west.gui.Button('Иду на вы!').addClass('attack_button').getMainDiv());
            content.on('click', '.battle_attacker', function () {
                FortBattleWindow.declareWar(fortId);
            });
        }
        this.window.appendToContentPane(content);
    };
    FortBattleWindow.declareWar = function (fortId) {
        Ajax.remoteCall('fort_battlepage', 'declareWar', {fort_id: fortId}, function (data) {
            if (data.error !== undefined) {
                new UserMessage(data.error, UserMessage.TYPE_ERROR).show();
            } else {
                new UserMessage(data.success, UserMessage.TYPE_SUCCESS).show();
                FortBattleWindow.open(fortId);
            }
        });
    };
    FortBattleWindow.showBattle = function (response) {
        this.window.addClass('battle');
        window.gameenvironment = function () {
            return true;
        };
        var mainEl = this.window.getContentPane();
        var flashxhtml = getFlashXHTML(this.fortId);
        mainEl.innerHTML = getControlButtons() + '<div class="fort_battle_round">' + '<div class="fort_battle_num_att"></div>' + '<div class="fort_battle_round_info"></div>' + '<div class="fort_battle_num_def"></div>' + '</div>' + '<div id="fort_battle_' + this.fortId + '_infoarea" class="fort_battle_infoarea" style="text-align: center;"></div>' +
            flashxhtml;
        this.window.appendToWindowPane('<div class="gamemessages_container selectable">' + '<div class="gamemessages_resizer"></div>' + '</div>');
        this.setUpMessageBar();
        var togglegrid = $('.button_cellborders', mainEl);
        var togglesectors = $('.button_sectors', mainEl);
        var togglebackground = $('.button_terrain', mainEl);
        var toggler = function (el, fnname) {
            el.click(function () {
                $('.fort_battle_flash', mainEl).get(0)[fnname]();
            });
            return toggler;
        };
        toggler
        (togglegrid, 'toggleGrid')
        (togglesectors, 'toggleSectors')
        (togglebackground, 'toggleBackground');
        FortBattle.flashData['info' + this.fortId] = {
            mysessionid: response.sessionId,
            serverport: response.serverPort,
            policyport: response.serverPolicyPort,
            host: response.host,
            html: flashxhtml,
            retrycount: 0,
            maneuver: response.maneuver,
            isDefender: response.isDefender,
            addMessage: this.addBattleMessage(),
            updateTimer: this.setRoundTime(),
            setPlayerRatio: this.setPlayerRatio(),
            onFinish: this.onFinish()
        };
    };
    FortBattleWindow.setUpMessageBar = function () {
        var rez = this.window.$('.gamemessages_resizer');
        var area = this.window.$('.gamemessages_container');
        area.jqResize(rez, {
            rangex: [area.position().x, area.position().x],
            rangey: [parseInt(area.css('min-height')), parseInt(area.css('max-height'))],
            onDrag: function (e, css) {
            }
        });
        this.messagePane = new west.gui.Scrollpane(null, false, true);
        area.append($('<div class="gamemessages_pane"></div>').append(this.messagePane.getMainDiv()));
    };
    FortBattleWindow.addBattleMessage = function () {
        var that = this;
        return function (msg, msgCls) {
            if (!that.messagePane)return;
            that.messagePane.appendContent($('<div class="fb_message">' + msg + '</div>').addClass('fb_message_' + msgCls));
        };
    };
    FortBattleWindow.setRoundTime = function () {
        this.timer = null;
        var el = this.window.$('.fort_battle_round_info'), that = this;
        return function (roundlength, roundnumber) {
            if (that.timer)window.clearInterval(that.timer);
            that.roundnumber = roundnumber;
            var finishtime = new Date().getTime() + roundlength;
            that.timer = window.setInterval(function () {
                var now = new Date().getTime();
                var difsecs = Math.floor((finishtime - now) / 1000);
                if (difsecs < 0) {
                    window.clearInterval(that.timer);
                } else {
                    el.html(s('Начало %1-го раунда:', roundnumber + 1) + '<br /><span class="fb_time">' +
                        difsecs.formatDuration() + '</span>');
                }
            }, 500);
        };
    };
    FortBattleWindow.setPlayerRatio = function () {
        var att = this.window.$('.fort_battle_num_att');
        var def = this.window.$('.fort_battle_num_def');
        return function (numAtt, numDef) {
            att.text(numAtt);
            def.text(numDef);
        };
    };
    FortBattleWindow.onFinish = function () {
        var that = this;
        return function () {
            window.clearInterval(that.timer);
            that.window.$('.fort_battle_round_info').empty().html(s("Раунд %1", that.roundnumber + 1)
                + "<br />" + "Битва закончилась");
        };
    };
    FortBattleWindow.showPreBattle = function (response) {
        this.window.addClass('battle');
        var that = this;
        Ajax.gameServiceRequest('getfortmap', this.fortId, {}, function (data) {
            that.renderPreBattle(new PreBattle(that.fortId, response, data));
        });
    };
    FortBattleWindow.renderPreBattle = function (preBattle) {
        this.preBattle = preBattle;
        this.mainId = 'fort_battle_' + this.fortId;
        var content = '<div id="' + this.mainId + '_battleground" class="fort_battle_battleground">' + '<div class="battleground_terrain battleground_layer"></div>' + '<div class="battleground_cellborders battleground_layer"></div>' + '<div class="battleground_tiles battleground_layer" style="background-image: url(/gameservice/getfortimage/' + this.fortId + '.png?draw=tiles);"></div>' + '<div class="battleground_spawnareas battleground_layer" style="background-image: url(/gameservice/getfortimage/' + this.fortId + '.png?draw=spawnareas);"></div>' + '<div class="battleground_layer">' + this.getBattleCells() + '</div>' + '<div class="battleground_sectors battleground_layer" style="background-image: url(/gameservice/getfortimage/' + this.fortId + '.png?draw=sectors);"></div>' + '<div class="battleground_marker battleground_layer"></div>' + '<div class="battleground_fog battleground_layer"></div>' + '<div class="battleground_layer" style="z-index: 4"></div>' + '</div>' +
            getControlButtons() + '<div class="fort_battle_timer">' + '<div class="fort_battle_timertext">' + 'Начало сражения:' + '</div>' + '<div class="fort_battle_timertimer"></div>' + '</div>' + '<div id="' + this.mainId + '_infoarea" class="fort_battle_infoarea">' + '<div class="fort_battle_instructions">' + this.getInfoArea() + '</div>' +
            getHelpDescription() + '<div class="fort_battle_playerlist">' + '<a href="javascript: void(0);" class="show_instructions fb_back_arrow"> ' + 'Назад' + '</a><br />' +
            'Соратники:' + '<div class="fort_battle_playerlist_list">' + '</div>' + '</div>' + '<div class="fort_battle_recruitlist">' + '<div class="fort_battle_recruitlist_list"></div>' + '<div class="fort_battle_recruitlist_count"></div>' + '<div class="fort_battle_recruitlist_info">' + '<div class="recruitlist_name"></div>' + '<div class="recruit_fort_pos">' + '<img src="https://westrus.innogamescdn.com/images/fort/battle/fort_terrain.jpg" alt="" />' + '<img src="gameservice/getfortimage/' + this.fortId + '.png?draw=tiles" alt="" />' + '<div class="recruit_pos"></div>' + '</div>' + '<div class="recruit_leveltown"></div>' + '<br />' + '<div class="recruit_health_container">' + '<div class="recruit_healthbar"></div>' + '<div class="recruit_health"></div>' + '</div>' + '<img src="https://westrus.innogamescdn.com/images/fort/battle/divider.png" style="margin-top:10px; margin-bottom:10px;" alt="" />' + '<div class="recruit_weapon"></div>' + '<div class="recruit_damage"></div>' + '<div style="margin-top:10px;"><img style="width:10px; height:10px;" src="https://westrus.innogamescdn.com/images/town/cityhall/green.png" alt="" class="recruit_status_img" /> <span class="recruit_status"></span></div>' + '</div>' + '</div>' + '</div>' + '<div class="progress_status"></div>';
        this.window.appendToContentPane(content);
        this.initTicker();
        this.battlegroundEl = $('#' + this.mainId + '_battleground');
        this.infoareaEl = $('#' + this.mainId + '_infoarea');
        this.setPlayerStatus();
        this.mouseEvents();
        this.infoareaNavigation();
        this.addButtonEvent();
        this.renderOwnChar();
        this.renderChars();
        this.addMapFog();
    };
    FortBattleWindow.initTicker = function () {
        var el = this.window.$('.fort_battle_timertimer');
        var preBattle = this.preBattle;
        var interval = window.setInterval(function () {
            el.text(((preBattle.battleData.startTimestamp - new Date().getTime()) / 1000).formatDuration());
        }, 1000);
        var that = this;
        var refreshInterval = window.setInterval(function () {
            that.savePosition();
        }, 60000);
        this.window.addEventListener("WINDOW_DESTROY", function () {
            window.clearInterval(interval);
            window.clearInterval(refreshInterval);
        });
    };
    FortBattleWindow.addButtonEvent = function () {
        var battlegroundEl = this.battlegroundEl;
        this.window.$('.fort_battle_buttons').on('click', 'div', function (e) {
            var match = e.target.className.match(/button_(\w+)/);
            if (!match || !match[1])return;
            $('.battleground_' + match[1], battlegroundEl).toggle();
        });
    };
    FortBattleWindow.getInfoArea = function () {
        var startTxt = this.preBattle.battleData.isDefender ? 'Выбери исходную позицию в одном из синих секторов.' : 'Выбери исходную позицию в одном из красных секторов.';
        return '<b>' + 'Исходная позиция' + '</b><br />' + '<ul class="fort_battle_startinfo">' + '<li class="start_location"><span>1.</span>' + startTxt + '</li>' + '<li class="target_location"><span>2.</span>' + 'Выбери пункт назначения повторным щелчком мыши. ' + '</li>' + '<li><span>3.</span>' + 'Передвигай позиции по своему усмотрению.' + '</li>' + '</ul>' + '<a class="show_helpmain" href="javascript: void(0);">' + 'Пояснения' + '</a><br />' + '<a class="show_players" href="javascript: void(0);">' + 'Список игроков' + '</a><br />' +
            (this.preBattle.battleData.canSetPrivilege ? '<a class="show_recruitlist" href="javascript: void(0);">' + 'Призыв' + '</a><br />' : '');
    };
    FortBattleWindow.mouseEvents = function () {
        var isDefender = this.preBattle.battleData.isDefender;
        var that = this;
        var map = this.preBattle.mapData;
        var activeDrag, currentCellIdx, battlegroundEl = this.battlegroundEl, popup;
        var handler = function (e) {
            var cellIdx, cellEl;
            var getCurCellIdx = function () {
                if (!cellIdx)cellIdx = getCellIdx(e);
                return cellIdx;
            };
            var getCellEl = function () {
                if (!cellEl)cellEl = $('.cell-' + getCurCellIdx(), battlegroundEl);
                return cellEl;
            };
            if (e.type == 'mousedown') {
                if (!$('.ownchar', battlegroundEl).length) {
                    return isStartArea(isDefender, getCurCellIdx(), map) && spawnIcon(getCellEl(), 'ownchar');
                } else if (!$('.target', battlegroundEl).length) {
                    return spawnIcon(getCellEl(), 'target');
                }
                var match = getCellEl().children().filter('.ownchar, .target').get(0);
                if (match)activeDrag = match.className;
                return activeDrag;
            }
            else if (e.type == 'mouseup') {
                that.savePosition();
                activeDrag = null;
                that.updatePlayerlist(true);
            }
            else if (e.type == 'mousemove') {
                popup = that.showCellPopup(e.clientX, e.clientY, getCurCellIdx());
                if (currentCellIdx == getCurCellIdx())return;
                currentCellIdx = getCurCellIdx();
                that.fogAnimateFunction(getCurCellIdx(), Math.floor(getCurCellIdx() % map.width), Math.floor(getCurCellIdx() / map.width));
                highlightSector(battlegroundEl, map.cells[getCurCellIdx()]);
                if (activeDrag === 'ownchar' && !isStartArea(isDefender, getCurCellIdx(), map))return;
                if (activeDrag) {
                    $('.' + activeDrag, battlegroundEl).remove();
                    spawnIcon(getCellEl(), activeDrag);
                }
            } else if (e.type == 'mouseout' && e.currentTarget.className == 'fort_battle_battleground') {
                highlightSector(battlegroundEl);
                that.clearFog();
                popup && popup.kill();
            }
        };
        this.battlegroundEl.mousedown(handler).mousemove(handler).mouseout(handler).mouseup(handler);
    };
    FortBattleWindow.infoareaNavigation = function () {
        var nav = {
            'show_players': {div: 'fort_battle_playerlist', func: 'updatePlayerlist'},
            'show_instructions': {div: 'fort_battle_instructions'},
            'show_recruitlist': {div: 'fort_battle_recruitlist', func: 'updateRecruitlist'},
            'show_helpmain': {div: 'fort_battle_helpmain'},
            'show_helpvision': {div: 'fort_battle_helpvision'},
            'show_helpvision2': {div: 'fort_battle_helpvision2'},
            'show_helpstartpos': {div: 'fort_battle_helpstartpos'},
            'show_helptarget': {div: 'fort_battle_helptarget'},
            'show_helpsectors': {div: 'fort_battle_helpsectors'},
            'show_helpflag': {div: 'fort_battle_helpflag'},
            'show_helpgame': {div: 'fort_battle_helpgame'}
        };
        var navClasses = $.map(nav, function (v, k) {
            return k;
        });
        var that = this;
        this.infoareaEl.click(function (e) {
            var match = e.target.className.match(new RegExp('\\b(' + navClasses.join('|') + ')\\b'));
            if (match && match[1]) {
                that.infoareaEl.children().not('.' + nav[match[1]].div).hide();
                if (nav[match[1]].func)that[nav[match[1]].func]();
                $('.' + nav[match[1]].div, that.infoareaEl).show();
            }
        });
    };
    FortBattleWindow.updatePlayerlist = (function () {
        var playerlistStamp;
        return function (force) {
            var title;
            if (!force && playerlistStamp && playerlistStamp == this.preBattle.playerlistStamp)return;
            playerlistStamp = this.preBattle.playerlistStamp;
            var list = '';
            var players = this.preBattle.battleData.playerlist;
            for (var i in players) {
                if (!players.hasOwnProperty(i))continue;
                var cellIdx = players[i].idx;
                if (players[i].player_id == Character.playerId)cellIdx = this.preBattle.battleData.selfIdx;
                if (players[i].townname)
                    title = s('%1 из %2', Game.InfoHandler.getLocalString4Charclass(players[i]['class']), players[i].townname); else
                    title = Game.InfoHandler.getLocalString4Charclass(players[i]['class']);
                list += '<div class="player playercell-' + cellIdx + '" title="' + title + '">' + players[i].name + '</div>';
            }
            $('.fort_battle_playerlist_list', this.infoareaEl).off().on('mousemove', highlightCell(this.battlegroundEl)).mouseout(highlightCell(this.battlegroundEl, true)).empty().append(new west.gui.Scrollpane().appendContent(list).getMainDiv());
        };
    })();
    FortBattleWindow.addRecruitRowHover = function (target, player) {
        var mapWidth = this.preBattle.mapData.width;
        var cellSize = this.preBattle.cellSize;
        var fortcoords = this.preBattle.battleData.fortCoords;
        var setHTML = function (selector) {
            $('.recruitlist_name', selector).text(player.name + '');
            var pos = $('.recruit_pos', selector).hide();
            if (player.idx >= 0) {
                var left = player.idx % mapWidth * cellSize / 3.3 - 8;
                if (left > (153 - 15))left = 153 - 15;
                if (left < 0)left = 0;
                var top = Math.floor(player.idx / mapWidth) * cellSize / 3.3 - 8;
                if (top > (108 - 15))top = 108 - 15;
                if (top < 0)top = 0;
                pos.css({top: top, left: left}).show();
            }
            var diffx = fortcoords.x - player.coords.x;
            var diffy = fortcoords.y - player.coords.y
            if (diffx == 0 && diffy == 0) {
                $('.recruit_status', selector).text('В форте');
                $('.recruit_status_img', selector).attr('src', 'https://westrus.innogamescdn.com/images/town/cityhall/green.png');
            }
            else if (Math.abs(diffx) <= 500 && Math.abs(diffy) <= 500) {
                $('.recruit_status', selector).text('Недалеко от форта');
                $('.recruit_status_img', selector).attr('src', 'https://westrus.innogamescdn.com/images/town/cityhall/yellow.png');
            }
            else {
                $('.recruit_status', selector).text('Не в форте');
                $('.recruit_status_img', selector).attr('src', 'https://westrus.innogamescdn.com/images/town/cityhall/red.png');
            }
            if (player.townname)
                $('.recruit_leveltown', selector).text(s('%1-го уровня из г. %2', player.level, player.townname)); else
                $('.recruit_leveltown', selector).text(s('%1 уровень', player.level));
            $('.recruit_weapon', selector).text(player.weapon);
            $('.recruit_damage', selector).text('(' + player.weapon_damage['min'] + '-' + player.weapon_damage['max'] + ' ' + 'Урон' + ')');
            $('.recruit_health', selector).text(player.currhealth + ' / ' + player.maxhealth);
            $('.recruit_healthbar', selector).width((player.currhealth / player.maxhealth) * 84 + 'px');
        };
        return function (row) {
            row.mouseover(function () {
                var el = $('.fort_battle_recruitlist_info', target);
                setHTML(el);
                $('.fort_battle_recruitlist_count', target).hide();
                el.show();
            }).mouseout(function () {
                $('.fort_battle_recruitlist_info', target).hide();
                $('.fort_battle_recruitlist_count', target).show();
            });
            return row;
        };
    };
    FortBattleWindow.updateRecruitlist = (function () {
        var lastStamp;
        return function (force) {
            if (!this.preBattle.battleData.canSetPrivilege || (!force && lastStamp && lastStamp == this.preBattle.playerlistStamp))return;
            lastStamp = this.preBattle.playerlistStamp;
            var that = this;
            var gradeCount = {'-2': 0, '-1': 0, '0': 0, '1': 0, '2': 0, '3': 0}, totalCnt = 0;
            var getRecruitcount = function () {
                var r = '<b>' + 'Рекруты:' + '</b><br />';
                for (var g in gradeCount) {
                    if (!gradeCount.hasOwnProperty(g))continue;
                    r += '<div>' + getGradeImg(g, true) + ': ' + gradeCount[g] + '</div>';
                }
                r += '<div>' + 'Всего:' + ' ' + totalCnt + '</div>';
                return r;
            };
            var table = new west.gui.Table().addColumns(['count', 'name', 'town', 'rank', 'class', 'status', 'evaluated']).appendToThCell('head', 'count', '', '#').appendToThCell('head', 'name', 'Сортировать по имени', '<span class="sort sort-name">' + 'Имя' + '</span>').appendToThCell('head', 'town', 'Сортировать по городу', '<span class="sort sort-town">' + 'Город' + '</span>').appendToThCell('head', 'class', 'Сортировать по типу персонажа', '<span class="sort sort-class">' + 'Тип' + '</span>').appendToThCell('head', 'status', 'Сортировать по званию', '<span class="sort sort-status">' + 'Статус' + '</span>').appendToThCell('head', 'evaluated', 'Сортировать по проводившему комиссию', '<span class="sort sort-grader">' + 'Начальник' + '</span>');
            var list = this.preBattle.getSortedPlayerlist();
            for (var i in list) {
                if (!list.hasOwnProperty(i))continue;
                var priv = this.preBattle.getPrivilege(list[i]);
                if (this.preBattle.isHidden(list[i]['class'], 'rank_' + priv))continue;
                table.buildRow(null, {
                    count: parseInt(i) + 1,
                    name: '<a href="javascript: void(0)" class="player player-' + list[i].player_id + '">' + list[i].name + '</a>',
                    town: (list[i].townname || '-'),
                    'class': list[i].level + ' <img src="https://westrus.innogamescdn.com/images/class_choose/symbol_' + list[i]['class'] + '_small_chat.png"/>',
                    status: getGradeImg(priv, true, 'recruitplayer recruitplayer-' + i),
                    evaluated: list[i].officername || ''
                }, this.addRecruitRowHover(this.infoareaEl, list[i]));
                gradeCount[priv]++;
                totalCnt++;
            }
            table.appendToCell('foot', 'name', '<a href="javascript: void(0);" class="show_instructions">' + 'Назад' + '</a>').appendToCell('foot', 'town', new west.gui.Button('Отмена', function () {
                that.preBattle.resetPrivileges();
                that.updateRecruitlist(true);
            }).getMainDiv()).appendToCell('foot', 'class', new west.gui.Button('Утвердить', function () {
                that.preBattle.savePrivileges(function () {
                    that.updateRecruitlist(true);
                });
            }).getMainDiv());
            $('.fort_battle_recruitlist_count', this.infoareaEl).html(getRecruitcount());
            $('.fort_battle_recruitlist_list', this.infoareaEl).empty().append(table.getMainDiv().click(function (e) {
                that.recruitListClick(e, list);
            }));
        };
    })();
    FortBattleWindow.recruitListClick = function (e, list) {
        var ownPriv = this.preBattle.battleData.selfPriv;
        var mb, that = this, gv = gradeValues;
        var getPrivLink = function (player, playerIdx, grade, text) {
            return $('<a style="display: block" href="javascript: void(0);">' + getGradeImg(grade) + ' ' + text + '</a>').click(function () {
                that.preBattle.changePrivilege(player, grade);
                that.updatePlayerPrivilege(playerIdx, grade);
                mb.hide();
            });
        };
        var getPrivileges = function (player, pIdx) {
            var grades = $('<div/>'), pp = that.preBattle.getPrivilege(player);
            if (pp < ownPriv) {
                if (pp != gv.CAPTAIN && ownPriv > gv.CAPTAIN)
                    grades.append(getPrivLink(player, pIdx, gv.CAPTAIN, 'Произвести в капитаны'));
                if (pp != gv.PRIVATE)
                    grades.append(getPrivLink(player, pIdx, gv.PRIVATE, 'Назначить рядовым'));
                if (pp != gv.RECRUIT)
                    grades.append(getPrivLink(player, pIdx, gv.RECRUIT, 'Взять в рекруты'));
                if (pp != gv.RESERVIST)
                    grades.append(getPrivLink(player, pIdx, gv.RESERVIST, 'Записать в резерв'));
                if (pp != gv.TRAITOR)
                    grades.append(getPrivLink(player, pIdx, gv.TRAITOR, 'Обвинить в предательстве'));
            } else {
                grades.append('Ты не можешь понизить старшего или равного по званию.');
                if (Character.playerId == player.player_id)
                    grades.append('<br />' + '(в особенности самого себя).');
            }
            return grades;
        };
        var getSortLink = function (text, sortBy) {
            return $('<a style="display: block;" href="javascript: void(0);">' + text + '</a>').click(function () {
                that.preBattle.setSort(sortBy);
                that.updateRecruitlist(true);
                mb.hide();
            });
        };
        var getVisLink = function (text, what) {
            return $('<a style="display: block;" href="javascript: void(0);">' + text + '</a>').click(function () {
                that.preBattle.toggleVisibility(what);
                that.updateRecruitlist(true);
                mb.hide();
            });
        };
        var hidden = function (classKey, privKey) {
            return that.preBattle.isHidden(classKey, 'rank_' + privKey);
        };
        var getSorting = function (key) {
            var sorting = $('<div/>'), title;
            if (key == 'name') {
                title = 'Сортировать по имени';
                sorting.append(getSortLink('От а до я', '>' + key));
                sorting.append(getSortLink('От я до а', '<' + key));
            } else if (key == 'town') {
                title = 'Сортировать по городу';
                sorting.append(getSortLink('От а до я', '>' + key));
                sorting.append(getSortLink('От я до а', '<' + key));
            } else if (key == 'class') {
                title = 'Сортировать по типу персонажа';
                sorting.append(getSortLink('По возрастанию уровня', '>level'));
                sorting.append(getSortLink('По убыванию уровня', '<level'));
                sorting.append(getSortLink('Сортировать по типу персонажа', '>' + key));
                sorting.append('<br />');
                sorting.append(getVisLink(hidden('greenhorn') ? 'Показать чечако' : 'Скрыть новичков', 'greenhorn'));
                sorting.append(getVisLink(hidden('adventurer') ? 'Показать авантюристов' : 'Скрыть авантюристов', 'adventurer'));
                sorting.append(getVisLink(hidden('worker') ? 'Показать трудяг' : 'Скрыть работяг', 'worker'));
                sorting.append(getVisLink(hidden('duelist') ? 'Показать дуэлянтов' : 'Скрыть дуэлянтов', 'duelist'));
                sorting.append(getVisLink(hidden('soldier') ? 'Показать солдат' : 'Скрыть солдат', 'soldier'));
            } else if (key == 'status') {
                title = 'Сортировать по званию';
                sorting.append(getSortLink('В порядке возрастания', '>' + key));
                sorting.append(getSortLink('В порядке убывания', '<' + key));
                sorting.append('<br />');
                sorting.append(getVisLink(hidden(null, gv.GENERAL) ? 'Показать генералов' : 'Скрыть генералов', 'rank_' + gv.GENERAL));
                sorting.append(getVisLink(hidden(null, gv.CAPTAIN) ? 'Показать капитанов' : 'Скрыть капитанов', 'rank_' + gv.CAPTAIN));
                sorting.append(getVisLink(hidden(null, gv.PRIVATE) ? 'Показать рядовых' : 'Скрыть рядовых', 'rank_' + gv.PRIVATE));
                sorting.append(getVisLink(hidden(null, gv.RECRUIT) ? 'Показать рекрутов' : 'Скрыть рекрутов', 'rank_' + gv.RECRUIT));
                sorting.append(getVisLink(hidden(null, gv.RESERVIST) ? 'Показать резервистов' : 'Скрыть резерв', 'rank_' + gv.RESERVIST));
                sorting.append(getVisLink(hidden(null, gv.TRAITOR) ? 'Показать предателей' : 'Скрыть предателей', 'rank_' + gv.TRAITOR));
            } else if (key == 'grader') {
                title = 'Сортировать по проводившему комиссию';
                sorting.append(getSortLink('От а до я', '>' + key));
                sorting.append(getSortLink('От я до а', '<' + key));
            }
            return {message: sorting, title: title};
        };
        var getMatch = function (str, regex) {
            var match = str.match(regex);
            if (!match || !match[1])return false;
            return match[1];
        };
        var target = $(e.target), config = {};
        if (target.hasClass('recruitplayer')) {
            var playerIdx = getMatch(e.target.className, /recruitplayer-(\d+)/);
            if (!playerIdx)return;
            var player = list[playerIdx];
            config.message = getPrivileges(player, playerIdx);
            config.title = s('Оценка игрока: %1', player.name);
        } else if (target.hasClass('sort')) {
            var sortBy = getMatch(e.target.className, /sort-(\w+)/);
            if (!sortBy)return;
            config = getSorting(sortBy);
        } else if (target.hasClass('player')) {
            var playerId = getMatch(e.target.className, /player-(\d+)/);
            if (!playerId)return;
            PlayerProfileWindow.open(parseInt(playerId));
            return;
        } else {
            return;
        }
        mb = new west.gui.Dialog(config.title, config.message).addButton('cancel').show();
    };
    FortBattleWindow.updatePlayerPrivilege = function (playerIdx, grade) {
        $('.recruitplayer-' + playerIdx, this.infoareaEl).parent().html(getGradeImg(grade, true, 'recruitplayer recruitplayer-' + playerIdx));
    };
    FortBattleWindow.getBattleCells = function () {
        var map = this.preBattle.mapData, i, sectors = {}, tmpEl = document.createElement('div');
        var cellsize = this.preBattle.cellSize;
        for (i = 0; i < map.cells.length; i++) {
            (sectors[map.cells[i]] = sectors[map.cells[i]] || []).push(i);
        }
        for (i in sectors) {
            if (!sectors.hasOwnProperty(i))continue;
            var sectorEl = document.createElement('div');
            sectorEl.className = 'sector fb_sector_' + i;
            var j, cellIdx, cellElement;
            for (j in sectors[i]) {
                if (!sectors[i].hasOwnProperty(j))continue;
                cellIdx = sectors[i][j];
                cellElement = document.createElement('div');
                cellElement.className = 'cell cell-' + cellIdx;
                cellElement.style.top = cellsize * Math.floor(cellIdx / map.width) + 'px';
                cellElement.style.left = cellsize * (cellIdx % map.width) + 'px';
                sectorEl.appendChild(cellElement);
            }
            tmpEl.appendChild(sectorEl);
        }
        return tmpEl.innerHTML;
    };
    FortBattleWindow.savePosition = function () {
        var data = {
            command: 'set_pos',
            fort_id: this.fortId,
            selfpos: getCellIdxByEl($('.ownchar', this.battlegroundEl).parent()) || -1,
            selftarget: getCellIdxByEl($('.target', this.battlegroundEl).parent()) || -1
        };
        if (this.preBattle.battleData.maneuver) {
            Ajax.gameServiceRequest('maneuver', '', JSON.stringify(data));
            this.preBattle.battleData.selfIdx = data.selfpos;
            this.preBattle.battleData.selfTarget = data.selftarget;
            this.setPlayerStatus();
        } else {
            var that = this;
            Ajax.remoteCall('fort_battlepage', 'updatechars', data, function (resp) {
                that.renderChars(resp);
                that.preBattle.battleData.selfIdx = data.selfpos;
                that.preBattle.battleData.selfTarget = data.selftarget;
                that.setPlayerStatus();
            });
        }
    };
    FortBattleWindow.renderChars = function (data) {
        if (data)
            if (!this.preBattle.setPlayerlist(data.playerlist, true))return; else
                data = this.preBattle.battleData.playerlist;
        $('.otherchar', this.battlegroundEl).remove();
        var playerlist = this.preBattle.battleData.playerlist;
        for (var i in playerlist) {
            if (!playerlist.hasOwnProperty(i))continue;
            var player = playerlist[i];
            if (player.player_id == Character.playerId || player.idx < 0)continue;
            var el = $('.cell-' + player.idx, this.battlegroundEl);
            if (!el.children().filter('.otherchar').length) {
                spawnIcon(el, 'otherchar');
            }
        }
    };
    FortBattleWindow.renderOwnChar = function () {
        var selfIdx = this.preBattle.battleData.selfIdx, selfTarget = this.preBattle.battleData.selfTarget;
        if (selfIdx >= 0)spawnIcon($('.cell-' + selfIdx, this.battlegroundEl), 'ownchar');
        if (selfTarget >= 0)spawnIcon($('.cell-' + selfTarget, this.battlegroundEl), 'target');
    };
    FortBattleWindow.showCellPopup = (function (x, y, cellIdx) {
        var popup = new MousePopup('');
        return function (x, y, cellIdx) {
            var i, id;
            var charsatcursor = [];
            var charlist = this.preBattle.battleData.playerlist, map = this.preBattle.mapData;
            for (i = 0; i < charlist.length; i++) {
                if (!charlist.hasOwnProperty(i))continue;
                var curIdx = charlist[i].idx;
                if (charlist[i].player_id == Character.playerId)
                    curIdx = this.preBattle.battleData.selfIdx;
                if (curIdx == cellIdx) {
                    charsatcursor.push(charlist[i]);
                }
            }
            var sector = map.sectors[map.cells[cellIdx]];
            if (popup.idx != cellIdx) {
                popup.text = "<table cellpadding=0 cellspacing=0><tr>" + "<td><img src='https://westrus.innogamescdn.com/images/fort/battle/attacker_primary.png' /></td><td>&nbsp;" + (sector.attackerBonus || 0) + "&nbsp;</td>" + "<td><img src='https://westrus.innogamescdn.com/images/fort/battle/defender_primary.png' /></td><td>&nbsp;" + (sector.defenderBonus || 0) + "&nbsp;</td>" + "<td><img src='https://westrus.innogamescdn.com/images/fort/battle/height_symbol.png' /></td><td>&nbsp;" + (sector.height || 0) + "&nbsp;</td>" +
                    (sector.classBonus ? "<td><img src='" + getCharClassImg(sector.classType) + "' /></td><td>&nbsp;" + sector.classBonus + "&nbsp;" : "") + "</tr></table>";
                popup.idx = cellIdx;
            } else {
                popup.updatePosition({clientX: x, clientY: y}, true);
                return popup;
            }
            if (charsatcursor.length === 0) {
                popup.updatePosition({clientX: x, clientY: y}, true);
                return popup;
            }
            popup.text += 'Игрок' + "<br /><table style='margin:0;padding:0;font-size:8pt'>";
            for (i = 0; i < charsatcursor.length; i++) {
                id = charsatcursor[i].player_id;
                popup.text += "<tr style='font-size:8pt;" + (id == Character.playerId ? "font-weight:bold;" : "") + "'><td>" + (i + 1) + ".</td><td>" + charsatcursor[i].name + "&nbsp;</td><td>" + charsatcursor[i].level + "&nbsp;<img src='https://westrus.innogamescdn.com/images/class_choose/symbol_" + charsatcursor[i]['class'] + "_small_chat.png'/>&nbsp;" + getGradeImg(charsatcursor[i].privilege) + "</td></tr>";
            }
            popup.text += "</table>";
            popup.updatePosition({clientX: x, clientY: y}, true);
            return popup;
        };
    })();
    FortBattleWindow.addMapFog = function () {
        var fogurl = Game.serviceURL + '/getfortfog/' + this.fortId + '.png', fog;
        var canvas = document.createElement('canvas'), obj, ctx;
        fog = document.createElement('div');
        fog.style.position = 'absolute';
        fog.style.zIndex = 4;
        fog.style.width = '510px';
        fog.style.height = '360px';
        var cellSize = this.preBattle.cellSize;
        var mapWidth = this.preBattle.mapData.width;
        var mapHeight = this.preBattle.mapData.height;
        if (canvas && canvas.getContext && canvas.getContext("2d")) {
            canvas.width = 510;
            canvas.height = 360;
            canvas.style.zIndex = 4;
            canvas.style.position = 'absolute';
            obj = document.createElement('img');
            obj.src = fogurl;
            $('.battleground_fog', this.battlegroundEl).append(canvas);
            ctx = canvas.getContext("2d");
            this.fogAnimateFunction = (function () {
                var cell;
                return function (idx, x, y) {
                    if (cell === idx)return;
                    cell = idx;
                    ctx.clearRect(0, 0, 510, 360);
                    ctx.drawImage(obj, -x * cellSize * mapWidth, -y * cellSize * mapHeight, cellSize * mapWidth * mapWidth, cellSize * mapHeight * mapHeight);
                };
            })();
            this.clearFog = function () {
                ctx.clearRect(0, 0, 510, 360);
            };
        } else {
            var wrap = document.createElement('div');
            wrap.style.position = 'absolute';
            wrap.style.width = mapWidth * cellSize + 'px';
            wrap.style.height = mapHeight * cellSize + 'px';
            wrap.style.overflow = 'hidden';
            if ($.browser.msie) {
                obj = document.createElement('div');
                obj.style['filter'] = "progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod='scale',src='" + fogurl + "')";
                obj.style.position = 'absolute';
                obj.style.width = mapWidth * mapWidth * cellSize;
                obj.style.height = mapHeight * mapHeight * cellSize;
            }
            else {
                obj = document.createElement('img');
                obj.src = fogurl;
                obj.width = mapWidth * mapWidth * cellSize;
                obj.height = mapHeight * mapHeight * cellSize;
                obj.style.position = 'absolute';
            }
            wrap.appendChild(obj);
            $('.battleground_fog', this.battlegroundEl).append(wrap);
            this.fogAnimateFunction = (function () {
                var cell;
                return function (idx, x, y) {
                    if (cell === idx)return;
                    cell = idx;
                    var offx = 0, offy = 0;
                    if ($.browser.msie && $.browser.version <= 7) {
                        offx = cellSize / 2;
                        offy = cellSize / 2;
                    }
                    obj.style.left = -(x * mapWidth * cellSize - offx) + "px";
                    obj.style.top = -(y * mapHeight * cellSize - offy) + "px";
                };
            })();
            this.clearFog = function () {
                return;
            };
        }
    };
    var isStartArea = function (isDefender, cellIdx, map) {
        if (isDefender && map.sectors[map.cells[cellIdx]].defenderSpawn)return true;
        if (!isDefender && map.sectors[map.cells[cellIdx]].attackerSpawn)return true;
        return false;
    };
    var spawnIcon = function (target, type) {
        var icon = document.createElement('div');
        icon.className = type;
        $(target).append(icon);
    };
    var getCellIdxByEl = function (el) {
        var match = (el.attr('class') || '').match(/cell-(\d+)/);
        return match !== null ? match[1] : null;
    };
    var getCellIdx = function (e) {
        var pos = $(e.target).offset();
        var x = e.pageX - pos.left;
        var y = e.pageY - pos.top;
        return Math.floor(x / 15) + 34 * Math.floor(y / 15);
    };
    var highlightSector = function (battlegroundEl, sector) {
        $('.highlight', battlegroundEl).removeClass('highlight');
        if (sector !== undefined)$('.fb_sector_' + sector, battlegroundEl).addClass('highlight');
    };
    var getCharClassImg = function (classId) {
        var charclasses = {'-1': 'greenhorn', '0': 'adventurer', '1': 'duelist', '2': 'worker', '3': 'soldier'};
        return 'https://westrus.innogamescdn.com/images/class_choose/symbol_' + charclasses[classId] + '_small.png';
    };
    var gradeValues = {TRAITOR: '-2', RESERVIST: '-1', RECRUIT: '0', PRIVATE: '1', CAPTAIN: '2', GENERAL: '3'};
    var gradeNames = {
        '-2': 'traitor',
        '-1': 'reservist',
        '0': 'recruit',
        '1': 'private',
        '2': 'captain',
        '3': 'general'
    };
    var gradeLocales = {
        '-2': 'Предатель',
        '-1': 'Резервист',
        '0': 'Рекрут',
        '1': 'Рядовой',
        '2': 'Капитан',
        '3': 'Генерал'
    };
    var getGradeImg = function (gradeId, title, cls) {
        return '<img class="' + (cls || '') + '" src="https://westrus.innogamescdn.com/images/chat/servicegrade_' +
            gradeNames[gradeId] + '.png" title="' + (title ? gradeLocales[gradeId].escapeHTML() : '') + '" />';
    };
    var showRules = function (props) {
        var rules = ['Максимальное количество нападающих:' + ' <strong>' + props.maxAtt + '</strong>', 'Максимальное количество защитников:' + ' <strong>' + props.maxDef + '</strong>', 'Максимальное количество раундов:' + ' <strong>' + props.maxRounds + '</strong>', s(ngettext('Форт сдаётся, если нападающие удерживают флаг в течение <strong>%1</strong> раунда.', new Array('Форт сдаётся, если нападающие удерживают флаг в течение <strong>%1</strong> раунда.', 'Форт сдаётся, если нападающие удерживают флаг в течение <strong>%1</strong> раундов.', 'Форт сдаётся, если нападающие удерживают флаг в течение <strong>%1</strong> раундов.'), props.flagVictory), props.flagVictory), 'Если в ходе раунда флаг не был занят нападающими, флаг поднимается на верх древка.', 'Если в ходе раунда на поле у флага стоит по крайней мере один боец нападения, флаг спускается на метр.', 'По окончании всех раундов победа остаётся за защитниками.', props.battleHurt ? 'В ходе перестрелки участники могут быть ранены и лишиться чувств.' : 'Все целы и невредимы — это были учения.', props.takeOver ? 'В случае победы нападающей стороны, <strong>форт переходит в её владение</strong> вместе с деньгами в казне и содержимым склада.' : 'Что бы не случилось, форт останется в руках его защитников.'];
        new west.gui.Dialog("Правила битвы").setText('<ul style="padding: 0 20px;"><li>' + rules.join('</li><li>') + '</li></ul>').addButton('ok').show();
    };
    var highlightCell = function (parentEl, hide) {
        return function (e) {
            var match = e.target.className.match(/playercell-(\d+)/);
            var pos;
            if (!hide && match && match[1] >= 0) {
                pos = $('.cell-' + match[1], parentEl).position();
            } else {
                pos = {top: '', left: ''};
            }
            pos && $('.battleground_marker', parentEl).css(pos);
        };
    };
    var getControlButtons = function () {
        return '<div class="fort_battle_buttons">' + '<div class="fort_battle_button button_sectors" title="' + 'Контуры секторов' + '"></div>' + '<div class="fort_battle_button button_cellborders" title="' + 'Сетка' + '"></div>' + '<div class="fort_battle_button button_terrain" title="' + 'Показать фон' + '"></div>' + '</div>';
    };
    var getFlashXHTML = function (fortId) {
        var wmode = 'opaque';
        var update = new Date().getTime();
        var flashxhtml;
        if ($.browser.msie) {
            flashxhtml = '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" id="fort_battle_flash_' + fortId + '" class="fort_battle_flash" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="510" height="360">'
                + '<param name="allowScriptAccess" value="always" />'
                + '<param name="wmode" value="' + wmode + '" />'
                + '<param name="allowFullScreen" value="false" />'
                + '<param name="movie" value="flash/battle/fortbattle.swf?' + update + '" />'
                + '<param name="FlashVars" value="fortId=' + fortId + '" />'
                + '<param name="quality" value="high" />'
                + '<param name="bgcolor" value="#ffffff" />'
                + '<param name="allowNetworking" value="all" />'
                + '</object>';
        }
        else {
            flashxhtml = '<embed src="flash/battle/fortbattle.swf?' + update + '" quality="high" ' + 'FlashVars="fortId=' + fortId + '" ' + 'wmode="' + wmode + '" ' + 'bgcolor="#ffffff" width="510" height="360" name="fortbattle" align="middle" class="fort_battle_flash" ' + 'allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" allowNetworking="all" />';
        }
        return flashxhtml;
    };
    FortBattleWindow.playerInFort = function () {
        var fortcoords = this.preBattle.battleData.fortCoords, queue = TaskQueue.queue, queue_l = queue.length, fromCoords = Character.position, coords;
        if (queue_l) {
            while (queue_l--) {
                if (queue[queue_l].wayData.x) {
                    coords = {x: queue[queue_l].wayData.x, y: queue[queue_l].wayData.y};
                    break;
                }
            }
            fromCoords = coords || Character.position;
        }
        return 0 === Map.calcWayTime(fromCoords, fortcoords);
    };
    FortBattleWindow.setPlayerStatus = function () {
        var that = this, root = this.window.divMain, info = $('.fort_battle_startinfo', root), start_point_set = -1 !== this.preBattle.battleData.selfIdx, end_point_set = -1 !== this.preBattle.battleData.selfTarget, uid = this.window.id, fort_id = this.fortId, battle_time = new Date(this.preBattle.battleData.startTimestamp);
        $('.start_location > span', info).html(start_point_set ? '<img src="https://westrus.innogamescdn.com/images/window/achievements/finished_shape.png" />' : '1.');
        $('.target_location > span', info).html(end_point_set ? '<img src="https://westrus.innogamescdn.com/images/window/achievements/finished_shape.png" />' : '2.');
        if (start_point_set && end_point_set) {
            $('.progress_status', root).html(new west.gui.Button('Готово', function () {
                if (that.playerInFort()) {
                    new west.gui.Dialog("Ты в форте", '<div class="battle_decorated">' + s('Ты в форте. %1 Помни: чтобы принять участие в битве, необходимо твоё присутствие %2', '<br />', '<strong>' + battle_time.toDateTimeStringNice() + '</strong>') + '</div>').addButton('ok', function () {
                        wman.getById(uid).destroy();
                    }).addClass('fort_battle_popup').show();
                } else {
                    new west.gui.Dialog("Ты не в форте", '<div class="battle_decorated">' + s('Чтобы принять участие в битве, необходимо твоё присутствие %1. %2 Хочешь сейчас туда направиться?', '<strong>' + battle_time.toDateTimeStringNice() + '</strong>', '<br />') + '</div>').addButton('Идти', function () {
                        Guidepost.start_walk(fort_id, 'fort');
                        wman.getById(uid).destroy();
                    }).addButton('Не сейчас', function () {
                        wman.getById(uid).destroy();
                    }).addClass('fort_battle_popup').show();
                }
            }).getMainDiv());
        }
    };
    getHelpDescription = function () {
        var getLink = function (cls) {
            return 'class="show_' + cls + '" href="javascript:void(0)"';
        };
        return '' + '<div class="fort_battle_helpmain" style="display:none">' + '<b>' + 'Помощь' + '</b>' + '<ul>' + '<li><a ' + getLink('helpvision') + '>' + 'Что показывает затемнение?' + '<br/><img src="https://westrus.innogamescdn.com/images/fort/battle/help01.png" /></a></li>' + '<li><a ' + getLink('helpstartpos') + '>' + 'Какую роль играет <strong>исходная позиция</strong>?' + '</a></li>' + '<li><a ' + getLink('helptarget') + '>' + "Что такое <strong>направление движения</strong>?" + '</a></li>' + '<li><a ' + getLink('helpsectors') + '>' + "Какую роль играют <strong>секторы</strong>?" + '</a></li>' + '<li><a ' + getLink('helpflag') + '>' + "Что такое <strong>флаг</strong>?" + '</a></li>' + '<li><a ' + getLink('helpgame') + '>' + "Как проходит битва?" + '</a></li>' + '</ul>' + '<a ' + getLink('instructions') + '>' + 'Назад' + '</a>' + '</div>' + '<div class="fort_battle_helpvision" style="display:none">' + '<b>' + 'Затемнение' + '</b>' + '<p>' + 'Тёмная часть — это места, в которые персонаж не может выстрелить, когда находится на поле под курсором мышки.' + '</p>' + '<p align="center"><img src="https://westrus.innogamescdn.com/images/fort/battle/help02.png" /></p>' + '<a ' + getLink('helpvision2') + ' style="float:right">' + 'Дальше' + '</a>' + '<a ' + getLink('helpmain') + '>' + 'Назад' + '</a>' + '</div>' + '<div class="fort_battle_helpvision2" style="display:none">' + '<p align="center"><img src="https://westrus.innogamescdn.com/images/fort/battle/help02.png" /></p>' + '<p>' + 'Если персонаж стоит в позиции, указанной на картинке курсором мыши, он, разумеется, не может стрелять за угол и это обозначено цветом.' + '</p>' + '<a ' + getLink('helpmain') + '>' + 'Назад' + '</a>' + '</div>' + '<div class="fort_battle_helpstartpos" style="display:none">' + '<b>' + 'Исходная позиция' + '</b>' + '<p>' + 'В начале сражения персонаж находится на выбранной тобой позиции.' + '</p>' + '<p>' + 'Если больше одного игрока претендуют на одну и ту же исходную позицию, то преимущество имеют владельцы форта. При прочих равных это решает случай. Те же, кто не может занять выбранную позицию, перемещаются в как можно более близкую позицию.' + '</p>' + '<a ' + getLink('helpmain') + '>' + 'Назад' + '</a>' + '</div>' + '<div class="fort_battle_helptarget" style="display:none">' + '<b>' + 'Пункт назначения' + '</b>' + '<p>' + 'Твой персонаж постоянно пытается пробиться к выбранному пункту назначения. Если ты не принимаешь активного участия в битве, твой персонаж будет самостоятельно принимать решения как ему туда попасть.' + '</p>' + '<a ' + getLink('helpmain') + '>' + 'Назад' + '</a>' + '</div>' + '<div class="fort_battle_helpsectors" style="display:none">' + '<b>' + 'Секторы' + '</b>' + '<p>' + 'Сектор — это часть карты, которая всегда занята бойцами одной стороны (защиты или нападения). Пока сектор находится под контролем, только бойцы той же стороны могут в него попасть. Если сектор занят противником и игрок пытается в него проникнуть, он автоматически стреляет в бойцов, занимающих сектор.' + '</p>' + '<a ' + getLink('helpmain') + '>' + 'Назад' + '</a>' + '</div>' + '<div class="fort_battle_helpflag" style="display:none">' + '<b>' + 'Флаг' + '</b>' + '<p>' + s(ngettext('Если нападающие захватили сектор с флагом и удержали его в течение %1 раунда, они считаются победителями. У этого сектора есть одна неприятная особенность: бойцов удерживающих флаг очень легко подстрелить, а самим им стрелять оттуда трудно.', new Array('Если нападающие захватили сектор с флагом и удержали его в течение %1 раунда, они считаются победителями. У этого сектора есть одна неприятная особенность: бойцов удерживающих флаг очень легко подстрелить, а самим им стрелять оттуда трудно.', 'Если нападающие захватили сектор с флагом и удержали его в течение %1 раундов, они считаются победителями. У этого сектора есть одна неприятная особенность: бойцов удерживающих флаг очень легко подстрелить, а самим им стрелять оттуда трудно.', 'Если нападающие захватили сектор с флагом и удержали его в течение %1 раундов, они считаются победителями. У этого сектора есть одна неприятная особенность: бойцов удерживающих флаг очень легко подстрелить, а самим им стрелять оттуда трудно.'), Game.maxFlagHoldCount), Game.maxFlagHoldCount) + '</p>' + '<a ' + getLink('helpmain') + '>' + 'Назад' + '</a>' + '</div>' + '<div class="fort_battle_helpgame" style="display:none" class="spacer">' + '<b>' + 'Ход сражения' + '</b>' + '<p>' + 'Сражение разбито на раунды, в которых каждый участник может сделать ход состоящий из выстрела и передвижения в целевой сектор, если он не занят противником. Как только все игроки сделают свой ход, игра перейдёт в следующий раунд.' + '</p>' + '<a ' + getLink('helpmain') + '>' + 'Назад' + '</a>' + '</div>'
    };
})();
var FortBattle = {
    flashData: {},
    flashIsReady: function (fortId) {
        try {
            var info = FortBattle.flashData['info' + fortId];
            var flash = $('.fortbattle-' + (info.maneuver ? 'm' : '') + fortId + ' .fort_battle_flash');
            flash.get(0).connect(fortId, info.mysessionid, info.host, info.serverport, info.policyport, window.location.hostname);
            flash.get(0).toggleSpawns();
        } catch (e) {
            console.log(e);
            if (info.retrycount < 5) {
                var p = flash.parent();
                var f = flash.detach();
                p.append(f);
                info.retrycount += 1;
            }
        }
    },
    flashSetRoundInfo: function (fortId, roundnumber, roundlength, flagroundcounter) {
        var ttr = Math.floor(roundlength / 1000);
        FortBattle.showMessage(fortId, s(ngettext('Начался %1-й раунд. Следующий через %2 секунду.', new Array('Начался %1-й раунд. Следующий через %2 секунду.', 'Начался %1-й раунд. Следующий через %2 секунды.', 'Начался %1-й раунд. Следующий через %2 секунд.'), ttr), roundnumber, ttr));
        if (flagroundcounter == Game.maxFlagHoldCount)
            FortBattle.showMessage(fortId, 'Нападающая сторона так долго удерживала флаг, что вправе объявить о своей победе.'); else if (flagroundcounter != 0)
            FortBattle.showMessage(fortId, s(ngettext('Нападающие удерживают флаг %1 раунд!', new Array('Нападающие удерживают флаг %1 раунд!', 'Нападающие удерживают флаг %1 раунда!', 'Нападающие удерживают флаг %1 раундов!'), flagroundcounter), flagroundcounter) + " " +
                s(ngettext('Если они продержаться %1 раунд, победа будет за ними.', new Array('Если они продержаться %1 раунд, победа будет за ними.', 'Если они продержатся %1 раунда, победа будет за ними.', 'Если они продержатся %1 раундов, победа будет за ними.'), Game.maxFlagHoldCount), Game.maxFlagHoldCount));
        FortBattle.setRoundTime(fortId, roundlength, roundnumber);
    },
    flashErrorOccurred: function (fortId, err) {
        var info = FortBattle.flashData['info' + fortId];
        FortBattle.showMessage(fortId, s('Не удаётся установить соединение с сервером. Попробуй убедиться, что сетевые порты %1 и %2 не заблокированы маршрутизатором, брандмауэром или провайдером интернета. Если ты уверен, что проблема не в этом, <a href=\"./fortbattle_connectiontester.php\" target=\"_blank\">проверить своё соединение</a> и обратись в службу поддержки.', info.serverport, info.policyport), 'status');
    },
    flashConnectionClosed: function (fortId) {
        FortBattle.showMessage(fortId, 'Прервана связь с сервером.', 'status');
    },
    flashConnectionAccepted: function (fortId) {
        FortBattle.showMessage(fortId, 'Установлена связь с сервером.', 'status');
    },
    flashConnectAttempt: function (fortId) {
        FortBattle.showMessage(fortId, 'Соединение с сервером…', 'status');
    },
    flashStarted: function (fortId) {
    },
    characterCache: {},
    flashShowCharacterInfo: function (fortId, playerId, healthNow, healthMax, totalDmg, lastDmg, shotat, bonusdata) {
        var cachekey = fortId + ':' + playerId;
        var cache = FortBattle.characterCache;
        var infopage, selfDefender, isDef, parsedData = JSON.parse(bonusdata), isAllied = parsedData.offense + parsedData.defense + parsedData.leadbonus != 0;
        if (cache.hasOwnProperty(cachekey)) {
            infopage = cache[cachekey];
            $('#fort_battle_' + fortId + '_infoarea').html(infopage.replace(/%hpWidth%/g, Math.floor(healthNow / healthMax * 85)).replace(/%healthNow%/g, healthNow).replace(/%healthMax%/g, healthMax).replace(/%totalDmg%/g, totalDmg).replace(/%lastDmg%/g, lastDmg).replace(/%bonusOffense%/g, parsedData.offense).replace(/%bonusDefense%/g, parsedData.defense).replace(/%bonusLead%/g, parsedData.leadbonus).replace(/%teaminfo%/g, isAllied ? 'block' : 'none'));
            return;
        }
        selfDefender = FortBattle.flashData['info' + fortId].isDefender;
        isDef = (!isAllied && !selfDefender) || (isAllied && selfDefender);
        Ajax.remoteCallMode('fort_battlepage', 'getPlayerDatasheet', {
            fort_id: fortId,
            playerId: playerId,
            isDefender: isDef
        }, function (resp) {
            cache[cachekey] = FortBattle.getCharDataSheet(resp);
            FortBattle.flashShowCharacterInfo(fortId, playerId, healthNow, healthMax, totalDmg, lastDmg, shotat, bonusdata);
        });
    },
    flashHideCharacterInfo: function (fortId) {
        $('#fort_battle_' + fortId + '_infoarea').html('');
    },
    flashUpdateBattleInfo: function (fortId, attackers, defenders) {
        var data = FortBattle.flashData['info' + fortId];
        if (!data || !data.setPlayerRatio)return console.log('not found');
        data.setPlayerRatio(attackers, defenders);
    },
    addFinishMessage: function (fortId, msg) {
        var battleData = FortBattle.flashData['info' + fortId];
        var result = JSON.parse(msg);
        CemeteryWindow.open(fortId, result.battleid || -1, {
            result: result,
            attacker_count: result.attackerlist.length,
            defender_count: result.defenderlist.length,
            battle_outcome: result.outcome,
            maneuver: battleData.maneuver
        });
        FortBattle.showMessage(fortId, "Опустить оружие! Битва закончилась.", 'status');
        battleData.onFinish();
    },
    addRoundStatusMessage: function (fortId, queue) {
        var i = 0, statusbg = 'c1';
        for (i = 0; i < queue.length; i++) {
            var msg = queue[i];
            switch (msg.action) {
                case'gotshot':
                    if (msg.damage === 0) {
                        FortBattle.showMessage(fortId, s('Уф! Игрок %1 выстрелил в тебя, но промахнулся.', msg.from), statusbg);
                    } else {
                        if (msg.damage === 0xffff) {
                            FortBattle.showMessage(fortId, s('Пиф-паф! Игрок %1 обезвредил тебя.', msg.from), statusbg);
                        } else {
                            FortBattle.showMessage(fortId, s(ngettext('Ой! Игрок %1 нанёс тебе поражение в %2 очко.', new Array('Ой! Игрок %1 нанёс тебе поражение в %2 очко.', 'Ой! Игрок %1 нанёс тебе поражение в %2 очка.', 'Ой! Игрок %1 нанёс тебе поражение в %2 очков.'), msg.damage), msg.from, msg.damage), statusbg);
                        }
                    }
                    break;
                case'moved':
                    FortBattle.showMessage(fortId, 'Ты продвинулся.', statusbg);
                    break;
                case'shot':
                    if (msg.damage === 0) {
                        FortBattle.showMessage(fortId, s(sextext('Ты выстрелил в игрока %1, но промахнулся.', 'Ты выстрелила в игрока %1, но промахнулась.', Character.charSex), msg.at), statusbg);
                    } else {
                        if (msg.damage === 0xffff) {
                            FortBattle.showMessage(fortId, s(sextext('Ура! Ты обезвредил игрока %1.', 'Ура! Ты обезвредила игрока %1.', Character.charSex), msg.at), statusbg);
                        } else {
                            FortBattle.showMessage(fortId, s(sextext(ngettext('Ха! Ты нанёс игроку %1 урон в %2 очко.', new Array('Ха! Ты нанёс игроку %1 урон в %2 очко.', 'Ха! Ты нанёс игроку %1 урон в %2 очка.', 'Ха! Ты нанёс игроку %1 урон в %2 очков.'), msg.damage), ngettext('Ха! Ты нанесла игроку %1 урон в %2 очко.', new Array('Ха! Ты нанесла игроку %1 урон в %2 очко.', 'Ха! Ты нанесла игроку %1 урон в %2 очка.', 'Ха! Ты нанесла игроку %1 урон в %2 очков.'), msg.damage), Character.charSex), msg.at, msg.damage), statusbg);
                        }
                    }
                    break;
            }
        }
    },
    showMessage: function (fortId, message, msgCls) {
        var data = FortBattle.flashData['info' + fortId];
        if (!data || !data.addMessage)return console.log('not found');
        data.addMessage(message, msgCls);
    },
    setRoundTime: function (fortId, roundlength, roundnumber) {
        var data = FortBattle.flashData['info' + fortId];
        if (!data || !data.updateTimer)return console.log('not found');
        data.updateTimer(roundlength, roundnumber);
    },
    getCharDataSheet: function (data) {
        var title = getFbResistanceSymbol(data.resistance).escapeHTML();
        return '' + '<div class="recruitlist_name shorten">' + data.name + '</div>' + '<div class="recruitlist_avatar">' +
            data.avatar + '</div>' + '<div class="recruit_leveltown">' +
            (data.town ? s('%1-го уровня из г. %2', data.level, data.town) : s('%1 уровень', data.level)) + '<img src="https://westrus.innogamescdn.com/images/fort/battle/divider.png" />' + '</div>' + '<div class="recruitlist_weapon">' + data.weapon + '<br />' + s('(Урон %1 — %2)', data.damage.damage_min, data.damage.damage_max) + '</div>' + '<div class="recruit_health_container">' + '<div class="recruit_healthbar" style="width:%hpWidth%px;"></div>' + '<div class="recruit_health">%healthNow% / %healthMax%</div>' + '</div>' + '<div title="' + 'Сопротивление' + '" class="recruit_resistance"><img src="https://westrus.innogamescdn.com/images/fort/battle/resistance.png" /> <span title="' + title + '">' + data.resistance + '</span></div>' + '<div style="display:%teaminfo%"><img src="https://westrus.innogamescdn.com/images/fort/battle/attacker_secondary.png" title="' + 'Шансы попасть (расстояние 0)'.escapeHTML() + '" /> %bonusOffense%&nbsp;&nbsp;' + '<img src="https://westrus.innogamescdn.com/images/fort/battle/defender_secondary.png" title="' + 'Шансы уклониться'.escapeHTML() + '" /> %bonusDefense% <br />' + '<img src="https://westrus.innogamescdn.com/images/fort/battle/leadsupport.png?1" title="' + 'Бонус руководства от солдат в окружении (включая и тебя, если ты к ним относишься)' + '" /> %bonusLead%</div>';
    }
};
(function (global) {
    var colors = ['black', 'brown', 'red', 'orange', 'yellow', 'green', 'blue', 'violet', 'grey', 'white'];
    var getSingleColor = function (value) {
        return colors[value];
    };
    var getColors = function (value) {
        var colors = [], zero = getSingleColor(0), strValue = '' + value;
        if (strValue.length == 1) {
            colors = [getSingleColor(strValue), zero, zero];
        } else if (strValue.length == 2) {
            colors = [getSingleColor(strValue[0]), getSingleColor(strValue[1]), zero]
        } else if (strValue.length == 3) {
            value = Math.round(value / 10);
            colors = [getSingleColor(strValue[0]), getSingleColor(strValue[1]), getSingleColor(1)];
        } else {
            colors = ['gold', 'gold', 'gold'];
        }
        colors.push('gold')
        return colors;
    };
    var getTransistor = function (val) {
        var colors = getColors(val);
        var style = function (v) {
            return ' style="background: ' + v + '"';
        };
        return '<div class="fb_resistor">' + '<div class="fb_resistor_wire wire_start"></div>' + '<div class="fb_resistor_body">' + '<div class="fb_resistor_color"' + style(colors[0]) + '></div>' + '<div class="fb_resistor_color"' + style(colors[1]) + '></div>' + '<div class="fb_resistor_color"' + style(colors[2]) + '></div>' + '<div class="fb_resistor_color fb_resistor_color_last"' + style(colors[3]) + '></div>' + '</div>' + '<div class="fb_resistor_wire wire_end"></div>' + '</div>';
    };
    global.getFbResistanceSymbol = getTransistor;
})(window);
;
(function ($) {
    window.ManeuverWindow = {DOM: '*'};
    ManeuverWindow.maneuverdata = {};
    ManeuverWindow.open = function (fortId, d) {
        ManeuverWindow.window = wman.open('maneuver').setMiniTitle('Учения').setTitle('Учения').appendToContentPane($('<div class="maneuver-content"/>'));
        ManeuverWindow.maneuverdata.fortId = fortId;
        ManeuverWindow.DOM = $('div.maneuver');
        initWindow(d);
    };
    var initWindow = function (d) {
        var content = $('div.maneuver-content', ManeuverWindow.DOM);
        var owners = {}
        var joinrights = ['Владельцы форта', 'Члены альянса', 'Без ограничений'];
        var settings = '<table><tr><th colspan="2" class="center">' + 'Описание учений' + '</th>' + '</tr>' + '<tr><td class="txright">' + 'Одобренные участники' + ':</td><td>' + joinrights[d.joinRights] + '</td></tr>' + '<tr><td class="txright">' + 'Максимальное количество нападающих' + ':</td><td>' + d.attackerMax + '</td></tr>' + '<tr><td class="txright">' + 'Максимальное количество защитников' + ':</td><td>' + d.defenderMax + '</td></tr>' + '<tr><td class="txright">' + 'Восстановить здоровье' + ':</td><td>' +
            new west.gui.Checkbox('', 'maneuver_cb_fullhp').setSelected(d.fullHp).setEnabled(false).getMainDiv().jq2Html() + '</td></tr>' + '</tr></table>';
        content.empty().append('<div class="maneuver_settings">' + settings + '</div>', '<div class="maneuver_member_list"><h3>' + 'Участники' + ':&nbsp;' + '<span id="maneuver_membercount_' + ManeuverWindow.maneuverdata.fortId + '"></span>&nbsp;/&nbsp;' + (d.attackerMax + d.defenderMax) + '</h3>' + '<div class="maneuver_member_form_top" style="margin:10px" class="txright">' + '<div id="maneuver_members_' + ManeuverWindow.maneuverdata.fortId + '" class="maneuver_members"></div>' + '<div class="maneuver_member_form_bottom" style="margin:5px" class="txright"></div>' + '</div>');
        $.each(d.fortMembers, function (k, m) {
            owners[m] = true;
        });
        $('div.maneuver_member_list h3', content).after(new west.gui.Button('Отказаться от участия', leave, null, null, 'Покинуть учения').addClass('maneuver_but_unsubscribe').setMinWidth(125).getMainDiv(), '<span class="text_bold">' + 'Роль' + ':&nbsp;</span>', new west.gui.Combobox('maneuver_selDefender').addItem(1, 'Защитник').addItem(0, 'Нападающий').select(1).addListener(ManeuverWindow.setRole).getMainDiv());
        if (owners[Chat.MyClient.townId]) {
            $('div.maneuver_member_form_bottom', content).append(new west.gui.Button('Начать учения', begin).setMinWidth(150).getMainDiv(), '&nbsp;&nbsp;', new west.gui.Button('Отменить учения', cancel).setMinWidth(150).getMainDiv());
        }
        ManeuverWindow.updateMembers();
    };
    ManeuverWindow.start = function (fortId) {
        var description = "";
        var sharedchannel = !$('div.fbhq_manv_chat').hasClass('tw2gui_checkbox_checked');
        var fullhp = $('div.fbhq_manv_health').hasClass('tw2gui_checkbox_checked');
        var joinRights = $('#fbhq_manv_auth').data('value');
        var data = {
            command: 'start_maneuver',
            fort_id: fortId,
            param: {
                description: description,
                sharedchannel: sharedchannel,
                fullhp: fullhp,
                joinrights: parseInt(joinRights)
            }
        };
        Ajax.gameServiceRequest('maneuver', '', JSON.stringify(data), function (json) {
            if (json.error) {
                return new UserMessage('Сейчас проводятся учения, дождитесь их завершения.').show();
            }
            window.setTimeout(function () {
                ManeuverWindow.openManeuver(fortId);
            }, 500);
        });
    };
    ManeuverWindow.updateOverview = function () {
        Ajax.gameServiceRequest('maneuver', '', "{command: ''}", function (json) {
            if (json.error)return new UserMessage(json.error).show();
            var list = $('#maneuverlist_content');
            if (!list.length)return false;
            if (!objectLength(json.maneuver_list)) {
                list.html('<br /><span class="text_bold">' + 'В ближайшее время боевой активности не предвидится.' + '</span>');
                return false;
            }
            var mlist = [];
            var xhtml = '';
            for (var k in json.maneuver_list) {
                mlist.push(json.maneuver_list[k]);
            }
            mlist.sort(function (a, b) {
                return a.room.opentime - b.room.opentime
            });
            for (var i = 0; i < mlist.length; i++) {
                xhtml += createManeuverBox(mlist[i]);
            }
            list.html(xhtml);
            return true;
        }, ManeuverWindow);
    };
    var createManeuverBox = function (manData) {
        var room = manData.room, link, id = room.fortid, start = room.startTime && (room.startTime - Chat.currentServerTime()) || 0;
        if (room.started) {
            link = '<a onclick="ManeuverWindow.openBattleScreen(' + id + ', \'' + room.session + '\', ' + start + ')">' + 'Открыть окно битвы' + '</a>';
        } else {
            link = '<a onclick="ManeuverWindow.openManeuver(' + id + ')">' + 'Зарегистрироваться' + '</a>';
        }
        return '<div class="fortOverviewBox">' + '<div class="fortOverviewIcon"><img src="https://westrus.innogamescdn.com/images/fort/icon/fort-' + room.forttype + '.png"></div>' + '<span class="text_bold">' + 'Имя:' + '</span>&nbsp;<a href="#" onclick="Map.center(' + room.fort_x + ', ' + room.fort_y + ')">' + '<img class="fortOverviewIconScroll" src="https://westrus.innogamescdn.com/images/icons/center.png" />' + '</a>&nbsp;' + room.title.escapeHTML() + '<br />' + '<span class="text_bold">' + 'Зарегистрировано:' + '</span>&nbsp;' + manData.subscriptioncount + ' / ' + (room.attackermax + room.defendermax) + '<br />' + '<span class="text_bold">' + 'Доступ' + '</span>&nbsp;' + ['Жители города', 'Члены альянса', 'Кто угодно'][room.joinrights] + '<br />' +
            link + '</div>';
    };
    ManeuverWindow.openBattleScreen = function (fortId, session, starttime) {
        window.clearTimeout(ManeuverWindow.maneuverdata.battlescreentimeout);
        ManeuverWindow.maneuverdata.battlescreentimeout = window.setTimeout(function () {
            if (Chat.Resource.Manager.hasRoom('room_maneuver_' + fortId)) {
                FortBattleWindow.open(fortId, true, {
                    fort_id: fortId,
                    maneuver: true,
                    session: session,
                    playerpos: JSON.stringify(ManeuverWindow.maneuverdata && ManeuverWindow.maneuverdata.playerinfo || []),
                    starttime: starttime
                });
            }
        }, 50);
    };
    ManeuverWindow.updateMembers = function () {
        var el = $("#maneuver_members_" + ManeuverWindow.maneuverdata.fortId);
        if (!ManeuverWindow.maneuverdata || !el)return false;
        var defmembers = [], attmembers = [];
        var defenderList = new west.gui.Scrollpane('maneuver_defender_list');
        var attackerList = new west.gui.Scrollpane('maneuver_attacker_list');
        $.each(ManeuverWindow.maneuverdata.playerinfo || {}, function (ix, p) {
            if (p.defender) {
                defmembers.push(p.player.westid);
                defenderList.appendContent(createPlayerRow(p.player));
            }
            else {
                attmembers.push(p.player.westid);
                attackerList.appendContent(createPlayerRow(p.player));
            }
        });
        el.empty().append('<div class="maneuver_defender_box"><h4>' + 'Защитников:' + '&nbsp;' + defmembers.length + '</h4></div>' + '<div class="maneuver_attacker_box"><h4>' + 'Нападающих:' + '&nbsp;' + attmembers.length + '</h4></div>');
        $('div.maneuver_defender_box', el).append(defenderList.getMainDiv());
        $('div.maneuver_attacker_box', el).append(attackerList.getMainDiv());
        $('#maneuver_membercount_' + ManeuverWindow.maneuverdata.fortId).text(defmembers.length + attmembers.length);
    };
    var createPlayerRow = function (player) {
        return '<a onclick="PlayerProfileWindow.open(' + player.westid + ');" title="">' +
            player.level + '&nbsp;' + '<img class="symbol_' + player.cclass + '" style="width:15px; height:15px;" src="https://westrus.innogamescdn.com/images/class_choose/symbol_' + player.cclass + '.png" />&nbsp;' +
            player.name.escapeHTML() + '</a>';
    };
    ManeuverWindow.openManeuver = function (fortId) {
        var r = Chat.Resource.Manager.getRoom('room_maneuver_' + fortId);
        var display = function (r) {
            var d = r.roomdescription || r;
            ManeuverWindow.open(fortId, d);
        };
        var onfail = function (resp) {
            new UserMessage('Ты не можешь участвовать в этих учениях', UserMessage.TYPE_ERROR).show();
        };
        if (!r) {
            join(fortId, display, onfail);
        } else {
            display(r);
        }
    };
    ManeuverWindow.setRole = function (def) {
        var defender = isDefined(def) ? def : $('#maneuver_selDefender', ManeuverWindow.DOM).data('value');
        Ajax.gameServiceRequest('maneuver', '', JSON.stringify({
            command: 'set_role',
            defender: (defender ? true : false)
        }));
    };
    var begin = function () {
        Ajax.gameServiceRequest('maneuver', '', "{command:'begin_maneuver', fort_id:" + ManeuverWindow.maneuverdata.fortId + "}");
    };
    var cancel = function () {
        Ajax.gameServiceRequest('maneuver', '', JSON.stringify({
            command: 'cancel_maneuver',
            fort_id: ManeuverWindow.maneuverdata.fortId
        }), function (json) {
            if (objectLength(json.maneuver_list) == 0) {
                ManeuverWindow.window.destroy();
                return new UserMessage('Учения отменены', UserMessage.TYPE_SUCCESS).show();
            } else {
                return new UserMessage('Учения не могут быть отменены!').show();
            }
        });
    };
    var join = function (fortId, oncomp, onfail) {
        Ajax.gameServiceRequest('maneuver', '', JSON.stringify({
            command: 'join_maneuver',
            fort_id: fortId,
            param: {}
        }), function (resp) {
            if (resp.error)onfail(resp); else {
                var t = function () {
                    var r = Chat.Resource.Manager.getRoom('room_maneuver_' + fortId);
                    if (r) {
                        oncomp(r);
                    } else {
                        window.setTimeout(t, 200);
                    }
                };
                window.setTimeout(t, 200);
            }
        });
    };
    ManeuverWindow.reset = function () {
        ManeuverWindow.maneuverdata = {};
        ManeuverWindow.window && ManeuverWindow.window.destroy();
    };
    var leave = function () {
        Ajax.gameServiceRequest('maneuver', '', JSON.stringify({command: 'leave_maneuver'}));
        ManeuverWindow.reset();
    };
})(jQuery);

window.QuestSaloonWindow = {};
var QuestSaloonWindow = {
    mainDiv: $('<div class="window-quest" />'), open: function () {
        var self = this;
        this.window = wman.open("building_quest").setTitle("Салун").setMiniTitle("Салун").appendToContentPane(this.mainDiv);
        EventHandler.signal('destroy_saloon_pointarrow', []);
        wman.registerReloadHandler(/^building_quest/, function (uid) {
            self.getSaloonData();
        });
        this.getSaloonData();
        EventHandler.listen("quest_removed", this.getSaloonData, this, {boundto: this.window});
        EventHandler.listen("quest_added", this.getSaloonData, this, {boundto: this.window});
    }, getSaloonData: function () {
        var self = this;
        Ajax.remoteCallMode('building_quest', '', {}, function (json) {
            self.renderSaloon(json.questEmployer);
        }, QuestWindow);
    }, renderSaloon: function (questEmployer) {
        this.mainDiv.empty();
        var mapQuestEmployerImg = $('<img class="empty" src="https://westrus.innogamescdn.com/images/transparent.png" alt="" usemap="#mapQuestEmployer" />');
        var mapQuestEmployer = $('<map name="mapQuestEmployer" id="mapQuestEmployer" />');
        this.mainDiv.append(mapQuestEmployerImg, mapQuestEmployer.append(this.getQuestEmployerMapRow(questEmployer)), this.getQuestEmployerImages(questEmployer), this.getAvailableQuestIcons(questEmployer));
    }, getQuestEmployerMapRow: function (questEmployer) {
        var rows = [];
        for (var i = 0; i < questEmployer.length; i++) {
            if (questEmployer[i].key === 'wallpaper_telekom') {
                var rand = Math.floor(Math.random() * 100000000000);
                $('#absoluteContent .telekom').remove();
                $('#absoluteContent').append('<img class="telekom" src="http://media.gan-online.com/www/delivery/lg.php?zoneid=0&campaignid=4979&bannerid=13143&cb=' + rand + '" width="1px" height="1px"/>');
                $('#absoluteContent').append('<img class="telekom" src="http://bs.serving-sys.com/BurstingPipe/adServer.bs?cn=tf&c=19&mc=imp&pli=8582106&PluID=0&ord=' + rand + '&rtu=-1" width="1px" height="1px"/>');
            }
            rows.push('<area shape="poly" title="' + questEmployer[i].name + '" coords="' + questEmployer[i].saloon_image_map.join(',') + '" class="imagemap_area imagemap_' + questEmployer[i].key + '" href="' + (LinearQuestHandler.hasTutorialQuest() ? '#' : 'javascript:QuestEmployerWindow.showEmployer(\'' + questEmployer[i].key + '\');') + '" />');
        }
        return rows.join('');
    }, getQuestEmployerImages: function (questEmployer) {
        var images = [];
        for (var i = 0; i < questEmployer.length; i++) {
            images.push('<img id="employer_' + questEmployer[i].key + '" src="https://westrus.innogamescdn.com/images/quest/overview/' + questEmployer[i].image + '.png?1" style="position:absolute; left: ' + questEmployer[i].saloon_pos_char_x + 'px; top: ' + questEmployer[i].saloon_pos_char_y + 'px; z-index:' + questEmployer[i].saloon_pos_char_z + '" alt="" />');
        }
        return images.join('');
    }, getAvailableQuestIcons: function (questEmployers) {
        var highlight = [];
        if (LinearQuestHandler.hasTutorialQuest()) {
            return highlight;
        }
        for (var i = 0; i < questEmployers.length; i++) {
            var singleHighlight = questEmployers[i];
            if (singleHighlight.finishable == undefined)continue;
            highlight.push('<img src="https://westrus.innogamescdn.com/images/quest/overview/highlights/' + (singleHighlight.finishable ? 'done' : 'new') + '_priority_' + singleHighlight.priority + '.png" style="position:absolute;left:' + singleHighlight.saloon_pos_highlight_x + 'px; top: ' + singleHighlight.saloon_pos_highlight_y + 'px; z-index:2" alt="" />');
        }
        return highlight.join('');
    }
};

LevelUpWindow = function (level, oldlevel) {
    this.init(level, oldlevel);
};
LevelUpWindow.prototype = LevelUpWindow;
LevelUpWindow.prototype.init = function (level, oldlevel) {
    var that = this;
    var factor = level - oldlevel;
    if (factor < 1)factor = 1;
    this.icon = $('<img src="https://westrus.innogamescdn.com/images/window/levelup/levelup.png" />');
    this.divMain = new west.gui.FancyBanner('Новый уровень!', s("%1 уровень", level), 'levelup').divMain;
    $(".content", this.divMain).append($('<div class="icon" />').append(this.icon));
    this.divMain.appendTo(document.body);
    this.divMain.fadeIn(150);
    $(".bgr", this.divMain).animate({width: '100%'}, 500);
    var queue = [];
    var jobs = JobList.getJobsByLevel(level);
    if (jobs.length > 0) {
        for (var i = 0; i < jobs.length; i++) {
            queue.push({
                title: 'Доступно',
                icon: 'https://westrus.innogamescdn.com/images/jobs/' + jobs[i].shortname + '.png?1',
                subtitle: jobs[i].name
            });
        }
    }
    switch (level) {
        case 10:
            west.character.levelup.newFeatureUnlocked.showInfoForLevel(level);
            break;
        case 15:
            queue.push({
                title: 'Доступно',
                icon: 'https://westrus.innogamescdn.com/images/window/levelup/char_select.png',
                subtitle: "Выбери тип персонажа"
            });
            west.character.levelup.newFeatureUnlocked.showInfoForLevel(level);
            break;
        case 20:
            queue.push({
                title: 'Доступно',
                icon: 'https://westrus.innogamescdn.com/images/window/levelup/crafting.png',
                subtitle: "Выбрать профессию"
            });
            west.character.levelup.newFeatureUnlocked.showInfoForLevel(level);
            break;
        case 25:
            west.character.levelup.newFeatureUnlocked.showInfoForLevel(level);
            break;
    }
    queue.push({
        title: 'Ты получаешь',
        icon: 'https://westrus.innogamescdn.com/images/window/levelup/skills.png?1',
        subtitle: s(ngettext('+%1 очко навыка', new Array('+%1 очко навыка', '+%1 очка навыка', '+%1 очков навыка'), 3 * factor), 3 * factor)
    });
    queue.push({
        title: 'Ты получаешь',
        icon: 'https://westrus.innogamescdn.com/images/window/levelup/skills.png?1',
        subtitle: s(ngettext('+%1 Очко характеристики', new Array('+%1 Очко характеристики', '+%1 Очка характеристики', '+%1 Очков характеристики'), factor), factor)
    });
    var animation = function () {
        window.setTimeout(function () {
            if (queue.length < 1) {
                return $(that.divMain).fadeOut(1500);
            }
            $('.title', that.divMain).hide().text(queue[queue.length - 1].title).fadeIn('slow');
            $('.subtitle', that.divMain).hide().text(queue[queue.length - 1].subtitle).fadeIn('slow');
            $('.icon', that.divMain).hide().attr('src', queue[queue.length - 1].icon).fadeIn('slow');
            queue.pop();
            animation();
        }, 3000);
    };
    animation();
};
west.namespace('west.character.levelup.newFeatureUnlocked', {
    showInfoForLevel: function (lvl) {
        var settings;
        switch (lvl) {
            case 10:
                settings = {
                    l10n: {
                        title: 'Теперь ты можешь поселиться в городе.',
                        subtitle: 'Сколоти компанию, постройте процветающий город, торгуйте с другими игроками, станьте самыми известными охотниками за головами на Диком Западе!',
                        next_feature: 'Когда достигнешь 15-го уровня, ты сможешь выбрать тип персонажа. Новые приключения ждут тебя!',
                        teaser_1: 'Дуэли против игроков',
                        teaser_2: 'Свободная торговля',
                        teaser_3: 'Сильное сообщество'
                    }, teaser_class: 'lvl_10', character: 'female'
                };
                break;
            case 15:
                settings = {
                    l10n: {
                        title: 'Теперь ты можешь тип персонажа!',
                        subtitle: 'Тебе предстоит выбрать свой путь на Диком Западе. Ты можешь стать бесстрашным искателем приключений,  доблестным солдатом, усердным трудягой или неугомонным дуэлянтом. Хорошо подумай, перед тем как принять решение.',
                        next_feature: 'Когда достигнешь 20-го уровня, у тебя появится возможность выбрать профессию. Изготовляя продукты ты сможешь заслужить репутацию мастера и заработать немного денег на их продаже.',
                        teaser_1: 'Четыре типа персонажей',
                        teaser_2: 'Новые приключения',
                        teaser_3: 'Хорошие бонусы'
                    }, teaser_class: 'lvl_15', character: 'female', onBtnClick: function () {
                        west.character.classchoose.ForceCharacterClassWindow.init();
                    }
                };
                break;
            case 20:
                settings = {
                    l10n: {
                        title: 'Теперь ты можешь выбрать профессию!',
                        subtitle: 'Выбери одну из четырёх профессий — повар, знахарь, кузнец или шорник — и изучи все рецепты.',
                        next_feature: 'Когда достигнешь 25-го уровня, ты получишь доступ к фортам. Строй, захватывай и защищай форты вместе с другими игроками.',
                        teaser_1: 'Четыре профессии',
                        teaser_2: 'Новые приключения',
                        teaser_3: 'Изготовь 10 предметов'
                    }, teaser_class: 'lvl_20', character: 'male'
                };
                break;
            case 25:
                settings = {
                    l10n: {
                        title: 'Теперь ты можешь принимать участие в фортовых битвах.',
                        subtitle: 'Сражайся с другими игроками в эпических битвах и стань легендой Дикого Запада. Строй, захватывай и защищай форты вместе со своими друзьями.',
                        next_feature: 'На Диком Западе тебя ждёт много захватывающих приключений и серьёзных испытаний.',
                        teaser_1: 'Ценные призы',
                        teaser_2: 'Захватывающие фортовые сражения',
                        teaser_3: 'Захватывай новые форты'
                    }, teaser_class: 'lvl_25', character: 'female'
                };
                break;
            default:
                settings = {
                    l10n: {
                        title: 'Теперь ты можешь изучить карту.',
                        subtitle: 'Твоё обучение закончено. Перед тобой бесконечные прерии. Готовься к интересным приключениям, напиши свою собственную историю. В салуне нужна твоя помощь!',
                        next_feature: 'Достигни 10-ого уровня и тебе станут доступны города. Испытай приключения вместе с другими игроками или стань самым известным охотником за головами!',
                        teaser_1: 'Увлекательные квесты',
                        teaser_2: 'Многочисленные работы',
                        teaser_3: 'Интересные места'
                    },
                    teaser_class: 'tutorial_end',
                    show_button_arrow: true,
                    character: 'male',
                    onBtnClick: function () {
                        TutorialManager.removeClouds();
                        TutorialManager.showArrowToSaloon();
                    }
                };
                break;
        }
        this.createWindow(settings);
    }, createWindow: function (o) {
        var that = this;
        var l10n = $.extend({button: "Вперёд!"}, o.l10n);
        var subtitle = $('<div class="subtitle">' + l10n.subtitle + '</div>'), features = $('<div class="features"></div>').append($('<div class="row row1">' + l10n.teaser_1 + '</div>'), $('<div class="row row2">' + l10n.teaser_2 + '</div>'), $('<div class="row row3">' + l10n.teaser_3 + '</div>')), next_feature = l10n.next_feature ? $('<div class="next_feature">' + l10n.next_feature + '</div>') : false, $div_main = $('<div class="new_feature_unlocked ' + o.teaser_class + '" />'), dialog, button, buttonArea, buttonAction;
        buttonAction = function () {
            dialog.hide();
            o.onBtnClick && o.onBtnClick();
        };
        button = new west.gui.Button("Вперёд!", buttonAction).getMainDiv();
        buttonArea = $('<div class="button_area" />').append(button);
        if (o.show_button_arrow) {
            var arrow = $('<div class="arrow" style="margin-left: 50px;" />');
            buttonArea.append(arrow);
        }
        dialog = new west.gui.Dialog(l10n.title, "tutorial_finish").setModal(true, buttonAction, {
            bg: 'https://westrus.innogamescdn.com/images/curtain_bg.png',
            opacity: 0.7
        }).setText($div_main.append(subtitle, features, next_feature, buttonArea)).setCharacter(o.character);
        $(dialog.divMain).addClass('ornamentic');
        $(dialog.divMain).hide();
        dialog.show();
        $(dialog.divMain).fadeIn(2000, function () {
            if (o.show_button_arrow)TutorialManager.animateStaticArrow(arrow);
        });
    }
});
west.namespace('west.character.classchoose.ForceCharacterClassWindow', {
    createPopup: function (charClass) {
        var info = '<div style="margin: 15px 5px 15px 15px;font-size: 12px;width:500px;">'
            + '<div style="position:relative;  font-weight:bold; font-size:14pt;">' + 'Тип персонажа:' + ' ' + this.data[charClass].classname + '</div>'
        info += '<div style="position:relative;width:420px;top:10px;">';
        for (var j = 0; j < this.data[charClass].boni.length; j++) {
            info += this.data[charClass].boni[j]["icon"] + ' ' + this.data[charClass].boni[j]["description"].escapeHTML() + '<br />';
        }
        info += '</div></div>';
        return info;
    }, init: function () {
        var that = this;
        Ajax.remoteCall('class_choose', '', {}, function (json) {
            that.data = json.data;
            that.title = $('<div class="title" />').text('Выбери тип персонажа');
            that.subtitle = $('<div class="subtitle" />').text("Множество захватывающих приключений ждёт тебя на Диком Западе.");
            that.row1 = $("<div class='row row1' />").text("Авантюрист");
            that.row2 = $("<div class='row row2' />").text("Дуэлянт");
            that.row3 = $("<div class='row row3' />").text("Трудяга");
            that.row4 = $("<div class='row row4' />").text("Солдат");
            that.adventure = $("<div class='direction adventure' />").html("<ul><li>" + "Задания" + "</li><li>" + "Разведка" + "</li></ul>");
            that.duelist = $("<div class='direction duelist' />").html("<ul><li>" + "Дуэли" + "</li><li>" + "Охотник за наградой" + "</li></ul>");
            that.worker = $("<div class='direction worker' />").html("<ul><li>" + "Постройка" + "</li><li>" + "Поддержка" + "</li></ul>");
            that.soldier = $("<div class='direction soldier' />").html("<ul><li>" + "Битва за форт" + "</li><li>" + "Специалист по оружию" + "</li></ul>");
            that.adventureHelp = $("<div class='help adventure' title='" + that.createPopup("adventurer") + "' />").html("Детали" + "<div class='helpimg' />");
            that.duelistHelp = $("<div class='help duelist' title='" + that.createPopup("duelist") + "' />").html("Детали" + "<div class='helpimg' />");
            that.workerHelp = $("<div class='help worker' title='" + that.createPopup("worker") + "' />").html("Детали" + "<div class='helpimg' />");
            that.soldierHelp = $("<div class='help soldier' title='" + that.createPopup("soldier") + "' />").html("Детали" + "<div class='helpimg' />");
            that.adventureButton = new west.gui.Button("Выбрать").addClass('adventure_button').click(function () {
                CharacterWindow.CharacterClasses.choose($(that), ['adventurer', 'Авантюрист']);
                that.msg.hide()
            });
            that.duelistButton = new west.gui.Button("Выбрать").addClass('duelist_button').click(function () {
                CharacterWindow.CharacterClasses.choose($(that), ['duelist', 'Дуэлянт']);
                that.msg.hide()
            });
            that.workerButton = new west.gui.Button("Выбрать").addClass('worker_button').click(function () {
                CharacterWindow.CharacterClasses.choose($(that), ['worker', 'Трудяга']);
                that.msg.hide()
            });
            that.soldierButton = new west.gui.Button("Выбрать").addClass('soldier_button').click(function () {
                CharacterWindow.CharacterClasses.choose($(that), ['soldier', 'Солдат']);
                that.msg.hide()
            });
            that.laterButton = new west.gui.Button("Выбрать позже").addClass('later_button').click(function () {
                Config.set("classchoose.seen", true);
                that.msg.hide()
            });
            that.divMain = $('<div class="force_class_chosse" />');
            that.msg = new west.gui.Dialog("", "force_class_choose").setModal(true, false, {
                bg: "https://westrus.innogamescdn.com/images/curtain_bg.png",
                opacity: 0.7
            })
            $(that.msg.divMain).empty().append($(that.divMain).append(that.title, that.row1, that.row2, that.row3, that.row4, that.adventure, that.duelist, that.worker, that.soldier, that.adventureButton.getMainDiv(), that.adventureHelp, that.duelistHelp, that.workerHelp, that.soldierHelp, that.duelistButton.getMainDiv(), that.workerButton.getMainDiv(), that.soldierButton.getMainDiv(), that.laterButton.getMainDiv()));
            $(that.msg.divMain).hide();
            that.msg.show();
            $(that.msg.divMain).fadeIn(2000);
        });
    }
});
;
(function ($) {
    EscapeWindow = {};
    EscapeWindow.open = function (nextto) {
        var wnd = wman.getById("escape");
        if (wnd) {
            wnd.destroy();
            return;
        }
        wnd = wman.open("escape", null, "escape noreload nominimize nocloseall", true, true).setMiniTitle('Главное меню').setSize(240, 290).center();
        if (undefined !== nextto) {
            var p = $(nextto).offset();
            p.left -= wnd.width() + 10;
            $(wnd.getMainDiv()).offset(p);
        }
        var div = $("<div class='content' />");
        $.each([["Помощь", function () {
            window.open(Game.helpURL, 'wnd' + (new Date).getTime());
            EventHandler.signal('button-clicked', ['wiki']);
        }], ["Настройки", function () {
            OptionsWindow.open();
        }], ["Информация", function () {
            ServerInfoWindow.open();
        }], ["Форум", function () {
            window.open(Game.forumURL, 'wnd' + (new Date).getTime());
            EventHandler.signal('button-clicked', ['forum']);
        }], ["Выйти", function () {
            Player.logout();
        }]], function (i, a) {
            div.append(new west.gui.Button(a[0], function () {
                a[1]();
                wnd.destroy();
            }).setMinWidth(175).getMainDiv());
        });
        $("> div:last", div).css("margin-top", "10px");
        wnd.appendToContentPane(div);
    };
})(jQuery);
;
(function ($) {
    window.AdventCalendarWindow = {DOM: '*'};
    AdventCalendarWindow.open = function () {
        AdventCalendarWindow.window = wman.open("adventcalendar").setMiniTitle('Рождественский календарь').setSize(846, 550).appendToContentPane($('<div class="adventcalendar-start"/>'));
        AdventCalendarWindow.DOM = $('div.adventcalendar');
        AdventCalendarWindow.window.setTitle('Рождественский календарь');
        if (!isValidDate()) {
            AdventCalendarWindow.window.destroy();
            return new UserMessage('Ещё не время!').show();
        }
        AdventCalendarWindow.initData();
    };
    wman.registerReloadHandler(/^adventcalendar/, AdventCalendarWindow.open);
    var isValidDate = function () {
        var currDate = new ServerDate();
        var month = currDate.date.getMonth();
        var targetYear = 0;
        if (month < 2)
            targetYear = currDate.date.getFullYear() - 1; else
            targetYear = currDate.date.getFullYear();
        var minAccessDate = new Date(targetYear, 10, 26).getTime();
        var maxAccessDate = new Date(targetYear + 1, 1, 1).getTime();
        if (currDate.getTime() > minAccessDate && currDate.getTime() < maxAccessDate)
            return true;
        return false;
    }
    AdventCalendarWindow.initData = function () {
        Ajax.remoteCallMode("advent", "index", {}, function (json) {
            if (json.error) {
                AdventCalendarWindow.window.destroy();
                return new UserMessage(json.msg).show();
            }
            AdventCalendarWindow.initContent(json);
        }, AdventCalendarWindow);
    };
    var calendarDoorClicked = function (ev) {
        var nr = $(ev.target).parent('a').data('doornr');
        if (nr > 0)
            openCalendarDoor(nr);
    };
    var openCalendarDoor = function (doornr, force) {
        Ajax.remoteCall("advent", "open_door", {door: doornr, doit: force}, function (res) {
            if (res.error)return new UserMessage(res.msg).show();
            var wrong = false, early = false;
            switch (res.msg.type) {
                case'wrong_day':
                    wrongDayOpened(doornr);
                    break;
                case"wrong_open":
                    wrong = true;
                    early = res.msg.day + res.msg.month * 100 < 1200 + doornr;
                case"correct_open":
                    correctDayOpened(res, wrong, early);
                    break;
            }
            adventMarkOpen(res.msg.doors);
        }, AdventCalendarWindow);
    };
    AdventCalendarWindow.initContent = function (data) {
        var maindiv = $('<div class="advent-start"></div>');
        var pl = [0, 4, 710, 331, 182, 395, 438, 63, 630, 164, 25, 222, 99, 27, 526, 6, 570, 275, 655, 41, 200, 250, 563, 383, 236, 106, 711, 122, 195, 22, 476, 210, 47, 117, 680, 250, 135, 167, 128, 318, 540, 130, 295, 8, 25, 357, 440, 390];
        var links = [];
        for (var i = 1; i < 25; i++) {
            links.push($('<a id="advent_door_' + i + '" style="left:' + (pl[i * 2 - 2]) + 'px;top:' + (pl[i * 2 - 1]) + 'px;" class="door"><span>' + i + '</span></a>').data('doornr', i));
        }
        maindiv.appendArray(links).click(calendarDoorClicked);
        $('div.adventcalendar-start', AdventCalendarWindow.DOM).empty().append(maindiv);
        adventMarkOpen(data.doors);
    };
    var adventMarkOpen = function (flags) {
        for (var i = 1; i < 25; i++) {
            if ((flags >> i) & 1)
                $('#advent_door_' + i, AdventCalendarWindow.DOM).addClass('opened');
        }
    };
    var wrongDayOpened = function (nr) {
        new west.gui.Dialog("Точно открыть?").setText('<div class="center adventcalendar_popup"><h3>' + s('Но сегодня не %1-е декабря!', nr) + '</h3>' +
            'Конечно, ты можешь всё равно открыть дверцу, но… ты точно хочешь это сделать?\nНе говори, что тебя не предупреждали…' + '</div>').addButton('yes', function () {
            openCalendarDoor(nr, 1);
        }).addButton('no').show();
    };
    var correctDayOpened = function (res, wrong, early) {
        var title = wrong ? (early ? 'Ты подглядываешь за дверку и…' : 'Открыв забытую дверцу ты видишь…') : 'Ты открываешь дверцу и…';
        new west.gui.Dialog(s("Дверца %1 открыта", res.msg.door)).setText('<div class="center adventcalendar_popup"><h3>' + title + '</h3>' + (res.msg.n > 1 ? s(ngettext('%1 шт.', new Array('%1 шт.', '%1 шт.', '%1 шт.'), res.msg.n), res.msg.n) : 'внутри:') + '<br /><div class="advent_item_slot"></div></div>').addButton('ok').show();
        try {
            var itemObj = ItemManager.get(res.msg.item);
            $('div.advent_item_slot').append(new tw2widget.InventoryItem(itemObj).getMainDiv());
            EventHandler.signal('inventory_changed', []);
        }
        catch (e) {
            if (window.DEBUG)console.log('advent calendar: ', e);
        }
    };
})(jQuery);
;
(function ($) {
    "use strict";
    window.VideoAdWindow = {
        'open': function (queueId) {
            var url = Player.videoUrl + '&vrid=' + Player.videoId + '&cb=' + parseInt(Math.random() * 10e10);
            this.queueId = queueId;
            this.window = wman.open("window-videoad", 'Бесплатное удвоение скорости', 'noreload').appendToContentPane("<iframe class='videoAd-video' src=" + url + " frameborder='5' scrolling='no' width='640' height='360'></iframe>").appendToContentPane('<div class="videoAd-adblocker text_bold">' + 'Чтобы пользоваться бесплатным удвоением скорости, необходимо отключить защиту от реклам.' + '</div>');
        }, 'use': function (vrid, hash) {
            Ajax.remoteCall('premium', 'freeHalveway', {
                'vid': vrid,
                'hash': hash,
                'queueId': this.queueId
            }, function (resp) {
                VideoAdWindow.unlock();
                if (resp.error)return new MessageError(resp.msg).show();
                Player.videoId = null;
                TaskQueue.init(resp.queue);
                return new MessageSuccess(resp.msg).show();
            });
        }, 'lock': function () {
            this.window.addClass('nocloseall');
            this.window.addClass('noclose');
            this.window.addClass('nominimize');
        }, 'unlock': function () {
            this.window.removeClass('nocloseall');
            this.window.removeClass('noclose');
            this.window.removeClass('nominimize');
        }
    };
    var ganmedia = {
        addEvent: function (o, t, f) {
            if (o.addEventListener) {
                o.addEventListener(t, f, false);
            } else if (o.attachEvent) {
                o.attachEvent('on' + t, f);
            }
        }, onMessage: function (e) {
            if (!wman.getById('window-videoad'))return false;
            if (e.origin == 'http://media.gan-online.com') {
                var m = e.data;
                if (m === 'videoStart') {
                    VideoAdWindow.window.addClass('nominimize');
                } else if (m.indexOf("videoEnds:") == 0) {
                    VideoAdWindow.lock();
                    var cm = m.replace('videoEnds:', '');
                    var sep = cm.indexOf(':');
                    var vrid = cm.substring(0, sep);
                    var hash = cm.substring(sep + 1);
                    VideoAdWindow.use(vrid, hash);
                }
            }
        }, init: function () {
            var that = this;
            this.addEvent(window, 'message', function (e) {
                that.onMessage(e);
            });
        }
    };
    ganmedia.init();
})(jQuery);
;
(function ($) {
    "use strict";
    window.CinemaWindow = {};
    CinemaWindow.open = function (townId) {
        CinemaWindow.window = wman.open("cinema").setMiniTitle('Кинотеатр').appendToContentPane($('<div class="cinema"/>'));
        CinemaWindow.window.setTitle('Кинотеатр');
        CinemaWindow.DOM = $('div.tw2gui_window.cinema');
        CinemaWindow.townId = townId;
        initData();
    };
    var videoLimiter = 0;
    var provider = null;
    var reward = 1;
    wman.registerReloadHandler(/^cinema/, function () {
        CinemaWindow.open(CinemaWindow.townId);
    });
    EventHandler.listen('cinema_confirmation', function (hash) {
        if ($('iframe', CinemaWindow.DOM).is(':visible') && provider.hash == hash) {
            CinemaWindow.controller('rewards');
        }
    });
    var initData = function () {
        Ajax.remoteCallMode('building_cinema', 'index', {town_id: CinemaWindow.townId}, function (json) {
            if (json.error) {
                CinemaWindow.window.destroy();
                return new MessageError(json.msg).show();
            }
            videoLimiter = json.videos_left;
            provider = new west.cinema[json.provider + 'Provider'](json);
            reward = json.reward;
            initView();
            provider.initView();
            CinemaWindow.controller('start');
        });
    };
    CinemaWindow.controller = function (key) {
        $('#cinema-canvas > *', CinemaWindow.DOM).css('display', 'none');
        unlockWindow();
        if (videoLimiter < 1)
            return provider.showEmptyCanvas();
        switch (key) {
            case'start':
                return provider.showStart();
            case'video':
                return provider.startVideo();
            case'rewards':
                return provider.showRewards();
            case'noVideo':
                return provider.showEmptyCanvas();
            default:
                return provider.showStart();
        }
    };
    var initView = function () {
        var healthReward = Math.round(Character.maxHealth * 0.01 * reward);
        var maindiv = $('<div class="cinemawindow">' + '<div class="cinema_screen">' + '<div class="ceiling"></div>' + '<div class="audience"></div>' + '<div class="sides left_side">' + '<div class="curtain"></div>' + '<div class="lights"></div>' + '</div>' + '<div class="sides right_side">' + '<div class="curtain"></div>' + '<div class="lights"></div>' + '</div>' + '</div>' + '<div id="cinema-canvas">' + '<div class="cinema_start">' + '<p class="cnm_start_head">' + 'Смотреть ролик' + '</p>' + '<div class="cnm_start_playbutton clickable"></div>' + '<p class="cnm_start_foot">' + 'Посмотри ролик и получи награду.' + '<br /><span class="cnm_videolimiter">' + s(ngettext('Ты можешь это сделать %1 раз.', new Array('Ты можешь это сделать %1 раз.', 'Ты можешь это сделать %1 раза.', 'Ты можешь это сделать %1 раз.'), videoLimiter), videoLimiter) + '</span></p>' + '</div>' + '<div class="cinema_adblocker">' + '<p>' + 'Чтобы посмотреть ролик, защита от рекламы должна быть отключена.' + '</p>' + '<p>' + 'Если у тебя нет защиты от рекламы, значит сейчас нет роликов для просмотра.' + '</p>' + '</div>' + '<div class="cinema_rewardchoose">' + '<p class="cnm_rewards_head">' + 'Выбери награду' + '</p>' + '<div class="cnm_rewards_content">' + '<div class="inlineblock clickable cnm_reward cnm_reward_health" title="' + s(ngettext('%1 очко здоровья', new Array('%1 очко здоровья', '%1 очка здоровья', '%1 очков здоровья'), healthReward), healthReward) + '" data-reward="health" />' + '<div class="inlineblock clickable cnm_reward cnm_reward_energy" title="' + s(ngettext('%1 очко энергии', new Array('%1 очко энергии', '%1 очка энергии', '%1 очков энергии'), reward), reward) + '" data-reward="energy" />' + '<div class="inlineblock clickable cnm_reward cnm_reward_motivation" title="' + s(ngettext('%1 очко мотивации', new Array('%1 очко мотивации', '%1 очка мотивации', '%1 очков мотивации'), reward), reward) + '" data-reward="motivation" />' + '</div>' + '<p class="cnm_rewards_foot">' + 'Посмотри ролик и получи награду.' + '<br /><span class="cnm_videolimiter">' + s(ngettext('Ты можешь это сделать %1 раз.', new Array('Ты можешь это сделать %1 раз.', 'Ты можешь это сделать %1 раза.', 'Ты можешь это сделать %1 раз.'), videoLimiter), videoLimiter) + '</span>' + '</p></div>' + '<div class="cinema_novideo">' + '<div class="cnm_theend"><img src="https://westrus.innogamescdn.com/images/window/cinema/theend.jpg" /><br />' + '<p class="cnm_theend_foot">' + 'Больше нет роликов для просмотра.' + '</p>' + '<p class="cnm_theend_foot tryagain">' + 'Попробуй завтра' + '</p>' + '</div>' + '</div>' + '</div>' + '</div>');
        $('div.cinema_start', maindiv).click(playVideoClicked);
        $('div.cinema_rewardchoose', maindiv).click(chooseRewardClicked);
        $('div.cinema', CinemaWindow.DOM).empty().append(maindiv);
    };
    var playVideoClicked = function (ev) {
        if (!$(ev.target).hasClass('clickable'))
            return false;
        CinemaWindow.controller('video');
        return true;
    };
    var chooseRewardClicked = function (ev) {
        if (!$(ev.target).hasClass('clickable'))
            return false;
        CinemaWindow.controller('start');
        var reward = $(ev.target).data('reward');
        Ajax.remoteCall('building_cinema', 'videoRewardChosen', {
            town_id: CinemaWindow.townId,
            vrid: provider.vrid,
            hash: provider.hash,
            reward: reward
        }, function (resp) {
            if (resp.error)return new MessageError(resp.msg).show();
            for (var k in resp.reward_value) {
                if (k === 'energy')
                    Character.setEnergy(parseInt(resp.reward_value[k])); else if (k === 'duel_motivation')
                    Character.setDuelMotivation(resp.reward_value[k]); else if (k === 'npcduel_motivation')
                    if (resp.reward_value[k] != 0)
                        Character.setNPCDuelMotivation(resp.reward_value[k]); else if (k === 'health')
                        Character.setHealth(parseInt(resp.reward_value[k]));
            }
            provider.rewardClaimed(resp);
            videoLimiter--;
            CinemaWindow.controller('start');
            return new MessageSuccess(resp.msg).show();
        });
        return true;
    };
    var lockWindow = function () {
        CinemaWindow.window.addClass('nocloseall');
        CinemaWindow.window.addClass('nominimize');
        CinemaWindow.window.addClass('noreload');
        CinemaWindow.window.dontCloseAll = true;
    };
    var unlockWindow = function () {
        CinemaWindow.window.removeClass('nocloseall');
        CinemaWindow.window.removeClass('nominimize');
        CinemaWindow.window.removeClass('noreload');
        CinemaWindow.window.dontCloseAll = false;
    };
    west.define('west.cinema.Provider', null, {
        showStart: function () {
            $('span.cnm_videolimiter', CinemaWindow.DOM).text(s(ngettext('Остался %1 просмотр.', new Array('Остался %1 просмотр.', 'Остались %1 просмотра.', 'Осталось %1 просмотров.'), videoLimiter), videoLimiter));
            $('div.cinema_start', CinemaWindow.DOM).css('display', 'block');
        }, showEmptyCanvas: function () {
            $('div.cinema_novideo', CinemaWindow.DOM).css('display', 'block');
        }, showRewards: function () {
            console.log('show rewards');
            $('span.cnm_videolimiter', CinemaWindow.DOM).text(s(ngettext('Остался %1 просмотр.', new Array('Остался %1 просмотр.', 'Остались %1 просмотра.', 'Осталось %1 просмотров.'), videoLimiter), videoLimiter));
            $('div.cinema_rewardchoose', CinemaWindow.DOM).css('display', 'block');
        }, addEvent: function (o, t, f) {
            if (o.addEventListener) {
                o.addEventListener(t, f, false);
            } else if (o.attachEvent) {
                o.attachEvent('on' + t, f);
            }
        }
    });
    west.define('west.cinema.GANProvider', west.cinema.Provider, {
        init: function (data) {
            this.videoUri = data.video_uri;
            this.hash = null;
            var that = this;
            this.addEvent(window, 'message', function (e) {
                that.onMessage(e);
            });
        }, onMessage: function (e) {
            if (!wman.getById('cinema'))return false;
            if (!!~e.origin.indexOf('//media.gan-online.com')) {
                var m = e.data;
                if (m.indexOf("videoEnds:") == 0) {
                    var cm = m.replace('videoEnds:', '');
                    var sep = cm.indexOf(':');
                    this.vrid = cm.substring(0, sep);
                    this.hash = cm.substring(sep + 1);
                    CinemaWindow.controller('rewards');
                }
                else if (m === 'noVideo') {
                    videoLimiter = 0;
                    CinemaWindow.controller('noVideo');
                }
                else {
                }
            }
        }, initView: function () {
            $('<iframe class="cinema-video" src="" frameborder="0" scrolling="no" width="640" height="380"></iframe>').appendTo('#cinema-canvas');
        }, startVideo: function () {
            lockWindow();
            $('iframe.cinema-video', CinemaWindow.DOM).attr('src', this.getVideoUri()).css({
                display: 'block',
                height: '380px',
                width: '640px'
            });
            CinemaWindow.window.setSize(640 + 116, 380 + 150).center();
        }, getVideoUri: function () {
            var uri = this.videoUri + '&cb=' + parseInt(Math.random() * 10e10);
            return uri;
        }, rewardClaimed: function (resp) {
            this.videoUri = resp.video_uri;
        }
    });
    west.define('west.cinema.MatomyProvider', west.cinema.Provider, {
        init: function (data) {
            this.updateData_(data);
            var that = this;
            this.addEvent(window, 'message', function (e) {
                that.onMessage(e);
            });
        }, updateData_: function (data) {
            this.vrid = data.video_id;
            this.hash = data.hash;
            this.video_url = data.video_url;
            this.offer = data.offer;
            this.wasUnavailable = false;
            if (this.video_url === false) {
                videoLimiter = 0;
            }
            if (data.height && data.width) {
                this.height = Math.max(~~data.height, 290);
                this.width = Math.max(~~data.width, 530);
                CinemaWindow.window.setSize(this.width + 116, this.height + 150).center();
                $('iframe.cinema-video', CinemaWindow.DOM).css({height: this.height + 'px', width: this.width + 'px'});
            }
        }, onMessage: function (e) {
            if (provider !== this)
                return;
            if (!wman.getById('cinema'))return false;
            if (true) {
                var msg = e.data;
                if (msg === 'matomy_offer_completed' || msg === 'mat_video_ended') {
                    CinemaWindow.controller('rewards');
                } else if (msg === 'matomy_offer_not_valid' || msg === 'video_not_allowed' || msg === 'error') {
                    if (!this.wasUnavailable) {
                        this.wasUnavailable = true;
                        $('iframe.cinema-video').attr('src', '').hide();
                        var that = this;
                        Ajax.remoteCall('building_cinema', 'nextOffer', {
                            town_id: CinemaWindow.townId,
                            offer: this.offer + 1
                        }, function (resp) {
                            if (resp.error) {
                                CinemaWindow.controller('noVideo');
                            } else {
                                that.updateData_(resp);
                                CinemaWindow.controller('video');
                            }
                        });
                    }
                } else if (msg && window._showIframeMessagesPlease) {
                    console.log('iframe message: ', msg);
                }
            }
        }, startVideo: function () {
            lockWindow();
            $('iframe.cinema-video, div.cinema_adblocker', CinemaWindow.DOM).attr('src', this.video_url).show();
        }, initView: function () {
            $('<iframe class="cinema-video" src="" frameborder="0" scrolling="no"></iframe>').attr('height', this.height).attr('width', this.width).css({
                height: this.height + 'px',
                width: this.width + 'px'
            }).appendTo('#cinema-canvas');
            $('.cnm_theend_foot.tryagain', CinemaWindow.DOM).text('Попробуй позже.');
        }, rewardClaimed: function (data) {
            this.updateData_(data);
        }
    });
})(jQuery);

(function (global) {
    'use strict';
    var Portrait = west.createClass(west.gui.Component, {
        init: function (player, btn) {
            this.divMain = $(s(''
                + '<div class="container inlineblock">'
                + '  <div class="avatar">%2</div>'
                + '  <div class="portrait">'
                + '    <div class="name">%1</div>'
                + '    <div class="level">%3</div>'
                + '    <div class="bg"></div>'
                + '    <div class="cclass %4"></div>'
                + '    <div class="pin"></div>'
                + '  </div>'
                + '</div>', player.name, player.avatar, player.level, player.cclass || 'greenhorn')).addMousePopup("Кликни, чтобы открыть профиль игрока".escapeHTML());
            $('.avatar, .portrait', this.divMain).on('click', function (e) {
                PlayerProfileWindow.open(player.id);
            });
            if (btn) {
                this.divMain.append(btn.getMainDiv());
            }
        }
    });
    var City = west.createClass(west.gui.Component, {
        init: function (city, btn) {
            if (!city.name) {
                city.name = '<div class="shorten town_name" title="' + city.name.escapeHTML() + '">' + city.name + '</div>';
            }
            this.divMain = $('<div class="city inlineblock" />').append(new MousePopup(Map.PopupHandler.getTownPopup(city)).getXHTML()).append('<div class="population">' + city.slots + '</div>').append($('<div class="pin" />'));
            $('.popup_content', this.divMain).on('click', function () {
                TownWindow.open(city.x, city.y);
            }).addMousePopup("Кликни, чтобы открыть обзор города".escapeHTML());
            $('.population', this.divMain).addMousePopup("Свободные места в этом городе".escapeHTML());
            if (btn) {
                this.divMain.append(btn.getMainDiv());
            }
        }
    });
    wman.registerReloadHandler(/^blackboard/, function () {
        west.window.Blackboard.open();
    });
    west.namespace('west.window.Blackboard', {
        getBullets: function () {
            return '<ul class="inlineblock">'
                + '<li>' + "Поединки с игроками" + '</li>'
                + '<li>' + "Форум города и чат" + '</li>'
                + '<li>' + "Строительство" + '</li>'
                + '</ul>'
                + '<ul class="inlineblock">'
                + '<li>' + "Бесплатный отель" + '</li>'
                + '<li>' + "Дешёвый товар в магазинах" + '</li>'
                + '<li>' + "И многое другое…" + '</li>'
                + '</ul>';
        }, canInvite: function () {
            return Character.townRights && Character.townRights >= 3;
        }, canJoin: function () {
            return !this.hasTown();
        }, hasTown: function () {
            return Character.homeTown.town_id;
        }, toggleOpen: function (tab) {
            var wnd = wman.toggleOpen("blackboard");
            if (wnd && wnd.status === 'open') {
                this.open(tab, wnd.win);
            }
        }, open: function (tab, win_open) {
            this.window_ = (win_open || wman.open('blackboard', null)).setTitle('Доска').setMiniTitle('Доска').addTab('Ищу игроков', 'lfp', this.cities.show.bind(this.cities)).addTab('Ищу город', 'lfc', this.players.show.bind(this.players)).addTab('Приглашения', 'invitations', this.invite.show.bind(this.invite));
            this.players.init(this);
            this.cities.init(this);
            this.invite.setup(this.window_);
            this.get(tab);
        }, get: function (tab) {
            tab = (typeof(tab) != 'string' || !this[tab]) ? 'cities' : tab;
            Ajax.remoteCallMode('blackboard', 'index', {}, function (resp) {
                this.cities.cities_ = resp.towns;
                this.cities.isSearching = resp.town_hiring_status;
                this.players.players_ = resp.players;
                this.players.isSearching = resp.char_search_status;
                this[tab].show();
            }.bind(this), this.window_);
        }, getCities: function () {
            Ajax.get('blackboard', 'getRandomCities', {}, function (resp) {
                this.cities.cities_ = resp.towns;
                this.cities.show();
            }.bind(this), this.window_);
        }, getPlayers: function (level, cclass) {
            Ajax.get('blackboard', 'getRandomPlayers', {level: level, cclass: cclass}, function (resp) {
                this.players.players_ = resp.players;
                this.players.show();
            }.bind(this), this.window_);
        }, sendHiring: function (status) {
            Ajax.remoteCall('blackboard', 'set_hiring', {hiring: status}, function (resp) {
                if (resp.error)return new MessageError(resp.message).show();
                this.cities.cities_ = resp.towns;
                this.cities.isSearching = status;
                this.cities.show();
            }.bind(this), this.window_);
        }, sendSearching: function (status, level, cclass) {
            var params = {searching: status, level: level, cclass: cclass};
            Ajax.remoteCall('blackboard', 'set_searching', params, function (resp) {
                if (resp.error)return new MessageError(resp.message).show();
                this.players.players_ = resp.players;
                this.players.isSearching = status;
                this.players.show();
            }.bind(this), this.window_);
        }, sendJoin: function (townId) {
            Ajax.remoteCall('blackboard', 'join_town', {townId: townId}, function (resp) {
                if (resp.error)return new MessageError(resp.message).show();
                this.window_.closeTab('invitations');
                this.get();
                return new MessageSuccess(resp.msg).show();
            }.bind(this), this.window_);
        }, sendInvite: function (playerId) {
            Ajax.remoteCall('blackboard', 'invite_player', {playerId: playerId}, function (resp) {
                if (resp.error)return new MessageError(resp.message).show();
                this.get();
                return new MessageSuccess(resp.msg).show();
            }.bind(this), this.window_);
        }, players: {
            players_: [], isSearching: false, filter: {level: 0, cclass: ''}, init: function (parent) {
                this.parent = parent;
            }, show: function () {
                this.parent.window_.clearContentPane().setTitle('Ищу город').activateTab('lfc');
                var divMain = $('<div>'
                    + '<div class="description">'
                    + '<p>' + "Повесь свой портрет на доске объявлений, чтобы получать приглашения в город.<br />\nПрисоединись к городу и найди друзей." + '</p>'
                    + (this.parent.getBullets())
                    + '</div>'
                    + '<div class="actions"></div>'
                    + '<div class="players"></div></div>');
                this.buildActions_($('.actions', divMain));
                this.players_.forEach(function (player) {
                    var btn = (this.parent.canInvite()) ? new west.gui.Button('Пригласить', this.onClickInvite, this, player.id, "Пригласи этого игрока к себе в город".escapeHTML()) : undefined;
                    $('.players', divMain).append(new Portrait(player, btn).getMainDiv());
                }, this);
                this.parent.window_.appendToContentPane(divMain);
            }, buildActions_: function (actions) {
                if (this.parent.hasTown()) {
                    actions.append(this.buildLevelFilter_()).append(this.buildClassFilter_()).append(new west.gui.Button('Другие игроки', this.onClickRandomPlayers, this, undefined, "Отсеять и показать ещё игроков, которые ищут город.".escapeHTML()).getMainDiv());
                } else {
                    this.btnEnlist = new west.gui.Button('Разместить на доске', this.onClickEnlist, this, undefined, "Разместить портрет на доске, чтобы получить приглашения".escapeHTML());
                    this.btnOutlist = new west.gui.Button('Убрать с доски', this.onClickOutlist, this, undefined, "Убрать портрет с доски".escapeHTML());
                    if (!this.parent.canJoin()) {
                        this.btnOutlist.disable();
                        this.btnEnlist.disable();
                    }
                    (this.isSearching) ? $(this.btnEnlist.getMainDiv()).css('display', 'none') : $(this.btnOutlist.getMainDiv()).css('display', 'none');
                    actions.append(this.btnEnlist.getMainDiv(), this.btnOutlist.getMainDiv());
                }
            }, buildLevelFilter_: function () {
                var cb = new west.gui.Combobox();
                cb.addItem(0, 'Выбери диапазон уровня');
                cb.addItem(1, s('> %1-го уровня', 1));
                for (var i = 10; i <= 110; i += 10) {
                    cb.addItem(i, s('> %1-го уровня', i));
                }
                cb.addItem(120, s('= %1-й уровень', 120));
                cb.addListener(function (val) {
                    this.filter.level = val;
                }, this).select(this.filter.level);
                return cb.getMainDiv();
            }, buildClassFilter_: function () {
                var cb = new west.gui.Combobox();
                cb.addItem('', 'Выбери тип персонажа');
                cb.addItem('greenhorn', "<img src='https://westrus.innogamescdn.com/images/class_choose/class_greenhorn.png' style='margin-right: 5px;' width='20px'  />" + 'Чечако');
                cb.addItem('duelist', "<img src='https://westrus.innogamescdn.com/images/class_choose/class_duelist.png' style='margin-right: 5px;' width='20px'  />" + 'Дуэлянт');
                cb.addItem('adventurer', "<img src='https://westrus.innogamescdn.com/images/class_choose/class_adventurer.png' style='margin-right: 5px;' width='20px'  />" + 'Авантюрист');
                cb.addItem('worker', "<img src='https://westrus.innogamescdn.com/images/class_choose/class_worker.png' style='margin-right: 5px;' width='20px'  />" + 'Трудяга');
                cb.addItem('soldier', "<img src='https://westrus.innogamescdn.com/images/class_choose/class_soldier.png' style='margin-right: 5px;' width='20px'  />" + 'Солдат');
                cb.addListener(function (val) {
                    this.filter.cclass = val;
                }, this).select(this.filter.cclass);
                return cb.getMainDiv();
            }, onClickEnlist: function (btn) {
                this.parent.sendSearching(true, this.filter.level, this.filter.cclass);
            }, onClickOutlist: function (btn) {
                this.parent.sendSearching(false, this.filter.level, this.filter.cclass);
            }, onClickInvite: function (btn, playerId) {
                this.parent.sendInvite(playerId);
            }, onClickRandomPlayers: function (btn) {
                this.parent.getPlayers(this.filter.level, this.filter.cclass);
            }
        }, cities: {
            cities_: [], isSearching: false, init: function (parent) {
                this.parent = parent;
            }, show: function () {
                this.parent.window_.clearContentPane().setTitle('Ищу игроков').activateTab('lfp');
                var divMain = $('<div>'
                    + '<div class="description">' +
                    ((this.parent.canJoin()) ? '<p>' + "Все эти города ищут новых жителей.<br />\nВыбери одни из них, чтобы присоединиться к другим игрокам." + '</p>' : '<p>' + "Размести свой город на доске, если ты ищешь новых жителей.<br />\nИгроки будут автоматически зачислены в город." + '</p>')
                    + this.parent.getBullets()
                    + '</div>'
                    + '<div class="actions"></div>'
                    + '<div class="cities"></div></div>');
                this.buildActions_($('.actions', divMain));
                this.cities_.forEach(function (city) {
                    var btn = (this.parent.canJoin()) ? new west.gui.Button('Вступить', this.onClickJoin, this, city.id, "Присоединись к городу".escapeHTML()) : undefined;
                    $('.cities', divMain).append(new City(city, btn).getMainDiv());
                }, this);
                this.parent.window_.appendToContentPane(divMain);
            }, buildActions_: function (actions) {
                if (this.parent.hasTown()) {
                    this.btnEnlist = new west.gui.Button('Разместить на доске', this.onClickEnlist, this, undefined, "Разместить свой город на доске, чтобы привлечь новых жителей.".escapeHTML());
                    this.btnOutlist = new west.gui.Button('Убрать с доски', this.onClickOutlist, this, undefined, "Убрать город с доски".escapeHTML());
                    (this.isSearching) ? $(this.btnEnlist.getMainDiv()).css('display', 'none') : $(this.btnOutlist.getMainDiv()).css('display', 'none');
                    if (!this.parent.canInvite()) {
                        this.btnOutlist.disable();
                        this.btnEnlist.disable();
                    }
                    actions.append(this.btnEnlist.getMainDiv(), this.btnOutlist.getMainDiv());
                } else {
                    this.btnRandomCities = new west.gui.Button('Другие города', this.onClickRandomCities, this, undefined, "Посмотреть другие города, которые ищут жителей".escapeHTML());
                    actions.append(this.btnRandomCities.getMainDiv());
                }
            }, onClickEnlist: function (btn) {
                this.parent.sendHiring(true);
            }, onClickOutlist: function (btn) {
                this.parent.sendHiring(false);
            }, onClickRandomCities: function (btn) {
                this.parent.getCities();
            }, onClickJoin: function (btn, townId) {
                this.parent.sendJoin(townId);
            }
        }, invite: {
            setup: function (parent) {
                this.window = parent;
            }, show: function () {
                this.init();
                this.initData();
            }, init: function () {
                this.window.clearContentPane().activateTab('invitations');
                var maindiv = $('<div class="town-invite town-invite-content"></div>');
                this.TableDeleteButton = new west.gui.Button("Отклонить всё", this.reject_all.bind(this)).setWidth(162);
                this.Table = new west.gui.Table().setId('town_invite_tb').createEmptyMessage('У тебя нет приглашений в город.').appendTo(maindiv).addColumn("invite_accept").addColumn("invite_town").addColumn("invite_by_player").addColumn("invite_when").addColumn("invite_delete").appendToThCell("head", "invite_accept", 'Принять приглашение', "&nbsp;").appendToThCell("head", "invite_town", 'Город', 'Город').appendToThCell("head", "invite_by_player", 'Игрок, выславший приглашение.', 'От').appendToThCell("head", "invite_when", 'Дата приглашения', 'Дата').appendToThCell("head", "invite_delete", 'Отклонить приглашение', "&nbsp;").appendToFooter('invite_accept', this.TableDeleteButton.getMainDiv());
                this.window.appendToContentPane(maindiv);
            }, initData: function () {
                Ajax.remoteCallMode('invitations', 'get_data', {}, function (json) {
                    if (json.error)new MessageError(json.error).show();
                    this.updateTable(json.invitations);
                }.bind(this), this.window);
            }, updateTable: function (data) {
                this.Table.clearBody();
                this.TableDeleteButton.enable();
                if (data.length == 0) {
                    this.window.$("div.no-content").show();
                    this.TableDeleteButton.disable();
                }
                var tmpCells = {};
                for (var i = 0; i < data.length; i++) {
                    var rd = data[i];
                    var town = '<a href="javascript:Map.center(' + rd.x + ',' + rd.y + ');" title="' + 'Показать на карте' + '"><img alt="" src="https://westrus.innogamescdn.com/images/icons/center.png"></a>';
                    town += '<a title="' + 'Посмотреть город' + '" href=\'javascript:TownWindow.open(' + rd.x + ',' + rd.y + ');\' > ' + rd.town_name + '</a>';
                    var name_link = '<a href="javascript:void(PlayerProfileWindow.open(' + rd.from_player_id + '));">' + rd.from_name + '</a>';
                    tmpCells['invite_accept'] = '<img id="accept_' + rd.town_id + '" class="pointer" alt="" src="https://westrus.innogamescdn.com/images/icons/friends.png" title="' + 'Принять приглашение' + '" style="width: 16px; height: 16px;">';
                    tmpCells['invite_town'] = town;
                    tmpCells['invite_by_player'] = name_link;
                    tmpCells['invite_when'] = rd.invitation_date;
                    tmpCells['invite_delete'] = '<img id="deny_' + rd.town_id + '" class="pointer" alt="löschen" src="https://westrus.innogamescdn.com/images/icons/delete.png" title="' + 'Отклонить приглашение' + '" style="width: 16px; height: 16px;">';
                    this.Table.buildRow('invite_town_' + rd.town_id, tmpCells);
                    $('#accept_' + rd.town_id).click(function (id) {
                        return function () {
                            this.accept(id);
                        }.bind(this);
                    }.bind(this)(rd.town_id));
                    $('#deny_' + rd.town_id).click(function (id) {
                        return function () {
                            this.reject(id);
                        }.bind(this);
                    }.bind(this)(rd.town_id));
                }
            }, accept: function (id) {
                Ajax.remoteCall('invitations', 'accept_invitation', {town_id: id}, function (data) {
                    if (data.error) {
                        if (data.showpremhint) {
                            Premium.confirmUse("jointown", "Время не ждёт", data.msg + "<br/><br/>" + "За несколько самородков ты сможешь вселиться в город немедленно. Ты хочешь этого?", undefined, undefined, function () {
                                this.accept(id);
                            }.bind(this));
                        } else {
                            new MessageError(data.msg).show();
                        }
                    }
                    else {
                        new MessageSuccess("Добро пожаловать!").show();
                        Character.setHomeTown(data.town.town_id, data.town.x, data.town.y, '');
                        this.updateTable(data.data);
                    }
                }.bind(this), this.window);
            }, reject: function (id) {
                Ajax.remoteCall('invitations', 'reject_invitation', {town_id: id}, function (data) {
                    this.updateTable(data.invitations);
                }.bind(this), this.window);
            }, reject_all: function () {
                Ajax.remoteCall('invitations', 'reject_all_invitation', {}, function (data) {
                    this.updateTable(data.invitations);
                }.bind(this), this.window);
            }
        }
    });
})(window);

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.multiplayer', class_parent = 'west.game.window.model', class_object = {
        _class_path: class_path,
        l10n: {
            window: {'title': 'Многопользовательские сражения', 'mini_title': 'Многопользовательские сражения'},
            description: 'Выбери одну из двух опций: перестрелки или битвы за форт',
            blocked: {'adventures': 'Вскоре…'},
            buttons: {'adventures': 'Перестрелки', 'fort': 'Битвы за форт'}
        },
        isAdventuresUnlocked: function () {
            return Game.mpi.enabled;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.multiplayer', class_parent = 'west.game.window.view', class_object = {
        _class_path: class_path,
        renderContent: function () {
            var $root = this.getRoot(), model = this.getModel(), l10n = model.getL10n();
            $root.append($('<div data-id="adventures" class="area adventures"></div>').append((model.isAdventuresUnlocked() ? new west.gui.Button(l10n.buttons.adventures).getMainDiv() : $('<div class="lock_feature_shadow_bg">').append($('<img class="lock_feature" src="https://westrus.innogamescdn.com/images/tutorial/lock.png" />'), $('<span class="lock_feature_text" />').text(l10n.blocked.adventures)))), $('<div data-id="fort" class="area fort"></div>').append((west.Feature.isUnlocked('fortoverview') ? new west.gui.Button(l10n.buttons.fort).getMainDiv() : $('<div class="lock_feature_shadow_bg">').append($('<img class="lock_feature" src="https://westrus.innogamescdn.com/images/tutorial/lock.png" />'), $('<span class="lock_feature_text" />').text(west.Feature.getInfo('fortoverview'))))), $('<div class="description">' + l10n.description + '</div>'));
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var single_instance = true, class_name = 'controller', class_path = 'west.window.multiplayer', class_parent = 'west.game.window.controller', class_object = {
        _class_id: 'multiplayer',
        _namespace: class_path,
        _class_path: class_path,
        _window_id: 'win_multiplayer',
        _window_class: 'multiplayer_window',
        prepareWindow: function () {
            this.callParent();
            var wnd = this.getWindow(), model = this.getModel(), view = this.getView(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title).setMiniTitle(l10n.window.mini_title).setSize(750, 490).addClass('noreload').center();
            this.addEventListeners();
            return this;
        },
        addEventListeners: function () {
            this.removeEventListeners();
            this.getRoot().on('click', '.area', {that: this}, this.handleClick);
        },
        removeEventListeners: function () {
            var $root = this.getRoot();
            $root.off('.multiplayer');
            return this;
        },
        handleClick: function (e) {
            var that = e.data.that, $el = $(this);
            if ('adventures' === $el.data('id')) {
                if (that.getModel().isAdventuresUnlocked()) {
                    MultiplayerWindow.open();
                    that.close();
                }
            } else if (west.Feature.isUnlocked('fortoverview')) {
                FortOverviewWindow.open();
                that.close();
            }
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
    if (single_instance) {
        west.window.multiplayer = new (west.get(class_path + '.' + class_name));
    }
});

window.MultiplayerWindow = {};
wman.registerReloadHandler(/^multiplayer/, function () {
    MultiplayerWindow.refresh();
});
EventHandler.listen('mpi_invitation', function (fromPlayer, code) {
    new west.gui.Dialog("Приглашение на перестрелку", $("<div style='text-align: center;' />").append('<br />' + s("%1 приглашает тебя принять участие в сражении. Присоединишься?", fromPlayer)), west.gui.Dialog.SYS_OK).addButton('Вперёд!', function () {
        var onMpiReady = function () {
            EventHandler.unlisten('mpi_ready', onMpiReady);
            MultiplayerWindow.useCode(code, function (err) {
                if (err)
                    new MessageError(err).show();
            });
        };
        if (!wman.isWindowCreated('multiplayer')) {
            if (!EventHandler.listenerExists('mpi_ready', onMpiReady))
                EventHandler.listen('mpi_ready', onMpiReady);
            MultiplayerWindow.open();
        } else {
            MultiplayerWindow.useCode(code, function (err) {
                if (err)
                    new MessageError(err).show();
            });
        }
    }).addButton('Ещё не время.').show();
});
EventHandler.listen('mpi_affront', function (entityId, description, response) {
    if (MultiplayerWindow.lobbyChat_) {
        MultiplayerWindow.emit('affront', entityId, description, response);
    }
});
EventHandler.listen('mpi_invite', function (playerName) {
    if (!wman.isWindowCreated('multiplayer')) {
        var onMpiReady = function () {
            EventHandler.unlisten('mpi_ready', onMpiReady);
            EventHandler.signal('mpi_invite', [playerName]);
        };
        if (!EventHandler.listenerExists('mpi_ready', onMpiReady)) {
            EventHandler.listen('mpi_ready', onMpiReady);
            MultiplayerWindow.open();
        }
        return;
    } else {
        MultiplayerWindow.inviteToGroupOrGame(playerName, function (err) {
            if (err)
                new MessageError(err).show();
        });
    }
});
MultiplayerWindow.open = function () {
    if (LinearQuestHandler.hasTutorialQuest()) {
        return new MessageError('Сначала заверши вводные квесты').show();
    }
    if (!window.io) {
        return new MessageError("Соединение не удалось, попробуй позже").show();
    }
    var windowWasOpen = wman.isWindowCreated('multiplayer');
    this.window = wman.open("multiplayer").setMiniTitle('Перестрелки').addEventListener(TWE('WINDOW_CLOSE'), this.onClose_, this);
    EventHandler.listen('wear_changed', this.onWearChange_, this, {boundto: this.window});
    if (window.Notification !== undefined && Notification.requestPermission !== undefined && Notification.permission === 'default') {
        Notification.requestPermission();
    }
    this.DOM = this.window.getContentPane();
    this.inLobby = false;
    this.inSplashScreen = true;
    this.inGroupScreen = false;
    this.maps = {};
    this.matchmaking = null;
    this.group = null;
    this.wantsToLeave = false;
    this.maxReconnectionAttempts = 5;
    this.saveId = 0;
    this.screens = {lobby: new west.window.mpi.multiplayer.Lobby(this)};
    this.demo = {name: 'noname', password: 'nopassword', map: {name: 'fpp', settings: {max: 6, min: 6}}};
    if (this.gameSocket) {
        this.status();
    } else {
        this.connect();
    }
    if (!windowWasOpen) {
        this.track('open');
    }
};
MultiplayerWindow.track = function () {
    if (!this.gameSocket)
        return;
    this.emit('track', Array.prototype.slice.call(arguments, 0));
};
MultiplayerWindow.onWearChange_ = function (change) {
    var item = Wear.get('left_arm');
    if (item) {
        this.players[this.ego.entity_id].entity_data.weapon = item.obj.item_id;
    } else {
        delete this.players[this.ego.entity_id].entity_data.weapon;
    }
    this.save();
};
MultiplayerWindow.onGameCreated = function (ownEntityId, game, abilities_available, abilities_default, map) {
    var ownEntity;
    game.players.some(function (player) {
        if (player.entity_id === ownEntityId) {
            ownEntity = player;
            return true;
        }
    });
    this.setGameData_({
        game: game,
        entities: game.players,
        entity: ownEntity,
        abilities: mpi_deep_translate(abilities_available),
        abilities_default: mpi_deep_translate(abilities_default),
        map: mpi_deep_translate(map)
    });
    this.refresh();
};
MultiplayerWindow.isCustomGameHost = function () {
    if (!wman.isWindowCreated('multiplayer'))
        return false; else if (!this.inLobby)
        return false; else if (!this.ego || !this.ego.host)
        return false;
    return true;
}
MultiplayerWindow.setSettings = function (settings) {
    settings = settings || {};
    this.customsEnabled = settings.custom || false;
    this.maps = settings.maps;
    this.groupsEnabled = settings.allow_groups || false;
    this.ownEntityId = settings.entityId;
    this.leaverBustEnabled = settings.leaver_bust || false;
};
MultiplayerWindow.onStatus = function (err, settings, data) {
    data = data || {};
    mpi_deep_translate(settings);
    mpi_deep_translate(data);
    this.setSettings(settings);
    MultiplayerWindow.setGroupData_(data.group, data.game);
    MultiplayerWindow.setMatchmakingData_(data.matchmaking || {});
    if (data.game) {
        this.setGameData_(data);
        if (data.battleHost !== undefined) {
            this.inLobby = false;
            this.window.destroy();
            if (data.battleHost === false) {
                new MessageError("Соединение не удалось, попробуй позже").show();
            } else {
                var socket = this.gameSocket;
                delete this.gameSocket;
                socket.io.disconnect();
                west.mission.BattleserverSocket.init(data.battleHost, data.entity.entity_id, data.entity.hash);
            }
            return;
        }
    } else if (!data.group && !data.matchmaking) {
        this.inSplashScreen = true;
    }
    EventHandler.signal('mpi_ready');
    this.refresh();
};
MultiplayerWindow.connect = function () {
    if (this.gameSocket)return;
    var rndParam = getRandomString(10) + '=' + getRandomString(5);
    this.reconnecting = false;
    this.gameSocket = io.connect('', {
        reconnection: true,
        forceNew: true,
        reconnectionAttempts: this.maxReconnectionAttempts,
        query: 'hash=' + Player.h + '&player_id=' + Character.playerId + '&' + rndParam
    });
    this.gameSocket.on('reconnecting', function (attempt) {
        this.unsetGameData_();
        this.inGroupScreen = false;
        this.inSplashScreen = false;
        this.reconnecting = true;
        this.connectionAttempt = attempt;
        this.refresh();
    }.bind(this));
    this.gameSocket.on('reconnect', function () {
        this.reconnecting = false;
        this.refresh();
    }.bind(this));
    this.gameSocket.on('reconnect_failed', function () {
        this.error('Соединение с сервером не удалось, попробуй позже.');
    }.bind(this));
    this.gameSocket.on('disconnect', function () {
        if (this.gameSocket && this.gameSocket.io.skipReconnect) {
            this.error('Соединение с сервером было сброшено, попробуй позже.');
        }
    }.bind(this));
    this.gameSocket.on('byebye', this.error.bind(this));
    this.gameSocket.on('error', function (err) {
        if (err instanceof Error && err.description instanceof Error) {
            throw err.description;
        } else {
            this.error(mpi_str(err));
        }
    }.bind(this));
    var handleMsg = function (command, response) {
        this.gameSocket.on(command, function () {
            try {
                response.apply(null, arguments);
            } catch (e) {
                if (this.gameSocket)
                    this.gameSocket.emit('jserror', command, e.stack);
                throw e;
            }
        }.bind(this));
    }.bind(this);
    handleMsg('ping', function (response) {
        response();
    });
    handleMsg('group.updated', function (data) {
        MultiplayerWindow.setGroupData_(data);
        MultiplayerWindow.refresh();
    });
    handleMsg('group.msg', function (entityId, msg) {
        var player = this.group.players.filter(function (p) {
            return p.id == entityId;
        })[0];
        if (!this.groupChat_ || !player)return;
        this.groupChat_.addChatMessage(player.player.data.name, msg, Date.now());
    }.bind(this));
    handleMsg('game.joined', function (entity) {
        entity.entity_id = entity.id;
        delete entity.id;
        entity.team_id = entity.teamId;
        delete entity.teamId;
        entity.entity_data = entity.data;
        delete entity.data;
        this.players[entity.entity_id] = entity;
        this.game.player_count++;
        this.screens.lobby.updateJoin(entity);
        this.screens.lobby.updateReadyState(entity.entity_id, false);
        MultiplayerWindow.addSystemMsg_(s(gendertext('%1 присоединился.', '%1 присоединилась.'), this.players[entity.entity_id].entity_data.name));
        MultiplayerWindow.updateChat();
    }.bind(this));
    handleMsg('game.started', function (server, hash) {
        this.inLobby = false;
        var socket = this.gameSocket;
        delete this.gameSocket;
        socket.io.disconnect();
        this.window.destroy();
        if (this.game.is_custom) {
            MultiplayerWindow.notifyMatch('Игра началась!');
        }
        west.mission.BattleserverSocket.init(server, this.ego.entity_id, hash);
        this.hideLobbyChat_();
    }.bind(this));
    handleMsg('game.left', function (entityId) {
        if (entityId == this.ego.entity_id) {
            this.wantsToLeave = false;
            this.unsetGameData_();
            this.refresh();
        } else {
            MultiplayerWindow.addSystemMsg_(s(gendertext('%1 вышел.', '%1 вышла.'), this.players[entityId].entity_data.name));
            delete this.players[entityId];
            this.game.player_count--;
            this.screens.lobby.updateLeave(entityId);
            this.screens.lobby.updateReadyState();
            MultiplayerWindow.updateChat();
        }
    }.bind(this));
    handleMsg('game.removed', function (reason) {
        if (this.inLobby) {
            this.buildGameRemovedDlg_(reason);
            if (!$.isEmptyObject(this.group)) {
                this.inGroupScreen = true;
                this.group.joinTime = null;
            }
        }
        this.wantsToLeave = false;
        this.unsetGameData_();
        this.status();
    }.bind(this));
    handleMsg('game.switched', function (entityId, teamId, abilities) {
        this.players[entityId].team_id = teamId;
        if (this.ego.entity_id == entityId) {
            this.ego.team_id = teamId;
            this.status();
        }
        this.players[entityId].entity_data.abilities = abilities;
        this.screens.lobby.updateTeams(entityId, teamId);
        MultiplayerWindow.updateChat();
    }.bind(this));
    handleMsg('game.updated', function (entityId, entityData) {
        this.players[entityId].entity_data = entityData;
        if (this.ego.entity_id == entityId) {
            this.ego.data = entityData;
        }
        this.screens.lobby.updateEntity(this.players[entityId]);
        MultiplayerWindow.updateChat();
    }.bind(this));
    handleMsg('status', MultiplayerWindow.onStatus.bind(MultiplayerWindow));
    handleMsg('player.msg', function (msg) {
        MultiplayerWindow.addChatMsg_(msg);
    });
    handleMsg('player.disconnected', function (entityId) {
        MultiplayerWindow.addSystemMsg_(s(gendertext('%1 отключился', '%1 отключилась'), this.players[entityId].entity_data.name));
        MultiplayerWindow.updateChat();
    }.bind(this));
    handleMsg('player.reconnected', function (entityId) {
        MultiplayerWindow.addSystemMsg_(s(gendertext('%1 подключился снова', '%1 подключилась снова'), this.players[entityId].entity_data.name));
        MultiplayerWindow.updateChat();
    }.bind(this));
    handleMsg('game.readystate', function (entityId, state) {
        MultiplayerWindow.screens.lobby.updateReadyState(entityId, state);
    });
    handleMsg('game.matchmade', function () {
        MultiplayerWindow.showQueueDialog(null);
        MultiplayerWindow.setMatchmakingData_({});
        if (MultiplayerWindow.inGroupScreen) {
            MultiplayerWindow.inGroupScreen = false;
            MultiplayerWindow.hideGroupChat_();
        }
        MultiplayerWindow.onGameCreated.apply(MultiplayerWindow, arguments);
        if (!$(MultiplayerWindow.window.getMainDiv()).is(':visible')) {
            MultiplayerWindow.open();
        }
    });
    handleMsg('matchmaker.askReady', MultiplayerWindow.askReady.bind(MultiplayerWindow));
    handleMsg('matchmaker.askReady.updated', MultiplayerWindow.updateAskReady.bind(MultiplayerWindow));
    handleMsg('matchmaker.returnToQueue', function () {
        this.showQueueDialog(null);
        this.status();
    }.bind(this));
    this.refresh();
};
MultiplayerWindow.emit = function (command) {
    if (!this.gameSocket) {
        console.warn && console.warn('Game server socket not connected while trying to send ' + command);
    }
    var msg = [command];
    for (var i = 1; i < arguments.length; i++) {
        if (typeof(arguments[i]) !== 'function') {
            msg.push(arguments[i]);
        } else {
            msg.push((function (response, self) {
                return function () {
                    if (arguments.length > 0 && typeof(arguments[0]) === 'string')
                        arguments[0] = mpi_str(arguments[0]);
                    try {
                        response.apply(null, arguments);
                    } catch (e) {
                        if (self.gameSocket) {
                            self.gameSocket.emit('jserror', 'emit:' + command, e.stack);
                        }
                        throw e;
                    }
                };
            })(arguments[i], this));
        }
    }
    this.gameSocket.emit.apply(this.gameSocket, msg);
}
MultiplayerWindow.error = function (err) {
    this.inLobby = false;
    this.hideLobbyChat_();
    if (this.gameSocket) {
        var socket = this.gameSocket;
        delete this.gameSocket;
        socket.io.disconnect();
    }
    if (wman.isWindowCreated('multiplayer')) {
        new MessageError(s('Произошла ошибка: %1', err)).show();
    }
    this.window.destroy();
};
MultiplayerWindow.showQueueDialog = function (dialog) {
    if (this.queueDialog) {
        this.queueDialog.hide();
        delete this.queueDialog;
    }
    if (dialog) {
        this.queueDialog = dialog.show();
    }
};
MultiplayerWindow.askReady = function (readyId, timeout, gameSize) {
    var contents = $('<div class="mpi-ask-ready-popup">' + '<div class="mpi-ask-text">' + 'Сражение найдено! Ты готов к перестрелке?'.escapeHTML() + '</div>' + '<div class="mpi-ready-timeout"></div>' + '<div class="game_summary">' +
        s("Готовые игроки: %1 / %2", '<span class="ready_count">0</span>', '<span class="game_size">' + gameSize + '</span>') + '</div>' + '</div>');
    var diag = new west.gui.Dialog("Сражение настроено", contents, west.gui.Dialog.SYS_QUESTION).addButton(gendertext('Я готов!', 'Я готова!'), function (dialog, btn) {
        btn.disable();
        diag.setModal(false).setDraggable(true);
        this.emit('matchmaker.setReady', readyId, true);
        $('.mpi-ask-text', diag.getMainDiv()).text('Ожидание других игроков…');
        return false;
    }.bind(this)).setModal(true, false, true);
    var progress = new west.gui.Progressbar(Math.round(timeout / 1000), Math.round(timeout / 1000));
    progress.setValueTime();
    progress.setTextOnly(true);
    $('div.mpi-ready-timeout', diag.getMainDiv()).append(progress.getMainDiv());
    this.showQueueDialog(diag);
    MultiplayerWindow.notifyMatch('Игра найдена!');
    timeout = new Date().getTime() + parseInt(timeout);
    var onTimeout = function () {
        if (!diag.getMainDiv() || !$(diag.getMainDiv()).is(':visible')) {
            clearInterval(timerId);
            return;
        }
        var remaining = timeout - new Date().getTime();
        if (remaining < 0) {
            clearInterval(timerId);
            $('.mpi-ask-text', diag.getMainDiv()).text('Ожидание начала сражения…');
        } else {
            progress.setValue(Math.round(remaining / 1000));
        }
    }.bind(this);
    var timerId = setInterval(onTimeout, 100);
    onTimeout();
};
MultiplayerWindow.updateAskReady = function (readyId, readyCount, gameSize) {
    if (this.queueDialog) {
        $('.ready_count', this.queueDialog.getMainDiv()).text(readyCount);
    }
};
MultiplayerWindow.refresh = function () {
    this.window.clearContentPane();
    this.clearRefresh();
    this.window.hideLoader();
    if (!this.inSplashScreen || this.inLobby || this.inGroupScreen || (this.gameSocket && !this.gameSocket.connected)) {
        this.window.removeClass('splashscreen');
    }
    if (this.gameSocket && !this.gameSocket.connected) {
        this.window.setTitle('Поиск сражений');
        this.window.showLoader();
        this.window.appendToContentPane('<div class="connecting"></div>');
        this.buildConnectionScreen_();
    } else if (this.inGroupScreen) {
        if (!this.inGroupScreen)return;
        new west.window.mpi.multiplayer.Group(this).show();
    } else if (this.inLobby) {
        this.screens.lobby.show();
    } else if (this.inSplashScreen || !this.customsEnabled) {
        this.window.setTitle();
        this.window.appendToContentPane('<div class="actions"></div>');
        this.buildSplashScreen_();
    } else {
        this.window.setTitle();
        this.window.appendToContentPane('<div class="games"></div><div class="actions"></div>');
        this.emit('list', function (err, games) {
            if (err) {
                new UserMessage(s('Не удалось получить список сражений: %1', err)).show();
                return;
            }
            this.games = games;
            this.buildGames_();
            this.buildActions_();
        }.bind(this));
        this.refreshId = window.setInterval(this.refresh.bind(this), 60000);
    }
};
MultiplayerWindow.onClose_ = function () {
    this.track('close');
    this.clearRefresh();
};
MultiplayerWindow.clearRefresh = function () {
    window.clearInterval(this.refreshId);
};
MultiplayerWindow.listReplays = function () {
    this.clearRefresh();
    MultiplayerWindow.gameSocket.emit('replay', null, function (games) {
        this.table.clearBody();
        games.forEach(function (game) {
            this.table.buildRow('', {
                game_name: new Date(game.date * 1000).toDateTimeStringNice(),
                game_players: 'Id: ' + game.game_id
            });
            this.table.appendToCell(-1, 'game_actions', new west.gui.Iconbutton(new west.gui.Icon('arrowright', 'Переиграть'), function (btn, gameId) {
                btn.disable();
                this.replayGame(gameId);
            }, this, game.game_id).getMainDiv());
        }, this);
    }.bind(this));
};
MultiplayerWindow.replayGame = function (gameId) {
    this.emit('replay', gameId, function (data) {
        if ('string' == typeof(data) || (!data.init && (data = 'Подробности этой миссии канули в лету.'))) {
            return MessageError(data).show();
        }
        window._replay = new west.mission.Replay(data).launch();
    });
}
MultiplayerWindow.start = function (response) {
    this.emit('start', response);
};
MultiplayerWindow.create = function (response) {
    this.emit('create', this.demo.map.type, this.demo.name, this.demo.password, function (err) {
        var args;
        response(err);
        if (!err) {
            args = Array.prototype.slice.call(arguments, 1);
            MultiplayerWindow.onGameCreated.apply(MultiplayerWindow, args);
        }
    });
};
MultiplayerWindow.isQueued = function () {
    if (this.group && this.group.joinTime) {
        return !!this.group.joinTime;
    } else if (MultiplayerWindow.matchmaking) {
        return MultiplayerWindow.matchmaking.queued;
    } else {
        return false;
    }
};
MultiplayerWindow.joinQueue = function (mapId, resp) {
    if (MultiplayerWindow.isQueued())return;
    MultiplayerWindow.gameSocket.emit('joinQueue', mapId, function (err, data) {
        if (!err)MultiplayerWindow.setMatchmakingData_(data);
        resp && resp(err);
    });
};
MultiplayerWindow.leaveQueue = function (response) {
    if (!MultiplayerWindow.isQueued())return;
    MultiplayerWindow.gameSocket.emit('leaveQueue', function (err) {
        if (!err)MultiplayerWindow.setMatchmakingData_({});
        response && response(err);
    });
};
MultiplayerWindow.notifyMatch = function (title, body) {
    var sounds = ['mpi_game_ready_4', 'mpi_game_ready_3', 'mpi_game_ready_2', 'mpi_game_ready'];
    AudioController.play(sounds[Math.floor(Math.random() * sounds.length)]);
    if ('hidden'in document && document.hidden === false && document.hasFocus())
        return;
    if (window.Notification !== undefined && Notification.permission === 'granted') {
        var notification = new Notification(title, {
            'body': body || 'Готовься к перестрелкам!',
            icon: 'https://westrus.innogamescdn.com/images/banner/tw_2_0_logo_100.png'
        });
        notification.onclick = function () {
            window.focus();
        };
        $(window).one('focus', function () {
            notification.close();
        });
    }
};
MultiplayerWindow.inviteToGroupOrGame = function (playerName, response) {
    if (this.inGroupScreen) {
        this.inviteGroup(playerName, response);
    } else if (this.inLobby) {
        this.invite(playerName, response);
    } else {
        this.createGroup(function (err) {
            if (err)return response(err);
            this.inviteGroup(playerName, response);
        }.bind(this));
    }
};
MultiplayerWindow.createGroup = function (response) {
    this.emit('createQueueGroup', function (err, data) {
        response(err);
        if (!err) {
            MultiplayerWindow.setGroupData_(data);
            this.refresh();
        }
    }.bind(this));
};
MultiplayerWindow.useCode = function (code, response) {
    this.emit('useCode', code, function (err) {
        response(err);
        if (!err) {
            MultiplayerWindow.status();
        }
    });
};
MultiplayerWindow.inviteGroup = function (playerName, response) {
    if (!playerName)return response(null);
    this.emit('inviteQueueGroup', playerName, function (err, code, playerId, verify) {
        response(err);
        if (!err) {
            Chat.Request.MpiInvite(playerId, code, verify);
        }
    });
};
MultiplayerWindow.leaveGroup = function (response) {
    this.emit('leaveQueueGroup', response);
};
MultiplayerWindow.toggleGroupQueue = function (response) {
    this.group.joinTime ? this.emit('unqueueQueueGroup', response) : this.emit('queueQueueGroup', response);
};
MultiplayerWindow.invite = function (playerName, response) {
    if (!playerName)return response(null);
    this.emit('invite', playerName, function (err, code, playerId, verify) {
        response(err);
        if (!err) {
            Chat.Request.MpiInvite(playerId, code, verify);
        }
    });
};
MultiplayerWindow.status = function () {
    this.emit('status', MultiplayerWindow.onStatus.bind(MultiplayerWindow));
};
MultiplayerWindow.join = function (gameId, response) {
    this.emit('join', gameId, function (err, gameData) {
        response(err);
        if (err)return console.log(err);
        mpi_deep_translate(gameData);
        this.setGameData_(gameData);
        this.refresh();
    }.bind(this));
};
MultiplayerWindow.leave = function () {
    this.wantsToLeave = true;
    this.emit('leave');
};
MultiplayerWindow.kick = function (entityId, response) {
    this.emit('kick', entityId, response);
};
MultiplayerWindow.setReady = function (isReady) {
    this.emit('setReady', isReady);
};
MultiplayerWindow.switch = function (teamId) {
    this.emit('switch', teamId, function (err) {
        if (err)return console.log(err);
    }.bind(this));
};
MultiplayerWindow.selectAbility = function (slot, abilityId) {
    var old = {};
    old[slot] = this.players[this.ego.entity_id].entity_data.abilities[slot] || '';
    this.players[this.ego.entity_id].entity_data._old_abilities = old;
    this.players[this.ego.entity_id].entity_data.abilities[slot] = abilityId;
    this.save();
};
MultiplayerWindow.save = function () {
    this.emit('save', this.players[this.ego.entity_id].entity_data, function (err) {
        if (err) {
            MessageError(_('Failed to select ability: ' + err)).show();
            return;
        }
    });
};
MultiplayerWindow.unsetGameData_ = function () {
    this.game = undefined;
    this.players = {};
    this.ego = undefined;
    this.inLobby = false;
    this.hideLobbyChat_();
};
MultiplayerWindow.setGameData_ = function (gameData) {
    gameData.readyStates = gameData.readyStates || {};
    this.game = gameData.game;
    this.ego = gameData.entity;
    this.players = {};
    this.game.player_count = parseInt(this.game.player_count);
    if (gameData.map) {
        this.demo.map = gameData.map;
        this.demo.map.type = gameData.game.map;
        this.demo.map.abilities.available = gameData.abilities;
        this.demo.map.abilities.default = gameData.abilities_default;
    }
    gameData.entities.forEach(function (entity) {
        entity.ready = gameData.readyStates[entity.entity_id];
        this.players[entity.entity_id] = entity;
    }, this);
    this.inLobby = true;
    if (!gameData.game.status) {
        this.showLobbyChat_();
        this.updateChat();
    }
};
MultiplayerWindow.setMatchmakingData_ = function (data) {
    this.matchmaking = data;
    this.matchmaking.queued = !!data.joinTime;
};
MultiplayerWindow.setGroupData_ = function (group, game) {
    this.group = group;
    this.inGroupScreen = !$.isEmptyObject(group) && !game;
    if (this.inGroupScreen)
        this.showGroupChat_(); else
        this.hideGroupChat_();
};
MultiplayerWindow.buildGames_ = function () {
    if (this.table)this.table.getMainDiv().remove();
    this.table = new west.gui.Table();
    this.table.addColumns(['game_name', 'game_players', 'game_actions']);
    this.table.appendToThCell('head', 'game_name', 'Имя', 'Имя').appendToThCell('head', 'game_players', 'Игроки', 'Игроки').appendToThCell('head', 'game_actions', 'Действия', 'Действия');
    if (!this.games) {
        this.table.createEmptyMessage('Нет доступных игр');
    } else {
        this.games.forEach(function (game) {
            this.table.buildRow(undefined, {
                game_name: game.name,
                game_players: s('%1 / %2', game.player_count, this.maps[game.map].players.max)
            });
            this.table.appendToCell(-1, 'game_actions', new west.gui.Iconbutton(new west.gui.Icon('arrowright', 'Вступить'), function (btn, gameId) {
                btn.disable();
                MultiplayerWindow.join(gameId, function (err) {
                    if (err) {
                        new UserMessage(s('Присоединиться невозможно! %1', err)).show();
                        btn.enable();
                    }
                });
            }, undefined, game.game_id).getMainDiv());
        }, this);
    }
    $('.games', this.DOM).append('<h1 style="text-align:center;">' + 'Присоединиться к другому сражению' + '</h1>', this.table.getMainDiv());
    $('.games .row_foot .game_name', this.DOM).append(new west.gui.Button('Обновить', function (btn, teamId) {
        btn.disable();
        MultiplayerWindow.refresh();
    }, this).getMainDiv());
};
MultiplayerWindow.buildMapSelection_ = function (map, cb) {
    var maps = new west.gui.Combobox();
    var first = true;
    for (var type in this.maps) {
        if (first) {
            this.demo.map = this.maps[type];
            this.demo.map.type = type;
            first = false;
        }
        maps.addItem(type, this.maps[type].name);
    }
    if (map) {
        this.demo.map = this.maps[map];
        this.demo.map.type = map;
        maps.select(map);
    }
    maps.addListener(function (type) {
        cb(type);
    }, this);
    return maps;
};
MultiplayerWindow.buildConnectionScreen_ = function () {
    if (this.reconnecting) {
        $('.connecting', this.DOM).empty().append(s('Соединение с сервером… %1 Попытка: %2 / %3', '<br>', '<span class="cur-attempt">' + (this.connectionAttempt || 1) + '</span>', '<span class="max-attempt">' + this.maxReconnectionAttempts + '</span>'));
    } else {
        $('.connecting', this.DOM).empty().text('Соединение с сервером…');
    }
};
MultiplayerWindow.showMapHelp = function (map_type) {
    if (west.window.mpi.help[map_type] && west.window.mpi.help[map_type].open) {
        west.window.mpi.help[map_type].open();
    }
};
MultiplayerWindow.buildSplashScreen_ = function (map) {
    var matchmaking = MultiplayerWindow.matchmaking;
    var maps, header;
    this.window.setTitle('Перестрелки');
    this.window.addClass('splashscreen');
    $('.actions', this.DOM).addClass('quickgame').empty();
    if (matchmaking.queued) {
        MultiplayerWindow.buildActionsMM_($('.actions', this.DOM), matchmaking);
    } else {
        maps = this.buildMapSelection_(map, this.buildActions_.bind(this));
        if (maps.items.length > 1) {
            header = maps.getMainDiv();
        } else {
            header = '<h2>' + this.demo.map.name + '</h2>';
        }
        $('.actions', this.DOM).append($('<div class="lobby_header"></div>').append(header, this.buildMapHelp_(this.demo.map.type, 'splash')), this.buildMapPreview_(this.demo.map.type), $('<div class="options"></div>').append(this.buildMatchmakingButton_(), this.buildCustomGamesButton_(), this.buildGroupButton_()));
    }
};
MultiplayerWindow.buildActions_ = function (map) {
    var matchmaking = MultiplayerWindow.matchmaking;
    var groupframe = new west.gui.Groupframe('create');
    var header, maps;
    $('.actions', this.DOM).empty();
    if (matchmaking.queued) {
        MultiplayerWindow.buildActionsMM_($('.actions', this.DOM), matchmaking);
    } else {
        maps = this.buildMapSelection_(map, this.buildActions_.bind(this));
        if (maps.items.length > 1) {
            header = maps.getMainDiv();
        } else {
            header = '<h2>' + this.demo.map.name + '</h2>';
        }
        groupframe.appendToContentPane(header, this.buildMapHelp_(this.demo.map.type, 'splash'), this.buildMapPreview_(this.demo.map.type), $('<div class="options"></div>').append(this.buildCreateGameButton_(), this.buildMatchmakingButton_()));
    }
    $('.actions', this.DOM).append('<h1 style="text-align:center;">' + 'Создать собственноое сражение' + '</h1>', groupframe.divMain.css({
        'width': '345px',
        'height': '350px'
    }));
};
MultiplayerWindow.buildActionsMM_ = function (dom, matchmaking) {
    dom[(dom.append) ? 'append' : 'appendToContentPane'](this.buildMatchmakingInfo_(matchmaking), $('<div class="options"></div>').append(this.buildMatchmakingButton_(matchmaking)));
};
MultiplayerWindow.buildMatchmakingInfo_ = function (matchmaking) {
    var timeInQueue = Game.getAccurateServerTime() - matchmaking.joinTime, html;
    html = [$('<div class="lobby_header"></div>').append('<h2>' + this.maps[matchmaking.map].name + '</h2>', this.buildMapHelp_(matchmaking.map, 'queue'), $('<div class="queue_info"></div>').html('Поиск подходящего сражения…' + '<br>' +
        s('Время: %1', '<span class="mpi-lobby-waiting">' + (timeInQueue / 1000).formatDuration() + '</span>'))), this.buildMapPreview_(matchmaking.map)];
    if (this.queueWaitingInterval)
        clearInterval(this.queueWaitingInterval);
    this.queueWaitingInterval = window.setInterval(function () {
        var el = $('.mpi-lobby-waiting', MultiplayerWindow.DOM), waitingSince;
        if (!MultiplayerWindow.isQueued() || !el.length) {
            window.clearInterval(MultiplayerWindow.queueWaitingInterval);
            return delete MultiplayerWindow.queueWaitingInterval;
        }
        waitingSince = Game.getAccurateServerTime() - matchmaking.joinTime;
        el.text((waitingSince / 1000).formatDuration());
    }, 1000);
    return html;
};
MultiplayerWindow.buildMapPreview_ = function (mapId) {
    var map = this.maps[mapId], teams = 0;
    west.common.forEach(map.teams, function (team) {
        if (team.joinable) {
            teams += 1;
        }
    });
    var html = $('<div class="map_info"></div>').append('<div class="map_preview map_' + map.type + '"></div>', $('<div class="map_summary"></div>').append($('<div class="players_in_match">' + map.players.min + ' - ' + map.players.max + '</div>').addMousePopup(s('Игроки: %1 - %2', map.players.min, map.players.max)), $('<div class="teams_in_match">' + teams + '</div>').addMousePopup(s('Команды: %1', teams)), $('<div class="rounds_in_match">' + map.round.max + '</div>').addMousePopup(s('Раунды: %1', map.round.max))));
    return html;
};
MultiplayerWindow.buildMapHelp_ = function (map_type, tracking_location) {
    return $(new west.gui.Iconbutton(new west.gui.Icon('help'), function () {
        MultiplayerWindow.showMapHelp(map_type);
        MultiplayerWindow.track('useui', 'map_help', tracking_location)
    }).setTitle("Помощь по карте").addClass('help mpi-map-help').getMainDiv());
};
MultiplayerWindow.buildCreateGameButton_ = function () {
    return $((new west.gui.Button('Создать сражение', function (btn) {
        btn.disable();
        MultiplayerWindow.create(function (err) {
            if (err) {
                new UserMessage(s('Не удалось создать сражение: %1', err)).show();
                btn.enable();
            }
        });
    })).getMainDiv());
};
MultiplayerWindow.buildInvitationCodeButton_ = function () {
    if (!DEBUG)
        return $('<span />');
    return new west.gui.Button('Использовать код приглашения', function (btn) {
        btn.disable();
        var code = prompt('Please enter your invitation code into this really ugly box:');
        MultiplayerWindow.useCode(code, function (err) {
            if (err) {
                new UserMessage(s('Не удалось использовать код: %1', err)).show();
                btn.enable();
            }
        });
    }, this, undefined, 'Пригласить другого игрока', 'btn-mpi-group-invite').getMainDiv();
};
MultiplayerWindow.buildMatchmakingButton_ = function () {
    return new west.gui.Button(this.matchmaking.queued ? 'Покинуть очередь' : 'Встать в очередь', function (btn) {
        var btnEl = $(btn.getMainDiv());
        btn.disable();
        if (btnEl.hasClass('a-tmp-flag')) {
            MultiplayerWindow.leaveQueue(function (err) {
                if (err) {
                    new UserMessage(s('Не удалось покинуть очередь игры: %1', err)).show();
                    btn.enable();
                    console.log(err);
                } else {
                    MultiplayerWindow.inSplashScreen = true;
                    btn.removeClass('a-tmp-flag');
                    btn.setCaption('Встать в очередь');
                }
                MultiplayerWindow.refresh();
            });
        } else {
            MultiplayerWindow.joinQueue(MultiplayerWindow.demo.map.type, function (err) {
                if (err) {
                    new UserMessage(s('Не удалось присоединится к очереди в игру: %1', err)).show();
                    btn.enable();
                    console.log(err);
                } else {
                    MultiplayerWindow.inSplashScreen = true;
                    btnEl.addClass('a-tmp-flag');
                    btn.setCaption('Покинуть очередь');
                }
                MultiplayerWindow.refresh();
            });
        }
    }).addClass(this.matchmaking.queued ? 'a-tmp-flag' : '').getMainDiv();
};
MultiplayerWindow.buildCustomGamesButton_ = function () {
    if (this.customsEnabled) {
        return $((new west.gui.Button('Свои сражения', function (btn) {
            MultiplayerWindow.inSplashScreen = false;
            MultiplayerWindow.refresh();
        })).getMainDiv());
    }
    return false;
};
MultiplayerWindow.buildGroupButton_ = function () {
    if (this.groupsEnabled) {
        return $((new west.gui.Button('Создать банду', function (btn) {
            btn.disable();
            MultiplayerWindow.createGroup(function (err) {
                if (err) {
                    new UserMessage(s('Не удалось создать банду: %1', err)).show();
                    btn.enable();
                }
            });
        })).getMainDiv());
    }
    return false;
};
MultiplayerWindow.buildEntityIcon_ = function (entity) {
    var level = entity.entity_data ? entity.entity_data.level : entity.data.level;
    var cclass = entity.entity_data ? entity.entity_data.cclass : entity.data.cclass;
    var label = Game.InfoHandler.getLocalString4Charclass(cclass).escapeHTML(), url = 'https://westrus.innogamescdn.com/images/class_choose/class_' + cclass + '.png', image = "<img class='client_class' src=\'" + url + "' />";
    return $("<div class='mpi-contact_client' />").append(image, "<div class='client_level'>" + level + "</div>");
};
MultiplayerWindow.buildGameRemovedDlg_ = function (reason) {
    if (this.wantsToLeave || !reason)return;
    this.showQueueDialog(new west.gui.Dialog("Игра закрыта", reason, west.gui.Dialog.SYS_WARNING).addButton("ok", this.refresh.bind(this)).setModal(true, this.refresh.bind(this), true));
};
MultiplayerWindow.allPlayersReady = function () {
    return !west.common.some(this.players, function (player, entityId) {
        return !player.ready;
    });
};
MultiplayerWindow.sendLobbyMessage = function (msg) {
    this.emit('msg', msg);
};
MultiplayerWindow.sendGroupMessage = function (msg) {
    this.emit('msgQueueGroup', msg);
};
MultiplayerWindow.showGroupChat_ = function () {
    if (this.groupChat_)return;
    this.groupChat_ = new west.mission.GroupChat();
};
MultiplayerWindow.hideGroupChat_ = function () {
    if (!this.groupChat_)return;
    this.groupChat_.close();
    delete this.groupChat_;
}
MultiplayerWindow.showLobbyChat_ = function () {
    if (this.lobbyChat_)return;
    this.lobbyChat_ = new west.mission.LobbyChat();
};
MultiplayerWindow.hideLobbyChat_ = function () {
    if (!this.lobbyChat_)return;
    this.lobbyChat_.close();
    delete this.lobbyChat_;
};
MultiplayerWindow.addSystemMsg_ = function (msg) {
    if (!this.lobbyChat_)return;
    this.lobbyChat_.addSystemMessage(msg);
};
MultiplayerWindow.addChatMsg_ = function (msg) {
    if (!this.lobbyChat_)return;
    this.lobbyChat_.addChatMessage(msg.from, msg.msg, msg.time);
};
MultiplayerWindow.updateChat = function () {
    if (!this.lobbyChat_)return;
    this.lobbyChat_.setClients($.map(this.players, function (v) {
        return v;
    }));
};

west.define('west.window.mpi.multiplayer.Group', null, {
    init: function (window) {
        this.group = window.group;
        this.host = this.group.players.some(function (player) {
            return player.host && player.id == window.ownEntityId;
        });
        this.window = window.window;
        this.domPlayers = null;
        this.window.clearContentPane();
        this.window.setTitle('Банда авантюристов');
        this.window.appendToContentPane(''
            + '<div class="players mpi-group"></div>'
            + '<div class="actions mpi-group"></div>'
            + '<div class="group-queue"></div>');
    }, show: function () {
        this.buildPlayers_();
        this.buildSettings_();
    }, buildPlayers_: function () {
        var that = this;
        if (this.domPlayers)this.domPlayers.getMainDiv().remove();
        this.domPlayers = new west.gui.Table();
        this.domPlayers.addColumns(['pname', 'group_actions']);
        this.domPlayers.appendToThCell('head', 'pname', 'Игроки', 'Игроки').appendToThCell('head', 'group_actions', 'Действия', 'Действия');
        this.group.players.forEach(function (player) {
            this.domPlayers.buildRow(undefined, {pname: player.player.data.name}, function (entity) {
                return function (row) {
                    return that.buildPlayerRow_(row, entity);
                };
            }(player.player));
        }, this);
        $('.players', this.window.getContentPane()).append(this.domPlayers.getMainDiv(), new west.gui.Button('Выйти', function (btn) {
            btn.disable();
            MultiplayerWindow.leaveGroup(function (err) {
                btn.enable();
                if (err)return new UserMessage(s('Не удалось покинуть банду: %1', err)).show();
                MultiplayerWindow.setGroupData_({});
                MultiplayerWindow.refresh();
            });
        }, this, undefined, 'Покинуть эту банду'.escapeHTML(), 'btn-mpi-group-leave').getMainDiv());
        var btnInvite = new west.gui.Button('Пригласить', function (btn) {
            btn.disable();
            new west.gui.TextInputDialog().setPlaceholder('Имя').setTitle('Пригласить игрока').setText('Введи ник игрока, которого ты хочешь пригласить.').addButton('Пригласить', function (playerName) {
                MultiplayerWindow.inviteGroup(playerName, function (err) {
                    btn.enable();
                    if (err)return new UserMessage(s('Не удалось пригласить игрока: %1', err)).show();
                });
            }).addButton('Отмена', function () {
                btn.enable();
            }).show();
        }, this, undefined, (this.host) ? (this.group.joinTime) ? 'Ты не можешь приглашать других игроков, пока ждёшь своей очереди сражаться'.escapeHTML() : 'Пригласить другого игрока'.escapeHTML() : 'Ты не лидер банды'.escapeHTML(), 'btn-mpi-group-invite');
        if (!this.host || this.group.joinTime)btnInvite.disable();
        $('.players', this.window.getContentPane()).append(btnInvite.getMainDiv());
    }, buildSettings_: function (map) {
        $('.settings', this.window.getContentPane()).empty();
        var maps = MultiplayerWindow.buildMapSelection_(map, this.buildSettings_.bind(this));
        var gf = new west.gui.Groupframe('group_settings');
        var btnJoin = new west.gui.Button(this.group.joinTime ? 'Покинуть очередь' : 'Встать в очередь', function (btn) {
            btn.disable();
            MultiplayerWindow.toggleGroupQueue(function (err) {
                if (err) {
                    btn.enable();
                    new UserMessage(s('Не удалось поставить банду в очередь: %1', err)).show();
                }
            });
        }, this, undefined, this.host ? 'Присоединить банду к сражению'.escapeHTML() : 'Ты не лидер банды'.escapeHTML());
        if (!this.host)btnJoin.disable();
        if (this.group.joinTime) {
            MultiplayerWindow.buildMatchmakingInfo_(gf, this.group);
        } else {
            gf.appendToContentPane('<br />', '<br />', '<br />', '<br />', '<br />', '<h4>Choose Map</h4><br />', maps.getMainDiv(), '<br />', '<br />');
        }
        gf.appendToContentPane(btnJoin.getMainDiv());
        $('.actions', this.window.getContentPane()).append(gf.divMain.css({width: '345px', height: '375px'}));
    }, buildPlayerRow_: function (row, entity) {
        $('.pname', row).prepend(MultiplayerWindow.buildEntityIcon_(entity));
        return row;
    }
});

west.define('west.window.mpi.multiplayer.Lobby', null, {
    init: function (window) {
        this.model = window;
        this.window = window.window;
        this.DOM = window.window.getContentPane();
        this.components = {};
        this.rowsEntities = {};
    }, show: function () {
        this.window.setTitle('Холл сражения');
        this.window.clearContentPane();
        this.window.appendToContentPane(''
            + '<div class="own_abilities">here go the player\'s abilities</div>'
            + '<div class="players">here go the players</div>'
            + '<div class="settings">here the settings? not sure.</div>');
        this.window.addEventListener(TWE('WINDOW_DESTROY'), this.onClose_, this);
        this.rowsEntities = {};
        this.createComponents_();
        this.buildOwnAbilities_();
        this.buildPlayers_();
        this.buildGame_();
    }, onClose_: function () {
        this.components.sb.hide();
    }, createComponents_: function () {
        var sb = new west.gui.Selectbox();
        sb.setHeader('Выбери умения');
        sb.addListener(function (abilityId, dummy, slot) {
            this.onAbilitySelection_(slot, abilityId);
        }.bind(this));
        this.components.sb = sb;
        this.updateComponents_();
    }, updateComponents_: function () {
        var chosen = this.model.players[this.model.ego.entity_id].entity_data.abilities, available = this.model.demo.map.abilities.available;
        this.components.sb.removeAll();
        west.common.forEach(available, function (ab, type) {
            for (var slot in chosen)if (chosen[slot] == type)return;
            var el = $('<div class="mpi-ability-selection-wrapper"></div>').append('<div class="mpi-ability-selection slot-' + slot + '"><div class="mpi-ability s-12 mpi-ability-' + type + '" ></div></div> ' + ab.name).addMousePopup(west.mission.ui.popup.Ability.create(ab, type));
            this.components.sb.addItem(type, el);
        }, this);
    }, updateJoin: function (entity) {
        this.buildPlayerRow_(entity);
    }, updateEntity: function (entity) {
        var row = $(this['table_' + entity.team_id].getRow(this.rowsEntities[entity.entity_id]));
        $('.pname .player-row-icons', row).empty();
        $('.pname .player-row-actions', row).empty();
        $('.pabilities', row).empty().append(this.buildAbilities_(entity.entity_data.abilities));
        this.buildPlayerContentRow_(row, entity);
        if (entity.entity_id == this.model.ownEntityId) {
            this.updateComponents_();
            this.buildOwnAbilities_();
        }
    }, updateLeave: function (entityId) {
        this.show();
    }, updateTeams: function (entityId, newTeamId) {
        this.show();
    }, updateReadyState: function (entityId, state) {
        if (!this.model.inLobby || !this.model.game.is_custom)return;
        if (entityId) {
            this.model.players[entityId].ready = state;
            var stateElement = $('.' + entityId + ' .mpi-lobby-readystate', this.DOM);
            if (state)
                stateElement.addClass('ready'); else
                stateElement.removeClass('ready');
        }
        if (this.model.ego.host) {
            var allReady = this.model.allPlayersReady();
            if (allReady) {
                this.gameStateBtn.enable();
            } else {
                this.gameStateBtn.disable();
            }
        } else if (entityId === this.model.ego.entity_id) {
            this.readyCheckbox.setSelected(state, true);
        }
    }, buildOwnAbilities_: function () {
        var that = this, entity = this.model.players[this.model.ownEntityId], default_abilities = this.model.demo.map.abilities.default || {}, name = '<div class="pname">' + 'Твои умения:' + '</div>', $default_abilities = $('<div class="dabilities"></div>'), $abilities = $('<div class="pabilities"></div>').append(this.buildAbilities_(entity.entity_data.abilities, 's-33 own'));
        west.common.forEach(default_abilities, function (ability, id) {
            $default_abilities.append($(that.buildAbilityHtml_('fixed', id, 's-33 own', id)).addMousePopup(west.mission.ui.popup.Ability.create(ability, id)));
        });
        $('.own_abilities', this.DOM).empty().append(new west.gui.Groupframe('own_abilities').appendToContentPane(name, $default_abilities, $abilities).getMainDiv());
        this.buildAbilityPopups_(entity, $('.own_abilities', this.DOM));
    }, buildPlayers_: function () {
        var that = this;
        for (var teamId in this.model.demo.map.teams) {
            var tname = 'table_' + teamId;
            var name = this.model.demo.map.teams[teamId].name;
            if (this[tname])this[tname].getMainDiv().remove();
            this[tname] = new west.gui.Table().setId(tname);
            this[tname].addColumns(['pname', 'pworld', 'pabilities', 'preadystate']);
            var abilityLabel = (this.model.ego.team_id == teamId) ? 'Умения' : '';
            this[tname].appendToThCell('head', 'pname', s('Команда %1', name), s('Команда %1', name)).appendToThCell('head', 'pworld', 'Мир', 'Мир').appendToThCell('head', 'pabilities', abilityLabel, abilityLabel).appendToThCell('head', 'preadystate', '', '');
        }
        for (var id in this.model.players) {
            this.buildPlayerRow_(this.model.players[id]);
        }
        $('.players', this.DOM).empty();
        for (teamId in this.model.demo.map.teams) {
            $('.players', this.DOM).append(this['table_' + teamId].getMainDiv());
            if (!this.model.demo.map.teams[teamId].joinable) {
                this['table_' + teamId].createEmptyMessage('<br /><br />' + _(this.model.demo.map.teams[teamId].description));
                $('#table_' + teamId + ' div.no-content').show();
            } else if (this.model.ego.team_id != teamId && this.model.demo.map.teams[teamId].joinable && this.model.game.is_custom) {
                $('#table_' + teamId + ' .row_foot .pname').empty().append(new west.gui.Button('Перейти в команду', function (btn, teamId) {
                    btn.disable();
                    MultiplayerWindow.switch(teamId);
                }, undefined, teamId).getMainDiv());
            }
        }
        ;
    }, buildGame_: function () {
        var gameStateControl, inviteButton;
        $('.settings', this.DOM).empty().append(new west.gui.Groupframe('create').appendToContentPane($('<div class="game-settings inlineblock" />').append('<h4>' + 'Перестрелка' + '</h4>', (this.model.demo.name && 'noname' !== this.model.demo.name ? '<div>' + s('Название: %1', this.model.demo.name) + '</div>' : ''), (this.model.demo.map.name ? '<div>' + s('Карта: %1', this.model.demo.map.name) + '</div>' : ''), '<div>' + s('Игроков: %1', this.model.game.player_count + ' / ' + this.model.demo.map.players.max) + '</div>'), $('<div class="game-center inlineblock" />'), $('<div class="game-actions inlineblock" />')).divMain.css({
            'width': '695px',
            'height': '107px',
            'text-align': 'center'
        }));
        inviteButton = new west.gui.Button('Пригласить', function (btn) {
            btn.disable();
            new west.gui.TextInputDialog().setPlaceholder('Имя').setTitle('Пригласить игрока').setText('Введи ник игрока, которого ты хочешь пригласить.').addButton('Пригласить', function (playerName) {
                MultiplayerWindow.invite(playerName, function (err) {
                    btn.enable();
                    if (err)return new UserMessage(s('Не удалось пригласить игрока: %1', err)).show();
                });
            }).addButton('Отмена', function () {
                btn.enable();
            }).show();
        }, undefined, undefined, (this.model.ego.host) ? 'Пригласить другого игрока'.escapeHTML() : 'Ты не лидер'.escapeHTML());
        if (!this.model.ego.host)inviteButton.disable();
        if (this.model.game.is_custom) {
            if (this.model.ego.host) {
                gameStateControl = new west.gui.Button('Начать сражение', function (btn) {
                    btn.disable();
                    MultiplayerWindow.start(function (err) {
                        if (err) {
                            new UserMessage(s('Не удалось запустить сражение: %1', err)).show();
                            btn.enable();
                        }
                    });
                }, undefined, undefined, 'Начать сражение, когда все игроки будут готовы'.escapeHTML());
                if (!this.model.allPlayersReady())gameStateControl.disable();
                this.gameStateBtn = gameStateControl;
            } else {
                gameStateControl = new west.gui.Checkbox(gendertext('Я готов!', 'Я готова!').escapeHTML(), 'mpi-lobby-ready-checkbox', function (isReady) {
                    MultiplayerWindow.setReady(isReady);
                }).setTooltip(gendertext('Нажми здесь, чтобы лидер видел твою готовность и смог начать сражение. Любые изменения, например, умения, отменят твою готовность.', 'Нажми здесь, чтобы лидер видел твою готовность и смог начать сражение. Любые изменения, например, умения, отменят твою готовность.').escapeHTML());
                gameStateControl.setSelected(this.model.players[this.model.ego.entity_id].ready, true);
                this.readyCheckbox = gameStateControl;
            }
            $('.game-center', this.DOM).append(gameStateControl.getMainDiv());
        } else {
            $('.game-center', this.DOM).append('<div class="mpi-matchmaking-countdown">'
                + 'Сражение начнётся через'
                + '<br />'
                + '<span class="mpi-matchmaking-autostart">any moment</span></div>');
            var autostartInterval = window.setInterval(function () {
                var el = $('.mpi-matchmaking-autostart', this.DOM), startIn;
                if (!this.model || !this.model.game || !el.length) {
                    return window.clearInterval(autostartInterval);
                }
                startIn = this.model.game.autostart - new ServerDate().getTime();
                if (startIn <= 0) {
                    el.text('любой момент');
                    return window.clearInterval(autostartInterval);
                }
                el.text((startIn / 1000).formatDurationBuffWay());
            }.bind(this), 1000);
        }
        $('.game-actions', this.DOM).append((this.model.game.is_custom && inviteButton) ? inviteButton.getMainDiv() : '', new west.gui.Button((this.model.ego.host) ? 'Закрыть срадение' : 'Выйти из сражения', function (btn) {
            btn.disable();
            this.buildLeaveDlg_(btn);
        }.bind(this), undefined, undefined, (this.model.ego.host) ? 'Расформировать пользовательское сражение'.escapeHTML() : 'Покинуть пользовательское сражение'.escapeHTML()).getMainDiv());
    }, buildAbilities_: function (abilities, size) {
        size = size || 's-12';
        var html = '', type;
        for (var slot = 0; slot < this.model.demo.map.abilities.choosable; slot++) {
            type = (abilities[slot]) ? abilities[slot] : 'unknown';
            html += this.buildAbilityHtml_(slot, abilities[slot], size, type);
        }
        return html;
    }, buildAbilityHtml_: function (slot, known, size, type) {
        return '<div class="mpi-ability-selection slot-' + slot + (known ? '' : ' unknown') + '"> <div class="mpi-ability ' + size + ' mpi-ability-' + type + '"></div></div>';
    }, buildPlayerRow_: function (entity) {
        var that = this;
        var host = (entity.host) ? ' ' + '(лидер)' : '';
        var rowcls = entity.entity_id + ((this.model.ego.entity_id == entity.entity_id) ? ' ego' : '');
        this['table_' + entity.team_id].buildRow(rowcls, {
            pname: '<span class="player-row-icons"></span>' + entity.entity_data.name + host + '<span class="player-row-actions"></span>',
            pworld: '<span class="tw2gui-iconset tw2gui-icon-world"></span>',
            pabilities: (this.model.ego.team_id == entity.team_id) ? this.buildAbilities_(entity.entity_data.abilities) : '',
            preadystate: (this.model.game.is_custom) ? '<div class="mpi-lobby-readystate ' + (entity.ready ? 'ready' : '') + '"/>' : ''
        }, function (entity) {
            return function (row) {
                return that.buildPlayerContentRow_(row, entity);
            };
        }(entity));
        this.rowsEntities[entity.entity_id] = this['table_' + entity.team_id].rows.length - 1;
    }, buildPlayerContentRow_: function (row, entity) {
        $('.pname .player-row-icons', row).append(MultiplayerWindow.buildEntityIcon_(entity));
        this.buildWeaponIcon_($('.pname .player-row-actions', row), entity);
        if (this.model.ego.host && this.model.ego.entity_id !== entity.entity_id) {
            $('<div class="tw2gui-iconset tw2gui-icon-abort mpi-lobby-kick" title="'
                + 'Убрать игрока'.escapeHTML() + '" />').click(function () {
                MultiplayerWindow.kick(this.entity_id, function (err) {
                    if (err) {
                        new UserMessage(s('Не удалось выкинуть игрока: %1', err)).show();
                    }
                });
            }.bind(entity)).appendTo($('.pname .player-row-actions ', row));
        }
        this.buildAbilityPopups_(entity, row);
        this.buildWorldInfoPopups_(entity, row);
        return row;
    }, buildAbilityPopups_: function (entity, row) {
        var that = this;
        var chosen, available = this.model.demo.map.abilities.available;
        $('.pabilities', row).children().each(function (slot) {
            var ability = available[entity.entity_data.abilities[slot]];
            chosen = entity.entity_data.abilities[slot];
            if (ability) {
                $(this).addMousePopup(west.mission.ui.popup.Ability.create(ability, chosen));
            }
            if (that.model.ego.entity_id == entity.entity_id) {
                $(this).on('click', function (ev) {
                    that.components.sb.show(ev, slot);
                });
            }
        });
    }, buildWorldInfoPopups_: function (entity, row) {
        $('.pworld', row).addMousePopup(west.mission.ui.popup.WorldInfo.create(entity.world));
    }, buildWeaponIcon_: function (el, entity) {
        if (this.model.ego.entity_id == entity.entity_id) {
            el.parent().on('click', function () {
                Wear.open('left_arm');
            });
        }
        if (entity.entity_data.weapon) {
            el.parent().addMousePopup(new ItemPopup(ItemManager.get(entity.entity_data.weapon), {
                show_sell_price: false,
                show_skills: false,
                show_reqs: false,
                show_set: false,
                show_auctionable: false
            }).getXHTML());
        } else {
            el.parent().removeMousePopup();
            el.append($('<div class="mpi-no-weapon inlineblock" />'));
            el.attr('title', (this.model.ego.entity_id == entity.entity_id) ? 'У тебя нет оружия! Экипируйся!' : 'У игрока нет оружия!');
        }
    }, onAbilitySelection_: function (slot, abilityId) {
        this.model.selectAbility(slot, abilityId);
    }, buildLeaveDlg_: function (btn) {
        var contents = '<div style="width:400px;">';
        contents += 'Ты действительно хочешь бросить своих товарищей?'.escapeHTML();
        if (!this.model.game.is_custom && this.model.leaverBustEnabled) {
            contents += s(gendertext('%1 если ты сейчас выйдешь, то сражения для тебя будут временно недоступны.', '%1 если ты сейчас выйдешь, то сражения для тебя будут временно недоступны.'), '<br />');
        }
        contents += '</div>';
        new west.gui.Dialog("Покинуть сражение", contents, west.gui.Dialog.SYS_WARNING).addButton('Покинуть сражение', function () {
            MultiplayerWindow.leave();
        }).addButton('Отмена', function () {
            btn.enable();
        }).setModal(true, false, true).show();
    }
});

$(function ($) {
    'use strict';
    var single_instance = true, class_path = 'west.window.mpi.help.domination', class_parent = 'west.game.help.popup';
    var controller = {
        _class_path: class_path, _namespace: class_path, init: function (options) {
            options = $.extend({}, {
                data: {
                    class_names: 'mpi mpi_domination mpi_domination_help',
                    instructions: ['start', 'rush', 'kill']
                },
                l10n: {
                    'title': 'Помощь по Тумстоун',
                    'instructions': {
                        'start': {'description': 'В начале сражения размести свой персонаж на карте в предназначенном для этого месте. Затем подожди пока другие игроки не разместят свои.'},
                        'rush': {'description': 'Ваша задача - захватить три больших здания на карте. Для этого нужно продержаться несколько раундов, стоя на белых полях вокруг зданий.'},
                        'kill': {'description': s('Сражайся с другими командами и защищайся в случае необходимости. Если ты потеряешь сознание - через %1 раунда(-ов) восстановишься в точке старта.', s(ngettext('%1 раунд', new Array('%1 раунд', '%1 раунда', '%1 раундов'), 3), '<strong>3</strong>'))}
                    }
                },
                model: class_parent + '.model'
            }, options);
            this.callParent.call(this, options);
            return this;
        }, handleCloseButtonClick: function () {
            Config.set('mpi.help.domination', true);
            return this.callParent.apply(this, arguments);
        }
    }, view = {
        _class_path: class_path, createInstruction: function () {
            var $instruction = this.callParent.apply(this, arguments);
            $instruction.prepend($('.image', $instruction));
            return $instruction;
        }
    };
    west.define(class_path + '.view', class_parent + '.view', view);
    west.define(class_path + '.controller', class_parent + '.controller', controller);
    if (single_instance) {
        var path = class_path.split('.'), path_id = path.pop();
        path = west.get(path.join('.'));
        if (path && path[path_id] && path[path_id].controller) {
            path[path_id] = new path[path_id].controller;
        }
    }
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.shop', class_parent = 'west.game.window.model', class_object = {
        _class_path: class_path,
        data: {
            ready: false,
            order_queue: [],
            inventory: {},
            items: {},
            categories: {},
            categories_ids: [],
            offers: {},
            default_offers: {'veteran': null},
            promoted_items: [],
            currencies: {},
            currencies_order: ['bonds', 'nuggets', 'dollar', 'veteran'],
            tabs_order: [],
            current: {category: null, promotion: null},
            banner_bottom: {}
        },
        l10n: {
            window: {
                'title': 'Магазин Юнион Пасифик',
                'mini_title': 'Магазин Юнион Пасифик',
                'drop_area': {'title': 'Продать предмет!', 'message': 'Выброси сюда'}
            },
            buttons: {
                'buy_me': 'Купить',
                'buy_gold': 'Покупка золотых самородков',
                'refresh_items': 'Сменить товар',
                'free': 'Бесплатно',
                'sell': 'Продать'
            },
            buy_popup: {'title': "Покупка", 'message': 'Точно покупаешь?'},
            sell_popup: {
                message: {'single': 'Точно хочешь продать?', 'multiple': 'Сколько ты хочешь продать?'},
                'max': 'макс:'
            },
            trader_refresh_popup: {
                'title': 'Коммивояжёр готовит новый товар.',
                'message': 'Точно сменить ассортимент?'
            },
            texts: {
                limited_time: function (time) {
                    return s('В продаже %1', '<span class="timer_value">' + time + '</span>');
                }, limited_count: function (amount) {
                    return s('В продаже ещё только %1 шт.', '<span class="count_value">' + amount + '</span>');
                }, discount: function (amount) {
                    return s('Сегодня %1% скидки!', '<span class="discount_value">' + amount + '</span>');
                }, 'popular': 'Желанный предмет', 'sold_out': 'Продано', 'valid_for': function (time) {
                    return s('Предложение действительно %1', time);
                }
            },
            mouseovers: {
                categories: {
                    'hot': 'Популярные',
                    'chests': 'Сундуки',
                    'useables': 'Используемые',
                    'buffs': 'Усилители',
                    'equip': 'Снаряжение',
                    'misc': 'Разное',
                    'trader': 'Коммивояжёр',
                    'longtimer': 'Премиумы',
                    'veteran': 'Магазин ветерана'
                },
                buttons: {
                    'buy_me': 'Кликни, чтобы купить этот предмет',
                    'buy_gold': '<b>' + s('Раздобудь больше золотых самородков. %1 Благодаря им, ты можешь получить различные бонусы в игре, например, купить предметы в магазине Ю.П., активировать премиум опции и многое другое.', '</b><br/>'),
                    'sell_us': 'Открой багаж, чтобы продать предметы'
                },
                teaser: 'Показать все предметы этого события',
                icons: {
                    limited_time: function (date) {
                        return s('Конец: %1', date);
                    }, discount: function (date) {
                        return s('Скидка заканчивается %1', date);
                    }
                },
                sell_popup: {'price': 'Продажа', 'more': 'Выше', 'less': 'Ниже', 'total': 'Сумма'}
            }
        },
        init: function (options) {
            if (options.factory) {
                this.setFactory(options.factory);
                delete options.factory;
            }
            this.callParent.apply(this, arguments);
            return this;
        },
        setFactory: function (new_factory) {
            this._setProperty('factory', new_factory);
            return this;
        },
        getFactory: function () {
            return this._getProperty('factory');
        },
        clearData: function () {
            this.setItems({}).setCategories({}).setCategoriesIds([]);
            return this;
        },
        parseData: function () {
            if (!this.getFactory()) {
                return this;
            }
            var that = this, factory = this.getFactory(), inventory = this.getInventory(), items = this.getItems(), categories = this.getCategories(), categories_ids = this.getCategoriesIds(), offers = this.getOffers(), default_offers = this.getDefaultOffers();
            var item_id;
            var item, category, offer;
            var promoted = [];
            $.each(inventory, function (category_id, category_items) {
                category_id = category_id.toString();
                category = categories[category_id] || factory.createCategory({'name': category_id}, category_id);
                category.clearItems();
                $.each(category_items, function (i, item_data) {
                    item_id = item_data.item_id || item_data.id;
                    if (!item_id) {
                        return true;
                    }
                    item_id = item_id.toString();
                    if (items[item_id]) {
                        item = items[item_id].updateData(item_data);
                    } else {
                        item = items[item_id] = factory.createItem({
                            models: {window: that},
                            data: item_data
                        }, (item_data.tab ? item_data.tab : category_id) + '.' + item_id);
                    }
                    category.addItem(item);
                    if (item.isPromoted()) {
                        that.pushIfUnique(promoted, item);
                    }
                });
                categories[category_id] = category;
                that.pushIfUnique(categories_ids, category_id);
            });
            this.setPromotedItems(promoted);
            if (!$.isEmptyObject(offers)) {
                $.each(offers, function (offer_id, offer_data) {
                    offer_id = offer_id.toString();
                    offer_data.id = offer_data.id || offer_id;
                    offer = offers[offer_id] = factory.createOffer({
                        models: {window: that},
                        data: offer_data
                    }, offer_id);
                });
            }
            if (!$.isEmptyObject(default_offers)) {
                west.common.forEach(default_offers, function (offer_data, offer_id) {
                    if (offer_data instanceof west.game.model) {
                        return;
                    }
                    offer_data = offer_data || {};
                    offer_id = offer_id.toString();
                    offer_data.id = offer_data.id || offer_id;
                    offer = default_offers[offer_id] = factory.createOffer({
                        models: {window: that},
                        data: offer_data
                    }, offer_id);
                });
            }
            return this;
        },
        setDataReady: function (state) {
            this.setData('ready', !!state, true);
            if (false === state) {
                this.setContentReady(false).setDataReceived(false);
            }
            return this;
        },
        isDataReady: function () {
            return !!this.getData('ready');
        },
        setDataReceived: function (state) {
            this.setData('data_received', !!state, true);
            return this;
        },
        isDataReceived: function () {
            return !!this.getData('data_received');
        },
        setContentReady: function (state) {
            this.setData('content_ready', !!state, true);
            return this;
        },
        isContentReady: function () {
            return !!this.getData('content_ready');
        },
        getOrderQueue: function () {
            return this.getData('order_queue');
        },
        hasOrderQueue: function () {
            return !!this.getOrderQueue().length;
        },
        addToOrderQueue: function (data) {
            this.getOrderQueue().push(data);
            return this;
        },
        clearOrderQueue: function () {
            this.setData('order_queue', [], true);
            return this;
        },
        setInventory: function (inventory_data) {
            return this.setData('inventory', inventory_data, true);
        },
        getInventory: function () {
            return this.getData('inventory');
        },
        clearInventory: function () {
            this.setInventory({});
            return this;
        },
        setItems: function (new_items) {
            this.setData('items', new_items);
            return this;
        },
        getItems: function (item_ids) {
            var items = this.getData('items'), i = 0, l, subset = [], item;
            if (item_ids) {
                l = item_ids.length;
                for (i; i < l; i++) {
                    item = items[item_ids[i].toString()];
                    if (item) {
                        subset.push(item);
                    }
                }
                return subset;
            } else {
                return items;
            }
        },
        getItem: function (item_id) {
            if (!item_id) {
                return undefined;
            }
            var items = this.getItems();
            return items[item_id.toString()];
        },
        addItem: function (item_data) {
            var factory = this.getFactory(), o = {}, item;
            if ($.isPlainObject(item_data)) {
                item = factory.createItem({models: {window: this}, data: item_data}, item_data.tab);
            } else if (item_data instanceof west.get('west.game.shop.item')) {
                item = item_data;
            }
            if (!item) {
                return this;
            }
            o[item.getId()] = item;
            this.getCategory(item.getCategory()).addItem(item);
            if (item.isForcedHot()) {
                this.getCategory('hot').addItem(item);
            }
            if (item.isInOffer()) {
                this.getOffer(item.getOfferId()).addItem(item);
            }
            if (item.isPromoted()) {
                this.getOffer(item.getOfferId()).addItem(item);
            }
            this.setItems(o);
            return this;
        },
        removeItem: function (item) {
            if (item instanceof west.game.shop.item.model) {
                item = item.getId();
            }
            delete this.getItems()[item];
            return this;
        },
        setCategories: function (new_categories) {
            this.setData('categories', new_categories, true);
            return this;
        },
        getCategories: function () {
            return this.getData('categories');
        },
        setCategoriesIds: function (new_categories_ids) {
            return this.setData('categories_ids', new_categories_ids, true);
        },
        getCategoriesIds: function () {
            return this.getData('categories_ids');
        },
        getCategory: function (category_id) {
            if (!category_id) {
                return this.getDefaultCategory();
            }
            return this.getCategories()[category_id];
        },
        hasCategory: function (category_id) {
            return !!this.getCategory(category_id);
        },
        getDefaultCategory: function () {
            var id = this.getCategoriesIds()[0];
            if (id) {
                return this.getCategory(key);
            }
            return undefined;
        },
        getDefaultCategoryId: function () {
            return this.getCategoriesIds()[0];
        },
        setCurrencies: function (currencies_data) {
            this.setData('currencies', currencies_data);
            this.setCurrenciesByName();
            return this;
        },
        getCurrencies: function () {
            return this.getData('currencies');
        },
        setCurrenciesByName: function () {
            var currencies_by_name = {};
            west.common.forEach(this.getCurrencies(), function (name, id) {
                currencies_by_name[name] = id;
            });
            this.setData('currencies_by_name', currencies_by_name, true);
            return this;
        },
        getCurrenciesByName: function () {
            return this.getData('currencies_by_name');
        },
        getCurrencyByName: function (name) {
            return this.getCurrenciesByName()[name];
        },
        getCurrency: function (currency_id) {
            return this.getCurrencies()[currency_id];
        },
        getCurrenciesOrder: function () {
            return this.getData('currencies_order');
        },
        getSortCurrenciesFunction: function () {
            var that = this;
            var sort_order = this.getCurrenciesOrder();
            return function (a, b) {
                if (a.name) {
                    a = a.name.sort(that.getSortCurrenciesFunction())[0];
                }
                if (b.name) {
                    b = b.name.sort(that.getSortCurrenciesFunction())[0];
                }
                return sort_order.indexOf(a) > sort_order.indexOf(b) ? 1 : -1;
            };
        },
        setTabsOrder: function (new_order) {
            this.setData('tabs_order', new_order, true);
            return this;
        },
        getTabsOrder: function () {
            return this.getData('tabs_order');
        },
        setCurrentCategoryId: function (category_name) {
            this.setData('current', {'category': category_name});
            return this;
        },
        getCurrentCategoryId: function () {
            return this.getData('current').category;
        },
        clearCurrentCategoryId: function () {
            this.setCurrentCategoryId(null);
            return this;
        },
        setCurrentPromotion: function (promotion_name) {
            this.setData('current', {'promotion': promotion_name});
            return this;
        },
        getCurrentPromotion: function () {
            return this.getData('current').promotion;
        },
        setOffers: function (new_offers) {
            if ($.isArray(new_offers) && 0 === new_offers.length) {
                new_offers = {};
            }
            this.setData('offers', new_offers, true);
            return this;
        },
        getOffers: function () {
            return this.getData('offers');
        },
        getOffer: function (offer_id) {
            return this.getOffers()[offer_id.toString()] || this.getDefaultOffers()[offer_id.toString()];
        },
        getDefaultOffers: function () {
            return this.getData('default_offers');
        },
        getActiveOffers: function (include_defaults) {
            var defined_offers = this.getOffers(), default_offers = this.getDefaultOffers(), offers = {};
            west.common.forEach(defined_offers, function (offer, offer_id) {
                if (offer.isActive()) {
                    offers[offer_id] = offer;
                }
                ;
            });
            if (include_defaults || $.isEmptyObject(offers)) {
                west.common.forEach(default_offers, function (offer, offer_id) {
                    if (offer.isActive()) {
                        offers[offer_id] = offer;
                    }
                    ;
                });
            }
            return offers;
        },
        setPromotedItems: function (items) {
            this.setData('promoted_items', items, true);
            return this;
        },
        getPromotedItems: function () {
            return this.getData('promoted_items');
        },
        addPromotedItem: function (item) {
            west.common.pushIfUnique(this.getPromotedItems(), item);
            return this;
        },
        removePromotedItem: function (item) {
            west.common.removeFromArray(this.getPromotedItems(), item);
            return this;
        },
        getItemsBySearchQuery: function (search_query) {
            return this.getController().getController('search').getItemsByQuery(search_query);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.shop', class_parent = 'west.game.window.view', class_object = {
        _class_path: class_path, addWindowStructure: function () {
            this.callParent.apply(this, arguments);
            var controller = this.getController(), model = this.getModel(), l10n = model.getL10n(), $el = this.getRoot();
            $el.append($('<ul class="shop_categories"></ul>'), $('<div class="shop_search_wrapper"></div>'), $('<div class="drop_layer"><div class="message"><span class="title">' + l10n.window.drop_area.title + '</span>' + l10n.window.drop_area.message + '</div></div>'), $('<div class="paper_area"></div>'), $('<div class="footer"></div>'));
            return this;
        }, getTabs: function () {
            return $('.shop_categories', this.getRoot());
        }, getSearch: function () {
            return $('.shop_search_wrapper', this.getRoot());
        }, getFooter: function () {
            return $('.footer', this.getRoot());
        }, getContent: function () {
            return $('.paper_area', this.getRoot());
        }, getDropzone: function () {
            return $('.paper_area', this.getRoot());
        }, handleWindowSize: function () {
            if (WestUi.resolutionChange.current) {
                this.makeWindowSmall();
            } else {
                this.makeWindowBig();
            }
            return this;
        }, makeWindowBig: function () {
            var controller = this.getController(), model = this.getModel(), l10n = model.getL10n(), wnd = controller.getWindow();
            if (!wnd) {
                return this;
            }
            this.getController().getController('footer').reRender();
            wnd.setTitle(l10n.window.title).setSize(846, 665);
            return this;
        }, makeWindowSmall: function () {
            var controller = this.getController(), wnd = controller.getWindow();
            if (!wnd) {
                return this;
            }
            this.getController().getController('footer').reRender();
            wnd.setTitle(false).setSize(846, 550);
            return this;
        }, showSellDialog: function (item_id) {
            var model = this.getModel(), controller = this.getController(), factory = this.getFactory(), l10n = model.getL10n(), item = Bag.getItemByItemId(item_id), title = item.getName(), count = item.count, popup, root, $item = factory.createItemForSell(item_id, 1 === count ? null : count - 1, item.inv_id), message = $('<div class="message">' + l10n.sell_popup.message[count > 1 ? 'multiple' : 'single'] + '</div>'), price = $('<div class="sell_price"><div class="wrapper_left"><span class="message ">' + l10n.mouseovers.sell_popup.total + ':</span></div><div class="wrapper_right"><span class="currency">$</span><span class="sell_total">' + item.getSellPrice() + '</span></div></div>').addMousePopup(l10n.mouseovers.sell_popup.total), amount_picker = {
                container: $('<div class="price_picker" />'),
                arrow_up: $('<span class="arrow_up butPlus"></span>'),
                arrow_down: $('<span class="arrow_down butMinus inactive"></span>'),
                input: new west.gui.Textfield(null, null, 'manual_input').onlyNumeric().setValue(1),
                input_picker: $('<span class="amount_picker" />'),
                max_value: $('<div class="input_max_value"><span>' + l10n.sell_popup.max + '</span>' + count + '</div>')
            }, setSellDialogAmount, changeSellDialogAmount;
            amount_picker.arrow_up.on('click', function () {
                changeSellDialogAmount(1);
            });
            amount_picker.arrow_down.on('click', function () {
                changeSellDialogAmount(-1);
            });
            amount_picker.input.addListener(function () {
                setSellDialogAmount(amount_picker.input.getValue());
            });
            amount_picker.input.blur(function () {
                setSellDialogAmount(amount_picker.input.getValue());
            });
            amount_picker.input.getMainDiv().addClass('input_container');
            amount_picker.input_picker.on({
                'mouseenter': function () {
                    amount_picker.max_value.addClass('visible');
                }, 'mouseleave': function () {
                    amount_picker.max_value.removeClass('visible');
                }
            });
            amount_picker.max_value.on({
                'click': function () {
                    setSellDialogAmount(count);
                }
            });
            popup = new west.gui.Dialog(title).addButton("yes", function () {
                controller.requestSell({inv_id: item.inv_id, count: amount_picker.input.getValue()});
            }.bind(this)).addButton("no").setModal(true, true, true);
            root = popup.getMainDiv();
            amount_picker.container.append($('<div class="switcher wrapper_left"></div>').append(amount_picker.input_picker.append(amount_picker.arrow_down, amount_picker.max_value, amount_picker.input.getMainDiv(), amount_picker.arrow_up), 'x '), $('<div class="single_price wrapper_right"><span class="currency">$</span>' + item.getSellPrice() + '</div>').addMousePopup(l10n.mouseovers.sell_popup.price));
            popup.setText($('<div class="item_sell" />').append($item.getMainDiv(), message, $('<div class="pricing_container" />').append(count > 1 ? amount_picker.container : '', price)));
            changeSellDialogAmount = function (diff) {
                var value = parseInt(amount_picker.input.getValue()), new_value = value + parseInt(diff);
                setSellDialogAmount(new_value);
            };
            setSellDialogAmount = function (new_value) {
                var value = amount_picker.input.getValue();
                new_value = parseInt(new_value) || 0;
                new_value = new_value < 1 ? 1 : (new_value > count ? count : new_value);
                if (new_value !== value) {
                    amount_picker.input.setValue(new_value);
                }
                $item.setCount(count - new_value);
                amount_picker.arrow_up.toggleClass('inactive', count === new_value);
                amount_picker.arrow_down.toggleClass('inactive', 1 === new_value);
                $('.sell_total', price).text(new_value * item.getSellPrice());
            };
            popup.show();
        }, hideDropLayer: function () {
            var root = this.getRoot(), $drop_layer = $('.drop_layer', root);
            $drop_layer.removeClass('visible');
            return this;
        }, showDropLayer: function () {
            var root = this.getRoot(), $drop_layer = $('.drop_layer', root);
            $drop_layer.addClass('visible');
            return this;
        }, showBuyDialog: function (item_id, options) {
            options = options || {};
            var l10n = this.getModel().getL10n(), controller = this.getController(), model = this.getModel(), item_model = model.getItem(item_id), item_view = new (this._getClass('view', item_model._class_path, item_model._namespace))({model: item_model}), pay_handler = new west.wof.WofPayHandler(), currencies = model.getCurrencies(), doBuy;
            var prepareWofNamePart = function (str) {
                str = str.replace(/^(.)(.*?)(s?)$/g, function (m, p1, p2, p3) {
                    return p1.toUpperCase() + p2;
                });
                return str;
            };
            pay_handler.setTitle(options.title || l10n.buy_popup.title).setMessage((options.message || '') + l10n.buy_popup.message).setIcon(item_view.getImage());
            doBuy = function () {
                controller.requestBuy(pay_handler.getSelectedPayId(), item_model.getId());
            };
            switch (item_model.getCurrency()) {
                case 0:
                case 3:
                    pay_handler.addPayOption(new west.wof['WofPayOption' + prepareWofNamePart(currencies[1])](1, item_model.getPriceForCurrency(1))).addPayOption(new west.wof['WofPayOption' + prepareWofNamePart(currencies[2])](2, item_model.getPriceForCurrency(2)));
                    break;
                case 5:
                    pay_handler.addPayOption(new west.wof['WofPayOption' + prepareWofNamePart(currencies[1])](1, item_model.getPriceForCurrency(1))).addPayOption(new west.wof['WofPayOption' + prepareWofNamePart(currencies[4])](4, item_model.getItemForCurrency(currencies[4])));
                    break;
                case 6:
                    pay_handler.addPayOption(new west.wof['WofPayOption' + prepareWofNamePart(currencies[2])](2, item_model.getPriceForCurrency(2))).addPayOption(new west.wof['WofPayOption' + prepareWofNamePart(currencies[4])](4, item_model.getPriceForCurrency(4)));
                    break;
                case 7:
                    pay_handler.addPayOption(new west.wof['WofPayOption' + prepareWofNamePart(currencies[1])](1, item_model.getPriceForCurrency(1))).addPayOption(new west.wof['WofPayOption' + prepareWofNamePart(currencies[2])](2, item_model.getPriceForCurrency(2))).addPayOption(new west.wof['WofPayOption' + prepareWofNamePart(currencies[4])](4, item_model.getPriceForCurrency(4)));
                    break;
                default:
                    pay_handler.addPayOption(new west.wof['WofPayOption' + prepareWofNamePart(currencies[item_model.getCurrency()])](item_model.getCurrency(), item_model.getPriceForCurrency(item_model.getCurrency())));
                    break;
            }
            pay_handler.askUser(null, doBuy, {class_name: 'buy_item'});
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'factory', class_path = 'west.window.shop', class_parent = 'west.game.factory', class_object = {
        _class_path: class_path, createItem: function (options, type) {
            var namespace = 'west.game.shop.item', Item = this._getClass('model', namespace + (type ? '.' + type : ''), namespace), item;
            if (Item) {
                item = new Item(options);
            }
            return item;
        }, createCategory: function (data, type) {
            var namespace = 'west.game.shop.category', Category = this._getClass('model', namespace + (type ? '.' + type : ''), namespace), category;
            if (Category) {
                category = new Category({data: data});
            }
            return category;
        }, createOffer: function (options, type) {
            var namespace = 'west.game.shop.offer', Offer = this._getClass('model', namespace + (type ? '.' + type : ''), namespace), offer;
            if (Offer) {
                offer = new Offer(options);
            }
            return offer;
        }, createItemForSell: function (item_id, count, inv_id) {
            var item = new tw2widget.Item(ItemManager.get(item_id)).setShowSellPrice(false).setCount(count).setCharacter(Character);
            item.inv_id = inv_id;
            return item;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        single_instance = true, class_name = 'controller', class_path = 'west.window.shop', class_parent = 'west.game.window.controller', class_object = {
            _class_id: 'shop_window',
            _namespace: class_path,
            _class_path: class_path,
            _window_id: 'new_item_shop',
            _window_class: 'item_shop',
            init: function () {
                this.callParent.apply(this, arguments);
                this.getModel().setFactory(this.getFactory()).parseData();
                this.initSubcontrollers();
                return this;
            },
            initSubcontrollers: function () {
                this.setController('search', this._getOrInitClass('west.game.shop.search.controller', {
                    controllers: {window: this},
                    data: {data_model: this.getModel()}
                }));
                this.setController('tabs', this._getOrInitClass('west.game.shop.tabs.controller', {
                    controllers: {window: this},
                    data: {data_model: this.getModel()}
                }));
                this.setController('footer', this._getOrInitClass('west.game.shop.footer.controller', {controllers: {window: this}}));
            },
            executeQueue: function () {
                var that = this, model = this.getModel();
                $.each(model.getOrderQueue(), function (i, o) {
                    switch (o.action) {
                        case'search':
                            that.search(o.parameters);
                            break;
                        case'promotion':
                            that.showPromotion(o.parameters);
                            break;
                        case'category':
                        default:
                            that.showCategory(o.parameters);
                            break;
                    }
                });
                model.clearOrderQueue();
                return this;
            },
            setController: function (controller_id, controller_class) {
                return this._setProperty('controller', controller_id, controller_class);
            },
            getController: function (controller_id) {
                return this._getProperty('controller', controller_id);
            },
            setEventListeners: function () {
                var wnd = this.getWindow(), view = this.getView();
                view.getDropzone().asDropzone('.item_inventory_img', false, this.handleInventoryItemDrop.bind(this));
                EventHandler.listen('pshop_item_changed', this._updateItem, this, {boundto: wnd});
                EventHandler.listen('pshop_item_removed', this._removeItem, this, {boundto: wnd});
                EventHandler.listen('inventory_item_drag', this.handleInventoryItemDrag, this, {boundto: wnd});
                EventHandler.listen('window.resolution_change', this.handleResolutionChange, this, {boundto: wnd});
                return this;
            },
            removeEventListeners: function () {
                EventHandler.unlisten('pshop_item_changed', this._updateItem, this);
                EventHandler.unlisten('pshop_item_removed', this._removeItem, this);
                EventHandler.unlisten('inventory_item_drag', this.handleInventoryItemDrag, this);
                EventHandler.unlisten('window.resolution_change', this.handleResolutionChange, this);
                return this;
            },
            getDynamicData: function (options) {
                options:options || {};
                var that = this, model = this.getModel(), shop_window = this.getWindow(), data = {'source': options.source};
                model.setDataReady(false);
                Ajax.remoteCallMode('shop_trader', 'index', data, function (response) {
                    if (response.error) {
                        return new UserMessage(response.msg).show();
                    }
                    model.setCurrencies(response.currencies).setInventory(response.inventory).setTabsOrder(response.tabOrder).setOffers(response.promos).setDataReceived(true);
                    model.clearData().parseData().setDataReady(true);
                    if (response.traderTime) {
                        model.getCategory('trader').setRefreshTimeout(response.traderTime);
                    }
                    that.renderContent();
                }, shop_window ? {window: shop_window} : false);
                return this;
            },
            _updateItem: function (item_data) {
                var model = this.getModel(), item = model.getItem(item_data.item_id);
                if (item) {
                    item.updateData(item_data);
                } else {
                    model.addItem(item_data);
                }
                return this;
            },
            _removeItem: function (item_id) {
                var model = this.getModel(), item = model.getItem(item_id);
                if (item) {
                    item.soldOut();
                }
                return this;
            },
            prepareWindow: function () {
                this.callParent.apply(this, arguments);
                var that = this, wnd = this.getWindow(), model = this.getModel(), view = this.getView(), l10n = model.getL10n();
                wnd.setMiniTitle(l10n.window.mini_title);
                view.handleWindowSize();
                wnd.center();
                this.getController('tabs').setRoot(view.getTabs());
                this.getController('search').setRoot(view.getSearch());
                this.getController('footer').setRoot(view.getFooter());
                return this;
            },
            renderContent: function () {
                if (!this.hasWindow()) {
                    return this;
                }
                var model = this.getModel();
                this.getView().handleWindowSize();
                this.getController('tabs').render();
                this.getController('search').render();
                this.getController('footer').render();
                if (model.hasOrderQueue()) {
                    this.executeQueue();
                } else {
                    this.showCategory();
                }
                return this;
            },
            open: function (options) {
                options = options || {};
                var source;
                if ('string' === typeof options) {
                    source = options;
                    options = {};
                } else {
                    source = options.source;
                    delete options.source;
                }
                this.callParent.call(this, options);
                if (this.getModel().isDataReady()) {
                    this.renderContent();
                }
                this.getDynamicData({source: source});
                return this;
            },
            reLoad: function () {
                this.getDynamicData({source: 'reload'});
                return this;
            },
            showCategory: function (category_id) {
                var model = this.getModel(), tabs = this.getController('tabs'), search = this.getController('search'), category;
                if (!model.isDataReady()) {
                    model.addToOrderQueue({action: 'category', parameters: category_id});
                    return this;
                }
                if (category_id && model.hasCategory(category_id)) {
                    model.setCurrentCategoryId(category_id);
                } else {
                    category_id = model.getCurrentCategoryId() || model.getDefaultCategoryId();
                }
                category = model.getCategory(category_id);
                search.hide();
                tabs.highlight(category_id);
                this._setContentController(category_id, {
                    data: {
                        type: 'category',
                        id: category_id,
                        data_model: category
                    }
                });
                return this;
            },
            showPromotion: function (promotion_id) {
                var model = this.getModel(), tabs = this.getController('tabs'), search = this.getController('search'), view = this.getView(), promotion;
                if (!model.isDataReady()) {
                    model.addToOrderQueue({action: 'promotion', parameters: promotion_id});
                    return this;
                }
                if (promotion_id) {
                    promotion = model.getOffer(promotion_id);
                    if (!promotion.hasItemsDefined()) {
                        if (promotion.hasCategoryHighlight()) {
                            this.showCategory(promotion.getCategoryHighlight());
                        }
                        return this;
                    }
                    model.setCurrentPromotion(promotion_id);
                } else {
                    return this;
                }
                search.hide();
                tabs.highlight(false);
                this._setContentController(['promotion', promotion_id], {
                    data: {
                        type: 'promotion',
                        id: promotion_id,
                        data_model: promotion
                    }
                });
                return this;
            },
            showSearch: function () {
                var model = this.getModel(), tabs = this.getController('tabs'), search = this.getController('search'), data_model = search.getModel(), view = this.getView();
                tabs.highlight(false);
                this._setContentController('search', {data: {type: 'search', data_model: data_model}});
                return this;
            },
            search: function (search_query) {
                var model = this.getModel();
                if (!model.isDataReady()) {
                    model.addToOrderQueue({action: 'search', parameters: search_query});
                    return this;
                }
                this.getController('search').search(search_query);
                return this;
            },
            buyItem: function (item_id, options) {
                var model = this.getModel(), view = this.getView(), item = model.getItem(item_id);
                if (item) {
                    options = options || {};
                    view.showBuyDialog(item_id, options);
                    this.trackBuyItem(item_id, options.track);
                }
                return this;
            },
            openSellInventory: function () {
                Inventory.open(this.getWindow(), {
                    callback: this.handleInventoryClick,
                    context: this,
                    window: this.getWindow()
                });
                return this;
            },
            sellItem: function (item_id) {
                var model = this.getModel(), view = this.getView(), item = Bag.getItemByItemId(item_id);
                if (!item.obj.sellable) {
                    return this;
                }
                view.showSellDialog(item_id);
                return this;
            },
            handleInventoryClick: function (item) {
                this.sellItem(item.obj.item_id);
                return true;
            },
            handleInventoryItemDrop: function ($item) {
                this.sellItem($item.data('itemId'));
                return this;
            },
            handleInventoryItemDrag: function (status, $draggable, $helper) {
                var view = this.getView();
                if ('start' !== status || ($draggable && $draggable.parent('.item_inventory').hasClass('not_sellable'))) {
                    view.hideDropLayer();
                } else {
                    view.showDropLayer();
                }
            },
            handleResolutionChange: function (resolution) {
                if ('large' === resolution) {
                    this.getView().makeWindowBig();
                } else {
                    this.getView().makeWindowSmall();
                }
                return this;
            },
            trackBuyItem: function (item_id, options) {
                options = $.extend({}, options, {item_id: item_id});
                Ajax.remoteCall('shop_trader', 'track_shop_choose_item', options, function (json) {
                    if (json.error) {
                        return new UserMessage(json.msg).show();
                    }
                }, this.getWindow());
                return this;
            },
            requestBuy: function (currency_id, item_id) {
                var model = this.getModel(), currency = model.getCurrency(currency_id), item = model.getItem(item_id), options;
                switch (currency) {
                    case'nuggets':
                        if ('longtimer' === item.getType()) {
                            options = item_id + ' ' + item.getCurrentDuration();
                        } else {
                            options = 'itemshop ' + item_id;
                        }
                        Premium.actionUse(options, null, function (data) {
                            EventHandler.signal('inventory_changed');
                            Premium.updatePoints(data.points);
                            item.bought(data);
                        });
                        break;
                    case'bonds':
                    case'dollar':
                    case'veteran':
                        Ajax.remoteCall('shop_trader', 'buy', {
                            item_id: item_id,
                            category: item.getCategory(),
                            currency: currency_id
                        }, function (json) {
                            if (json.error) {
                                return new UserMessage(json.msg).show();
                            }
                            EventHandler.signal('inventory_changed');
                            Character.setUpb(json.bonds);
                            Character.setMoney(json.cash);
                            Character.setDeposit(json.deposit);
                            item.bought();
                            return new UserMessage(json.msg, UserMessage.TYPE_SUCCESS).show();
                        }, this.getWindow());
                        break;
                    default:
                        DEBUG && console.log('unknown currency', currencyId, type);
                        break;
                }
                return this;
            },
            requestSell: function (pass_data) {
                if (!pass_data) {
                    return this;
                }
                var
                    item_in_a_bag = Bag.getItemByInvId(pass_data.inv_id), data = {
                        inv_id: pass_data.inv_id,
                        town_id: Trader.id,
                        count: pass_data.count ? pass_data.count : 1,
                        last_inv_id: Bag.getLastInvId()
                    };
                item_in_a_bag.getImgEl().css('opacity', '0.3');
                Ajax.remoteCall('shop_trader', 'sell', data, function (json) {
                    if (json.error) {
                        new UserMessage(json.error, UserMessage.TYPE_ERROR).show();
                    } else {
                        Character.setMoney(json.money);
                        Bag.updateChanges(json.changes);
                        EventHandler.signal("trader_item_selled", [item_in_a_bag.obj["short"]]);
                    }
                    item_in_a_bag.getImgEl().css('opacity', '1.0');
                });
                return this;
            },
            _setContentController: function (name, options) {
                if ($.isArray(name)) {
                    name = name.join('.');
                }
                var current_controller = this.getController('content') || {}, new_controller = this._getClass('controller', 'west.game.shop.content.' + name, 'west.game.shop.content');
                if (current_controller && new_controller.prototype._class_id === current_controller.id && current_controller.getModel().getId() === options.data.id && current_controller.getModel().getDataModel() === options.data.data_model) {
                    if (!this.getModel().isContentReady()) {
                        current_controller.reRender();
                        this.getModel().setContentReady(true);
                    }
                    return this;
                }
                this._destroyContentController();
                options = $.extend(options, {controllers: {window: this}, root: this.getView().getContent()});
                this.setController('content', this._getOrInitClass(new_controller, options));
                return this;
            },
            _destroyContentController: function () {
                this._destroyProperty('controller', 'content');
                return this;
            },
            windowDestroy: function () {
                this._destroyContentController();
                this.getController('tabs').stopRender();
                this.getController('search').stopRender();
                this.getController('footer').stopRender();
                this.getModel().clearCurrentCategoryId();
                this.callParent.apply(this, arguments);
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
    if (single_instance) {
        west.window.shop = new (west.get(class_path + '.' + class_name));
    }
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.mpi.score_board.rewards', class_parent = 'west.game.window.tab.model', class_object = {
        _class_path: class_path,
        data: {
            animate: true,
            victorious: false,
            mission_name: 'Dominatrix',
            rewarded: true,
            veteran_points: {count: 0},
            mission_time: 0,
            stages: [],
            stages_reached: 0,
            stages_count: 5,
            player_bonus: [{desc: 'Игроки нокаутированные твоей командой', rewards: [{type: 'veteran', amount: 5}]}]
        },
        l10n: {
            window: {'title': {victory: 'Победа!', fail: 'Твоя команда проиграла!'}, 'tab_name': 'Обзор'},
            info: {
                'mission': function (mission_name) {
                    return '<strong>' + s('Перестрелка: %1', '</strong>' + mission_name);
                },
                'veteran_points': function (veteran_points) {
                    return '<strong>' + s('Очки славы: %1', '</strong><span class="value">' + veteran_points + '</span>');
                },
                'time': function (time) {
                    return '<strong>' + s('Время: %1', '</strong>' + time);
                },
                'chat_close': {
                    'soon': function (time) {
                        return s('Чат будет закрыт через %1', time);
                    }, 'closed': 'Чат сражения закрыт'
                },
                'stage': {
                    'locked': "Уровень награды заблокирован", 'number': function (stageId) {
                        return s("%1-й уровень вознаграждения", stageId);
                    }
                },
                'penalty': {'inactivity': 'Ты остаёшься без награды из-за низкой активности.'},
                'bonus_reward': 'Дополнительные призы'
            },
            reward: {
                'reward_for': function (reward, what_for) {
                    return s('%1 за %2', reward, what_for);
                }
            }
        },
        parseData: function () {
            var factory = this.getController().getFactory(), stages = this.getStages(), l = stages.length, i = 0, stage;
            for (i; i < l; i++) {
                stage = stages[i];
                stage.value = stage.value || i + 1;
                stage.id = stage.value || i + 1;
                stage.popup = stage.popup || factory.createStageMouseover(stage);
            }
            this.setStagesReached(l);
            if (this.getStagesCount() && l < this.getStagesCount()) {
                stages = this.getStages();
                i = l;
                l = this.getStagesCount();
                for (i; i < l; i++) {
                    stages.push(this.createEmptyStage(i + 1));
                }
            }
        },
        setNewData: function () {
            this.setRendered(false);
            return this;
        },
        setRendered: function (bool) {
            this.setData('rendered', bool);
            return this;
        },
        isRendered: function () {
            return this.getData('rendered');
        },
        setAnimations: function (bool) {
            if (undefined !== bool) {
                this.setData('animate', !!bool);
            }
            return this;
        },
        isAnimated: function () {
            return this.getData('animate');
        },
        setVictory: function (victorious) {
            this.setData('victorious', victorious, true);
            return this;
        },
        isVictorious: function () {
            return this.getData('victorious');
        },
        setRewarded: function (rewarded) {
            this.setData('rewarded', rewarded);
        },
        isRewarded: function () {
            return this.getData('rewarded');
        },
        setPlayerBonus: function (bonus) {
            this.setData('player_bonus', bonus, true);
            return this;
        },
        getPlayerBonus: function () {
            return this.getData('player_bonus');
        },
        createEmptyStage: function (value) {
            return {value: value, popup: this.getL10n('info').stage.locked};
        },
        setStages: function (stages_data) {
            this.setData('stages', stages_data, true);
            this.parseData();
            return this;
        },
        getStages: function () {
            return this.getData('stages');
        },
        getStage: function (id) {
            var stages = this.getData('stages'), i = stages.length;
            while (i--) {
                if (stages[i].id === id) {
                    return stages[i];
                }
            }
        },
        setStagesCount: function (stages_count) {
            this.setData('stages_count', stages_count, true);
            return this;
        },
        getStagesCount: function () {
            return this.getData('stages_count');
        },
        setStagesReached: function (count) {
            this.setData('stages_reached', count);
            return this;
        },
        getStagesReached: function () {
            return this.getData('stages_reached');
        },
        setMissionName: function (mission_name) {
            this.setData('mission_name', mission_name, true);
            return this;
        },
        getMissionName: function () {
            return this.getData('mission_name');
        },
        setVeteranPointsCount: function (count) {
            this.getData('veteran_points').count = count;
            return this;
        },
        getVeteranPointsCount: function () {
            return this.getData('veteran_points').count;
        },
        modifyVeteranPointsCount: function (delta) {
            this.getData('veteran_points').count += delta;
            return this;
        },
        getVeteranPointsMax: function () {
            return this.getData('veteran_points').max;
        },
        setMissionTime: function (mission_time) {
            this.setData('mission_time', Math.round(mission_time / 1000), true);
            return this;
        },
        getMissionTime: function () {
            return this.getData('mission_time');
        },
        setProgressbar: function (progressbar) {
            this.setData('progressbar', progressbar);
            return this;
        },
        getProgressbar: function () {
            return this.getData('progressbar');
        },
        hasItemReward: function () {
            if (!this.isRewarded())
                return false;
            var stages = this.getStages(), i = stages.length, j;
            while (i--) {
                if (stages[i].rewards) {
                    j = stages[i].rewards.length;
                    while (j--) {
                        if ('item' === stages[i].rewards[j].type) {
                            return true;
                        }
                    }
                }
            }
            return false;
        },
        clearData: function () {
            this.setStages([]).setVeteranPointsCount(0).setMissionTime(0).setVictory(false);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.mpi.score_board.rewards', class_parent = 'west.game.window.tab.view', class_object = {
        _class_path: class_path, addTabStructure: function () {
            this.callParent.call(this, arguments);
            this.getTab().append($('<div class="teaser"></div>'), $('<div class="paper"></div>').append($('<div class="info">'
                + '<div class="mission"></div>'
                + '<div class="veteran_points"></div>'
                + '<div class="time_wrapper"><span class="tw2gui-iconset tw2gui-icon-clock"></span><span class="time"></span></div>'
                + '<div class="end_timer"></div>'
                + '</div>'), $('<div class="progressbar_wrapper"></div>'), $('<div class="penalty"></div>'), $('<div class="rewards_wrapper"></div>')));
            return this;
        }, renderContent: function () {
            var $root = this.getRoot(), model = this.getModel(), l10n = model.getL10n('info');
            this.resetView();
            $('.progressbar_wrapper', $root).append(model.getProgressbar().getMainDiv());
            return this;
        }, updateInfo: function () {
            var $root = this.getRoot(), model = this.getModel(), l10n = model.getL10n('info');
            $('.mission', $root).html(l10n.mission(model.getMissionName()));
            $('.veteran_points', $root).html(l10n.veteran_points(model.getVeteranPointsCount()));
            $('.time', $root).html(l10n.time(model.getMissionTime().formatDurationBuffWay()));
            return this;
        }, setAnimated: function (bool) {
            this.getRoot().toggleClass('animated', bool);
            return this;
        }, setLoaded: function (bool) {
            this.getRoot().toggleClass('loaded', bool);
            return this;
        }, updateVeteranPoints: function ($el, delta) {
            var $root = this.getRoot(), controller = this.getController(), model = controller.getModel(), total_points = model.getVeteranPointsCount();
            if (!$el || !$el.length) {
                if (delta) {
                    $el = $('.veteran_points .value', $root);
                } else {
                    return;
                }
            }
            west.common.countTo($('.veteran_points .value', $root), total_points);
            $el.append($('<div class="diff ' + (delta > 0 ? 'add' : 'del') + '">' + (delta > 0 ? '+' : '') + delta + '</div>').delay(1300).queue(function () {
                $(this).dequeue().remove();
            }));
        }, showItemReward: function (item_id) {
            var $root = this.getRoot();
            $root.addClass('with_reward');
            window.setTimeout(function () {
                $('.rewards_wrapper', $root).append(new tw2widget.Item(ItemManager.getByBaseId(item_id)).getMainDiv()).addClass('active');
            }, 10);
            return this;
        }, showBonusRewards: function (rewards) {
            var $root = this.getRoot(), factory = this.getFactory(), $rewards = [];
            west.common.forEach(rewards, function (reward, type) {
                switch (type) {
                    case'veteran':
                        $rewards.push(new tw2widget.reward.VeteranReward(reward.amount).setText('').getMainDiv().addMousePopup(factory.createBonusRewardMouseover(reward.description)));
                        break;
                    default:
                        break;
                }
            });
            if ($rewards.length) {
                $root.addClass('with_reward');
                window.setTimeout(function () {
                    $('.rewards_wrapper', $root).append($rewards).addClass('active');
                }, 10);
            }
        }, setPenalty: function (reason) {
            var $root = this.getRoot(), l10n = this.getModel().getL10n('info').penalty, $penalty = $('.penalty', this.getRoot());
            $root.toggleClass('with_penalty', !!reason);
            $penalty.empty();
            if (reason) {
                window.setTimeout(function () {
                    $penalty.text(l10n[reason]).addClass('active');
                }, 10);
            }
            return this;
        }, resetView: function () {
            var that = this;
            this.getRoot().removeClass('with_reward');
            this.setPenalty(false).setAnimated(false).setLoaded(false).resetContent();
            window.setTimeout(function () {
                that.setAnimated(that.getModel().isAnimated());
            }, 10);
            return this;
        }, resetContent: function () {
            this.updateInfo();
            $('.rewards_wrapper', this.getRoot()).empty().removeClass('active');
            $('.penalty', this.getRoot()).empty().removeClass('active');
            return this;
        }, clearView: function () {
            this.updateInfo();
            this.getModel().getProgressbar().getMainDiv().detach();
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'factory', class_path = 'west.window.mpi.score_board.rewards', class_parent = 'west.game.window.factory', class_object = {
        _class_path: class_path, createStageMouseover: function (data) {
            var popup = $('<div class="mm_popup reward_popup"></div>'), l10n = this.getModel().getL10n('info').stage, i, reward;
            popup.append('<div class="popup-header stage-popup-header">' +
                l10n.number(data.id) + '<hr /></div>');
            if (data.desc) {
                popup.append('<div class="description">' + data.desc + '</div>');
            }
            if (data.rewards) {
                i = data.rewards.length;
                while (i--) {
                    reward = data.rewards[i];
                    if ("veteran" === reward.type) {
                        popup.append(new tw2widget.reward.VeteranReward(reward.amount).getMainDiv());
                    } else if ("item" === reward.type) {
                        popup.append(new tw2widget.reward.ItemReward(reward.id).getMainDiv());
                    }
                }
            }
            return {'locked': l10n.locked, 'unlocked': $('<div />').append(popup).html()};
        }, createBonusRewardMouseover: function (data) {
            var popup = $('<div class="mm_popup reward_popup bonus_reward"></div>'), header = this.getModel().getL10n('info').bonus_reward;
            popup.append('<div class="popup-header">' +
                header + '<hr /></div>', data);
            return $('<div />').append(popup).html();
        }, createBonusRewardDescriptionPart: function (type, description, amount) {
            var model = this.getModel(), l10n = model.getL10n('reward');
            return '<div class="description bonus_reward_desc">' + l10n.reward_for('<strong>' + amount + '</strong>', description) + '</div>';
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.mpi.score_board.rewards', class_parent = 'west.game.window.tab.controller', class_object = {
        _tab_id: 'rewards',
        _class_id: 'rewards',
        _namespace: 'west.window.mpi.score_board',
        _class_path: class_path,
        init: function () {
            this.callParent.apply(this, arguments);
            this.setProgressbar();
            return this;
        },
        setProgressbar: function () {
            var model = this.getModel(), p_bar = new tw2widget.gui.progressbar_stageable();
            p_bar.getMainDiv().on('stageable_progressbar:stage:change', this.handleStageChange.bind(this)).on('stageable_progressbar:stages:change', this.handleStagesChange.bind(this));
            model.setProgressbar(p_bar);
        },
        show: function () {
            var that = this, wnd = this.getWindow(), model = this.getModel(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title[model.isVictorious() ? 'victory' : 'fail']).addClass('noreload');
            this.callParent();
            that.showProgress();
            this.handleCloseTimer();
            return this;
        },
        showProgress: function () {
            var that = this, model = this.getModel(), view = this.getView();
            if (!model.isRendered()) {
                view.resetView();
                this.restartComponents();
                if (model.isRewarded()) {
                    window.setTimeout(function () {
                        model.getProgressbar().setAnimate(model.isAnimated()).setMax(model.getStagesCount()).addStages(model.getStages()).setValue(model.getStagesReached());
                        view.setLoaded(true);
                        that.handlePlayerBonus();
                    }, 50);
                } else {
                    model.getProgressbar().setMax(model.getStagesCount()).addStages(model.getStages()).setValue(model.getStagesReached());
                    view.setLoaded(true).setPenalty('inactivity');
                }
                model.setRendered(true);
            }
        },
        handleStageChange: function (e, type, data) {
            var model = this.getModel(), view = this.getView(), stage = model.getStage(data.value), i, value;
            if ('locked' === type) {
                return this;
            }
            if (model.isRewarded() && stage && stage.rewards) {
                i = stage.rewards.length;
                while (i--) {
                    if ('veteran' === stage.rewards[i].type) {
                        value = stage.rewards[i].amount;
                        model.modifyVeteranPointsCount(value);
                        view.updateVeteranPoints(stage.$el, value);
                    }
                    if ('item' === stage.rewards[i].type) {
                        view.showItemReward(stage.rewards[i].id);
                    }
                }
            }
            return this;
        },
        handleStagesChange: function (e) {
            this.getModel().setVeteranPointsCount(0);
            this.getView().resetContent();
            return this;
        },
        restartComponents: function () {
            var progressbar = this.getModel().getProgressbar();
            progressbar.setAnimate(false).setValue(0);
            return this;
        },
        handleCloseTimer: function () {
            var main_model = this.getWindowController().getModel(), l10n = this.getModel().getL10n('info').chat_close, $timer = $('.end_timer', this.getRoot()), close_in, timer_interval;
            if (main_model.hasCloseIn()) {
                timer_interval = window.setInterval(function () {
                    close_in = Math.floor((main_model.getCloseIn() - new ServerDate().getTime()) / 1000 - 1);
                    if (!main_model.hasGame() || close_in <= 0) {
                        $timer.text(l10n.closed);
                        return window.clearInterval(timer_interval);
                    }
                    $timer.text(l10n.soon(close_in.formatDurationBuffWay()));
                }, 1000);
            } else {
                $timer.text(l10n.closed);
            }
            return this;
        },
        handlePlayerBonus: function () {
            var model = this.getModel(), view = this.getView(), factory = this.getFactory(), bonuses = model.getPlayerBonus(), i = bonuses.length, bonus, j, rewards = {};
            while (i--) {
                bonus = bonuses[i];
                j = bonus.rewards.length;
                while (j--) {
                    switch (bonus.rewards[j].type) {
                        case'veteran':
                            if (rewards.veteran) {
                                rewards.veteran.amount += bonus.rewards[j].amount;
                                rewards.veteran.description.push(factory.createBonusRewardDescriptionPart('teveran', bonus.desc, bonus.rewards[j].amount));
                            } else {
                                rewards.veteran = {
                                    amount: bonus.rewards[j].amount,
                                    description: [factory.createBonusRewardDescriptionPart('teveran', bonus.desc, bonus.rewards[j].amount)]
                                };
                            }
                            break;
                    }
                }
            }
            if (rewards.veteran) {
                model.modifyVeteranPointsCount(rewards.veteran.amount);
                view.updateVeteranPoints(null, rewards.veteran.amount);
            }
            view.showBonusRewards(rewards);
            return this;
        },
        windowDestroy: function () {
            this.restartComponents();
            this.getModel().clearData();
            this.getView().clearView();
            this.callParent.apply(this, arguments);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.mpi.score_board.statistics', class_parent = 'west.game.window.tab.model', class_object = {
        _class_path: class_path,
        data: {
            stats: {},
            entities: {},
            columns: [],
            settings: {
                'player-damage': {collapsable: true, collapsed: true},
                'player-crit': {collapsable: true, collapsed: true}
            },
            rows_to_display: [{
                path: 'player-damage',
                order: ['done', 'normal', 'ability']
            }, {path: 'player-damage-taken'}, {path: 'player-hit-amount'}, {
                path: 'player-crit',
                order: ['amount', 'max', 'damage']
            }, {path: 'player-healing'}, {path: 'player-died'}, {path: 'player-kod-enemy'}, {path: 'player-dodged'}, {path: 'player-missed'}],
            columns_max: 5,
            columns_offset: 0,
            scrollbar_vertical: null
        },
        l10n: {
            window: {'title': 'Статистика перестрелки', 'tab_name': 'Статистика'},
            'row_headers': {
                'ability-executed': 'Использовано умений',
                'ability-executed-Attack': 'Атака',
                'ability-executed-Move': 'Передвижение',
                'ability-executed-Barrelroll': 'Установка бочек',
                'ability-executed-BurningTequila': 'Горящая текила',
                'ability-executed-EagleEye': 'Орлиный глаз',
                'ability-executed-Inspire': 'Вдохновение',
                'ability-executed-Quickshot': 'Двойной выстрел',
                'ability-executed-SnakeShot': 'Ядовитый выстрел',
                'ability-executed-AreaHeal': 'Область лечения',
                'ability-executed-Heal': 'Лечение',
                'ability-executed-Snare': 'Установка капканов',
                'player-damage': 'Урон',
                'player-damage-taken': 'Получено урона',
                'player-damage-done': 'Нанесено урона',
                'player-damage-normal': 'Нормальный урон',
                'player-damage-ability': 'Дополнительный урон',
                'player-hit-amount': 'Попаданий',
                'player-hit-damage': 'Нанесено базового урона',
                'player-hit-max': 'Максимальный нанесённый урон',
                'player-crit-amount': 'Критических попаданий',
                'player-crit-damage': 'Суммарный критический урон',
                'player-crit-max': 'Лучший критический урон',
                'player-hit-friendly-amount': 'Попаданий по союзнику',
                'player-hit-friendly-damage': 'Нанесено урона союзнику',
                'player-healing': 'Вылечено ран',
                'player-healing-done': 'Вылечено урона',
                'player-healing-received': 'Вылечено урона союзником',
                'player-died': 'Потеряно сознаний',
                'player-kod-enemy': 'Лишено сознаний',
                'player-dodged': 'Уклонений',
                'player-missed': 'Промахов',
                'player-walked': 'Шагов'
            },
            'column_headers': {}
        },
        getTabName: function () {
            return this.getL10n('window').tab_name;
        },
        parseInitData: function (data) {
            return data;
        },
        parseData: function () {
            var that = this, stats = this.getData('stats'), current_player = this.getPlayer(), players = this.getPlayers(), data = {}, l10n = this.getL10n('row_headers'), tmp;
            west.common.forEach(stats, function (value, id) {
                var params = id.replace(/\:/g, '-'), params_split = params.split('-'), params_short = params_split.slice(0), player_id = params_short.pop(), team_id = players[player_id] ? players[player_id].team.id : false, namespace;
                if (!team_id) {
                    return;
                }
                params_short = params_short.join('-');
                that.getNamespace(data, params, value);
                namespace = that.getNamespace(data, params_short);
                if (!namespace['l10n_id']) {
                    namespace['l10n_id'] = params_short;
                }
                if ('games' === params_split[0]) {
                    namespace['team_' + team_id] = namespace['team_' + team_id] || value;
                } else if ('max' === params_split[params_split.length - 2]) {
                    namespace['team_' + team_id] = (value > (namespace['team_' + team_id] || 0) ? value : namespace['team_' + team_id]);
                } else {
                    namespace['team_' + team_id] = (namespace['team_' + team_id] || 0) + value;
                }
                if (!l10n[params_short]) {
                    l10n[params_short] = params_short;
                }
            });
            this.setStaistics(data);
            tmp = {players: [], teams: [], teams_found: []};
            west.common.forEach(players, function (player, player_id) {
                var
                    player_object = {
                        type: 'player',
                        id: player_id,
                        team_id: player.team.id,
                        name: player.data.name,
                        own: current_player.id === player_id,
                        own_team: current_player.team.id === player.team.id
                    }, team_object;
                if (!~tmp.teams_found.indexOf(player.team.id)) {
                    team_object = {
                        type: 'team',
                        id: player.team.id,
                        team_id: player.team.id,
                        name: player.team.name,
                        own: current_player.team.id === player.team.id
                    };
                    tmp.teams.push(team_object);
                    tmp.teams_found.push(team_object.id);
                }
                tmp.players.push(player_object);
            });
            tmp.teams.sort(function (a, b) {
                a = (a.own ? -1 : a.team_id);
                b = (b.own ? -1 : b.team_id);
                return a - b;
            });
            tmp.players.sort(function (a, b) {
                a = (a.own ? -2 : (a.own_team ? -1 : a.team_id));
                b = (b.own ? -2 : (b.own_team ? -1 : b.team_id));
                return a - b;
            });
            this.setColumns(tmp.teams.concat(tmp.players));
            tmp = {};
            this.calculateDamage();
        },
        setStatisticsData: function (stats) {
            this.setData('stats', stats, true);
            this.parseData();
            return this;
        },
        setStaistics: function (data) {
            this.setData('stats_data', data, true);
            return this;
        },
        getStatistics: function () {
            return this.getData('stats_data');
        },
        calculateDamage: function () {
            var data = this.getStatistics(), damage = this.getNamespace(data, 'player-damage'), columns = this.getColumns(), id;
            damage.normal = this.getNamespace(data, 'ability-damage-dealt-total-Attack');
            damage.normal.l10n_id = 'player-damage-normal';
            damage.ability = {'l10n_id': 'player-damage-ability'};
            columns.forEach(function (column) {
                id = ('team' === column.type ? 'team_' : '') + column.id;
                damage.ability[id] = (damage.done[id] || 0) - (damage.normal[id] || 0);
            });
            return this;
        },
        getDisplayData: function () {
            return this.getData('rows_to_display');
        },
        setPlayer: function (playerEntity) {
            this.setData('player_entity', playerEntity, true);
            return this;
        },
        getPlayer: function () {
            return this.getData('player_entity');
        },
        hasPlayer: function () {
            return !!this.getPlayer();
        },
        setPlayers: function (entities) {
            this.setData('entities', entities, true);
            return this;
        },
        getPlayers: function () {
            return this.getData('entities');
        },
        hasPlayers: function () {
            return !!this.getPlayers();
        },
        setStylesheet: function (stylesheet) {
            this.setData('stylesheet', stylesheet, true);
            return this;
        },
        getStylesheet: function () {
            return this.getData('stylesheet');
        },
        getSettings: function () {
            return this.getData('settings');
        },
        getSetting: function (id) {
            return this.getSettings()[id];
        },
        setColumns: function (columns) {
            this.setData('columns', columns, true);
            return this;
        },
        getColumns: function () {
            return this.getData('columns');
        },
        getColumnsMax: function () {
            return this.getData('columns_max');
        },
        getColumnsOffsetMax: function () {
            return this.getColumns().length - this.getColumnsMax();
        },
        setColumnsOffset: function (offset) {
            this.setData('columns_offset', offset, true);
            return this;
        },
        getColumnsOffset: function () {
            return this.getData('columns_offset');
        },
        setScrollbarVertical: function (scrollbar_vertical) {
            this.setData('scrollbar_vertical', scrollbar_vertical);
            return this;
        },
        getScrollbarVertical: function () {
            return this.getData('scrollbar_vertical');
        },
        setScrollbarHorizontal: function (scrollbar_horizontal) {
            this.setData('scrollbar_horizontal', scrollbar_horizontal);
            return this;
        },
        getScrollbarHorizontal: function () {
            return this.getData('scrollbar_horizontal');
        },
        getNamespace: function (scope, name, value) {
            var parts = name.split('-'), i, len = parts.length;
            for (i = 0; i < len; i++) {
                scope = scope[parts[i]] = scope[parts[i]] || (i == len - 1 && value || {});
            }
            return scope;
        },
        clearData: function () {
            this.setPlayer(null).setPlayes({});
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.mpi.score_board.statistics', class_parent = 'west.game.window.tab.view', class_object = {
        _class_path: class_path, renderContent: function () {
            var $root = this.getRoot(), model = this.getModel(), l10n = model.getL10n('column_headers'), order = model.getColumns(), i = 0, l = order.length, $content, header = '<div class="row_header column_header"></div>';
            $content = $('<div class="statistics_container">'
                + '<div class="scroll_wrapper_horizontal">'
                + '<div class="statistics_header"></div>'
                + '<div class="scroll_wrapper_vertical">'
                + '<ul class="statistics_body"></ul>'
                + '</div>'
                + '</div>'
                + '</div>');
            for (i; i < l; i++) {
                header += '<div class="column_header ' + this.createColumnClassname(order[i]) + '">' + order[i].name + '</div>';
            }
            $('.statistics_header', $content).html(header);
            $root.html($content);
            return this;
        }, getHeader: function () {
            return $('.statistics_header', this.getRoot());
        }, getBody: function () {
            return $('.statistics_body', this.getRoot());
        }, getContainer: function () {
            return $('.statistics_container', this.getRoot());
        }, getScrollWrapperVertical: function () {
            return $('.scroll_wrapper_vertical', this.getRoot());
        }, getScrollWrapperHorizontal: function () {
            return $('.scroll_wrapper_horizontal', this.getRoot());
        }, setScrollWrapperHorizontalWidth: function () {
            var model = this.getModel(), columns = model.getColumns().length, headers_size = 209, column_size = 92, buffor = 30;
            this.getScrollWrapperHorizontal().css({'width': headers_size + (columns * column_size) + buffor});
            return this;
        }, removeHorizontalScrollbar: function () {
            this.getScrollWrapperHorizontal().empty();
            return this;
        }, toggleGroup: function ($el, bool) {
            if ($el.not('.group')) {
                $el = $el.closest('.group');
            }
            $el.toggleClass('collapsed', bool);
            return this;
        }, highlightTeam: function (team_id, $el) {
            if ($el.not('.row')) {
                $el = $el.closest('.row');
            }
            $el.addClass('team_' + team_id);
            return this;
        }, unhighlightTeam: function ($el) {
            var columns = this.getModel().getColumns(), i = columns.length, classes = [];
            if ($el.not('.row')) {
                $el = $el.closest('.row');
            }
            while (i--) {
                if ('team' === columns[i].type) {
                    classes.push('team_' + columns[i].id);
                }
            }
            $el.removeClass(classes.join(' '));
            return this;
        }, createGroup: function (namespace, $root) {
            var model = this.getModel(), l10n = model.getL10n('row_headers'), s = model.getData('settings')[namespace], $new_root = $('<div class="group_wrapper"></div>'), $group = $('<div class="group"></div>');
            if (s) {
                $group.addClass([(s.header ? 'with_header' : ''), (s.collapsable ? 'collapsable' : ''), (s.collapsed ? 'collapsed' : '')].join(' '));
                $group.data('settings_id', namespace);
                if (s.collapsable) {
                    $group.append('<div class="collapse_toggler"></div>');
                }
                if (s.header) {
                    $group.append('<div class="group_header">' + l10n[namespace] + '</div>');
                }
            }
            $root.append($group.append($new_root));
            return $new_root;
        }, createEntriesRow: function (data, $root) {
            var model = this.getModel(), l10n = model.getL10n('row_headers'), order = model.getColumns(), players = model.getPlayers(), player = model.getPlayer(), local_root = $('<dl class="row"></dl>'), i = 0, l = order.length;
            local_root.append($('<dt class="row_header">' + l10n[data.l10n_id] + '</dt>'));
            for (i; i < l; i++) {
                local_root.append('<dd'
                    + ' data-team_id="' + order[i].team_id + '"'
                    + ' class="'
                    + 'row_element'
                    + ' ' + this.createColumnClassname(order[i])
                    + ' t_' + order[i].type
                    + ('player' === order[i].type ? ' team_' + players[order[i].id].team.id : ' team_' + order[i].id)
                    + '"'
                    + '>'
                    + ~~('team' === order[i].type ? data['team_' + order[i].id] : data[order[i].id])
                    + '</dd>');
            }
            $root.append(local_root);
        }, createColumnClassname: function (data) {
            return 'c_' + data.type + '_' + data.id;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'controller', class_path = 'west.window.mpi.score_board.statistics', class_parent = 'west.game.window.tab.controller', class_object = {
        _tab_id: 'statistics',
        _class_id: 'statistics',
        _namespace: 'west.window.mpi.score_board',
        _class_path: class_path,
        show: function () {
            var wnd = this.getWindow(), model = this.getModel(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title).addClass('noreload');
            this.renderStatistics().addScrollbar().addEventListeners();
            this.callParent();
            return this;
        },
        renderStatistics: function () {
            var model = this.getModel(), view = this.getView(), data = model.getData('stats_data'), display_data = model.getDisplayData(), $stats_body = view.getBody();
            var loop = function (input, $root, namespace) {
                west.common.forEach(input, function (value, id) {
                    if (value.l10n_id) {
                        view.createEntriesRow(value, $root);
                    } else {
                        loop(value, view.createGroup(namespace + '-' + id, $root), namespace + '-' + id);
                    }
                });
            };
            $stats_body.empty();
            display_data.forEach(function (group_data) {
                var row = model.getNamespace(data, group_data.path), $root;
                if (!$.isEmptyObject(row)) {
                    $root = $('<li></li>').appendTo($stats_body);
                    if (row.l10n_id) {
                        view.createEntriesRow(row, $root);
                    } else {
                        $root = view.createGroup(group_data.path, $root);
                        if (group_data.order) {
                            group_data.order.forEach(function (id) {
                                view.createEntriesRow(row[id], $root);
                            });
                        } else {
                            loop(row, $root);
                        }
                    }
                }
            });
            view.setScrollWrapperHorizontalWidth();
            return this;
        },
        addEventListeners: function () {
            this.removeEventListeners();
            var $root = this.getRoot();
            $root.on('click.statistics', '.collapse_toggler', this.handleGroupToggle.bind(this)).on('mouseenter.statistics', '.row_element', this.handleElementHighlight.bind(this)).on('mouseleave.statistics', '.row_element', this.handleElementBlur.bind(this)).on('mousewheel.statistics', this.handleMousewheel.bind(this));
            return this;
        },
        removeEventListeners: function () {
            this.getRoot().off('.statistics');
        },
        addScrollbar: function () {
            var model = this.getModel(), view = this.getView(), scrollbar_vertical = model.getScrollbarVertical(), scrollbar_horizontal = model.getScrollbarHorizontal(), $container = view.getContainer();
            if (!scrollbar_vertical) {
                scrollbar_vertical = new west.gui.Scrollbar(false, false).addDragListener(this.handleScrollVertical, this, true);
                model.setScrollbarVertical(scrollbar_vertical);
            }
            if (!scrollbar_horizontal) {
                scrollbar_horizontal = new west.gui.Scrollbar(true, false).addDragListener(this.handleScrollHorizontal, this, true);
                model.setScrollbarHorizontal(scrollbar_horizontal);
            }
            if (!$('.tw2gui_scrollbar.vertical', $container).length) {
                $container.append(scrollbar_vertical.getMainDiv());
            }
            if (!$('.tw2gui_scrollbar.horizontal', $container).length) {
                $container.append(scrollbar_horizontal.getMainDiv());
            }
            window.setTimeout(this.updateScrollbars.bind(this), 150);
            return this;
        },
        updateScrollbars: function () {
            var model = this.getModel(), view = this.getView();
            model.getScrollbarVertical().setPullRange(view.getBody().height());
            model.getScrollbarHorizontal().setPullRange(view.getBody().width());
        },
        handleScrollVertical: function (bar, pos, oldpos, isvertical) {
            this.getView().getBody().css('margin-top', -pos);
        },
        handleScrollHorizontal: function (bar, pos, oldpos, isvertical) {
            this.getView().getScrollWrapperHorizontal().css('margin-left', -pos);
        },
        handleGroupToggle: function (e) {
            var model = this.getModel(), view = this.getView(), $group = $(e.currentTarget).closest('.group'), id = $group.data('settings_id'), settings = model.getSetting(id);
            settings.collapsed = !settings.collapsed;
            view.toggleGroup($group, settings.collapsed);
            this.updateScrollbars();
        },
        handleElementHighlight: function (e) {
            var view = this.getView(), $el = $(e.currentTarget), team_id = $el.data('team_id');
            view.highlightTeam(team_id, $el);
        },
        handleElementBlur: function (e) {
            var view = this.getView(), $el = $(e.currentTarget);
            view.unhighlightTeam($el);
        },
        handleMousewheel: function (e, delta, deltaX, deltaY) {
            var model = this.getModel(), scrollbar_vertical = model.getScrollbarVertical(), scrollbar_horizontal = model.getScrollbarHorizontal();
            if (scrollbar_vertical) {
                scrollbar_vertical.onWheeled(deltaY);
            }
            if (scrollbar_horizontal) {
                scrollbar_horizontal.onWheeled(-deltaX);
            }
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.mpi.score_board', class_parent = 'west.game.window.model', class_object = {
        _class_path: class_path,
        data: {
            tmp_data: {
                data: {
                    "winner": 2,
                    "stages": {
                        "1": [],
                        "2": [{
                            "desc": "Your team scored 7 points.",
                            "opts": {"counter": 35, "counter_min": 7}
                        }, {
                            "desc": "Your team scored 14 points.",
                            "opts": {"counter": 35, "counter_min": 14}
                        }, {
                            "desc": "Your team scored 21 points.",
                            "opts": {"counter": 35, "counter_min": 21}
                        }, {
                            "desc": "Your team scored 28 points.",
                            "opts": {"counter": 35, "counter_min": 28}
                        }, {"desc": "Your team scored 35 points.", "opts": {"counter": 35, "counter_min": 35}}]
                    },
                    "stageRewards": {
                        "fake_6": [],
                        "fake_8": [[{"type": "veteran", "amount": 50}], [{
                            "type": "veteran",
                            "amount": 50
                        }], [{"type": "veteran", "amount": 50}], [{
                            "type": "veteran",
                            "amount": 50
                        }], [{"type": "veteran", "amount": 50}, {"type": "item", "id": 2618}]],
                        "fake_9": [[{"type": "veteran", "amount": 50}], [{
                            "type": "veteran",
                            "amount": 50
                        }], [{"type": "veteran", "amount": 50}], [{
                            "type": "veteran",
                            "amount": 50
                        }], [{"type": "veteran", "amount": 50}]],
                        "fake_7": []
                    },
                    "rewardedPlayers": ["fake_8", "fake_9", "fake_7"],
                    "stats": {
                        "ability-chosen:Heal:fake_8": 1,
                        "ability-chosen:Quickshot:fake_8": 1,
                        "ability-chosen:Inspire:fake_8": 1,
                        "ability-chosen:AreaHeal:fake_9": 1,
                        "ability-chosen:Barrelroll:fake_9": 1,
                        "ability-chosen:SnakeShot:fake_9": 1,
                        "ability-chosen:Snare:fake_7": 1,
                        "ability-chosen:EagleEye:fake_7": 1,
                        "ability-chosen:Quickshot:fake_7": 1,
                        "player-walked:fake_6": 25,
                        "ability-executed:Move:fake_6": 6,
                        "player-walked:fake_9": 49,
                        "ability-executed:Move:fake_9": 13,
                        "player-walked:fake_7": 37,
                        "ability-executed:Move:fake_7": 9,
                        "player-walked:fake_8": 57,
                        "ability-executed:Move:fake_8": 14,
                        "player-damage-taken:fake_8": 474,
                        "player-hit-amount:fake_7": 1,
                        "player-hit-damage:fake_7": 190,
                        "player-hit-max:fake_7": 190,
                        "player-damage-done:fake_7": 501,
                        "player-missed:fake_7": 2,
                        "player-dodged:fake_8": 1,
                        "ability-executed:Quickshot:fake_7": 2,
                        "ability-executed:Barrelroll:fake_6": 1,
                        "player-damage-taken:barrel_14_20_fake_6": 1,
                        "player-died:barrel_14_20_fake_6": 1,
                        "player-kod-enemy:fake_9": 1,
                        "player-hit-amount:fake_9": 7,
                        "player-hit-damage:fake_9": 669,
                        "player-hit-max:fake_9": 121,
                        "player-damage-done:fake_9": 669,
                        "ability-executed:Attack:fake_9": 5,
                        "player-damage-taken:barrel_14_19_fake_6": 1,
                        "player-died:barrel_14_19_fake_6": 1,
                        "player-kod-enemy:fake_8": 1,
                        "player-hit-amount:fake_8": 7,
                        "player-hit-damage:fake_8": 460,
                        "player-hit-max:fake_8": 78,
                        "player-damage-done:fake_8": 550,
                        "ability-executed:Attack:fake_8": 3,
                        "ability-executed:EagleEye:fake_6": 2,
                        "ability-executed:Inspire:fake_8": 3,
                        "ability-executed:Snare:fake_7": 5,
                        "player-damage-taken:fake_6": 675,
                        "ability-executed:SnakeShot:fake_9": 3,
                        "healing-done:fake_9": 140,
                        "player-damage-taken:fake_9": 741,
                        "player-healing-received:fake_8": 65,
                        "ability-executed:AreaHeal:fake_9": 2,
                        "ability-executed:EagleEye:fake_7": 2,
                        "healing-done:fake_8": 104,
                        "ability-executed:Heal:fake_8": 2,
                        "player-missed:fake_8": 1,
                        "player-dodged:fake_6": 2,
                        "ability-executed:Quickshot:fake_8": 3,
                        "player-crit-amount:fake_6": 1,
                        "player-crit-damage:fake_6": 430,
                        "player-crit-max:fake_6": 430,
                        "player-damage-done:fake_6": 714,
                        "ability-executed:Attack:fake_6": 2,
                        "ability-executed:Barrelroll:fake_9": 1,
                        "healing-done:fake_6": 21,
                        "player-healing-received:fake_6": 21,
                        "player-damage-taken:fake_7": 489,
                        "ability-executed:AreaHeal:fake_6": 1,
                        "player-hit-amount:fake_6": 1,
                        "player-hit-damage:fake_6": 284,
                        "player-hit-max:fake_6": 284,
                        "player-crit-amount:fake_7": 1,
                        "player-crit-damage:fake_7": 311,
                        "player-crit-max:fake_7": 311,
                        "player-dodged:fake_9": 1,
                        "player-missed:fake_9": 1,
                        "player-healing-received:fake_9": 127,
                        "player-crit-amount:fake_8": 1,
                        "player-crit-damage:fake_8": 90,
                        "player-crit-max:fake_8": 90,
                        "games-played:custom:fake_6": 1,
                        "games-survived:fake_6": 1,
                        "games-inactive:fake_6": 1,
                        "games-lost:fake_6": 1,
                        "games-rounds-taken:fake_6": 33,
                        "games-played:custom:fake_8": 1,
                        "games-survived:fake_8": 1,
                        "games-won:fake_8": 1,
                        "games-rounds-taken:fake_8": 33,
                        "games-played:custom:fake_9": 1,
                        "games-survived:fake_9": 1,
                        "games-won:fake_9": 1,
                        "games-rounds-taken:fake_9": 33,
                        "games-played:custom:fake_7": 1,
                        "games-survived:fake_7": 1,
                        "games-lost:fake_7": 1,
                        "games-rounds-taken:fake_7": 33
                    },
                    "bonus": {"fake_6": [], "fake_8": [], "fake_9": [], "fake_7": []},
                    "game": {
                        "playTime": 682280,
                        "closesIn": 1415113998692,
                        "mapName": "Rush on Tombstone",
                        "map": "domination",
                        "stagesCount": {"1": 5, "2": 5}
                    }
                },
                own_entity: {id: 'fake_6', data: {name: 'ffake player'}, team: {id: 1, name: 'fake team'}},
                entities: {
                    fake_6: {id: 'fake_6', data: {name: 'ffake player'}, team: {id: 1, name: 'fake team'}},
                    fake_7: {id: 'fake_7', data: {name: 'ffake player2'}, team: {id: 1, name: 'fake team'}},
                    fake_8: {id: 'fake_8', data: {name: 'ffake player3'}, team: {id: 2, name: 'fake team2'}},
                    fake_9: {id: 'fake_9', data: {name: 'ffake player4'}, team: {id: 2, name: 'fake team2'}}
                }
            }, player_entity: null, close_in: null
        },
        l10n: {
            window: {'title': 'Перестрелка закончилась!', 'mini_title': 'Твоя статистика перестрелки'},
            help: {'mouseover': 'Помощь'}
        },
        getTmpData: function () {
            return this.getData('tmp_data');
        },
        setDataString: function (data_string) {
            this.setData('data_string', data_string, true);
            return this;
        },
        setCloseIn: function (time_period) {
            this.setData('close_in', time_period, true);
            return this;
        },
        getCloseIn: function () {
            return this.getData('close_in');
        },
        hasCloseIn: function () {
            return this.getCloseIn() > new ServerDate().getTime();
        },
        setSocket: function (socket) {
            this.setData('socket', socket, true);
            return this;
        },
        getSocket: function () {
            return this.getData('socket');
        },
        clearSocket: function () {
            this.setSocket(null);
            return this;
        },
        setGame: function (game) {
            this.setData('game', game, true);
            return this;
        },
        getGame: function () {
            return this.getData('game');
        },
        hasGame: function () {
            return !!this.getGame();
        },
        clearGame: function () {
            this.setGame(null);
            return this;
        },
        clearData: function () {
            this.clearGame().clearSocket();
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.mpi.score_board', class_parent = 'west.game.window.view', class_object = {
        _class_path: class_path,
        addHelp: function () {
            var root = this.getRoot(), model = this.getModel(), l10n = model.getL10n('help');
            $(root).append($('<div class="button help"></div>').addMousePopup(l10n.mouseover));
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    var
        single_instance = true, class_name = 'controller', class_path = 'west.window.mpi.score_board', class_parent = 'west.game.window.controller', class_object = {
            _class_id: 'mpi.score_board',
            _namespace: class_path,
            _class_path: class_path,
            _window_id: 'adventures_score_board',
            _window_class: 'adventures_window score_board',
            init: function () {
                this.callParent.apply(this, arguments);
                this.initTabs();
                return this;
            },
            initTabs: function () {
                this.setTab(new west.window.mpi.score_board.rewards.controller({'window_controller': this}));
                this.setTab(new west.window.mpi.score_board.statistics.controller({'window_controller': this}));
            },
            showResult: function (data, playerEntity, options) {
                options = options || {};
                var model = this.getModel(), rewards = this.getTab('rewards').getModel(), statistics = this.getTab('statistics').getModel();
                if (DEBUG) {
                    if (data) {
                        model.setDataString(JSON.stringify(data));
                    }
                    var tmp = model.getTmpData() || {};
                    if (!data && tmp.data) {
                        console.log('Using fake data');
                        data = tmp.data;
                    }
                    if (!playerEntity && tmp.own_entity) {
                        console.log('Using fake entity');
                        playerEntity = tmp.own_entity;
                    }
                    if (!options.entities && tmp.entities) {
                        console.log('Using fake entities');
                        options.entities = tmp.entities;
                    }
                }
                statistics.setPlayer(playerEntity);
                if (options.socket) {
                    model.setSocket(options.socket);
                }
                if (options.game) {
                    model.setGame(options.game);
                }
                if (options.entities) {
                    statistics.setPlayers(options.entities);
                }
                if (data.game) {
                    rewards.setNewData().setVictory(data.winner == playerEntity.team.id).setMissionName(data.game.mapName).setMissionTime(data.game.playTime).setStagesCount(data.game.stagesCount[playerEntity.team.id]);
                    model.setCloseIn(data.game.closesIn);
                }
                if (data.rewardedPlayers) {
                    rewards.setNewData().setRewarded(!!~data.rewardedPlayers.indexOf(playerEntity.id));
                }
                if (data.bonus) {
                    rewards.setNewData().setPlayerBonus(data.bonus[playerEntity.id]);
                }
                if (data.stages) {
                    var ownStageRewards = data.stageRewards[playerEntity.id];
                    data.stages[playerEntity.team.id].forEach(function (stage, id) {
                        if (ownStageRewards && ownStageRewards[id]) {
                            stage.rewards = ownStageRewards[id];
                        } else {
                            stage.rewards = [];
                        }
                    });
                    rewards.setStagesCount(data.game.stagesCount[playerEntity.team.id]).setStages(data.stages[playerEntity.team.id]);
                    if (rewards.hasItemReward()) {
                        EventHandler.signal('inventory_changed');
                    }
                }
                if (data.stats) {
                    statistics.setStatisticsData(data.stats);
                }
                this.open();
            },
            prepareWindow: function () {
                this.callParent.apply(this, arguments);
                var wnd = this.getWindow(), model = this.getModel(), view = this.getView(), l10n = model.getL10n();
                wnd.setTitle(l10n.window.title).setMiniTitle(l10n.window.mini_title).setSize(748, 460).center();
                view.addHelp();
                return this;
            },
            showHelp: function () {
                this.getView().showHelpPopup();
                return this;
            },
            closeAdventures: function () {
                var model = this.getModel(), socket = model.getSocket(), game = model.getGame();
                if (socket) {
                    socket.io.disconnect();
                    socket = null;
                    model.clearSocket();
                }
                if (game) {
                    game.close();
                    game = null;
                    model.clearGame();
                }
                QuestTrackerWindow.show();
            },
            windowDestroy: function () {
                this.closeAdventures();
                this.getModel().clearData();
                this.callParent.apply(this, arguments);
                return this;
            }
        };
    west.define(class_path + '.' + class_name, class_parent, class_object);
    if (single_instance) {
        west.window.mpi.score_board = new (west.get(class_path + '.' + class_name));
    }
});

$(function ($) {
    'use strict';
    var class_name = 'model', class_path = 'west.window.item_upgrade', class_parent = 'west.game.window.model', class_object = {
        _class_path: class_path,
        data: {
            count: 0,
            upgrade_count: 1,
            premium_ratio: 1000,
            has_requirements: false,
            requirements: {},
            item: undefined,
            item_next: undefined,
            load_on_open: null,
            listening_item_id: null
        },
        l10n: {
            'window': {
                'title': 'Модификация предмета',
                'mini_title': 'Модификация предмета',
                'drop_area': {'title': 'Модифицируй предмет!', 'message': 'Выброси сюда'}
            },
            buy_popup: {'title': 'Улучшить предмет', 'message': 'Ты точно хочешь улучшить предмет?'},
            'buttons': {'upgrade': 'Улучшить'},
            'price': {
                'cost': function (price_dollars, price_nuggets) {
                    return s('%1 или %2', '<span class="tw-currency curr-dollar"></span>' + price_dollars, '<span class="tw-currency curr-nugget"></span>' + price_nuggets);
                }, 'free': 'Халява!'
            },
            'info': {
                'catalyser': 'Вскоре…',
                'age': function (age) {
                    age = age || this.getRequirement().minimumCharacterLevel;
                    return s('Для использования этой функции необходим как минимум %1-й уровень персонажа', age);
                },
                'not_upgradeable': 'Этот предмет нельзя модифицировать',
                'select_item': 'Выбери предмет для модификации.'
            },
            'description': {
                'upgrade_cost': function (cost) {
                    return s('Полная стоимость модификации: %1', '<span class="tw-currency curr-dollar"></span> ' + format_number(cost));
                }, 'you_have': function (sum) {
                    return s('У тебя: %1', '<span class="tw-currency curr-dollar"></span> ' + format_number(sum));
                }, 'nugget_exchange': function (amount, ratio) {
                    return s('Тебе нужно %1 1 %2 даёт тебе %3', '<span class="tw-currency curr-dollar"></span>' + format_number(amount) + '<br />', '<span class="tw-currency curr-nugget"></span>', '<span class="tw-currency curr-dollar"></span>' + format_number(ratio));
                }, not_auctionable: 'Нельзя продать на рынке'
            },
            mouseovers: {
                'lvlup_chance': 'Вероятность удачной модификации предмета',
                'upgrade_count': 'Сколько предметов улучшить?'
            }
        },
        setItem: function (item) {
            this.setData('item', item, true);
            return this;
        },
        getItem: function () {
            return this.getData('item');
        },
        setNextItem: function (item) {
            this.setData('item_next', item, true);
            return this;
        },
        getNextItem: function () {
            return this.getData('item_next');
        },
        setCount: function (count) {
            this.setData('count', count, true);
            return this;
        },
        getCount: function () {
            return this.getData('count');
        },
        setUpgradeCount: function (upgrade_count) {
            this.setData('upgrade_count', upgrade_count, true);
            return this;
        },
        getUpgradeCount: function () {
            return this.getData('upgrade_count');
        },
        getCurrentLevel: function () {
            var item = this.getItem();
            return item ? item.getItemLevel() : 0;
        },
        getNextLevel: function () {
            return this.getCurrentLevel() + 1;
        },
        getUpgradePrice: function () {
            return this.getUpgradePricePerItem() * this.getUpgradeCount();
        },
        getUpgradePricePerItem: function () {
            var next_item = this.getNextItem();
            return next_item ? this.getNextLevel() * next_item.price : 0;
        },
        getPremiumRatio: function () {
            return this.getData('premium_ratio');
        },
        getUpgradePremiumPrice: function () {
            return Math.ceil(this.getUpgradePricePerItem() / this.getPremiumRatio()) * this.getUpgradeCount();
        },
        canUpgradeForFree: function () {
            return !(Character.getCapital() < this.getUpgradePrice());
        },
        setRequirements: function (requirements) {
            this.setData('requirements', requirements, true);
            this.setData('has_requirements', true, true);
            return this;
        },
        getRequirements: function () {
            return this.getData('requirements');
        },
        hasRequirements: function () {
            return this.getData('has_requirements');
        },
        getRequirement: function () {
            var requirements = this.getRequirements(), requirement = requirements[this.getNextLevel()];
            return requirement || {catalyserItemNeeded: true, minimumCharacterLevel: 20, requiredItemAmount: 0};
        },
        getRequiredItemAmount: function () {
            return this.getRequirement().requiredItemAmount;
        },
        isOldEnough: function () {
            return this.getRequirement().minimumCharacterLevel <= Character.level;
        },
        isNotUpgradeable: function () {
            return !(this.getItem() && this.getItem().isUpgradeable());
        },
        setLoadOnOpen: function (item_id) {
            this.setData('load_on_open', item_id, true);
            return this;
        },
        getLoadOnOpen: function () {
            return this.getData('load_on_open');
        },
        setEventItemId: function (item_id) {
            this.setData('listening_item_id', item_id, true);
            return this;
        },
        getEventItemId: function () {
            return this.getData('listening_item_id');
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'view', class_path = 'west.window.item_upgrade', class_parent = 'west.game.window.view', class_object = {
        _class_path: class_path, addWindowStructure: function () {
            this.callParent.apply(this, arguments);
            var $root = this.getRoot(), model = this.getModel(), controller = this.getController(), l10n = model.getL10n();
            this.button = new west.gui.Button(l10n.buttons.upgrade, controller.handleItemUpgradeButton, controller).addClass('upgrade_button');
            $root.append($('<div class="header"></div>'), $('<div class="description"></div>'), $('<div class="slots"></div>'), $('<div class="info"></div>'), $('<div class="footer"></div>'), $('<div class="drop_layer"><div class="message"><span class="title">' + l10n.window.drop_area.title + '</span>' + l10n.window.drop_area.message + '</div></div>'));
            return this;
        }, renderContent: function () {
            this.renderPreview().renderSlots().renderPrice().renderFooter();
            return this;
        }, getDropElement: function () {
            var controller = this.getController();
            return $('.' + controller.getWindowId() + ' .window_container');
        }, renderPreview: function () {
            var $root = this.getRoot(), $header = $('.header', $root), $description = $('.description', $root), $stats = $('<ul class="stats"></ul>');
            var model = this.getModel(), l10n = model.getL10n(), current_item = model.getItem(), next_item = model.getNextItem(), c_level, n_level, c_bonusExtractor, n_bonusExtractor;
            $header.empty();
            $description.empty();
            if (!next_item) {
                return this;
            }
            c_level = current_item.getItemLevel(), n_level = next_item.getItemLevel(), c_bonusExtractor = new west.item.BonusExtractor(Character, c_level);
            n_bonusExtractor = new west.item.BonusExtractor(Character, n_level);
            $header.append($('<span class="level_indicator next_level"></span>').text(n_level), $('<span class="item_name"></span>').text(next_item.name));
            $description.append(new tw2widget.UpgradeItem(next_item, 'item_preview').getMainDiv());
            if (model.isNotUpgradeable()) {
                return this;
            }
            if (next_item instanceof west.item.Weapon) {
                var new_dmg = next_item.getDamage(Character), current_dmg = current_item.getDamage(Character), bonus_diff_min = new_dmg.min - current_dmg.min, bonus_diff_max = new_dmg.max - current_dmg.max;
                $stats.append('<li class="damage">'
                    + '<dl>'
                    + '<dt>' + 'Урон' + '</dt>'
                    + '<dd>'
                    + '<span class="current_value">' + new_dmg.min + '</span>'
                    + (bonus_diff_min ? '<span class="calculated_value">'
                    + '<span class="base_value">'
                    + current_dmg.min
                    + '</span>'
                    + '<span class="bonus_value">'
                    + (new_dmg.min - current_dmg.min)
                    + '</span>'
                    + '</span>' : '')
                    + '</dd>'
                    + '<dd>'
                    + '<span class="current_value">' + new_dmg.max + '</span>'
                    + (bonus_diff_max ? '<span class="calculated_value">'
                    + '<span class="base_value">'
                    + current_dmg.max
                    + '</span>'
                    + '<span class="bonus_value">'
                    + (new_dmg.max - current_dmg.max)
                    + '</span>'
                    + '</span>' : '')
                    + '</dd>'
                    + '</dl>'
                    + '</li>');
            }
            if (next_item.speed) {
                var new_speed = Math.round(Character.defaultSpeed / (Character.defaultSpeed * next_item.speed) * 100 - 100), current_speed = Math.round(Character.defaultSpeed / (Character.defaultSpeed * current_item.speed) * 100 - 100), diff = new_speed - current_speed;
                if (next_item.speed <= 1) {
                    new_speed = '+' + new_speed;
                }
                $stats.append('<li class="speed">'
                    + '<span class="current_value">' + new_speed + '</span>'
                    + ' ' + 'Скорость'
                    + (diff ? '<span class="calculated_value">'
                    + '<span class="base_value">'
                    + current_speed
                    + '</span>'
                    + '<span class="bonus_value">'
                    + (diff)
                    + '</span>'
                    + '</span>' : '')
                    + '</li>');
            }
            if ($.isPlainObject(next_item.bonus.attributes)) {
                var $attributes = $('<ul></ul>').appendTo($('<li class="attribute"></li>').appendTo($stats));
                west.common.forEach(next_item.bonus.attributes, function (value, attribute) {
                    var c_value = current_item.bonus.attributes[attribute], bonus_diff = value - c_value;
                    $attributes.append('<li class="attribute_' + attribute + '">'
                        + '<span class="current_value">' + value + '</span>'
                        + ' ' + CharacterSkills.keyNames[attribute]
                        + (bonus_diff ? '<span class="calculated_value">'
                        + '<span class="base_value">'
                        + c_value
                        + '</span>'
                        + '<span class="bonus_value">'
                        + bonus_diff
                        + '</span>'
                        + '</span>' : '')
                        + '</li>');
                });
            }
            if ($.isPlainObject(next_item.bonus.skills)) {
                var $skills = $('<ul></ul>').appendTo($('<li class="skill"></li>').appendTo($stats));
                west.common.forEach(next_item.bonus.skills, function (value, skill) {
                    var c_value = current_item.bonus.skills[skill], bonus_diff = value - c_value;
                    $skills.append('<li class="skill_' + skill + '">'
                        + '<span class="current_value">' + value + '</span>'
                        + ' ' + CharacterSkills.keyNames[skill]
                        + (bonus_diff ? '<span class="calculated_value">'
                        + '<span class="base_value">'
                        + c_value
                        + '</span>'
                        + '<span class="bonus_value">'
                        + bonus_diff
                        + '</span>'
                        + '</span>' : '')
                        + '</li>');
                });
            }
            if (next_item.bonus.item.length) {
                var i = 0, l = next_item.bonus.item.length, $item;
                for (i; i < l; i++) {
                    var n_bonus_obj = next_item.bonus.item[i], n_bonus, c_bonus, bonus_diff;
                    if (n_bonus_obj) {
                        n_bonus = n_bonus_obj ? (n_bonus_obj.type === 'character' ? n_bonus_obj.bonus : n_bonus_obj) : null;
                        if (!n_bonus) {
                            continue;
                        }
                        if (n_bonus.type === 'damage') {
                            continue
                        }
                        ;
                        c_bonus = c_bonusExtractor.getCharacterItemValue(n_bonus_obj);
                        bonus_diff = n_bonusExtractor.getCharacterItemValueDifferenceToItemLevel(n_bonus_obj, c_level);
                        if (n_bonus.type in n_bonusExtractor.keyDescMapping) {
                            c_bonus = Math.round(c_bonus * 100);
                            bonus_diff = Math.round(bonus_diff * 100);
                        }
                        if (n_bonus.name) {
                            $item = $('.' + n_bonus.type + ' > ul', $stats);
                            if (!$item.length) {
                                $item = $('<ul></ul>').appendTo($('<li class="' + n_bonus.type + '"></li>').appendTo($stats));
                            }
                        } else {
                            $item = $stats;
                        }
                        $item.append('<li class="' + n_bonus.type + (n_bonus.name ? '_' + n_bonus.name : '') + '">'
                            + n_bonusExtractor.getDesc(n_bonus_obj)
                            + (bonus_diff ? '<span class="calculated_value">'
                            + '<span class="base_value">'
                            + c_bonus
                            + '</span>'
                            + '<span class="bonus_value">'
                            + bonus_diff
                            + '</span>'
                            + '</span>' : '')
                            + '</li>');
                    }
                }
            }
            if (!next_item.isAuctionable()) {
                $stats.append('<li class="auctionable tw_red">' + l10n.description.not_auctionable + '</li>');
            }
            $description.append($stats);
            $description.append(this.createUpgradeCountSelector());
            return this;
        }, renderSlots: function () {
            var $root = this.getRoot(), $slots = $('.slots', $root), model = this.getModel(), requirement = model.getRequirement(), item = model.isNotUpgradeable() ? false : model.getItem(), count = model.getCount(), required_count = requirement.requiredItemAmount, i = 0, l = required_count;
            $slots.empty();
            for (i; i < l; i++) {
                var $slot;
                if (item) {
                    $slot = new tw2widget.UpgradeItemSlot(item).addClass(i < count ? '' : 'missing').getMainDiv();
                } else {
                    $slot = '<div class="item item_inventory empty_slot"></div>';
                }
                $slots.append($slot);
            }
            if (requirement.catalyserItemNeeded) {
                $slots.addClass('with_catalyser');
                $slots.append('<div class="item missing item_inventory empty_slot catalyser_slot"></div>');
            } else {
                $slots.removeClass('with_catalyser');
            }
            return this;
        }, renderPrice: function () {
            var model = this.getModel(), $root = this.getRoot(), $info = $('.info', $root);
            if (!model.getNextItem() || model.isNotUpgradeable()) {
                $info.empty();
                return this;
            }
            var l10n = model.getL10n(), price_dollar = model.getUpgradePrice(), price_gold = model.getUpgradePremiumPrice();
            $info.html(price_dollar ? l10n.price.cost(format_number(price_dollar), format_number(price_gold)) : l10n.price.free);
            return this;
        }, renderFooter: function () {
            var $root = this.getRoot(), $footer = $('.footer', $root), model = this.getModel(), l10n = model.getL10n('info'), r = model.getRequirement(), count = model.getCount(), is_old = model.isOldEnough(), not_upgadeable = model.isNotUpgradeable();
            if (r.catalyserItemNeeded || !is_old || not_upgadeable) {
                $(this.button.getMainDiv()).detach();
                if (!is_old) {
                    $footer.html(l10n.age.apply(model));
                } else if (r.catalyserItemNeeded) {
                    $footer.html(l10n.catalyser);
                } else if (!model.getItem()) {
                    $footer.html(l10n.select_item);
                } else {
                    $footer.html(l10n.not_upgradeable);
                }
            } else {
                if (!$(this.button.getMainDiv()).parent().length) {
                    $footer.empty().append(this.button.getMainDiv());
                }
                if (count < r.requiredItemAmount) {
                    this.button.disable();
                } else {
                    this.button.enable();
                }
            }
        }, createUpgradeCountSelector: function () {
            var l10n = this.getModel().getL10n(), cb = this.changeUpgradeCountSelector.bind(this);
            return $(s('<div class="item-upgrade-count-selector" title="%1">' + '<div class="item-upgrade-count-minus"></div>' + '<div class="item-upgrade-count-num">1</div>' + '<div class="item-upgrade-count-plus"></div>' + '</div>', l10n.mouseovers.upgrade_count)).click(cb).mousewheel(cb);
        }, changeUpgradeCountSelector: function (ev, delta) {
            var change = 0;
            if ('mousewheel' === ev.type) {
                change = delta > 0 ? 1 : -1;
            } else {
                if ('item-upgrade-count-minus' === ev.target.className) {
                    change = -1;
                } else {
                    change = 1;
                }
            }
            if (change != 0) {
                this.updateUpgradeCountSelector(change);
            }
        }, updateUpgradeCountSelector: function (change) {
            var model = this.getModel(), countEl, curVal, newVal, maxVal;
            countEl = $('.item-upgrade-count-num', this.getRoot());
            maxVal = Math.max(1, Math.floor(Bag.getItemCount(model.getItem().getId()) / model.getRequiredItemAmount()));
            curVal = parseInt(countEl.text(), 10);
            newVal = Math.min(Math.max(1, curVal + change), maxVal);
            if (isNaN(newVal) || curVal === newVal) {
                return;
            }
            model.setUpgradeCount(newVal);
            countEl.text(newVal);
            this.renderPrice();
        }, createPriceInfo: function () {
            var model = this.getModel(), l10n = model.getL10n(), price = model.getUpgradePrice(), capital = Character.getCapital(), ratio = model.getPremiumRatio(), $result = $('<div class="item_upgrade_price_preview"></div>');
            $result.append(l10n.description.upgrade_cost(price), '<br />', l10n.description.you_have(capital), '<br />', l10n.description.nugget_exchange((price - capital), ratio));
            return $('<div></div>').append($result).html();
        }, showBuyDialog: function () {
            var controller = this.getController(), model = this.getModel(), l10n = model.getL10n(), pay_handler = new west.wof.WofPayHandler(), item = new tw2widget.Item(model.getNextItem()).setShowSellPrice(false).setCharacter(Character), price_dollar = model.getUpgradePrice(), price_gold = model.getUpgradePremiumPrice(), doBuy;
            pay_handler.setTitle(l10n.buy_popup.title).setMessage(l10n.buy_popup.message).setIcon(item.getMainDiv());
            doBuy = function () {
                controller.doUpgradeRequest(pay_handler.getSelectedPayId());
            };
            if (price_dollar) {
                pay_handler.addPayOption(new west.wof['WofPayOptionDollar'](0, price_dollar)).addPayOption(new west.wof['WofPayOptionNugget'](1, price_gold)).setFallbackPay(1, doBuy);
            }
            pay_handler.askUser(null, doBuy, {class_name: 'upgrade_item'});
            return this;
        }, hideDropLayer: function () {
            var root = this.getRoot(), $drop_layer = $('.drop_layer', root);
            $drop_layer.removeClass('visible');
            return this;
        }, showDropLayer: function () {
            var root = this.getRoot(), $drop_layer = $('.drop_layer', root);
            $drop_layer.addClass('visible');
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var single_instance = true, class_name = 'controller', class_path = 'west.window.item_upgrade', class_parent = 'west.game.window.controller', class_object = {
        _class_id: 'item_upgrade',
        _namespace: class_path,
        _class_path: class_path,
        _window_id: 'win_item_upgrade',
        _window_class: 'item_upgrade_window',
        open: function (item_id) {
            if (!isNaN(parseInt(item_id, 10))) {
                this.getModel().setLoadOnOpen(item_id);
            }
            this.callParent.apply(this, arguments);
            return this;
        },
        prepareWindow: function () {
            this.callParent();
            var wnd = this.getWindow(), model = this.getModel(), view = this.getView(), l10n = model.getL10n();
            wnd.setTitle(l10n.window.title).setMiniTitle(l10n.window.mini_title).setSize(315, 505).addClass('noreload').center();
            this.requestInitData();
            Inventory.open(wnd, {context: this, window: wnd, callback: this.handleInventoryItemClick});
            return this;
        },
        setEventListeners: function () {
            this.removeEventListeners();
            this.getView().getDropElement().asDropzone('.item_inventory_img', false, this.handleInventoryItemDrop.bind(this));
            EventHandler.listen('inventory_item_drag', this.handleInventoryItemDrag, this, {boundto: this.getWindow()});
            EventHandler.listen('char_money_changed', this.getView().renderPrice, this.getView());
            return this;
        },
        removeEventListeners: function () {
            EventHandler.unlisten('char_money_changed', this.getView().renderPrice, this.getView());
            EventHandler.unlisten('inventory_item_drag', this.handleInventoryItemDrag, this);
            return this;
        },
        setEventListenersForItem: function (id) {
            var model = this.getModel(), listening_to = model.getEventItemId();
            if (listening_to !== id) {
                this.removeEventListenersForItem();
                model.setEventItemId(id);
                EventHandler.listen('bag_updated_' + id, this.render, this, {data: [id]});
            }
            return this;
        },
        removeEventListenersForItem: function () {
            var id = this.getModel().getEventItemId();
            if (id) {
                EventHandler.unlisten('bag_updated_' + id, this.render, this);
            }
            return this;
        },
        requestInitData: function () {
            var that = this, model = this.getModel();
            if (model.hasRequirements()) {
                this.render();
            } else {
                Ajax.remoteCallMode('item_upgrade', 'index', {}, function (data) {
                    if (data.error) {
                        return new UserMessage(data.msg).show();
                    }
                    model.setRequirements(data.upgrading_requirements);
                    that.render();
                });
            }
            return this;
        },
        handleInventoryItemDrag: function (status, $draggable, $helper) {
            var view = this.getView();
            if ('start' !== status || ($draggable && $draggable.parent('.item_inventory').hasClass('not_upgradeable'))) {
                view.hideDropLayer();
            } else {
                view.showDropLayer();
            }
        },
        handleInventoryItemDrop: function ($item) {
            var id = $item.data('itemId'), item = ItemManager.get(id);
            if (item && item.isUpgradeable()) {
                this.render(id);
            }
            return true;
        },
        handleInventoryItemClick: function (item) {
            if (item.isUpgradeable()) {
                this.render(item.getId());
            }
            return true;
        },
        handleItemUpgradeButton: function () {
            this.getView().showBuyDialog();
            return this;
        },
        doUpgradeRequest: function (pay_option) {
            var model = this.getModel(), item = model.getItem(), upgrade_count = model.getUpgradeCount(), id = item.getId();
            if (pay_option == 1) {
                Premium.actionUse('itemupgrade ' + id + ' ' + upgrade_count, null, function () {
                    EventHandler.signal('inventory_changed');
                });
            } else {
                Ajax.remoteCall('item_upgrade', 'upgrade', {
                    item_id: id,
                    upgrade_amount: upgrade_count
                }, function (data) {
                    if (data.error) {
                        return new UserMessage(data.msg).show();
                    }
                    EventHandler.signal('inventory_changed');
                });
            }
        },
        render: function (item_id) {
            var model = this.getModel();
            item_id = item_id || model.getLoadOnOpen() || model.getEventItemId();
            if (this.hasWindow()) {
                model.setLoadOnOpen(undefined);
                this.loadData(item_id);
                this.setEventListenersForItem(item_id);
                this.getView().renderContent();
            } else {
                model.setLoadOnOpen(item_id);
                this.open();
            }
            var model = this.getModel();
            return this;
        },
        loadData: function (item_id) {
            var model = this.getModel(), item = undefined, next_item = undefined, lvl = 0, count = 0;
            if (item_id) {
                item_id = item_id.toString();
                item = ItemManager.get(item_id);
                lvl = parseInt(item_id.slice(-3), 10);
                next_item = ItemManager.getByBaseId(item_id.slice(0, -3), lvl + 1);
                count = Bag.getItemByItemId(item_id) ? Bag.getItemByItemId(item_id).getCount() : 0;
            }
            model.setUpgradeCount(1).setCount(count).setItem(item).setNextItem(next_item);
            return this;
        },
        windowDestroy: function () {
            var model = this.getModel();
            this.removeEventListenersForItem();
            model.setCount(0).setItem(undefined).setNextItem(undefined).setEventItemId(undefined);
            this.callParent.apply(this, arguments);
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
    if (single_instance) {
        west.window.item_upgrade = new (west.get(class_path + '.' + class_name));
    }
});
;
(function ($) {
    QuestLog = {
        quest_loaded: false,
        windows_opened: {},
        tabs_opened: {},
        employer: {open: []},
        quests: {},
        solved_quest: {},
        questlog_size: {accepted: 0, capacity: 0},
        active_quest: null,
        isQuestAccepted: function (quest_id) {
            if (this.quests[quest_id] !== undefined)return true;
            return false;
        },
        updateEmployerQuest: function (quest_id, updateData) {
            for (var i = 0; i < this.employer.open.length; i++) {
                if (this.employer.open[i].id == quest_id) {
                    this.employer.open[i].requirements = updateData.requirements;
                    this.employer.open[i].finishable = updateData.finishable;
                    this.employer.open[i].acceptable = updateData.acceptable;
                    this.employer.open[i].accessable = updateData.accessable;
                    this.employer.open[i].accepted = updateData.accepted;
                    EventHandler.signal("quest_requirement_update", []);
                    break;
                }
            }
        },
        getEmployerQuest: function (quest_id) {
            for (var i = 0; i < this.employer.open.length; i++) {
                if (this.employer.open[i].id == quest_id) {
                    if (this.quests[quest_id] !== undefined)return this.quests[quest_id];
                    return new Quest(this.employer.open[i]);
                }
            }
            return false;
        },
        setActiveQuest: function (quest_id) {
            this.active_quest = quest_id;
        },
        setActiveEmployer: function (employer, x, y) {
            var changed = employer.key != this.employer.key;
            this.employer = employer;
            this.employer.x = x;
            this.employer.y = y;
            for (var i = 0; i < employer.open.length; i++) {
                var quest = employer.open[i];
                if (quest.accepted) {
                    this.addQuest(quest);
                }
            }
            EventHandler.signal("employer_active", [employer, changed]);
        },
        addSolvedQuest: function (quest) {
            this.solved_quest[quest.id] = new Quest(quest);
            EventHandler.signal("quest_solved", [this.solved_quest[quest.id]]);
        },
        addQuest: function (quest) {
            if (this.quests[quest.id] !== undefined) {
                this.quests[quest.id].update(quest);
                EventHandler.signal("quest_update", [this.quests[quest.id]]);
                return;
            }
            if (quest instanceof Quest) {
                this.quests[quest.id] = quest;
            } else {
                this.quests[quest.id] = new Quest(quest);
            }
            this.questlog_size.accepted++;
            EventHandler.signal("quest_added", [this.quests[quest.id]]);
        },
        updateQuestLog: function () {
            return Ajax.remoteCallMode('building_quest', 'get_open_quests', {}, function (json) {
                QuestLog.questlog_size.capacity = json.capacity;
                EventHandler.signal('questlog_loaded');
                for (var i = 0; i < json.quests.length; i++) {
                    QuestLog.addQuest(json.quests[i]);
                }
                QuestLog.quests_loaded = true;
            });
        },
        updateQuest: function (questId) {
            if (undefined === this.quests[questId])
                return false;
            Ajax.remoteCallMode('quest', '', {quest_id: questId}, function (json) {
                json.id = questId;
                QuestLog.addQuest(json);
            });
            return this.quests[questId];
        },
        removeQuest: function (quest_id, cancel) {
            if (this.quests[quest_id] === undefined)return;
            var quest = this.quests[quest_id];
            if (!cancel) {
                this.quests[quest_id].solved = true;
                this.quests[quest_id].updateQuest();
            }
            delete(this.quests[quest_id]);
            this.questlog_size.accepted--;
            quest.accepted = false;
            quest.watched = false;
            if (isDefined(this.employer.open)) {
                for (var i = 0; i < this.employer.open.length; i++) {
                    if (this.employer.open[i].id == quest_id) {
                        this.employer.open[i].accepted = false;
                        this.employer.open[i].acceptable = true;
                    }
                }
            }
            EventHandler.signal("quest_removed", [quest, this.employer, cancel]);
        },
        setMaxCapacity: function (capacity) {
            this.questlog_size.capacity = capacity;
        },
        getQuest: function (quest_id) {
            if (this.quests[quest_id] === undefined)return false;
            return this.quests[quest_id];
        },
        getSolvedQuest: function (quest_id) {
            if (this.solved_quest[quest_id] === undefined)return false;
            return this.solved_quest[quest_id];
        }
    };
})(jQuery);

var questCallback = {
    activate: function (quest, opts) {
        var jsInfo, callback;
        if (!opts)opts = {};
        if (!opts.update)opts.update = QuestLog.updateQuestLog;
        if (!opts.timeout)opts.timeout = 5000;
        for (var i = 0; i < quest.requirements.length; i++) {
            jsInfo = quest.requirements[i].jsInfo;
            if (!jsInfo || quest.requirements[i].solved)continue;
            callback = questCallback.events[jsInfo.type];
            if (callback && callback.listen) {
                callback.listen(jsInfo, quest, opts);
            } else if (callback) {
                EventHandler.listen(jsInfo.type, callback(jsInfo, quest, opts), quest);
            }
        }
    }, deactivate: function (quest) {
        var jsInfo, callbacks;
        for (var i = 0; i < quest.requirements.length; i++) {
            jsInfo = quest.requirements[i].jsInfo;
            if (!jsInfo)continue;
            callbacks = questCallback.events[jsInfo.type];
            if (callbacks && callbacks.unlisten) {
                callbacks.unlisten(jsInfo, quest);
            } else {
                EventHandler.unlistenByContext(jsInfo.type, quest);
            }
        }
    }, events: {
        'inventory_changed': {
            'listen': function (jsInfo, quest, opts) {
                var cb = function () {
                    EventHandler.listen('bag_updated_' + jsInfo.id, function () {
                        batch(opts.update, opts.timeout, 'questtracker-refresh');
                    }, quest);
                };
                if (!Bag.loaded) {
                    EventHandler.listen('inventory_loaded', function () {
                        cb();
                        return EventHandler.ONE_TIME_EVENT;
                    }, quest);
                } else {
                    cb();
                }
            }, 'unlisten': function (jsInfo, quest, opts) {
                EventHandler.unlistenByContext('bag_updated_' + jsInfo.id, quest);
            }
        }, 'task-finish-job': function (jsInfo, quest, opts) {
            return function (obj) {
                if (obj.job.id == jsInfo.id) {
                    batch(opts.update, opts.timeout, 'questtracker-refresh');
                }
            };
        }, 'activity_changed': function (jsInfo, quest, opts) {
            return function (activity) {
                if (activity == 'npcduels') {
                    batch(opts.update, opts.timeout, 'questtracker-refresh');
                }
            };
        }, 'item_used': function (jsInfo, quest, opts) {
            return function (itemId) {
                if (itemId === jsInfo.id) {
                    batch(opts.update, opts.timeout, 'questtracker-refresh');
                }
            };
        }, 'char_skills_changed': function (jsInfo, quest, opts) {
            return function () {
                batch(opts.update, opts.timeout, 'questtracker-refresh');
            };
        }, 'wear_changed': function (jsInfo, quest, opts) {
            return function () {
                batch(opts.update, opts.timeout, 'questtracker-refresh');
            };
        }, 'task-finish-walk': function (jsInfo, quest, opts) {
            return function () {
                batch(opts.update, opts.timeout, 'questtracker-refresh');
            };
        }, 'statistic_changed': function (jsInfo, quest, opts) {
            return function (key) {
                if (key === jsInfo.key) {
                    batch(opts.update, opts.timeout, 'questtracker-refresh');
                }
            };
        }, 'WINDOW_OPENED': function (jsInfo, quest, opts) {
            return function (uid) {
                if (new RegExp(jsInfo.key).test(uid)) {
                    QuestLog.windows_opened[jsInfo.key] = true;
                    quest.updateQuest();
                    EventHandler.signal('quest_update', [quest]);
                }
            };
        }, 'WINDOW_TAB_OPENED': function (jsInfo, quest, opts) {
            return function (tabId) {
                if (new RegExp(jsInfo.key).test(tabId)) {
                    QuestLog.tabs_opened[jsInfo.key] = true;
                    quest.updateQuest();
                    EventHandler.signal('quest_update', [quest]);
                }
            };
        }, 'button-clicked': function (jsInfo, quest, opts) {
            return function (btn) {
                if (jsInfo.key == btn) {
                    QuestLog.windows_opened[jsInfo.key] = true;
                    quest.updateQuest();
                    EventHandler.signal('quest_update', [quest]);
                }
            };
        }
    }
};

Quest = function (data) {
    this.init(data);
};
Quest.prototype = Quest;
Quest.update = function (data) {
    this.accepted = data.accepted;
    this.acceptable = data.acceptable;
    this.accessable = data.accessable;
    this.finishable = data.finishable;
    this.employer = data.employer;
    this.employer_coords = data.employer_coords;
    this.employer_name = data.employer_name;
    this.requirements = data.requirements;
    this.updateQuest();
};
Quest.updateQuest = function () {
    this.render();
    var self = this;
    var closure = function (element, newElement) {
        var el = $(element);
        el.replaceWith(newElement);
    };
    $('.questbook_detail_right_' + this.id).each(function () {
        closure(this, self.getEl());
    });
    $('.questbook_button_area_' + this.id).each(function () {
        closure(this, self.getQuestbookButtonsEl());
    });
    $('.quest_button_area_' + this.id).each(function () {
        closure(this, self.getButtonsEl());
    });
    $('.questtracker_quest_' + this.id).each(function () {
        closure(this, self.getQuestTrackerEl());
    });
};
Quest.init = function (data) {
    this.accepted = data.accepted;
    this.acceptable = data.acceptable;
    this.accessable = data.accessable;
    this.finishable = data.finishable;
    this.description = data.description;
    this.limited = data.limited;
    this.duel = data.duel;
    this.group = data.group;
    this.groupTitle = data.groupTitle;
    this.employer = data.employer;
    this.employer_coords = data.employer_coords;
    this.employer_name = data.employer_name;
    this.employer_image = data.employer_image;
    this.id = data.id;
    this.questHint = data.questHint;
    this.questCompletionText = data.questCompletionText;
    this.questCompletionHint = data.questCompletionHint;
    this.questRewards = data.questRewards;
    this.questRewardsOptions = data.questRewardsOptions;
    this.requirements = data.requirements;
    this.isChallenge = data.isChallenge;
    this.title = data.title;
    this.soloTitle = data.soloTitle;
    this.el = null;
    this.buttonAreaEl = null;
    this.questbookButtonAreaEl = null;
    this.questTrackerEl = null;
    this.questIconEl = null;
    this.solved = false || data.solved;
    this.watched = (undefined === (Config.get('questtracker.quests')[data.id]) ? false : true);
    this.priority = data.priority || 2;
    this.rank = data.rank || 0;
    this.finishDate = new Date(data.finishDate * 1000);
    this.redrawMap = data.redrawMap;
    this.render();
};
Quest.getEl = function () {
    return this.el.clone();
};
Quest.getButtonsEl = function () {
    return this.buttonAreaEl.clone(true);
};
Quest.getQuestbookButtonsEl = function () {
    return this.questbookButtonAreaEl.clone(true);
};
Quest.getQuestTrackerEl = function () {
    return this.questTrackerEl.clone(true);
};
Quest.render = function () {
    var img = this.getQuestEmployerImgEl();
    var requirementsContainer = $("<div />").append($("<span class='strong underline' />").text("Необходимо:"));
    var requirements = $("<ul class='requirement_container' />");
    var help = [];
    if (this.requirements.length == 0) {
        requirements.append($('<li class="quest_requirement" style="color:gray;">-</li>'));
    } else {
        for (var i = 0; i < this.requirements.length; i++) {
            if (help.length < 1 && !this.requirements[i].solved) {
                help.push(this.getRequirementHelp(this.requirements[i]));
            }
            requirements.append(this.renderRequirement(this.requirements[i], 'finishable shorten'));
        }
    }
    var descTextContainer = $("<div class='quest_description_container'/>");
    var empSpan = $('<span class="strong" style="vertical-align:top;line-height:20px;" />').text(this.employer_name);
    var descSpan = $('<span />');
    if (this.solved) {
        descSpan.html("<br />" + this.questCompletionText
            + ((this.questCompletionHint) ? "<br /><br /><span style='font-style:italic;'><strong>" + 'Подсказка' + ':</strong> ' + this.questCompletionHint + '</span>' : ''));
    } else {
        var title = $("<div id='quest_fulld' />").html(this.description + ((this.questHint) ? "<br /><br /><span style='font-style:italic;'><strong>" + 'Подсказка' + ':</strong> ' + this.questHint + '</span>' : ''));
        var fulldesc = $('<div id="quest_shortd" onclick="Quest.toggleDescription()" />').hide();
        if (this.description.length > 150) {
            fulldesc.html(this.description.cutIt(150) + " <a href='#'><u>&raquo; " + "ещё" + "</u></a>").show();
            title.hide();
            if (this.limited) {
                empSpan.append($('<div class="hourglass_quest" style="float: right;" title="<span><strong>' + this.limited + '</strong></span>" />'));
            }
            if (this.questHint) {
                empSpan.append($('<div class="info_point_big" style="float: right;" title="<span><strong>' + 'Подсказка' + ':</strong> ' + this.questHint.escapeHTML() + '</span>" />'));
            }
        }
        descSpan.append(title, fulldesc);
    }
    descTextContainer.append(img, empSpan, descSpan);
    var rewards = this.getRewards(this.questRewards, this.questRewardsOptions, this.solved);
    this.el = $('<div class="questbook_detail_right_' + this.id + ' selectable" />').append(descTextContainer, (help.length ? '<div class="questRequirementHelp">' + help.join("") + '</div>' : help.join("")), requirementsContainer.append(requirements), rewards);
    var requirementsTracker = $("<ul class='requirement_container' />");
    if (this.requirements.length == 0) {
        requirementsTracker.append($('<li class="quest_requirement" style="color:gray;">-</li>'));
    } else {
        for (var i = 0; i < this.requirements.length; i++) {
            requirementsTracker.append(this.renderRequirement(this.requirements[i], 'finishable shorten'));
        }
    }
    this.questTrackerEl = $('<div class="selectable" id="questtracker_quest_' + this.id + '" />').append($('<div class="quest-list collapse open" title="' + 'Показать/скрыть условия квеста' + '" />'), $('<div class="quest-list title ' + ((this.finishable) ? 'finishable' : '') + '" title="' + 'Открыть квестодателя' + '" />').append((this.finishable ? "<span class='quest_finished_wrap'><img src='https://westrus.innogamescdn.com/images/window/achievements/finished_shape.png' class='quest_finished_img' title='" + 'Условия квеста выполнены.' + "' alt='' /></span>" : ''), this.title.cutIt(40), '<span class="quest-list remove" title="' + 'Изъять квест из планировщика' + '"></span>'), requirementsTracker);
    var self = this;
    var buttonArea = $('<div class="quest_button_area_' + this.id + '" />');
    var questbookButtonArea = $('<div class="questbook_button_area_' + this.id + '" />');
    if (!this.accepted && !this.solved) {
        var acceptButton = new west.gui.Button("Принять задание", function () {
            QuestWindow.acceptQuest(self.id);
        }).addClass("quest_button");
        buttonArea.append(acceptButton.getMainDiv());
    } else if (!this.solved) {
        if (this.duel !== undefined && this.duel.isNPCDuel) {
            var wanted_div = "<div class='center'>" + "<strong>" + 'WANTED' + "</strong>" + "<br />" + this.duel.npc_img + "<br />" + this.duel.npc_name + "</div>";
            var duelPicture = $('<div class="quest_duel_picture">' + '<img src="https://westrus.innogamescdn.com/images/premium/duel.png" alt="" width="30" height="30" title="' + wanted_div.escapeHTML() + '" />' + '</div>');
            var duelButton = new west.gui.Button(s("%1, выходи!", this.duel.npc_name), function () {
                QuestWindow.finishQuest(self.id);
            }, null, null, s("%1, выходи!", this.duel.npc_name)).setMaxWidth(145);
            buttonArea.append(duelPicture, duelButton.getMainDiv());
        } else if (this.isChallenge) {
            var finishButton = new west.gui.Button("Попробовать").click(function () {
                QuestWindow.finishQuest(self.id);
            });
            buttonArea.append(finishButton.getMainDiv());
        }
        if (this.finishable) {
            var finishButton = new west.gui.Button("Завершить квест").click(function () {
                QuestWindow.finishQuest(self.id);
            });
            buttonArea.append(finishButton.getMainDiv());
        }
        var cancelButton = new west.gui.Button("Отменить").setMaxWidth(145).click(function () {
            QuestWindow.cancelQuest(self.id);
        });
        var cancelButton2 = new west.gui.Button("Отменить").setMaxWidth(145).click(function () {
            QuestWindow.cancelQuest(self.id);
        }).addClass("quest_button_right");
        buttonArea.append(cancelButton2.getMainDiv());
        questbookButtonArea.append(cancelButton.getMainDiv());
    }
    var openEmployerBtn = new west.gui.Button("Открыть квестодателя").setMaxWidth(150).addClass('quest_button');
    if (this.employer_coords) {
        if (this.employer_coords.length > 1) {
            var select = new west.gui.Selectbox('bottomleft-bottom');
            select.setPosition(8, undefined, undefined, 40);
            select.setWidth(250);
            select.addListener(function (coords) {
                QuestEmployerWindow.showEmployer(self.employer, coords[0], coords[1], self.id);
            });
            for (var k = 0; k < this.employer_coords.length; k++) {
                select.addItem(this.employer_coords[k], s('%1. Текущая позиция (Время пути: %2)', k + 1, Character.calcWayTo(this.employer_coords[k][0], this.employer_coords[k][1]).formatDuration()));
            }
            openEmployerBtn.setSelectbox(select);
        } else {
            openEmployerBtn.click = function () {
                QuestEmployerWindow.showEmployer(self.employer, self.employer_coords[0][0], self.employer_coords[0][1], self.id);
            };
        }
    } else {
        openEmployerBtn.click = function () {
            QuestEmployerWindow.showEmployer(self.employer, undefined, undefined, self.id);
        };
    }
    questbookButtonArea.append(openEmployerBtn.getMainDiv());
    this.buttonAreaEl = buttonArea;
    this.questbookButtonAreaEl = questbookButtonArea;
    var cssClass = "exclamation-gray-priority-" + this.priority;
    if (!this.accepted) {
        if (this.acceptable) {
            cssClass = 'exclamation-priority-' + this.priority;
        }
    } else {
        if (this.finishable) {
            cssClass = 'question-priority-' + this.priority;
        } else {
            cssClass = "question-gray-priority-" + this.priority;
        }
    }
    this.questIconEl = west.gui.Icon.get(cssClass);
};
Quest.setSolved = function () {
    this.solved = true;
};
Quest.setGainedRewards = function (rewards) {
    if (!rewards)return;
    this.questRewards = rewards;
    this.questRewardsOptions = null;
}
Quest.getQuestEmployerImgEl = function () {
    return $('<img src="https://westrus.innogamescdn.com/images/quest/employer/' + this.employer_image + '.png?3" class="quest_employer_img" alt="" />');
};
Quest.getMinimapLink = function (jsRequirement) {
    var mmLink = '';
    var tmpObj = null;
    if (jsRequirement && jsRequirement.id) {
        if (jsRequirement.type == 'inventory_changed') {
            tmpObj = ItemManager.get(jsRequirement.id);
            if (!isDefined(tmpObj) || tmpObj.spec_type != 'mapdrop')
                return mmLink;
        }
        else if (jsRequirement.type == 'task-finish-job') {
            tmpObj = JobList.getJobById(jsRequirement.id);
            if (!isDefined(tmpObj))
                return mmLink;
        }
        if (isDefined(tmpObj)) {
            mmLink = MinimapWindow.getQuicklink((jsRequirement.type == 'inventory_changed' ? jsRequirement.id : tmpObj.name.escapeHTML()), jsRequirement.type);
        }
    }
    return mmLink;
};
Quest.renderRequirement = function (requirement, clsFinish) {
    var mmlink = Quest.getMinimapLink(requirement.jsInfo);
    var questSolved = false;
    if (requirement.jsInfo != null && (requirement.jsInfo.metatype && requirement.jsInfo.metatype == "FRONTEND")) {
        if (QuestLog.windows_opened[requirement.jsInfo.key] != undefined || QuestLog.tabs_opened[requirement.jsInfo.key] != undefined) {
            requirement.solved = true;
            this.finishable = true;
        }
    }
    var reqInfo = requirement.info.replace(/ (\(?\d+\/\d+\)?)/g, '&nbsp;$1');
    return $('<li class="quest_requirement ' + (requirement.solved && clsFinish ? clsFinish : '') + '" style="' + (requirement.solved && clsFinish == undefined ? 'color:gray;' : '') + '" title="' + requirement.info.escapeHTML() + '">- ' +
        (requirement.solved ? "<span class='quest_finished_wrap'><img src='https://westrus.innogamescdn.com/images/window/achievements/finished_shape.png' class='quest_finished_img' alt='' /></span>" : '') +
        mmlink + reqInfo + '</li>');
};
Quest.getRequirementHelp = function (req) {
    if (req.helpicons) {
        var popup = [], icon, i;
        var divider = '<br /><img src="https://westrus.innogamescdn.com/images/fort/battle/divider.png" /><br />';
        for (i in req.helpicons) {
            if (!req.helpicons.hasOwnProperty(i))continue;
            icon = '<img title="' + 'Найди изображение этой работы!' + '" src="' + req.helpicons[i] + '" height="50" />';
            popup.push(icon);
        }
        popup = popup.join(divider);
    }
    return popup;
};
Quest.getRewards = function (questRewards, questRewardsOptions, solved, noTitle) {
    var rewards = "";
    if (questRewards.length > 0) {
        rewards = "<div class='quest-rewards'>";
        if (noTitle == undefined)rewards += "<div class='strong reward_text'>" + (solved ? "Получены следующие вознаграждения:" : "Вознаграждение:") + "</div>";
        rewards += this.getRewardWidgets(questRewards, false);
        rewards += "</div><div style='clear: both;' />";
    }
    if (questRewardsOptions != null) {
        if (noTitle == undefined)rewards += "<span>" + "На выбор" + "</span><div>";
        var that = this;
        $.each(questRewardsOptions, function (k, v) {
            rewards += "<div class='rewardOption' onclick='QuestWindowView.selectReward(this);' id='rewardOption" + k + "'>" + "<div class='rewardbox_container'><div>" + "<div class='rewardbox_tl' />" + "<div class='rewardbox_tr' />" + "<div class='rewardbox_bl' />" + "<div class='rewardbox_br' />" + "</div><div id='rewardOption" + k + "_content' class='rewardbox_content'>";
            rewards += that.getRewardWidgets(questRewardsOptions[k], true);
            rewards += "</div></div></div>";
        });
        rewards += "<div style='clear: both;' /></div>";
    }
    return rewards;
};
Quest.getRewardWidgets = function (rewards, option) {
    var rewardEl = $('<div style="position: relative" />');
    for (var x = 0; x < rewards.length; x++) {
        if (rewards[x].hidden)rewards[x].info = {'css': 'reward_hidden'};
        var reward = tw2widget.reward.QuestRewardFactory.build(rewards[x].info).getMainDiv()
        if (option)reward = $('<div />').append(reward);
        rewardEl.append(reward);
    }
    return jq2Html(rewardEl);
};
Quest.getQuestIcon = function () {
    return this.questIconEl.clone();
};
Quest.showRewardBox = function () {
    var rewards = this.getRewards(this.questRewards, this.questRewardsOptions, this.solved, true);
    new tw2widget.reward.RewardDialog("Квест пройден!").setContent(rewards).show();
}
Quest.toggleDescription = function () {
    $('#quest_shortd').hide();
    $('#quest_fulld').show();
}

west.define('west.job.Model', null, {
    init: function (job) {
        this.jobObj = job;
        this.id = this.jobObj.id;
        this['name'] = this.jobObj.name;
        this.basis = {
            "short": {
                duration: 15,
                energy: 0,
                xp: 0,
                money: 0,
                p_luck: 0.01,
                featured_money: 0,
                featured_xp: 0,
                yields: []
            },
            "middle": {
                duration: 1800,
                energy: 0,
                experience: 0,
                money: 0,
                p_luck: 0.0,
                featured_money: 0,
                featured_xp: 0,
                yields: []
            },
            "long": {
                duration: 7200,
                energy: 0,
                experience: 0,
                money: 0,
                p_luck: 0.0,
                featured_money: 0,
                featured_xp: 0,
                yields: []
            }
        };
        this.marked = false;
        this.workpoints = this.jobObj.malus + 1;
        this.isVisible = Character.level >= this.jobObj.level;
    }, get: function (key, base) {
        var that = this;
        if (!base && that.hasOwnProperty(key))
            return that[key];
        if (!base && that.jobObj.hasOwnProperty(key))
            return that.jobObj[key];
        var b = that.basis.hasOwnProperty(base) ? that.basis[base] : that.basis['short'];
        if (b.hasOwnProperty(key))
            return b[key];
        return null;
    }, mergeJobObject: function (beJob) {
        this.jobpoints = beJob.jobSkillPoints;
        this.limit_reached = beJob.limit_reached || false;
        this.is_gold = beJob.is_gold || false;
        this.is_silver = beJob.is_silver || false;
        this.itembonus = beJob.itembonus || false;
        this.danger = parseInt(beJob.danger);
        this.jobmotivation = beJob.motivation;
        this.luck = beJob.minMaxItemVal;
        this.maxLuck = beJob.minMaxItemVal[1];
        this.isVisible = (this.jobpoints >= this.workpoints) || (Character.level >= this.jobObj.level);
        var jc = new JobCalculator(this.jobpoints, this.workpoints);
        jc.calcStars(beJob.stage.malus);
        this.stars = jc.stars;
        this.stage = jc.stage;
        this.nextStarData = jc.getNextStarData();
        this.jobstarsValue = jc.getJobstarsValue();
        this.nextStageValues = beJob.stageRewards;
        ['short', 'middle', 'long'].forEach(function (duration, key) {
            var values = this.basis[duration];
            var beDur = beJob.durations[key];
            if (!beDur)return;
            values['energy'] = beDur.cost;
            values['money'] = beDur.money + (beDur.featured_money || 0);
            values['experience'] = beDur.xp + (beDur.featured_xp || 0);
            values['bonus_money'] = beDur.featured_money || 0;
            values['bonus_experience'] = beDur.featured_xp || 0;
            values['p_luck'] = beDur.luck;
            values['yields'] = beDur.items;
            values['duration'] = beDur.duration;
        }, this);
    }
});
;
(function () {
    window.JobsModel = {
        Jobs: [],
        Beans: {},
        currentSort: {sortBy: 'name', orderBy: 'asc'},
        basetype: 'short',
        initialized: false,
        markedJobs: [],
        currentCListSort: {sortBy: 'name', orderBy: 'asc'}
    };
    JobsModel.initJobs = function (beJobs) {
        JobsModel['Jobs'] = [];
        if (beJobs) {
            for (var key in beJobs) {
                var tmpJob = new west.job.Model(JobList.getJobById(parseInt(key)));
                tmpJob.mergeJobObject(beJobs[key]);
                JobsModel.Jobs.push(tmpJob);
                JobsModel.Beans[key] = tmpJob;
            }
            JobsModel.initialized = true;
        }
        else {
            var jobs = JobList.getSortedJobs();
            for (var i = 0, len = jobs.length; i < len; ++i) {
                var tmpJob = new west.job.Model(jobs[i]);
                JobsModel.Jobs.push(tmpJob);
                JobsModel.Beans[tmpJob.id] = tmpJob;
            }
        }
        JobsModel.basetype = 'short';
    };
    JobsModel.addComparedJob = function (id) {
        var job = JobsModel.getById(id);
        if (!job)return false;
        job.marked = true;
        JobsModel.markedJobs.push(job);
    };
    JobsModel.removeComparedJob = function (id) {
        if (!id)return false;
        for (var i = 0, len = JobsModel.markedJobs.length; i < len; ++i) {
            if (JobsModel.markedJobs[i].id === id) {
                JobsModel.getById(id).marked = false;
                JobsModel.markedJobs.splice(i, 1);
                return true;
            }
        }
        return false;
    };
    JobsModel.setComparedJobs = function (arrJobs) {
        JobsModel.markedJobs.push(arrJobs);
    };
    JobsModel.getComparedJobs = function () {
        return JobsModel.markedJobs;
    };
    JobsModel.getById = function (id) {
        if (!JobsModel.Beans.hasOwnProperty(id))
            return null; else
            return JobsModel.Beans[id];
    };
    JobsModel.changeBase = function (basetype) {
        if (JobsModel.basetype == basetype)return false;
        JobsModel.basetype = basetype;
        return true;
    };
    JobsModel.searchJobsByType = function (searchType, searchPattern) {
        if (searchPattern.length < 3)return false;
        var regEx = new RegExp(searchPattern.toUpperCase(), 'i');
        if (searchType === 'name')
            return searchJobByName(regEx); else if (searchType === 'yield')
            return searchJobByItemName(regEx);
        return false;
    };
    JobsModel.searchJobsByPattern = function (searchPattern) {
        if (searchPattern.length < 3)return false;
        var regEx = new RegExp(searchPattern.toUpperCase(), 'i');
        var found = searchJobByName(regEx).concat(searchJobByItemName(regEx));
        return found.unique();
    };
    var searchJobByName = function (regEx) {
        var foundJobs = [];
        for (var i = 0, len = JobsModel.Jobs.length; i < len; ++i) {
            if (JobsModel.Jobs[i] && regEx.test(JobsModel.Jobs[i].name.toUpperCase()))
                foundJobs.push(JobsModel.Jobs[i]);
        }
        return foundJobs;
    };
    var searchJobByItemName = function (regEx) {
        var foundJobs = [];
        for (var i = 0, len = JobsModel.Jobs.length; i < len; ++i) {
            for (var key in JobsModel.Jobs[i].jobObj.yields) {
                var item = ItemManager.get(key);
                if (item && regEx.test(item.name))
                    foundJobs.push(JobsModel.Jobs[i]);
            }
        }
        return foundJobs;
    };
    JobsModel.sortJobs = function (sortBy, base, orderBy) {
        if (JobsModel.currentSort.sortBy === sortBy && !orderBy) {
            JobsModel.currentSort.orderBy = JobsModel.currentSort.orderBy === 'asc' ? 'desc' : 'asc';
            JobsModel.Jobs.reverse();
        }
        else {
            JobsModel.currentSort.sortBy = sortBy || 'name';
            JobsModel.currentSort.orderBy = orderBy || 'asc';
            if (sortBy == 'money' || sortBy == 'experience')
                var basis = base ? base : JobsModel.basetype;
            var getterFunc = function (obj) {
                if (JobsModel.currentSort.sortBy === 'jobstars')
                    return obj.jobstarsValue; else if (basis)
                    return obj.basis[basis][JobsModel.currentSort.sortBy]; else
                    return obj[JobsModel.currentSort.sortBy];
            };
            JobsModel.Jobs.sort(Sort.create(JobsModel.currentSort.orderBy, getterFunc));
        }
    };
    JobsModel.sortCompareList = function (sortBy, base, orderBy) {
        var jobs = JobsModel.getComparedJobs();
        if (!jobs)return false;
        if (JobsModel.currentCListSort.sortBy === sortBy && !orderBy) {
            JobsModel.currentCListSort.orderBy = JobsModel.currentCListSort.orderBy === 'asc' ? 'desc' : 'asc';
            jobs.reverse();
        }
        else {
            JobsModel.currentCListSort.sortBy = sortBy || 'name';
            JobsModel.currentCListSort.orderBy = orderBy || 'asc';
            if (sortBy == 'money' || sortBy == 'experience')
                var basis = base ? base : JobsModel.basetype;
            var getterFunc = function (obj) {
                if (JobsModel.currentCListSort.sortBy === 'jobstars')
                    return obj.jobstarsValue; else if (basis)
                    return obj.basis[basis][JobsModel.currentCListSort.sortBy]; else
                    return obj[JobsModel.currentCListSort.sortBy];
            };
            jobs.sort(Sort.create(JobsModel.currentCListSort.orderBy, getterFunc));
        }
        return true;
    };
    JobsModel.updateSkillPoints = function () {
        if (JobsModel.reloadInProgress) {
            window.clearTimeout(JobsModel.reloadInProgress);
        }
        JobsModel.reloadInProgress = window.setTimeout(JobsWindow.updateJobs, 2000);
    };
})();
;
(function ($) {
    QuestWindowView = {};
    var questLogMainDiv = $('<div class="window-quest_log" />');
    var questSolvedMainDiv = $('<div class="window-quest_solved" />');
    var openQuests;
    var openQuestsScrollpane;
    var detailQuest;
    var activeQuest;
    var activeSolvedQuest;
    var detailSolvedQuest;
    var solvedQuests;
    var questSolvedTextContainer;
    var buttonArea;
    QuestWindowView.init = function (obj) {
        this.renderQuestLogView();
        obj.appendToContentPane(questLogMainDiv, questSolvedMainDiv);
    };
    var addToSolvedLog = function (quest) {
        var groupDiv = $('#solved_quest_group_' + quest.group, solvedQuests);
        if (groupDiv.length == 0) {
            groupDiv = $('<div id="solved_quest_group_' + quest.group + '"><span class="text_bold">' + quest.groupTitle + '</span></div>');
            solvedQuests.append(groupDiv);
        }
        groupDiv.append('<div class="questlog_entrie finish" id="solved_quest_' + quest.id + '">' + '<a href="#" class="shorten" onclick="QuestWindow.showSolvedQuest(' + quest.id + ');" title="' + quest.title.escapeHTML() + '">' + quest.soloTitle.escapeHTML() + '</a>');
        if (0 != quest.rank) {
            groupDiv.append('<div class="time_record questlog_entrie"  title="' +
                ('' + quest.finishDate.toLocaleDateString() + ' ' + quest.finishDate.toLocaleTimeString()).escapeHTML() + '<br>' + s('Рейтинг доступен только лучшим игрокам.') + '<br>' + s('У очень старых и повторяемых квестов нет рейтинга.') + '">' +
                s('Ты завершил этот квест на %1-м месте.', '<span class="text_bold">' + quest.rank + '</span>') + '</div>');
        }
    };
    var addToQuestLog = function (quest) {
        var text = quest.title.escapeHTML();
        openQuests.append($('<div class="questlog_entrie" id="quest_' + quest.id + '" />').append(QuestTrackerWindow.getCheckBox(quest), $('<a href="#" class="shorten" id="open_quest_questbook_' + quest.id + '" onclick="QuestWindow.showQuest(' + quest.id + ');" title="' + text + '"/>').append(quest.getQuestIcon(), text)));
        updateCapacity();
    };
    var updateQuestLog = function (quest) {
        if ($("#quest_" + quest.id).length == 0)addToQuestLog(quest);
        if (quest.finishable) {
            $("#open_quest_questbook_" + quest.id + " > img.tw2gui-iconset").remove();
            $("#open_quest_questbook_" + quest.id).prepend(quest.getQuestIcon());
        }
    };
    var removeFromQuestLog = function (quest) {
        $("#quest_" + quest.id).remove();
        detailQuest.getContentPane().empty().text("Задание не выбрано.");
        $(questLogMainDiv).find('.cancel_button_area').empty();
        updateCapacity();
    };
    var updateCapacity = function () {
        questCapacity.html("Задания" + " " + QuestLog.questlog_size.accepted + ' / ' + QuestLog.questlog_size.capacity);
    };
    QuestWindowView.selectReward = function (element) {
        $(".rewardOption").each(function (k, v) {
            $(v).children().removeClass("selected");
        });
        $(element).children().addClass('selected');
        QuestWindow.rewardOption = $(element).attr("id").substr(12);
    };
    QuestWindowView.showSolvedQuest = function (quest) {
        detailSolvedQuest.getContentPane().empty();
        detailSolvedQuest.scrollToTop();
        questSolvedTextContainer.empty();
        detailSolvedQuest.appendContent(quest.getEl());
        if (activeSolvedQuest !== undefined)$("#solved_quest_" + activeSolvedQuest).css("opacity", 1);
        $("#solved_quest_" + quest.id).css("opacity", 0.5);
        activeSolvedQuest = quest.id;
    };
    QuestWindowView.showQuest = function (quest) {
        detailQuest.getContentPane().empty();
        detailQuest.scrollToTop();
        buttonArea.empty();
        detailQuest.appendContent(quest.getEl());
        buttonArea.append(quest.getQuestbookButtonsEl());
        if (activeQuest !== undefined)$("#quest_" + activeQuest).css("opacity", 1);
        $("#quest_" + quest.id).css("opacity", 0.5);
        activeQuest = quest.id;
    };
    QuestWindowView.renderQuestSolved = function () {
        if ($(questSolvedMainDiv).children().length > 0) {
            EventHandler.unlisten("quest_solved", addToSolvedLog);
            $(questSolvedMainDiv).empty();
        }
        var leftSite = $('<div class="employer_description" />');
        var detailSolvedQuestContainer = $('<div class="solved_container" />');
        detailSolvedQuest = new west.gui.Scrollpane().appendContent($('<span />').text("Задание не выбрано."));
        var questSolvedScrollpane = new west.gui.Scrollpane();
        solvedQuests = $('<div />');
        questSolvedTextContainer = $('<div class="solved_text_container" />');
        questSolvedMainDiv.append(leftSite.append(questSolvedScrollpane.appendContent($('<div />').append('<h2 class="quest_topic">' + "Пройденные квесты" + '</h2>' + '<div class="quest_splitter" />', solvedQuests)).getMainDiv()), detailSolvedQuestContainer.append(detailSolvedQuest.getMainDiv()), questSolvedTextContainer);
        EventHandler.listen("quest_solved", addToSolvedLog);
    };
    QuestWindowView.renderQuestLogView = function () {
        if ($(questLogMainDiv).children().length > 0) {
            $(questLogMainDiv).empty();
            EventHandler.unlisten("quest_added", addToQuestLog);
            EventHandler.unlisten("quest_removed", removeFromQuestLog);
            EventHandler.unlisten("quest_update", updateQuestLog);
        }
        var trenner = $('<div class="quest_splitter" id="open_split" />');
        var leftSite = $('<div class="left" />');
        questCapacity = $('<div id="questCapacity" />');
        var title = $('<div class="questbook_title">' + "Квесты" + '</div>');
        openQuestsScrollpane = new west.gui.Scrollpane();
        openQuests = $('<div class="open_quests_list" />');
        var detailQuestContainer = $('<div class="detail_quest_container" />');
        detailQuest = new west.gui.Scrollpane().appendContent("Задание не выбрано.");
        buttonArea = $('<div class="cancel_button_area" style="position: absolute; top: 332px; left: 357px;width:316px;" />');
        questLogMainDiv.append(leftSite.append(title, trenner, questCapacity, openQuestsScrollpane.appendContent($('<div />').append(openQuests)).getMainDiv()), detailQuestContainer.append(detailQuest.getMainDiv()), buttonArea);
        EventHandler.listen("quest_added", addToQuestLog);
        EventHandler.listen("quest_removed", removeFromQuestLog);
        EventHandler.listen("quest_update", updateQuestLog);
    };
    var getOpenEmployerBtn = function (quest) {
        var openEmployerBtn = new west.gui.Button("Открыть квестодателя").addClass('quest_button');
        if (quest.employer_coords) {
            if (quest.employer_coords.length > 1) {
                var select = new west.gui.Selectbox();
                select.setPosition(8, undefined, undefined, 40);
                select.setWidth(250);
                select.addListener(function (coords) {
                    QuestEmployerWindow.showEmployer(quest.employer, coords[0], coords[1], quest.id);
                });
                for (var k = 0; k < quest.employer_coords.length; k++) {
                    select.addItem(quest.employer_coords[k], s('%1. Текущая позиция (Время пути: %2)', k + 1, Character.calcWayTo(quest.employer_coords[k][0], quest.employer_coords[k][1]).formatDuration()));
                }
                openEmployerBtn.setSelectbox(select);
            } else {
                openEmployerBtn.click = function () {
                    QuestEmployerWindow.showEmployer(quest.employer, quest.employer_coords[0][0], quest.employer_coords[0][1], quest.id);
                };
            }
        } else {
            openEmployerBtn.click = function () {
                QuestEmployerWindow.showEmployer(quest.employer, undefined, undefined, quest.id);
            };
        }
        return openEmployerBtn;
    };
})(jQuery);
;
(function ($) {
    QuestEmployerView = {};
    var questEmployerMainDiv = $('<div class="window-quest_employer" />');
    var openEmployerQuests;
    var fingerBoard;
    var employerScrollpane;
    var detailEmployer;
    var questButtonArea;
    var showQuestFinish = function (quest) {
        $('#open_quest_' + quest.id).remove();
        quest.updateQuest();
    };
    var updateQuest = function (quest) {
        $("#open_quest_employerlink_" + quest.id + " > img.tw2gui-iconset").remove();
        $("#open_quest_employerlink_" + quest.id).prepend(quest.getQuestIcon());
    };
    var removeQuest = function (quest, employer, cancel) {
        if (!cancel) {
            $("#open_quest_" + quest.id).remove();
            QuestEmployerWindow.updateQuestList();
        } else {
            var employer_quest = QuestLog.getEmployerQuest(quest.id);
            if (employer_quest) {
                updateQuest(employer_quest);
                $('.tw2gui_window.window-quest_employer .questbook_detail_right_' + quest.id).empty().append($('<div style="width: 295px;" />').append($('<div class="photo_container" />'), $('<div class="photo" />').css("background", "url(https://westrus.innogamescdn.com/images/quest/employer/" + employer.image + ".png)"), $('<span />').html("<b>" + employer.name + "</b><br /><br />" + employer.description)));
                questButtonArea.empty();
            }
        }
    };
    QuestEmployerView.init = function (obj) {
        this.renderQuestEmployerView();
        obj.appendToContentPane(questEmployerMainDiv);
    };
    QuestEmployerView.renderQuestEmployerView = function () {
        if ($(questEmployerMainDiv).children().length > 0) {
            $(questEmployerMainDiv).empty();
        }
        var employerDesc = $('<div class="employer_description" />');
        detailEmployer = $('<div class="employer_content" />');
        openEmployerQuests = $('<div />');
        fingerBoard = $('<div class="fingerboard" />');
        questButtonArea = $('<div class="quest_buttonarea" />');
        questVideoArea = $('');
        employerScrollpane = new west.gui.Scrollpane();
        questEmployerMainDiv.append(detailEmployer, questButtonArea, employerDesc.append(employerScrollpane.appendContent($('<div />').append('<h2 style="margin-left:10px;padding-top:10px;">' + "Открытые квесты" + '</h2><div class="quest_splitter" />', openEmployerQuests)).getMainDiv(), fingerBoard));
        EventHandler.listen("employer_active", switchEmployer);
        EventHandler.listen("quest_solved", showQuestFinish);
        EventHandler.listen("quest_added", updateQuest);
        EventHandler.listen("quest_update", updateQuest);
        EventHandler.listen('quest_removed', removeQuest);
    };
    QuestEmployerView.buildQuestLog = function (employer) {
        openEmployerQuests.empty();
        employerScrollpane.onResized();
        employerScrollpane.scrollToTop();
        for (var x = 0; x < employer.open.length; x++) {
            var open_quest = employer.open[x];
            if (open_quest.accepted) {
                open_quest = QuestLog.quests[open_quest.id];
            } else {
                open_quest = new Quest(open_quest);
            }
            var link = "QuestEmployerWindow.showOpenQuest(" + open_quest.id + ")";
            var icon = open_quest.getQuestIcon();
            openEmployerQuests.append($('<div class="questlog_entrie" id="open_quest_' + open_quest.id + '"/>').append($('<a href="#" id="open_quest_employerlink_' + open_quest.id + '" onclick="' + link + '" class="shorten" title="' + open_quest.title.escapeHTML() + '"/>').append(icon, open_quest.title.escapeHTML())));
        }
    };
    var switchEmployer = function (employer, changed) {
        detailEmployer.empty();
        var photo = $('<div class="photo_container" />');
        var employerImgDiv = $('<div class="photo" />').css("background", "url(https://westrus.innogamescdn.com/images/quest/employer/" + employer.image + ".png)");
        var employerDescText = $('<span />').html("<b>" + employer.name + "</b><br /><br />" + employer.description);
        detailEmployer.append($('<div style="width: 295px;" />').append(photo, employerImgDiv, employerDescText));
        QuestEmployerView.buildQuestLog(employer);
        questButtonArea.empty();
        fingerBoard.empty();
        showVideo(employer);
        if (employer.x && employer.y) {
            var way_time = Map.calcWayTime(Character.position, employer);
            fingerBoard.append('<div style="float: left;margin-left: 4px;">' + "Расстояние:" + " " + way_time.formatDuration() + '</div>', new west.gui.Button("Идти", function () {
                QuestEmployerWindow.startWalk(employer);
                QuestEmployerWindow.window.destroy();
            }).getMainDiv());
        }
        if (employer.video_path) {
            openEmployerQuests.append($('<div class="video" />').append(new west.gui.Button("Посмотреть ролик", function () {
                showVideo(employer);
            }).getMainDiv()));
        }
    };
    var showVideo = function (employer) {
        if (employer.video_path && !employer.video_seen) {
            QuestEmployerWindow.window.appendToContentPane('<div id="flashplayer"><a href="/videos/' + employer.video_path + '" id="questEmployerVideo"></a></div>');
            flowplayer("questEmployerVideo", {
                src: "flash/flowplayer-3.2.7.swf",
                wmode: 'opaque'
            }, {clip: {autoPlay: false, autoBuffering: true}}).onFinish(function () {
                $('#flashplayer').remove();
                Ajax.remoteCall('quest_employer', 'set_video_seen', {employer: employer.key}, function (json) {
                });
            });
        }
    };
    QuestEmployerView.showQuest = function (quest) {
        detailEmployer.empty();
        questButtonArea.empty();
        var detailEmployerScrollpane = new west.gui.Scrollpane();
        detailEmployerScrollpane.scrollToTop();
        detailEmployer.append(detailEmployerScrollpane.appendContent(quest.getEl()).getMainDiv());
        questButtonArea.append(quest.getButtonsEl());
        QuestLog.setActiveQuest(quest.id);
    };
})(jQuery);
;
(function ($) {
    window.JobsWindow = {DOM: '*'};
    JobsWindow.toggleOpen = function () {
        var wnd = wman.toggleOpen('jobs');
        if (wnd && 'open' === wnd.status) {
            JobsWindow.open(wnd.win);
        }
    };
    JobsWindow.open = function (win_open) {
        JobsWindow.window = (win_open || wman.open("jobs")).setMiniTitle('Работа').appendToContentPane($('<div class="jobs"/>'));
        JobsWindow.window.setTitle('Работа');
        JobsWindow.DOM = $('div.tw2gui_window.jobs');
        EventHandler.listen("char_skills_changed", function (data) {
            JobsModel.updateSkillPoints();
        }, JobsWindow, {boundto: this.window});
        if (null != JobsModel.currentSort.sortBy) {
            JobsModel.currentSort.sortBy = null;
        }
        contentPane = null;
        windowStatus = 1;
        initData(initView);
    };
    var jobSearchbar = null;
    var contentPane = null;
    var cbDisabledJobs = null;
    var showAllButton = null;
    var pa_button = null;
    var compromiseButton = null;
    var windowStatus = 1;
    wman.registerReloadHandler(/^jobs/, function () {
        JobsWindow.open();
    });
    var initData = function (callback) {
        Ajax.remoteCallMode('work', 'index', {}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            JobsModel.initJobs(json.jobs);
            callback();
        }, JobsWindow);
    };
    var initView = function () {
        var maindiv = $('<div class="jobswindow"><div class="jobs-leftSide" /><div class="jobs_divider" />' + '<div class="jobs-rightSide"><div class="jobs-header"></div><div class="jobs_head_shadow" /><div class="jobs-content"></div><div class="jobs-footer"></div></div>' + '</div>');
        createSortButtons(maindiv);
        pa_button = new west.gui.Button('<img src="https://westrus.innogamescdn.com/images/icons/nugget.png" />&nbsp;<span class="text_bold">' + 'Автоматизация' + '</span>', paButtonClicked, null, {}, 'Возможности премиума').setWidth(180);
        if (Premium.hasBonus('automation')) {
            pa_button.disable();
        }
        var pa_buttonbox = $('<div class="jobs_premium_left"><div class="group_devider">&nbsp;</div></div>').append(pa_button.getMainDiv());
        jobSearchbar = new tw2widget.jobsearchbar(jobSelected, 1).setAutofillModus(false).setClearTermButton().setWidth(190);
        var divider_searchbar = '<div class="jobs_divider_searchbar" />';
        var divider_checkboxes = '<div class="jobs_divider_checkbox" />';
        var basisbox = $('<div class="jobs_basisbox"><h3>' + 'Основа для сравнения' + '</h3><div class="jobs_basisdesc"><p class="center">' + 'Значения основаны на рабочем времени.' + '</p><br />' + '</div></div>');
        basisbox.append(new west.gui.Checkbox('Короткие', 'jobs_basischeckboxes', basisCheckboxChecked).setTitle('Сортирует по короткому времени работы.').setRadiobutton().setValue('short').setSelected(true, true).getMainDiv(), '<br />', divider_checkboxes);
        if (Character.level > 9) {
            basisbox.append(new west.gui.Checkbox('Средний', 'jobs_basischeckboxes', basisCheckboxChecked).setTitle('Сортирует по среднему времени работы.').setValue('middle').setRadiobutton().getMainDiv(), '<br />', divider_checkboxes);
        }
        if (Character.level > 19) {
            basisbox.append(new west.gui.Checkbox('Длинные', 'jobs_basischeckboxes', basisCheckboxChecked).setTitle('Сортирует по длинному времени работы.').setValue('long').setRadiobutton().getMainDiv(), divider_checkboxes);
        }
        showAllButton = new west.gui.Button('Все', openAllCategoryClicked, null, null, 'Показать все работы', 'jobs_allbutton').setWidth(180);
        compromiseButton = new west.gui.Button('Сравнение', jobCompromiseClicked, null, {}, 'Сравнить выбранные работы').addClass('jobs_compromisebutton').setWidth(180);
        if (!JobsModel.getComparedJobs().length)compromiseButton.disable();
        var divider_top = '<div class="jobs_divider_top jobs_divider_horiz" />';
        var divider_bottom = '<div class="jobs_divider_bottom jobs_divider_horiz" />';
        var allcontainer = $('<div class="jobs_allcontainer"></div>').append(showAllButton.getMainDiv(), divider_top, basisbox, divider_bottom, compromiseButton.getMainDiv());
        $('div.jobs-leftSide', maindiv).empty().append(jobSearchbar.getMainDiv(), divider_searchbar, allcontainer, pa_buttonbox);
        cbDisabledJobs = new west.gui.Checkbox('Только доступные работы', 'jobs_cbdisabledjobs', cbDisplayDisabledJobsChecked).setTitle('Показывает только выполнимые на данный момент работы.').setSelected(true);
        $('div.jobs-footer', maindiv).empty().append(cbDisabledJobs.getMainDiv());
        $('div.jobs', JobsWindow.DOM).empty().append(maindiv);
        showNewJobs();
    };
    var createSortButtons = function (selector) {
        var titleName = '<span class="text_bold">' + 'Подсказка' + ':</span> ' + 'Кликнув здесь, ты можешь отсортировать работы по названию.';
        var titleStars = '<span class="text_bold">' + 'Квалификации' + ':</span> ' + 'Кликнув здесь, ты можешь отсортировать работы по квалификации.';
        var titleMoney = '<span class="text_bold">' + 'Заработок:' + '</span> ' + 'Заработок показывает сколько денег ты получишь за работу. Чем больше трудовых очков ты вложишь в работу, тем больше денег ты заработаешь.' + '<br /><br /><span class="text_bold"> ' + 'Подсказка:' + '</span> ' + 'Кликнув здесь, ты можешь отсортировать работы по заработку.';
        var titleExp = '<span class="text_bold">' + 'Опыт:' + '</span> ' + 'Показывает, сколько очков опыта ты можешь заработать.' + '<br /><br /><span class="text_bold">' + 'Подсказка:' + '</span> ' + 'Кликнув здесь, ты можешь отсортировать работы по приобретаемому опыту.';
        var titleLuck = '<span class="text_bold">' + 'Стоимость находок:' + '</span> ' + 'Если повезёт, во время работы ты можешь найти что-нибудь ценное. Чем выше этот показатель, тем интереснее будут твои находки.' + '<br /><br /><span class="text_bold"> ' + 'Подсказка:' + '</span> ' + 'Кликнув здесь, ты можешь отсортировать работы по стоимости находок.';
        var titleDiffic = '<span class="text_bold">' + 'Требования работодателя:' + '</span> ' + 'Каждый работодатель имеет определённые требования. Чтобы устроиться на работу, тебе нужно как минимум на одно очко умений больше чем требования работодателя.' + '<br /><br /><span class="text_bold"> ' + 'Подсказка:' + '</span> ' + 'Кликнув здесь, ты можешь отсортировать работы по сложности.';
        var titleJobp = '<span class="text_bold">' + 'Трудовые очки:' + '</span> ' + 'Чтобы устроиться на работу, тебе нужно как минимум одно трудовое очко. Чем больше у тебя трудовых очков, тем выше зарплата и меньше опасность.' + '<br /><br /><span class="text_bold">' + 'Подсказка:' + '</span> ' + 'Кликнув здесь, ты можешь отсортировать работы по требованиям.';
        $('div.jobs-header', selector).append(new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/name.png', sortContent, null, {sortBy: 'name'}, titleName.escapeHTML()).setWidth(50).addClass('jobs_name').getMainDiv(), new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/jobstar_gold.png', sortContent, null, {sortBy: 'jobstars'}, titleStars.escapeHTML()).setWidth(50).addClass('jobs_jobstars').getMainDiv(), new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/dollar.png', sortContent, null, {sortBy: 'money'}, titleMoney.escapeHTML()).setWidth(50).addClass('jobs_money').getMainDiv(), new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/star.png', sortContent, null, {sortBy: 'experience'}, titleExp.escapeHTML()).setWidth(50).addClass('jobs_experience').getMainDiv(), new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/luck.png', sortContent, null, {sortBy: 'maxLuck'}, titleLuck.escapeHTML()).setWidth(50).addClass('jobs_maxLuck').getMainDiv(), new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/difficulty.png', sortContent, null, {sortBy: 'workpoints'}, titleDiffic.escapeHTML()).setWidth(50).addClass('jobs_workpoints').getMainDiv(), new west.gui.Iconbutton('https://westrus.innogamescdn.com/images/icons/hammer.png', sortContent, null, {sortBy: 'jobpoints'}, titleJobp.escapeHTML()).setWidth(50).addClass('jobs_jobpoints').getMainDiv());
    };
    var initJobsScrollpane = function () {
        updateJobsScrollpane(JobsModel.Jobs);
    };
    var showNewJobs = function () {
        var newJobs = [];
        var newJobIds = [];
        for (var i = 0; i < JobsModel.Jobs.length; i++) {
            if (JobsModel.Jobs[i].jobObj.isNew())
                newJobIds.push(JobsModel.Jobs[i].id);
            newJobs.push(JobsModel.Jobs[i]);
        }
        if (newJobIds.length >= 1) {
            setJobsSeen(newJobIds);
        }
        updateJobsScrollpane(newJobs);
    };
    var setJobsSeen = function (jobIds) {
        var seenIds = Config.get('jobs.seen');
        if (seenIds) {
            var newConf = seenIds.concat(jobIds);
        } else {
            var newConf = jobIds;
        }
        Config.set('jobs.seen', newConf);
    };
    var updateJobsScrollpane = function (jobs) {
        if (!jobs.length)return false;
        contentPane = null;
        contentPane = new west.gui.Scrollpane('jobs_maincontent');
        var showAll = Premium.hasBonus('automation') && !cbDisabledJobs.isSelected();
        for (var i = 0, len = jobs.length; i < len; ++i) {
            if (jobs[i].isVisible || showAll)
                contentPane.appendContent(getJobInfoBox(jobs[i]));
        }
        $('div.jobs-content', JobsWindow.DOM).empty().append(contentPane.getMainDiv()).off('click').click(clickJobsScrollpane);
    };
    var getJobInfoBox = function (jobbean) {
        var infobox = $('<div id="jobinfobox_' + jobbean.id + '" class="jobinfobox' + (jobbean.isVisible ? '' : ' opacity05') + '" data-jobid="' + jobbean.id + '">' + '<div class="jobinfobox_top">' + '<span class="jobinfobox_title" title="' + jobbean.get('description').escapeHTML() + '">' + jobbean.name + '</span>' + '</div>' + '<div class="jobinfobox_wrapper">' + '<div class="jobinfobox_content_head">' + '<div class="jobinfobox_view_energy" title="' + 'Очки энергии, необходимые для этой работы.' + '"><span class="jobinfobox_view_icon"><img src="https://westrus.innogamescdn.com/images/icons/energy.png" /></span><span class="jobinfobox_view_value">&nbsp;' + jobbean.basis[JobsModel.basetype].energy + '</span></div>' + '<div class="jobinfobox_view_duration" title="' + 'Необходимая продолжительность этой работы.' + '<br >(' + jobbean.get('duration', JobsModel.basetype).getTime2EndToken() + ')"><span class="jobinfobox_view_icon"><img src="https://westrus.innogamescdn.com/images/icons/clock.png" /></span><span class="jobinfobox_view_value">&nbsp;' + jobbean.get('duration', JobsModel.basetype).getTime2EndToken().cutIt(8) + '</span></div>' + '<div class="jobinfobox_view_dollar" title="' + 'Заработок показывает сколько денег ты получишь за работу. Чем больше трудовых очков ты вложишь в работу, тем больше денег ты заработаешь.' + '"><span class="jobinfobox_view_icon"><img src="https://westrus.innogamescdn.com/images/icons/dollar.png" /></span><span class="jobinfobox_view_value">&nbsp;$' + jobbean.get('money', JobsModel.basetype) + '</span></div>' + '<div class="jobinfobox_view_exp" title="' + 'Показывает, сколько очков опыта ты можешь заработать на этой работе.' + '"><span class="jobinfobox_view_icon"><img src="https://westrus.innogamescdn.com/images/icons/star.png" /></span><span class="jobinfobox_view_value">&nbsp;' + jobbean.basis[JobsModel.basetype].experience + '</span></div>' + '<div class="jobinfobox_view_found" title="' + 'Если повезёт, во время работы ты можешь найти что-нибудь ценное. Чем выше этот показатель, тем интереснее будут твои находки.' + '"><span class="jobinfobox_view_icon"><img src="https://westrus.innogamescdn.com/images/icons/luck.png" /></span><span class="jobinfobox_view_value">&nbsp;$' + jobbean.maxLuck + '</span></div>' + '</div>' + '<div class="jobinfobox_icon job" title="' + jobbean.get('description').escapeHTML() + '">' + '<img src="https://westrus.innogamescdn.com/images/jobs/' + jobbean.get('shortname') + '.png" alt="" />' +
            (jobbean.jobObj.isNew() ? '<div class="new-job" title="' + 'Новая работа'.escapeHTML() + '"/>' : '') + '</div>' + '<div class="jobinfobox_content">' + '<div class="jobinfobox_content_left" />' + '<div class="jobinfobox_content_right" />' + '</div>' + '</div>' + '<div class="jobinfobox_bottom">' + '<div class="jobinfobox_level" title="' + s('Работа доступна с %1-го уровня.', jobbean.get('level')) + '">' + s('%1-й уровень', jobbean.get('level')) + '</div>' + '<div class="jobinfobox_bottom_left" />' + '<div class="jobinfobox_bottom_right" />' + '</div>' + '<div class="jobinfobox_footer" />' + '</div>');
        var marker = new west.gui.Checkbox(null, 'jobs_cbMarkJob clickable').setTitle('Выбрать работу для сравнения');
        if (jobbean.marked)
            marker.setSelected(true);
        $('div.jobinfobox_top', infobox).append(marker.getMainDiv().data({action: 'markJob', jobid: jobbean.id}));
        if (Premium.buyable.automation && Premium.hasBonus('automation') && jobbean.isVisible)
            $('div.jobinfobox_bottom_left', infobox).append($('<div class="jobs_nearestJob clickable" data-action="nearestJob" data-jobid="' + jobbean.id + '" title="' + 'Приступить к ближайшей работе.' + '">&gt;&gt;&nbsp;' + 'Начать' + '</div>'));
        if (jobbean.get('yields', JobsModel.basetype)) {
            $('div.jobinfobox_content_right, div.jobinfobox_bottom_right', infobox).empty();
            $.each(jobbean.get('yields', JobsModel.basetype), function (k, v) {
                if (isNaN(v.itemid) || 0 == v.itemid)return false;
                var yield = ItemManager.get(v.itemid);
                $('div.jobinfobox_content_right', infobox).append('<div class="jobinfobox_itemslot yieldslot_' + k + '"></div>');
                $('div.jobinfobox_itemslot.yieldslot_' + k, infobox).append(new tw2widget.JobsYieldItem(yield, (v.prop + v.probBonus)).getMainDiv());
                if (Premium.buyable.buyproduct && jobbean.isVisible)
                    $('div.jobinfobox_bottom_right', infobox).append('<div class="jobinfobox_buy_icon clickable" data-action="buyYield" data-jobid="' + jobbean.id + '" data-itemid="' + yield.item_id + '" title="' + 'Купить продукт' + '"></div>');
            });
        }
        $('div.jobinfobox_content_left', infobox).empty().append(new tw2widget.jobstars(jobbean.stage, jobbean.stars).getMainDiv());
        return infobox;
    };
    var clickHandlerForView = function (ev) {
        if (!$(ev.target).hasClass('clickable'))
            return false;
    };
    var jobSelected = function (ev) {
        var jobId = (ev ? $(ev.target).data('job_id') : (jobSearchbar.value.value || 0));
        if (ev && !jobId) {
            if (window.DEBUG)console.log('jobSelected error - unknown job id');
            return false;
        }
        else if (jobId) {
            $('div.jobs-content', JobsWindow.DOM).empty().append(getJobInfoBox(JobsModel.getById(jobId)));
        }
        if (ev) {
            jobSearchbar.setValue($(ev.target).data('job_id'), $(ev.target).data('job_name'));
            $('div.tw2gui_jobsearchbar_results', JobsWindow.DOM).empty().hide();
        }
        windowStatus = 3;
        updateSortIcon();
        showAllButton.enable();
    };
    var openAllCategoryClicked = function (ev) {
        JobsModel.sortJobs('name', null, 'asc');
        jobSearchbar.setValue('', '');
        showAllButton.disable();
        updateJobsScrollpane(JobsModel.Jobs);
        windowStatus = 1;
        updateSortIcon();
        jobSearchbar.setValue('', '');
    };
    var basisCheckboxChecked = function () {
        var contentKey = $('div.jobs_basischeckboxes.tw2gui_checkbox_checked', JobsWindow.DOM).data('value') || 'standard';
        if (!JobsModel.changeBase(contentKey))return console.log('basechange failed');
        if (windowStatus == 3) {
            var jobid = $('div.jobinfobox', JobsWindow.DOM).data('jobid');
            updateJobsScrollpane([JobsModel.getById(jobid)]);
        }
        else if (windowStatus == 2) {
            JobsModel.sortCompareList('name', null, 'asc');
            updateSortIcon();
            updateJobsScrollpane(JobsModel.getComparedJobs());
        }
        else {
            JobsModel.sortJobs('name', null, 'asc');
            updateSortIcon();
            updateJobsScrollpane(JobsModel.Jobs);
        }
    };
    JobsWindow.updateJobs = function () {
        window.clearTimeout(JobsModel.reloadInProgress);
        initData(function () {
            JobsModel.basetype = 'standard';
            basisCheckboxChecked();
        });
    };
    var updateSortIcon = function () {
        $('div.jobs-header span.tw2gui_iconbutton img.jobssort', JobsWindow.DOM).remove();
        if (windowStatus === 2)
            $('div.jobs-header span.tw2gui_iconbutton.jobs_' + (JobsModel.currentCListSort.sortBy == 'standard' ? 'name' : JobsModel.currentCListSort.sortBy), JobsWindow.DOM).append('<img class="jobssort" src="https://westrus.innogamescdn.com/images/window/jobs/sortarrow_' + JobsModel.currentCListSort.orderBy + '.png" alt="" />'); else
            $('div.jobs-header span.tw2gui_iconbutton.jobs_' + (JobsModel.currentSort.sortBy == 'standard' ? 'name' : JobsModel.currentSort.sortBy), JobsWindow.DOM).append('<img class="jobssort" src="https://westrus.innogamescdn.com/images/window/jobs/sortarrow_' + JobsModel.currentSort.orderBy + '.png" alt="" />');
    };
    var jobCompromiseClicked = function () {
        var jobs = JobsModel.getComparedJobs();
        if (!jobs.length)return false;
        JobsModel.sortCompareList('name');
        updateJobsScrollpane(JobsModel.getComparedJobs());
        showAllButton.enable();
        jobSearchbar.setValue('', '');
        windowStatus = 2;
        updateSortIcon();
    };
    var sortContent = function (ev) {
        switch (windowStatus) {
            case 2:
                JobsModel.sortCompareList(ev.data.sortBy);
                updateSortIcon();
                updateJobsScrollpane(JobsModel.getComparedJobs());
                return true;
            case 3:
                return false;
            default:
                break;
        }
        JobsModel.sortJobs(ev.data.sortBy);
        updateSortIcon();
        updateJobsScrollpane(JobsModel.Jobs);
    };
    var paButtonClicked = function () {
        if (Premium.buyable.automation && !Premium.hasBonus('automation')) {
            Premium.confirmUse('automation', 'Автоматизация'.escapeHTML(), "Теперь ты можешь ставить в очередь девять заданий, сохранить больше комплектов снаряжения, а также получить более подробную информацию о работах и приступать к ним прямо с обзора.", null, null, updateAllJobs);
        }
    };
    var cbDisplayDisabledJobsChecked = function () {
        if (cbDisabledJobs && cbDisabledJobs.isSelected())
            $('div.jobinfobox.opacity05', JobsWindow.DOM).hide(); else
            $('div.jobinfobox.opacity05', JobsWindow.DOM).show();
    };
    var updateAllJobs = function () {
        if (window.DEBUG)console.log('updateAllJobs called');
    };
    var clickJobsScrollpane = function (ev) {
        if (!$(ev.target).hasClass('clickable'))
            return false;
        var target = $(ev.target);
        switch (target.data('action')) {
            case'buyYield':
                buyItemButtonClicked(target.data('jobid'), target.data('itemid'));
                break;
            case'nearestJob':
                startNearestJob(ev, target.data('jobid'));
                break;
            case'markJob':
                jobChecked(target.data('jobid'), target.data('enabled'));
                break;
            default:
                if (window.DEBUG)console.log('unknown action: ' + target.data('action') + '?');
                break;
        }
        return true;
    };
    var startNearestJob = function (ev, jobId) {
        if (!jobId || !Premium.hasBonus('automation'))return false;
        Ajax.remoteCall('work', 'get_nearest_job', {job_id: jobId}, function (json) {
            if (json.error)return new UserMessage(json.msg).show();
            var callb = JobWindow.startJob(jobId, json.x, json.y, JobsModel.Beans[jobId].get('duration', JobsModel.basetype));
            callb(ev, $('#jobinfobox_' + jobId + ' div.jobinfobox_icon.job', JobsWindow.DOM));
        });
    };
    var buyItemButtonClicked = function (jobId, itemId) {
        if (!Premium.buyable.buyproduct || !itemId)return false;
        var yieldData = JobsModel.getById(jobId).get('yields')[itemId];
        var prize = Premium.hasBonus('money') ? yieldData.buyBonus : yieldData.buy;
        if (Character.getNuggets() >= prize) {
            Premium.confirmUse("buyproduct " + jobId + " " + itemId, "Купить продукт".escapeHTML(), "Точно купить?".escapeHTML(), prize);
        }
        else
            new UserMessage('У тебя недостаточно золотых самородков!').show();
        return true;
    };
    var jobChecked = function (jobId, enabled) {
        if (!jobId)return false;
        if (enabled)
            JobsModel.addComparedJob(jobId); else
            JobsModel.removeComparedJob(jobId);
        if (JobsModel.markedJobs.length)
            compromiseButton.enable(); else
            compromiseButton.disable();
    };
})(jQuery);
window.mpi_translations = {
    "fc751a1880DuKannstNurA_Melden": ["Ты можешь жаловаться только на других игроков."],
    "39c167053cRushOnTombstone": ["Контроль Тумстоун"],
    "f152f7f842PlayersKnock_urTeam": ["Игроки нокаутированные твоей командой"],
    "1b81f28b5aAttack": ["Атака"],
    "76cdb95072Move": ["Передвижение"],
    "61b8108812Barrelroll": ["Установка бочек"],
    "f7b333c839BurningTequila": ["Горящая текила"],
    "83c17cdb6bEagleEye": ["Орлиный глаз"],
    "087bde1591Inspire": ["Вдохновение"],
    "dd8804ab04Quickshot": ["Двойной выстрел"],
    "aa71e5ccb0SnakeShot": ["Ядовитый выстрел"],
    "4d0cf60072AreaHeal": ["Область лечения"],
    "c166015199Heal": ["Лечение"],
    "323f311e53Snare": ["Установка капканов"],
    "438c2d0972DerAngegeben_rieben": ["Но этот игрок ещё ничего не написал!"],
    "7caac70015RunForrestRun": ["Беги, Форрест, беги!"],
    "8237aab0f6YouSpawnBarrels": ["Ты ставишь бочки"],
    "2bc7bde10eBurnBabyBurn": ["Гори, гори ясно!"],
    "5f08cea0f4BuffsYourNex_Attack": ["Усиль свою следующую атаку"],
    "b144077a42IncreaseDama_ARound": ["Урон увеличен на один раунд"],
    "1a478b09f3ASimpleAttac_tTwice": ["Простая атака, только двойная"],
    "12ba9de4f5ASimpleAttac_Bleeds": ["Простая атака с кровотечением"],
    "8edd4e18f6YouRootTheTarget": ["Ты обездвиживаешь цель"],
    "966cbd42d8HealPlayersInArea": ["Вылечить игроков в области"],
    "2d7adc3800ASimpleShot": ["Простой выстрел"],
    "6487580609HealTarget": ["Цель для лечения"],
    "78ea71fb9bOneShot": ["Выстрел"],
    "611634b379OneShotOneKill": ["Один выстрел — одно попадание"],
    "b301c10b3dShoot": ["Стрельба"],
    "6349e60b66YouFireABull_yUnits": ["Ты стреляешь в противника, нанося обычный урон. Ты также можешь попасть в союзника."],
    "293b215d56YouMoveInThe_Choice": ["Двигайся в любом направлении."],
    "0417064363YouThrowABot_dRound": ["Ты бросаешь бутылку горящей текилы, которая во время взрыва наносит %d% урона. Место взрыва будет гореть на протяжении %d раунда(-ов) и наносить стоящим в поле персонажам %d% урона в первом раунде и %d% во втором."],
    "9ac2f4d3ccHealYourTarg_imumHP": ["Ты лечишь свою цель на %d% от его максимального здоровья."],
    "9fbb98e40cYouHealAllUn_singHP": ["Ты лечишь всех в области %d, восстанавливая %d% их недостающего здоровья."],
    "28a52d902bYouFireTwoSh_Weapon": ["Стреляешь дважды. Каждый выстрел считается отдельно и наносит %d% обычного урона."],
    "32db1cd96dYouAndAllAll_ageByd": ["Ты вместе с союзниками получаешь бонус, который увеличивает наносимый урон на %d%."],
    "c501deed18YouSpawndBar_vement": ["Ты ставишь %d бочек на выбранном месте, блокируя движение и пули."],
    "7a89f8eb7aYourNextShot_Chance": ["Вероятность попадания в следующем раунде возрастает на  %d%, а шанс нанести критический урон увеличивается на %d%."],
    "af8fc03ec4YouShootTheT_Rounds": ["Твой выстрел наносит обычный урон, однако, раненый противник будет терять ещё %d% здоровья от полученного урона на протяжении %d раундов."],
    "c22c6df802YouHaveAdCha_otMove": ["У тебя есть %d% шанс на поимку противника в ловушку. Он не сможет двигаться на протяжении %d раунда(-ов)."],
    "b859fb12ffGangNamePlea_onGang": ["Банда Дальтона"],
    "1c90a92643GangNamePlea_okGang": ["Банда Кука"],
    "45348094f3TheSaloon": ["Салун"],
    "def69fb69fTheWindmill": ["Ветряная мельница"],
    "f8cc7c67e5TheBank": ["Банк"],
    "04dc3aea74YourTeamScor_Points": ["Твоя команда получила %d очков."],
    "e71f1539a4Victory": ["Победа!"],
    "8c1dc2c221CommandNotFound": ["Команда не найдена!"],
    "a7d9158ef8YouCannotCan_lities": ["Ты не можешь отменить умения других игроков!"],
    "6d5db45d2eAutoPlacemen_eCells": ["Автоматическое размещение невозможно, недостаточно свободных мест"],
    "f06ea35dfeAllPlayersLe_heGame": ["Все игроки покинули сражение."],
    "aad4b7adc7GameWasClose_eError": ["Сражение было закрыто из-за неустранимой ошибки."],
    "1573ed59deGameWasClose_tivity": ["Сражение было закрыто из-за бездействия."],
    "bb290c3f63GameWillBeCl_1Round": ["Сражение будет закрыто из-за бездействия через %1 раунд", "Сражение будет закрыто из-за бездействия через %1 раунда", "Сражение будет закрыто из-за бездействия через %1 раундов"],
    "eff4d79aacThePlayerIsA_fAGang": ["У приглашённого игрока уже есть банда."],
    "b491a21da9YouAreAlread_fAGang": ["Ты уже состоишь в банде."],
    "33ea34cc67GangsAreNotEnabled": ["Банды недоступны."],
    "24612694c5NoPlayerGiven": ["Игрок не указан."],
    "d00201e257CodeIsNotVal_Player": ["Код недействителен для этого игрока."],
    "d1beed9bacYouAreAlread_erGang": ["Ты уже состоишь в другой банде."],
    "020d042258TheGangDoesN_nymore": ["Эта банда больше не существует."],
    "67c0acfff4TheGangIsAlr_AMatch": ["Эта банда уже ожидает сражения."],
    "c54d3a3f89YouHaveToWai_erGame": ["Прежде чем вступить в перестрелку, тебе необходимо подождать %d минуту.", "Прежде чем вступить в перестрелку, тебе необходимо подождать %d минуты.", "Прежде чем вступить в перестрелку, тебе необходимо подождать %d минут."],
    "4d73884d72sIsBlockedFr_eGames": ["Для игрока %s перестрелки закрыты"],
    "ad66003dc9YouCantCreat_eQueue": ["Нельзя создать новое сражение пока находишься в очереди!"],
    "36c44cae04ThePlayerIsA_AMatch": ["Этот игрок уже ожидает сражения."],
    "28377fee32YouHaveToLea_omGame": ["Нельзя присоединиться к пользовательскому сражению пока находишься в очереди!"],
    "ce2d1a53c5YouHaveToLea_nAGang": ["Нельзя присоединиться к банде пока находишься в очереди!"],
    "a52b2f91b6YouHaveToLea_eAGang": ["Нельзя основать банду пока находишься в очереди!"],
    "0cda80327dYouAreAlread_queued": ["Ты уже в очереди."],
    "c9b99b2a18MapDoesNotExist": ["Карта не существует."],
    "6407393012OnlyTheseGro_queues": ["В очередь могут встать только банды численностью %s человек."],
    "f0d2f2c823NotAllPlayer_eReady": ["Не все игроки готовы."],
    "e875c96e52GameNotFound": ["Сражение не найдено"],
    "99b5d29909NotAllPlayer_adyYet": ["Ещё не все игроки готовы"],
    "2c65b2e6feInvalidCode": ["Неверный код."],
    "e15800f17eAnInternalEr_ccured": ["Произошла внутренняя ошибка!"],
    "491bfc42c0YouCannotCan_Worlds": ["Ты не можешь участвовать в перестрелках в нескольких мирах одновременно"],
    "7eadaa3b2fGameIsAlread_unning": ["Сражение уже началось"],
    "f35bea323aYouveChosenT_lities": ["Выбрано слишком много умений!"],
    "eb998f51aaCannotChoose_ilitys": ["Невозможно выбрать умение: %s"],
    "b9866ef4b3YouCannotRep_Player": ["Ты не можешь пожаловаться на этого игрока."],
    "520576bcc6YouAreNotQueued": ["Ты не в очереди."],
    "8757b86c71YouAreNotPar_nyGang": ["Ты не состоишь в банде."],
    "be1b2fc291YouAreNotThe_Leader": ["Ты не лидер банды."],
    "d7af523c46FailedToGene_onCode": ["Не удалось создать код приглашения."],
    "eda3f1e4aeGangIsAlread_queued": ["Банда уже стоит в очереди"],
    "a5f2e68064GangIsNotEnqueued": ["Банда не стоит в очереди"],
    "ac679c47d6UnknownMap": ["Неизвестная карта"],
    "d251fdfae3YouAreAlread_unning": ["Ты в настоящий момент являешься лидером сражения или покинутое тобой сражение ещё не закончилось."],
    "51da0dbb36failedSaving_esults": ["Не удалось сохранить результаты сражения"],
    "785cbcb9c1sHasLeftTheGame": ["Игрок %s покинул сражение"],
    "fafe21ea1dHostHasLeftTheGame": ["Лидер покинул сражение."],
    "2d975532aeCouldntSwitchTeams": ["Не удалось сменить команду"],
    "1dad65ee45TheGangIsAlr_laying": ["Банда уже сражается."],
    "2aac65b854YouAreAlread_unning": ["Ты в настоящий момент сражаешься или покинутое тобой сражение ещё не закончилось."],
    "db14efc27fOnlyCustomGa_tarted": ["Можно начать только пользовательские сражения!"],
    "8271e3e2beYouNeedAtLea_layers": ["Тебе понадобятся, по крайне мере, %d игроков"],
    "424e6a9667MapDoesNotExist": ["Карта не существует!"],
    "e3f07fbf81CustomGamesA_nabled": ["Пользовательские сражения отключены!"],
    "7b267ab3d8MissingDataF_eation": ["Недостаточно данных для создания сражения!"],
    "b8c2070277InvalidHostData": ["Неверные данные лидера!"],
    "53f15c3980YouAreNotThe_meHost": ["Ты не лидер сражения."],
    "146cd9711aThePlayerHas_dAGame": ["Этот игрок уже в рядах сражения."],
    "665084d8d5InvalidPlayerData": ["Неверные данные игрока!"],
    "41c8fd572eYouAreNotAll_isCode": ["Ты не можешь купить этот код."],
    "dd917f6568NoEntityGiven": ["Нет данных!"],
    "a0d0317f7dYouCanOnlyJo_mGames": ["Ты можешь принимать участие только в пользовательских сражениях!"],
    "a404fac734GameIsAlread_unning": ["Сражение уже началось!"],
    "9e4793683dGameIsFull": ["Нет свободных мест!"],
    "ac8cac2635GameIsNotYet_unning": ["Сражение ещё не началось"],
    "c3e441b298TeamDoesNotExist": ["Команда ещё не создана!"],
    "c2881a1e4fCannotJoinTeam": ["Невозможно присоединится к команде!"],
    "542bd7b40cTeamCanOnlyB_mGames": ["Переключить команду можно только в пользовательском сражении"],
    "ee395e20f9CouldNotLoad_meData": ["Невозможно загрузить данные сражения!"],
    "afd5b982caNope": ["Нет."],
    "0f9ee92c3aGameCouldNot_tarted": ["Невозможно начать сражение."],
    "3e4c24da8cPlayerDoesNotExist": ["Игрок не существует."],
    "391cb96880YouCannotRep_ngWith": ["Нельзя пожаловаться на игрока без общения с ним."],
    "7750e93b6ePlayerHasAlr_Placed": ["Игрок уже размещён!"],
    "405e4e4109YouCannotSta_sPlace": ["Ты не можешь стартовать отсюда!"],
    "90761d355eYourCharacte_edHere": ["Здесь нельзя разместить твоего персонажа!"],
    "9cfe6ceb8cPlayerNotFound": ["Игрок не найден"],
    "e41bf8f62eAnErrorOccured": ["Произошла ошибка!"],
    "768381da30ServerIsNotA_nLater": ["Сервер сейчас недоступен, попробуй позже."],
    "fb93274b27YouAreAlread_econds": ["У тебя есть уже существующее соединение. Попробуй позже."],
    "c247717099MALEYouHaveA_dAGame": ["Ты уже присоединился к сражению."],
    "77455903b5FEMALEYouHav_dAGame": ["Ты уже присоединилась к сражению."],
    "d037e6b8c4PlayerNotFound": ["Игрок не найден."],
    "65ec3d711fPlayerDoesNo_isGame": ["Игрок не принадлежит этому сражению."]
};
function _mpi_str_lookup(msgid, quantity) {
    if (!window.mpi_translations[msgid]) {
        console.warn && console.warn("Missing MPI translation: " + msgid);
        return '((MISSING:' + msgid + '))';
    }
    var translation = window.mpi_translations[msgid];
    return ngettext(translation[0], translation, quantity);
}
function mpi_str(msg) {
    if (typeof msg !== 'string' || !Game.mpi.multilang)
        return msg;
    if (!window.hasOwnProperty('mpi_translations')) {
        console.warn && console.warn("No MPI translations available! Use merged JS.");
        return 'NO_TRANSLATIONS_AVAILABLE';
    }
    if (msg.indexOf('[[F') !== -1) {
        msg = msg.replace(/\[\[F(\d+):(\w+):(.*?)\]\]/g, function (token, quantity, msgid, formaters) {
            var format = _mpi_str_lookup(msgid, quantity);
            formaters = formaters.split(':').map(decodeURIComponent);
            format = format.replace(/([^%])%(\d+)/g, function (token, prefix, idx) {
                var param = formaters.slice(idx - 1, idx)[0];
                return prefix + String(param);
            });
            return format.replace(/([^%])%([dDsS])/g, function (token, prefix, type) {
                var value, param = formaters.splice(0, 1)[0];
                switch (type.toLowerCase()) {
                    case'd':
                        value = parseInt(param);
                        break;
                    case's':
                        value = String(param);
                        break;
                }
                return prefix + value;
            });
        });
    }
    if (msg.indexOf('[[T') !== -1) {
        msg = msg.replace(/\[\[T(\d+):(\w+)\]\]/g, function (token, quantity, msgid) {
            return _mpi_str_lookup(msgid, quantity);
        });
    }
    return msg;
}
function mpi_deep_translate(obj) {
    if (!Game.mpi.multilang)
        return obj;
    if (typeof(obj) !== 'object')
        return mpi_str(obj);
    for (var k in obj) {
        if (!obj.hasOwnProperty(k))continue;
        if (typeof(obj[k]) === 'string') {
            obj[k] = mpi_str(obj[k]);
        } else if (typeof(obj[k]) === 'object') {
            obj[k] = mpi_deep_translate(obj[k]);
        } else if (Array.isArray(obj[k])) {
            obj[k] = obj[k].map(mpi_deep_translate);
        }
    }
    return obj;
}

(function () {
    "use strict";
    var Container = function (ctx) {
        this.children = [];
        this.ctx = ctx;
        this.dirty = false;
    };
    var Animations = [];
    var QueuedAnimations = {};
    Container.prototype.addChild = function (child) {
        if (undefined === child.draw) {
            throw'child missing draw function';
        }
        child.redraw = this.requestRedraw.bind(this);
        child.remove = function () {
            this.requestRemove(child);
        }.bind(this);
        child.registerAnimation = function (animation) {
            Animations.push([child, animation]);
        };
        child.registerQueuedAnimation = function (id, animation) {
            if (!QueuedAnimations[id])QueuedAnimations[id] = [];
            QueuedAnimations[id].push([child, animation]);
        };
        this.children.push(child);
        child.onAppend && child.onAppend();
        return this;
    };
    Container.prototype.redraw = function (delta) {
        if (false === this.dirty)return;
        this.ctx.clearRect(0, 0, Math.floor(this.ctx.canvas.width), Math.floor(this.ctx.canvas.height));
        this.children.forEach(function (child) {
            child.draw(this.ctx, delta);
        }, this);
        this.dirty = false;
    };
    Container.prototype.requestRedraw = function () {
        this.dirty = true;
    };
    Container.prototype.requestRemove = function (child) {
        this.children.some(function (setChild, key) {
            if (setChild === child) {
                this.children.splice(key, 1);
                this.requestRedraw();
                child.onRemove && child.onRemove();
                return true;
            }
            return false;
        }, this);
    };
    Container.prototype.set = function (setting, value) {
        this.ctx[setting] = value;
        this.requestRedraw();
    };
    Container.prototype.addEventListener = function (ev, fn) {
        this.ctx.canvas.addEventListener(ev, fn);
    };
    west.define('west.mission.Drawingboard', null, {
        containers: [], create: function (ctx) {
            this.containers.push(new Container(ctx));
            return this.containers[this.containers.length - 1];
        }, set: function (setting, value) {
            this.containers.forEach(function (container) {
                container.set(setting, value);
            });
        }, redraw: function (delta, force) {
            this.containers.forEach(function (container) {
                if (force)container.dirty = true;
                container.redraw(delta);
            });
        }, clear: function () {
            this.containers.forEach(function (container) {
                container.children = [];
            });
        }, animate: function () {
            Animations.forEach(function (animation, k) {
                if (animation[1].call(animation[0])) {
                    animation[0].redraw();
                } else {
                    Animations.splice(k);
                }
            });
            for (var id in QueuedAnimations) {
                var animations = QueuedAnimations[id];
                if (animations[0][1].call(animations[0][0])) {
                    animations[0][0].redraw();
                } else {
                    animations.shift();
                    if (0 === animations.length) {
                        delete QueuedAnimations[id];
                    } else {
                        QueuedAnimations[id] = animations;
                    }
                }
            }
        }
    });
})();

west.define('west.mission.Game', null, {
    init: function (gameData, ownId) {
        this.entities = {};
        west.common.forEach(gameData.abilities, function (config, abilityId) {
            if (!west.mission.Ability[abilityId])
                return DEBUG && console.log('ability not implemented:', abilityId);
            var ab = west.mission.Ability.Factory.get(abilityId);
            west.common.forEach(config, function (val, key) {
                ab[key] = val;
            });
        });
        west.common.forEach(gameData.layouts, function (layout, id) {
            gameData.layouts[id] = new west.mission.Layout(layout);
        });
        for (var entityId in gameData.entities) {
            this.entities[entityId] = new west.mission.Entity(gameData.entities[entityId], gameData.layouts[gameData.entities[entityId].layoutId], gameData.teams[gameData.entities[entityId].team]);
            this.entities[entityId].events.entity_died.attach(this.killPlayer, this);
        }
        var eventSys = this.eventSys = new west.EventEmitter();
        this.settings = gameData.settings;
        this.teamInfo = gameData.teams;
        this.popups = gameData.popups;
        this.ownEntity = this.entities[ownId];
        this.ownAbilities = new west.mission.EntityAbilities(this.ownEntity, eventSys);
        this.grid = new west.mission.Grid(eventSys);
        this.chat = new west.mission.GameChat();
        this.started = false;
        this.roundInfo = null;
        this.placementTimer = gameData.placement + ((new Date()).getTime() - gameData.round.now);
        this.commandQueue = new west.mission.CommandQueue(eventSys, gameData.commands);
        this.finished = false;
        this.closed = false;
        this.reachedStages = gameData.stages.reached;
        this.setRoundInfo(gameData.round);
        this.parseZoneInfos(gameData.map.zones);
        this.addEntitiesToTeam();
        this.grid.setData(gameData.map, gameData.layouts, this.entities);
        if (gameData.mode && gameData.mode.type) {
            this.mode = new west.mission.mode[gameData.mode.type](gameData.mode, this.settings.mode, this.ownEntity, this.teamInfo, this.grid, this.eventSys);
        }
        var allClients = $.map(this.entities, this.mapChatEntity);
        var that = this;
        this.chat.setClients(allClients.filter(function (c) {
            return c.team_id == that.ownEntity.team.id;
        }));
        Map.finalize();
        $("#user-interface").hide();
        this.ui = new west.mission.Ui(this, eventSys);
        this.setAbilityEffects(gameData.effects);
        this.eventSys.on('game.cancelCommand', function (commandId) {
            west.mission.BattleserverSocket.emit('cancel', commandId);
        });
    }, mapChatEntity: function (e) {
        return {entity_id: e.id, entity_data: e.data, team_id: e.team.id};
    }, setAbilityEffects: function (effects) {
        west.common.forEach(effects, function (events) {
            west.common.forEach(events, function (states, abType) {
                states.forEach(function (state) {
                    west.mission.Ability.Factory.get(abType).setEffect(this, state);
                }, this);
            }, this);
        }, this);
    }, setRewardStages: function (reachedStages) {
        west.common.forEach(reachedStages, function (stages, teamId) {
            if (!this.reachedStages[teamId])this.reachedStages[teamId] = [];
            stages.forEach(function (stage, stageId) {
                if (this.reachedStages[teamId][stageId])return;
                this.reachedStages[teamId][stageId] = stage;
                this.eventSys.emit('game.stageReached', this.teamInfo[teamId], stage);
            }, this);
        }, this);
    }, updateTeamStatus: function (entities) {
        west.common.forEach(entities, function (state, entityId) {
            var entity = this.entities[entityId];
            Common.forEach(state, function (value, key) {
                entity[key] = value;
            });
        }, this);
        this.ui.updateConnectionStatus();
        this.view.updateConnectionStatus();
    }, round: function (round, commands, respawners) {
        this.view.finish();
        this.setRoundInfo(round);
        this.view.timeline.add(function () {
            this.eventSys.emit('game.animationStarts', commands);
        }.bind(this), 500);
        commands.forEach(function (command) {
            var ability = west.mission.Ability.Factory.get(command.type);
            if (command.deactivate) {
                ability.deactivate(this, command);
            } else if (command.dropped) {
                this.view.timeline.add(function () {
                    EventHandler.signal('mpi.onAbilityDropped', [command]);
                }, 0);
            } else {
                this.view.timeline.add(function () {
                    EventHandler.signal('mpi.onAbilityStart', [command]);
                }, 0);
                if (('Inspire' === command.type) || ('AreaHeal' === command.type) && command.result) {
                    for (var person in command.result) {
                        if ('undefined' === typeof command.targetNames)command.targetNames = new Array();
                        if ('undefined' === typeof command.targetNames[person])command.targetNames[person] = [];
                        command.targetNames[person]['name'] = this.entities[person].data.name;
                        command.targetNames[person]['health'] = command.result[person];
                    }
                }
                ability.execute(this, command);
                var logMessage = ability.resultMsg(this.entities[command.src], this.entities[command.target], command);
                if (logMessage)
                    this.chat.addLogMessage(logMessage);
                this.view.timeline.add(function () {
                    EventHandler.signal('mpi.onAbilityDone', [command]);
                }, 0);
            }
        }, this);
        this.view.timeline.add(function () {
            this.respawnPlayers(respawners);
            this.eventSys.emit('game.animationEnds');
        }.bind(this), 0);
        this.commandQueue.removeAll();
        this.ownAbilities.refresh();
        this.eventSys.emit('game.round', this.roundInfo);
    }, killPlayer: function (o, entityId) {
        this.chat.addLogMessage(s('%1 : Нокаут', west.mission.Utils.formatUsernameColor(this.entities[entityId].data.name, this.entities[entityId].team.color)));
        if (entityId == this.ownEntity.id) {
            this.ownAbilities.reset();
            this.ui.onDeath();
        }
        this.commandQueue.removeEntityCommands(entityId);
    }, respawnPlayers: function (respawners) {
        if (this.finished)
            return;
        var respawnersName = [];
        west.common.forEach(respawners, function (respawner) {
            if (respawner.respawnsIn) {
                if ('undefined' !== typeof this.entities[respawner.id] && 'undefined' !== typeof this.entities[respawner.id].props) {
                    this.entities[respawner.id].props.respawnIn = respawner.respawnsIn;
                }
            } else {
                this.entities[respawner.id].respawn(respawner.area);
                this.grid.storeEntity(this.entities[respawner.id]);
                if (respawner.id == this.ownEntity.id) {
                    this.ui.onRespawn();
                }
                respawnersName.push(west.mission.Utils.formatUsernameColor(this.entities[respawner.id].data.name, this.entities[respawner.id].team.color));
            }
            this.eventSys.emit('game.respawnIn', respawner);
        }, this);
        if (respawnersName.length) {
            this.chat.addLogMessage(s('%1 : Перерождение', respawnersName.join(', ')));
        }
    }, setRoundInfo: function (round) {
        var timeDiff, roundStartTime;
        if (round.current === 0) {
            this.eventSys.emit('game.placement', this);
            this.started = false;
        } else {
            if (!this.started) {
                this.started = true;
                this.eventSys.emit('game.started', this);
            }
            timeDiff = Date.now() - round.now;
            roundStartTime = round.started + timeDiff;
            this.roundInfo = {
                current: round.current,
                started: roundStartTime,
                duration: round.dur,
                maximumRounds: round.max
            };
        }
    }, addCommand: function (command) {
        this.commandQueue.add(command);
    }, cancelCommand: function (commandId) {
        this.commandQueue.cancel(commandId);
    }, toggleActiveAbility: function (ability) {
        if (this.ownAbilities.getActive() == ability.type) {
            this.removeActiveAbility();
        } else {
            this.removeActiveAbility();
            this.setActiveAbility(ability);
        }
    }, setActiveAbility: function (ability) {
        if (!this.started || !this.ownAbilities.canDo(ability)) {
            return this;
        }
        this.ownAbilities.setActive(ability.type);
        this.eventSys.emit('ability.activated', ability.type);
        if (ability.target && ability.target == 'self') {
            this.useAbility(0, 0);
        }
        return this;
    }, removeActiveAbility: function () {
        var active = this.ownAbilities.getActive();
        this.ownAbilities.setActive(null);
        if (active) {
            this.eventSys.emit('ability.deactivated', active);
        }
        return this;
    }, useAbility: function (x, y) {
        var cell = this.grid.get(x, y), ability;
        if (!cell)return;
        if (!this.ownEntity.placed) {
            if (this.grid.isCellBlocked(cell)) {
                return MessageError('Эта точка заблокирована!').show();
            }
            if (!cell.props.spawn || -1 === cell.props.spawn.indexOf(this.ownEntity.team.id)) {
                return MessageError('Выбери точку старта!').show();
            }
            west.mission.BattleserverSocket.emit('place', cell.x, cell.y);
        } else {
            ability = west.mission.Ability.Factory.get(this.ownAbilities.getActive());
            this.removeActiveAbility();
            if (!this.ownAbilities.canDo(ability))return;
            if (ability.isValidTarget && !ability.isValidTarget(this.view, this.view.entities[this.ownEntity.id], cell))return;
            this.ownAbilities.use(ability, cell);
        }
    }, close: function () {
        if (this.closed) {
            return;
        }
        if (!this.finished) {
            this.finish();
        }
        this.view.finalize();
        this.view = this.grid = this.ui = null;
        this.chat.close();
        this.closed = true;
        Map.init(Character.position);
        $('#user-interface').show();
        $('#mission-map-container').hide();
    }, finish: function () {
        this.chat.close();
        this.chat = new west.mission.AfterChat();
        this.chat.setClients($.map(this.entities, this.mapChatEntity));
        this.eventSys.emit('game.finished');
        this.finished = true;
        return true;
    }, showRenderer: function (renderer) {
        if (this.view)this.view.finalize();
        this.view = new west.mission[renderer + 'View'](this.grid, new west.mission.ClickHandler(this), this.ownEntity, this.eventSys);
        this.view.render();
        this.view.tick();
        this.eventSys.emit('game.activatedView', this.view, this);
    }, showCanvas: function () {
        this.showRenderer('Canvas');
    }, showTopView: function () {
        this.showRenderer('TopDown');
    }, parseZoneInfos: function (zones) {
        var popups = this.popups.zones;
        zones.forEach(function (zone) {
            if (popups[zone.name]) {
                zone.props.name = popups[zone.name];
            }
            if (zone.props.spawnZone) {
                this.teamInfo[zone.props.spawnZone].color = zone.props.color;
            }
        }, this);
    }, addEntitiesToTeam: function () {
        west.common.forEach(this.teamInfo, function (team, id) {
            team.entities = [];
            west.common.forEach(this.entities, function (entity) {
                if (entity.team.id == id) {
                    team.entities.push(entity);
                }
            }, this);
        }, this);
    }, updatePlayerStatus: function (entity_id, status) {
        this.eventSys.emit('player.' + status, entity_id);
    }
});

$(function () {
    'use strict';
    var socket, game, gameClosed = false;
    var log = function () {
        if (!DEBUG)return;
        var args = Array.prototype.slice.call(arguments);
        args.unshift('battleserver socket: ');
        if ($.browser.msie)
            console.log(args); else
            console.log.apply(console, args);
    };
    EventHandler.listen('mpi_affront', function (entityId, description, response) {
        if (!socket || !game)
            return;
        var isAllChat = game.finished;
        socket.emit('affront', isAllChat, entityId, description, response);
    });
    west.namespace('west.mission.BattleserverSocket', {
        init: function (server, entityId, hash) {
            var query;
            if (socket) {
                log('Old socket object has not been cleaned up! I\'m _not_ gonna create a new one.', server, entityId);
                return;
            }
            gameClosed = false;
            var rndParam = getRandomString(10) + '=' + getRandomString(5);
            query = 'hash=%1&entity_id=%2&' + rndParam;
            socket = io.connect(server, {reconnection: false, query: s(query, hash, entityId), forceNew: true});
            socket.on('connect', function () {
                log('connected to battleserver');
            });
            socket.on('connect_failed', function (reason) {
                log('connection failed', reason);
                new UserMessage('Соединение с сервером не удалось, попробуй позже.').show();
            });
            socket.on('disconnect', function () {
                log('disconnected');
                if (!gameClosed && game && !game.finished) {
                    new UserMessage('Прервана связь с сервером.').show();
                }
                west.mission.BattleserverSocket.detachFromBattleServer();
                QuestTrackerWindow.show();
            });
            socket.on('error', function (err) {
                if (err instanceof Error && err.description instanceof Error) {
                    throw err.description;
                } else {
                    log('error', err);
                    west.mission.BattleserverSocket.detachFromBattleServer();
                    new UserMessage(s('Произошла ошибка: %1', mpi_str(err)), UserMessage.TYPE_ERROR).show();
                }
            });
            var handleMsg = function (command, response) {
                socket.on(command, function () {
                    try {
                        response.apply(null, Array.prototype.slice.call(arguments).map(mpi_deep_translate));
                    } catch (e) {
                        if (socket)
                            socket.emit('jserror', command, e.stack);
                        throw e;
                    }
                });
            };
            handleMsg('ping', function (response) {
                response();
            });
            handleMsg('perfmon', function (response) {
                var fps;
                if (!game || !game.view) {
                    fps = [];
                } else {
                    fps = game.view.frameTime.data.filter(function (val) {
                        return val !== undefined;
                    });
                    fps.sort(function (a, b) {
                        return a - b;
                    });
                }
                if (!fps.length)
                    response({}); else {
                    response({
                        min: fps[0], max: fps[fps.length - 1], average: fps.reduce(function (a, b) {
                            return a + b;
                        }) / fps.length, median: fps[Math.floor(fps.length / 2)]
                    });
                }
            });
            handleMsg('game.status', function (data) {
                log('game status', data);
                QuestTrackerWindow.hide();
                try {
                    game = new west.mission.Game(data, entityId);
                    game.showCanvas();
                } catch (e) {
                    if (socket)
                        socket.emit('jserror', 'game.status', e.stack);
                    west.mission.BattleserverSocket.detachFromBattleServer();
                    new SystemError(null, s('При обработке сражения произошла ошибка: %1', e.message), false).show();
                    throw e;
                }
            });
            handleMsg('game.round', function (data) {
                log('game round', data);
                game.round(data.round, data.results, data.respawns);
                game.setRewardStages(data.stages);
                game.mode && game.mode.update(data.mode);
            });
            handleMsg('game.close', function (err, result) {
                var ownEntity, entities;
                game && game.finish();
                if (err) {
                    new west.gui.Dialog('Сражение окончено', err).addButton('ok', function () {
                        game && game.close();
                        game = null;
                    }).show();
                    west.mission.BattleserverSocket.detachFromBattleServer();
                } else if (result) {
                    entities = game.entities;
                    ownEntity = game.ownEntity;
                    game.view.timeline.add(function () {
                        new west.gui.FancyBanner((game.ownEntity.team.id == result.winner) ? 'Победа!' : 'Твоя команда проиграла!', "Сражение окончено", 'mpi-end-game-dialog', function () {
                            west.window.mpi.score_board.showResult(result, ownEntity, {
                                'socket': socket,
                                'game': game,
                                'entities': entities
                            });
                            this.remove();
                        }).appendTo(document.body).show();
                    }, 0);
                }
            });
            handleMsg('game.teamstatus', function (data) {
                game.updateTeamStatus(data);
            });
            handleMsg('player.place', function (data) {
                game.grid.placeEntity(data.entityId, data.area);
            });
            handleMsg('player.use', function (data) {
                game.addCommand(data);
            });
            handleMsg('player.cancel', function (data) {
                game.cancelCommand(data);
            });
            handleMsg('player.ragequit', function (entityId) {
                var msg = (s(gendertext('%1 вышел.', '%1 вышла.'), game.entities[entityId].data.name));
                west.mission.BattleserverSocket.writeSystemMessage(msg);
                game.updatePlayerStatus(entityId, 'ragequit');
            });
            handleMsg('player.msg', function (data) {
                game.chat.addChatMessage(data.from, data.msg, data.time);
            });
            handleMsg('player.disconnected', function (entityId) {
                var msg = (s(gendertext('%1 отключился', '%1 отключилась'), game.entities[entityId].data.name));
                west.mission.BattleserverSocket.writeSystemMessage(msg);
                game.updatePlayerStatus(entityId, 'disconnected');
            });
            handleMsg('player.reconnected', function (entityId) {
                var msg = (s(gendertext('%1 подключился снова', '%1 подключилась снова'), game.entities[entityId].data.name));
                west.mission.BattleserverSocket.writeSystemMessage(msg);
                game.updatePlayerStatus(entityId, 'reconnected');
            });
            handleMsg('idle.warn', function (entityId, remainingRounds) {
                if (entityId == game.ownEntity.id) {
                    var msg = s(ntext(gendertext('Тебя выбросят из-за бездействия через %1 раунд!', 'Тебя выбросят из-за бездействия через %1 раунд!'), gendertext('Тебя выбросят из-за бездействия через %1 раунда!', 'Тебя выбросят из-за бездействия через %1 раунда!'), remainingRounds), remainingRounds);
                    new UserMessage(msg).show();
                    west.mission.BattleserverSocket.writeSystemMessage(msg);
                } else {
                    var msg = s(ntext(gendertext('%1 будет выброшен из-за бездействия через %2 раунд', '%1 будет выброшена из-за бездействия через %2 раунд'), gendertext('%1 будет выброшен из-за бездействия через %2 раунда', '%1 будет выброшена из-за бездействия через %2 раунд'), remainingRounds), game.entities[entityId].data.name, remainingRounds);
                    west.mission.BattleserverSocket.writeSystemMessage(msg);
                }
            });
            handleMsg('idle.kick', function (entityId, remainingRounds) {
                if (entityId == game.ownEntity.id) {
                    new UserMessage(gendertext('Тебя выбросили из-за бездействия.', 'Тебя выбросили из-за бездействия.')).show();
                    west.mission.BattleserverSocket.detachFromBattleServer();
                } else {
                    var msg = s(gendertext('%1 был выброшен из-за бездействия.', '%1 была выброшена из-за бездействия.'), game.entities[entityId].data.name);
                    west.mission.BattleserverSocket.writeSystemMessage(msg);
                    game.updatePlayerStatus(entityId, 'idle.kick');
                }
            });
        }, detachFromBattleServer: function () {
            gameClosed = true;
            if (socket) {
                socket.io.disconnect();
                socket = null;
            }
            if (game) {
                game.close();
                game = null;
            }
        }, writeSystemMessage: function (msg) {
            if (!game)return;
            game.chat.addSystemMessage(msg);
        }, emit: function () {
            var msg = arguments[0], deferred = $.Deferred(), args = Array.prototype.slice.call(arguments, 0);
            var callback = function (err) {
                log('emitting (receiving)', msg, err);
                if (err)deferred.reject.apply(deferred, arguments); else deferred.resolve.apply(deferred, arguments);
            };
            log('emitting', msg);
            args.push(callback);
            socket.emit.apply(socket, args);
            return deferred.promise();
        }, quit: function () {
            socket.emit('quit');
        }, ragequit: function () {
            var contents = $('<div style="width:400px;">' +
                s("Ты действительно хочешь бросить своих товарищей? %1, если ты сейчас выйдешь, то не сможешь присоединиться к новой перестрелке, пока эта не закончится.".escapeHTML(), '<br/>') + '</div>');
            new west.gui.Dialog("Покинуть это сражение", contents, west.gui.Dialog.SYS_WARNING).addButton('Выйти', function () {
                socket.emit('ragequit', function (err) {
                    if (err)return log(err);
                    game && game.close();
                    game = null;
                    socket.io.disconnect();
                    socket = null;
                    new west.gui.Dialog("Сражение покинуто", $("<div style='text-align: center;' />").append('<br />' +
                        s("Верные друзья остались за спиной. %1, помни, ты можешь вернуться в перестрелку.", '<br/>')), west.gui.Dialog.SYS_OK).addButton('Я знаю.').addButton('Да, я знаю.').setModal(true, undefined, true).show();
                });
            }).addButton('Отмена').setModal(true, true, true).show();
        }
    });
});

west.define('west.mission.Grid', null, {
    init: function (eventSys) {
        this.eventSys = eventSys;
        this.playerPlaced = new west.mission.Event(this);
        this.entityRemoved = new west.mission.Event(this);
        this.entities = {};
    }, setData: function (mapData, layouts, entities) {
        this.cols = mapData.header.background.maxX;
        this.rows = mapData.header.background.maxY;
        this.map = mapData.map;
        this.zones = this.parseZones(mapData.zones), this.layouts = layouts;
        this.header = mapData.header;
        this.cells = mapData.cells;
        for (var entityId in entities) {
            if (entities[entityId].isDead()) {
                DEBUG && console.log('skipping dead entity', entityId);
                continue;
            }
            this.storeEntity(entities[entityId]);
        }
    }, parseZones: function (zones_data) {
        var zones = {}, i = zones_data.length;
        while (i--) {
            zones[zones_data[i].name] = zones_data[i];
        }
        return zones;
    }, get: function (x, y) {
        if ('object' === typeof(x)) {
            y = x.y;
            x = x.x;
        }
        var idx = this.toIdx(x, y);
        if (parseInt(x) < 0 || parseInt(y) < 0 || !this.cells[idx])return false;
        return this.cells[idx];
    }, toIdx: function (x, y) {
        if ('object' === typeof(x)) {
            y = x.y;
            x = x.x;
        }
        return parseInt(x) + parseInt(y) + parseInt(y) * parseInt(this.cols);
    }, storeEntity: function (entity) {
        this.entities[entity.id] = entity;
        entity.events.entity_died.attach(this.removeEntity, this);
        if (entity.placed) {
            this.placeEntity(entity.id, entity.area);
        }
    }, placeEntity: function (entityId, area) {
        var entity = this.entities[entityId];
        if (!entity) {
            DEBUG && console.log('Err 9130. entityId :', entityId, 'entities :', this.entities);
        }
        else {
            entity.area = area;
            entity.placed = true;
            this.occupyArea(entity);
            this.playerPlaced.notify(entity);
            this.eventSys.emit('grid.entityPlaced', entityId, this);
        }
    }, occupyArea: function (entity) {
        entity.area.each(function (coord) {
            this.get(coord)['entity'] = entity;
        }.bind(this));
    }, freeArea: function (entity) {
        entity.area.forEach(function (coord) {
            delete this.get(coord).entity;
        }, this);
    }, getEntityLeftTop: function (entityArea) {
        var lt = false;
        entityArea.each(function (area) {
            if (!lt || area.x + area.y < lt.x + lt.y)
                lt = area;
        });
        return lt;
    }, getFromCell: function (area, toCell) {
        var fromCell, shortDistance, curDistance;
        area.forEach(function (coord) {
            curDistance = this.distanceToReal(coord, toCell);
            if (!shortDistance || curDistance < shortDistance) {
                shortDistance = curDistance;
                fromCell = coord;
            }
        }, this);
        return fromCell;
    }, getClosestCells: function (fromArea, toArea) {
        var fromCell, toCell, curDistance, closestCells;
        fromArea.forEach(function (fromCoord) {
            fromCell = this.get(fromCoord);
            toArea.forEach(function (toCoord) {
                toCell = this.get(toCoord);
                curDistance = this.distanceToReal(fromCell, toCoord);
                if (!closestCells || curDistance < closestCells.distance) {
                    closestCells = {from: fromCell, to: toCell, distance: curDistance};
                }
            }, this);
        }, this);
        return closestCells;
    }, distanceToGrid: function (coord, toCell) {
        return Math.max(Math.abs(toCell.x - coord.x), Math.abs(toCell.y - coord.y));
    }, distanceToReal: function (coord, toCell) {
        return west.common.round(Math.sqrt(Math.pow(coord.x - toCell.x, 2) + Math.pow(coord.y - toCell.y, 2)), 2);
    }, removeEntity: function (entity) {
        if ('object' != typeof(entity)) {
            entity = this.entities[entity];
        }
        entity.placed = false;
        entity.events.entity_died.detach(this.removeEntity, this);
        this.freeArea(entity);
        delete this.entities[entity.id];
        this.entityRemoved.notify(entity.id);
    }, isCellBlocked: function (cell, entity) {
        return !cell || cell.props.blocked || cell.entity;
    }, changeZoneProps: function (id, prop, value) {
        if (this.zones[id].props[prop] == value)return;
        this.zones[id].props[prop] = value;
        this.eventSys.emit('grid.zone-prop-updated');
    }
});

createjs.CSSPlugin.cssSuffixMap['z-index'] = '';
createjs.CSSPlugin.install(createjs.Tween);
var FRAME_TIME_SIZE = 7200;
west.define('west.mission.View', null, {
    imagePath: "https://westrus.innogamescdn.com/images/mpi/",
    init: function (grid, clickhandler, ownEntity, eventSys) {
        this.mapEl = $('<div id="mission-map"><div class="mpi-shadow"></div></div>').appendTo('#mission-map-container');
        this.ownEntity = ownEntity;
        this.lastTick = null;
        this.timequeue = new west.mission.TimeQueue();
        this.timeline = new west.mission.TimeLine();
        this.grid = grid;
        this.grid.playerPlaced.attach(this.renderEntity, this);
        this.grid.entityRemoved.attach(this.removeEntity, this);
        this.clickHandler = clickhandler;
        this.dragHandler = new west.mission.Handler(this.getSize(), this.mapEl, grid.header, true);
        this.lastPosition = {};
        this.mapEl.on('mousemove.mpi', this.onMousemove.bind(this));
        this.mapEl.on('click.mpi', this.onClick.bind(this));
        this.entities = {};
        this.board = new west.mission.Drawingboard();
        this.eventSys = eventSys;
        this.frameTime = {data: new Array(FRAME_TIME_SIZE), position: 0};
        eventSys.on('ui.entityHover', this.highlightEntity, this);
        eventSys.on('ui.entityBlur', this.removeHighlight, this);
        eventSys.on('ui.entityClick', this.centerOnPlayer, this);
        eventSys.on('game.activatedView', function (view, game) {
            var zone;
            if (game.started) {
                view.centerOnPlayer();
            } else {
                zone = game.grid.zones['spawn-' + game.ownEntity.team.id];
                if (zone) {
                    view.centerOnCoord(view.calculateMiddleCoord(zone.tiles));
                }
            }
        });
        eventSys.on('game.finished', function () {
            this.mapEl.off('mousemove.mpi');
            this.mapEl.off('click.mpi');
        }, this);
    },
    finalize: function () {
        this.mapEl.off('mousemove.mpi');
        this.mapEl.off('click.mpi');
        this.mapEl.remove();
        this.grid.playerPlaced.detach(this.renderEntity, this);
        this.grid.entityRemoved.detach(this.removeEntity, this);
        if (this.timerId) {
            window.cancelAnimationFrame(this.timerId);
        }
        this.board.clear();
        this.timeline = this.timerId = this.ownEntity = null;
        this.mapEl = this.grid = this.clickHandler = null;
        this.entities = this.board = null;
        this.eventSys.offByContext(this);
    },
    tick: function () {
        this.timerId = window.requestAnimationFrame(this.ticker.bind(this));
    },
    ticker: function (timestamp) {
        if (!this.timerId) {
            return;
        }
        timestamp = Math.floor(timestamp);
        if (null === this.lastTick) {
            this.lastTick = timestamp;
        }
        var delta = timestamp - this.lastTick;
        if (delta > 150) {
            this.finish();
        } else {
            this.timequeue.tick(delta);
            createjs.Tween.tick(delta);
            this.board.redraw(delta);
        }
        this.lastTick = timestamp;
        this.frameTime.data[this.frameTime.position++] = delta;
        this.frameTime.position %= FRAME_TIME_SIZE;
        this.timerId = window.requestAnimationFrame(this.ticker.bind(this));
    },
    finish: function () {
        this.timequeue.finish(function () {
            createjs.Tween.endAllTweens(true);
        }, {recursive: true});
        this.timeline = new west.mission.TimeLine();
        this.timequeue.add(this.timeline);
    },
    renderEntity: function (grid, entity) {
        var coord = grid.getEntityLeftTop(entity.area);
        var obj = this.mapImageFactory.build(grid.header.images[entity.imageIdx], entity, this.eventSys);
        obj.updateHealth();
        obj.setName(entity.data.name);
        obj.setDirection(entity.direction);
        obj.initStates();
        obj.showState();
        obj.getEl().css(this.calcCSSPosition(obj, coord, entity.direction));
        obj.entity.events.health_changed.attach(this.updateEntityHealth.bind(this, obj));
        this.mapEl.append(obj.getEl());
        this.entities[entity.id] = obj;
    },
    removeEntity: function (grid, entityId) {
        if (!this.entities[entityId])return;
        if (entityId == this.ownEntity.id) {
            this.onDeath();
        }
        var entityEl = this.entities[entityId].getEl();
        var entities = this.entities;
        this.timeline.add(function () {
            delete entities[entityId];
            createjs.Tween.get(entityEl.get(0)).to({opacity: 1}, 0).to({opacity: 0}, 500).call(function () {
                entityEl.remove();
            });
        }, 100);
    },
    updateEntityHealth: function (cellEntity, entity, from, to) {
        this.timeline.add(cellEntity.updateHealth.bind(cellEntity, to), 200);
    },
    updateConnectionStatus: function () {
        for (var id in this.entities) {
            if (!this.entities.hasOwnProperty(id))
                continue;
            this.entities[id].showState();
        }
    },
    highlightEntity: function (entityId) {
        var entity = this.grid.entities[entityId];
        if (!entity || !entity.placed)return;
        this.entities[entityId].getEl().append('<div class="highlight-arrow highlight-arrow-' + entityId + '"></div>');
    },
    removeHighlight: function (entityId) {
        $('.highlight-arrow-' + entityId, this.mapEl).remove();
    },
    calculateMiddleCoord: function (collection_of_coords) {
        var i = collection_of_coords.length, x = 0, y = 0;
        while (i--) {
            x += collection_of_coords[i].x;
            y += collection_of_coords[i].y;
        }
        x = x / collection_of_coords.length;
        y = y / collection_of_coords.length;
        return {x: x, y: y};
    },
    centerOnCoord: function (x, y) {
        if ('object' === typeof(x)) {
            y = x.y;
            x = x.x;
        }
        var position = this.coordToScreen(x, y), map_size = this.getSize(), screen_coords;
        screen_coords = {
            top: Math.round(Math.min(0, -(Math.min(position.top - window.innerHeight / 2, map_size.height - window.innerHeight)))),
            left: Math.round(Math.min(0, -(Math.min(position.left - window.innerWidth / 2, map_size.width - window.innerWidth))))
        };
        this.dragHandler.setOffset(screen_coords);
    },
    centerOnPlayer: function (player_id) {
        var player = player_id ? (this.entities[player_id] ? this.entities[player_id].entity : false) : this.ownEntity;
        if (player) {
            this.centerOnCoord(this.calculateMiddleCoord(player.area));
        }
    }
});

west.define('west.mission.TopDownView', 'west.mission.View', {
    cellElements: null,
    init: function (grid, clickhandler, eventSys) {
        this.callParent(grid, clickhandler, eventSys);
        this.cellElements = {};
        this.tick();
    },
    finalize: function () {
        this.callParent();
        this.cellElements = null;
    },
    render: function () {
        this.mapImageFactory = new west.mission.MapImageFactory({imagePath: this.imagePath});
        this.initDOM();
        this.renderCells();
        this.renderMapElements();
        for (var entityId in this.grid.entities) {
            if (!this.grid.entities[entityId].placed)continue;
            this.renderEntity(this.grid, this.grid.entities[entityId]);
        }
    },
    initDOM: function () {
        this.mapEl = $("#mission-map");
        this.width = window.innerWidth;
        this.height = window.innerHeight;
        this.mapEl.css({
            width: (this.grid.header.background.maxX + 1) * this.grid.header.background.side,
            height: (this.grid.header.background.maxY + 1) * this.grid.header.background.side,
            background: "url(" + this.imagePath + this.grid.header.background.path + ")"
        });
        $("#mission-map-container").show();
    },
    renderCells: function () {
        for (var cellId in this.grid.cells) {
            this.cellElements[cellId] = new west.mission.CellHtmlElement(this.grid.cells[cellId].x, this.grid.cells[cellId].y, this.grid.header.background.side, cellId);
            this.mapEl.append(this.cellElements[cellId].getEl());
        }
    },
    renderMapElements: function () {
        for (var x in this.grid.map) {
            for (var y in this.grid.map[x]) {
                for (var layer in this.grid.map[x][y]) {
                    for (var i = 0; i < this.grid.map[x][y][layer].length; i++) {
                        var objEl = this.mapImageFactory.build(this.grid.header.images[this.grid.map[x][y][layer][i]]);
                        objEl.setLayer(layer);
                        this.cellElements[this.grid.toIdx(x, y)].getEl().append(objEl.getEl());
                    }
                }
            }
        }
    },
    coordToScreen: function (x, y) {
        return {
            left: parseInt(x, 10) * this.grid.header.background.side,
            top: parseInt(y, 10) * this.grid.header.background.side
        };
    },
    getSize: function () {
        return {
            width: this.grid.header.background['maxX'] * this.grid.header.background.side,
            height: this.grid.header.background['maxY'] * this.grid.header.background.side
        };
    },
    calcCSSPosition: function (mapImage, coords, direction) {
        return this.coordToScreen(coords.x, coords.y);
    },
    onMousemove: function (event) {
    },
    onClick: function (ev) {
        if (this.dragHandler.wasDragged())return;
        var offset = this.mapEl.position();
        this.clickHandler.handle(Math.floor((ev.clientX - offset.left) / 33), Math.floor((ev.clientY - offset.top) / 33));
    }
});

west.define('west.mission.CanvasView', 'west.mission.View', {
    commands_: null,
    fadedElements_: null,
    fadeEnabled_: true,
    init: function (grid, clickHandler, ownEntity, eventSys) {
        this.commands_ = {};
        this.moves_ = [];
        this.fadedElements_ = [];
        this.side = grid.header.background.side;
        this.maxY = grid.header.background.maxY + 1;
        this.maxX = grid.header.background.maxX + 1;
        this.offsetX = 500;
        this.offsetY = 500;
        this.header = {side: this.side, maxX: this.maxX, maxY: this.maxY};
        this.width = this.maxX * this.side;
        this.height = this.maxY * this.side;
        this.bgWidth = (this.maxX) * this.side + (this.maxY) * this.side;
        this.bgHeight = this.side * (this.maxX + this.maxY) / 2;
        this.callParent(grid, clickHandler, ownEntity, eventSys);
        this.initDOM();
        this.initCanvas();
        EventHandler.listen('mpi.onCellHover', this.onCellHover, this);
        EventHandler.listen('mpi.onAbilityStart', this.executeCommand_, this);
        EventHandler.listen('mpi.onAbilityDone', this.removeCommand_, this);
        eventSys.on('game.animationEnds', this.removeMoves_, this);
        eventSys.on('commandqueue.added', this.addCommand_, this);
        eventSys.on('commandqueue.cancelled', this.removeCommand_, this);
        eventSys.on('game.activatedView', function (view, game) {
            if (view !== this)return;
            this.bg.setPlacement(!game.started);
            west.common.forEach(game.commandQueue.getAll(), function (command) {
                this.addCommand_(command);
            }, this);
        }, this);
        eventSys.on('game.started', function (game) {
            this.bg.setPlacement(!game.started);
        }, this);
    },
    finalize: function () {
        EventHandler.unlistenByContext('mpi.onCellHover', this);
        EventHandler.unlistenByContext('mpi.onAbilityStart', this);
        EventHandler.unlistenByContext('mpi.onAbilityDone', this);
        this.eventSys.offByContext(this);
        west.common.forEach(this.commands_, this.removeCommand_, this);
        this.callParent();
    },
    initDOM: function () {
        var size = this.getSize();
        this.imageLayer = $('<div class="image_layer" />').css({width: size.width, height: size.height});
        this.mapEl.css({
            width: size.width,
            height: size.height,
            background: "url(" + this.imagePath + "iso/" + this.grid.header.background.path + ")"
        }).append(this.imageLayer);
        if (this.ownEntity.isDead()) {
            $('.mpi-shadow').addClass('death');
            $('.mpi-ui').addClass('death');
        }
        $("#mission-map-container").show();
    },
    initCanvas: function () {
        ['background', 'main'].forEach(function (id) {
            this.mapEl.append('<canvas style="position: absolute;" id="' + id + '" />');
            var canvas = document.getElementById(id), size = this.getSize();
            canvas.width = size.width;
            canvas.height = size.height;
            this.board[id] = this.board.create(canvas.getContext('2d'));
        }, this);
        this.bg = new west.mission.canvas.BgGrid(this, this.grid.zones, this.eventSys);
        this.fg = new west.mission.canvas.FgGrid(this);
        this.board.background.addChild(this.bg).requestRedraw();
        this.board.main.addChild(this.fg);
    },
    render: function () {
        this.mapImageFactory = new west.mission.MapImageFactory({
            imagePath: this.imagePath + 'iso/',
            isoData: {side: this.side, width: this.width}
        });
        for (var x in this.grid.map) {
            for (var y in this.grid.map[x]) {
                for (var layer in this.grid.map[x][y]) {
                    for (var i = 0; i < this.grid.map[x][y][layer].length; i++) {
                        var objEl = this.mapImageFactory.build(this.grid.header.images[this.grid.map[x][y][layer][i]]);
                        this.imageLayer.append(objEl.getEl().css(this.calcCSSPosition(objEl, {
                            x: parseInt(x),
                            y: parseInt(y)
                        })));
                    }
                }
            }
        }
        for (var entityId in this.grid.entities) {
            if (!this.grid.entities[entityId].placed)continue;
            this.renderEntity(this.grid, this.grid.entities[entityId]);
        }
    },
    addImage: function (imgId, coords) {
        var objEl = this.mapImageFactory.build(this.grid.header.images[imgId]);
        this.imageLayer.append(objEl.getEl().css(this.calcCSSPosition(objEl, coords)));
        return objEl;
    },
    renderEntity: function (grid, entity) {
        this.callParent(grid, entity);
        if (-1 == entity.team.id)return;
        this.board.main.addChild(new west.mission.canvas.CellHighlight(this, this.entities[entity.id])).requestRedraw();
    },
    onCellHover: function (view, position, coord) {
        this.fg.hover(coord);
        this.fadeElements(position);
    },
    fadeElements: function (pos) {
        var faded = this.fadedElements_, fadeEnabled = this.fadeEnabled_;
        if (!fadeEnabled && !faded.length)return;
        this.imageLayer.children().each(function (idx, el) {
            var rect, inside, isFaded = faded.indexOf(el) !== -1;
            if (!(rect = $(el).data('rect'))) {
                rect = $(el).rect();
                $(el).data('rect', rect);
            }
            inside = rect.x0 <= pos.left && rect.x1 >= pos.left && rect.y0 <= pos.top && rect.y1 >= pos.top;
            if (fadeEnabled && !isFaded && inside) {
                faded.push(el);
                el.style.zIndex = parseInt(el.style.zIndex, 10) - 100;
                el.style.opacity = '0.4';
            } else if (isFaded && !inside) {
                faded.splice(faded.indexOf(el), 1);
                el.style.zIndex = parseInt(el.style.zIndex, 10) + 100;
                el.style.opacity = '1';
            }
        });
    },
    coordToScreen: function (x, y, middle) {
        x = parseInt(x);
        y = parseInt(y);
        var screenx = (x + y) * this.side;
        var screeny = (this.width / 2) - (x - y) * this.side / 2;
        return {
            top: ((middle) ? screeny : screeny) + this.offsetY / 2,
            left: ((middle) ? screenx + this.side : screenx) + this.offsetX / 2
        };
    },
    screenToCoord: function (x, y) {
        var mousex = (x - this.mapEl.position().left) - this.offsetX / 2;
        var mousey = ((y - this.mapEl.position().top) - this.width / 2) - this.offsetY / 2;
        var mapx = Math.floor(((mousex / this.side) - (mousey / (this.side / 2))) / 2);
        var mapy = Math.floor((mousex / this.side + mousey / (this.side / 2)) / 2);
        return {x: mapx, y: mapy};
    },
    getSize: function () {
        return {width: this.bgWidth + this.offsetX, height: this.bgHeight + this.offsetY};
    },
    calcCSSPosition: function (mapImage, coords, direction) {
        var width, height, x, y, positionX, positionY;
        if (direction == 2 || direction == 4) {
            width = mapImage.data['height'];
            height = mapImage.data['width'];
        } else {
            width = mapImage.data['width'];
            height = mapImage.data['height'];
        }
        x = coords.x;
        y = coords.y + Math.ceil(height / this.side);
        positionY = this.coordToScreen(x, y);
        x = coords.x + Math.ceil(width / this.side);
        positionX = this.coordToScreen(x, y);
        return {
            top: parseInt(positionY.top - mapImage.data['iso-height']),
            left: parseInt(positionX.left - mapImage.data['iso-width']),
            'z-index': this.calculateZIndex_(width, height, coords.x, coords.y)
        };
    },
    calculateZIndex_: function (pxWidth, pxHeight, x, y) {
        var height = Math.ceil(pxHeight / this.side), width = Math.ceil(pxWidth / this.side);
        return y - x + height - width + 1000;
    },
    onMousemove: function (event) {
        var coord = this.screenToCoord(event.pageX, event.pageY);
        var position = this.coordToScreen(coord.x, coord.y);
        if (coord.x >= this.maxX || coord.x < 0 || coord.y < 0 || coord.y >= this.maxY) {
            if (!this.lastPosition.outOfReach) {
                this.lastPosition.outOfReach = true;
                EventHandler.signal('mpi.onMapBlur', [this]);
            }
            return;
        }
        if (this.lastPosition.top == position.top && this.lastPosition.left == position.left)return;
        if (this.lastPosition.outOfReach) {
            EventHandler.signal('mpi.onMapHover', [this]);
        }
        this.lastPosition = position;
        EventHandler.signal('mpi.onCellHover', [this, position, coord]);
    },
    onClick: function (event) {
        if (this.dragHandler.wasDragged())return;
        var coord = this.screenToCoord(event.pageX, event.pageY);
        this.clickHandler.handle(coord.x, coord.y);
    },
    addCommand_: function (command) {
        var ability = west.mission.Ability.Factory.get(command.type);
        var cmd;
        if (!ability || !this.entities[command.src]) {
            return;
        }
        cmd = this.commands_[command.id] = new west.mission.Command(ability, this, command.src, command.id).setState('command').update(command.target);
        if ('Move' === command.type) {
            this.moves_[command.id] = cmd;
        }
    },
    executeCommand_: function (command) {
        if (this.commands_[command.id]) {
            this.commands_[command.id].setState('executing').update(command.target);
        }
    },
    removeCommand_: function (command) {
        if (this.commands_[command.id]) {
            this.commands_[command.id].destruct();
            delete this.commands_[command.id];
        }
    },
    onDeath: function () {
        this.timeline.add(function () {
            $('.mpi-shadow').addClass('death');
        }, 0);
    },
    removeMoves_: function () {
        west.common.forEach(this.moves_, function (move) {
            if (move) {
                move.destruct();
            }
        }, this);
        this.moves_ = [];
    }
});

west.define('west.mission.Event', null, {
    init: function (sender) {
        this._sender = sender;
        this._listeners = [];
    }, attach: function (func, context) {
        this._listeners.push({func: func, context: context});
    }, detach: function (func, context) {
        var listener, l = this._listeners.length;
        while (l--) {
            listener = this._listeners[l];
            if (listener.func == func && (context === undefined || context == listener.context)) {
                this._listeners.splice(l, 1);
            }
        }
    }, notify: function () {
        var index, listener, args = Array.prototype.slice.call(arguments, 0);
        args.unshift(this._sender);
        for (index = 0; index < this._listeners.length; index += 1) {
            listener = this._listeners[index];
            listener.func.apply(listener.context || null, args);
        }
    }
});

west.define('west.mission.CellHtmlElement', null, {
    init: function (x, y, side, id) {
        this.mainDiv = $('<div class="cell" />').css({
            width: side,
            height: side,
            "top": parseInt(y * side),
            "left": parseInt(x * side)
        }).data('idx', id);
    }, getEl: function () {
        return this.mainDiv;
    }, getPosition: function () {
        return this.getEl().position();
    }
});
west.define('west.mission.MapImageFactory', null, {
    isIso: null,
    isoData: null,
    imagePath: null,
    animatedSprites: {
        'bear-3.png': {fallback: {walk: {image: 'bear-3.png', frames: 10}}},
        'cowboy_south.png': {
            'team_1': {
                walk: {image: 'players/cowboy_red.png', frames: 9},
                shoot: {image: 'players/cowboy_red.png', frames: 4, offset: 10}
            },
            'team_2': {
                walk: {image: 'players/cowboy_blue.png', frames: 9},
                shoot: {image: 'players/cowboy_blue.png', frames: 4, offset: 10}
            },
            'fallback': {
                walk: {image: 'players/cowboy_blue.png', frames: 9},
                shoot: {image: 'players/cowboy_blue.png', frames: 4, offset: 10}
            }
        }
    },
    init: function (opts) {
        this.isIso = !!opts.isoData;
        this.isoData = opts.isoData || {};
        this.imagePath = opts.imagePath;
    },
    getMapElement: function (data, entity) {
        var width, height, sprite_data;
        if (entity && this.animatedSprites[data.path]) {
            if (this.isIso) {
                width = data['iso-width'];
                height = data['iso-height'];
            } else {
                width = height = Math.max(data.width, data.height);
            }
            if (entity.team && entity.team.id) {
                sprite_data = this.animatedSprites[data.path]['team_' + entity.team.id];
            }
            if (!sprite_data) {
                sprite_data = this.animatedSprites[data.path]['fallback'];
            }
            return new west.mission.MapElementAnimation(this.imagePath, sprite_data, width, height, entity.direction);
        }
        return new west.mission.MapElementStatic(this.imagePath + data.path, this.isIso ? data['iso-width'] : data.width, this.isIso ? data['iso-height'] : data.height, entity && entity.direction);
    },
    build: function (data, entity, eventSys) {
        var mapEl = this.getMapElement(data, entity);
        return entity ? new west.mission.MapEntity(data, mapEl, entity, eventSys) : new west.mission.MapImage(data, mapEl);
    }
});
west.define('west.mission.MapImage', null, {
    data: null, mapElement: null, transitionCnt: 0, init: function (data, mapElement) {
        this.mapElement = mapElement;
        this.data = data;
    }, getEl: function () {
        return this.mapElement.mainDiv;
    }, setLayer: function (index) {
        this.getEl().css('z-index', index);
        return this;
    }, startTransition: function (name) {
        if (!(this.mapElement instanceof west.mission.MapElementAnimation))return;
        if (this._prevTransition && this._prevTransition != name) {
            this.stopTransition(true);
        }
        if (!this.mapElement.animation[name]) {
            DEBUG && console.log('the animation does not support this action type', name, this);
            return;
        }
        if (!this.transitionCnt++) {
            this.mapElement.animation[name]();
            if (name == 'shoot')this.transitionCnt = 0;
        }
        this._prevTransition = name;
    }, stopTransition: function (force) {
        if (!(this.mapElement instanceof west.mission.MapElementAnimation))return;
        if (--this.transitionCnt == 0 || force) {
            this.mapElement.animation.stop();
            this.transitionCnt = 0;
        }
    }, setDirection: function (dir) {
        this.mapElement.setDirection(dir);
    }
});
west.define('west.mission.MapElementAnimation', null, {
    animation: null, direction: null, setDirection: function (dir) {
        if (undefined === dir)return;
        this.animation.draw(null, null, dir - 1);
    }, init: function (basePath, actions, frameWidth, frameHeight, direction) {
        this.mainDiv = $('<div />').css({"width": frameWidth, "height": frameHeight, "position": "absolute"});
        this.animation = new Animation('mpi-animation', {appendTo: this.mainDiv});
        if (!actions.walk) {
            DEBUG && console.log('no walk action available!');
        } else {
            this.animation.setDefaultSprite('walk', new AnimationSprite(basePath + actions.walk.image, frameWidth, frameHeight, actions.walk.frames, actions.walk.offset), {fps: 10});
        }
        for (var action in actions) {
            if (action == 'walk')continue;
            this.animation.add(action, new AnimationSprite(basePath + actions[action].image, frameWidth, frameHeight, actions[action].frames, actions[action].offset), {
                fps: 12,
                once: true
            });
        }
        this.animation.draw(null, null, direction - 1);
    }
});
west.define('west.mission.MapElementStatic', null, {
    setDirection: function (dir) {
        if (undefined === dir)return;
        this.mainDiv.css('background-position', '0 -' + ((dir - 1) * this.height) + 'px');
    }, init: function (path, width, height, direction) {
        direction = direction || 1;
        this.height = height;
        this.mainDiv = $('<div />').css({
            "width": width,
            "height": height,
            "position": "absolute",
            'background-image': 'url(' + path + ')',
            'background-position': '0 -' + (this.height * (direction - 1)) + 'px'
        });
    }
});
west.define('west.mission.MapEntity', 'west.mission.MapImage', {
    statusBarFrame: null, actualHealth: null, init: function (data, mapElement, entity, eventSys) {
        this.callParent(data, mapElement);
        this.entity = entity;
        this.entity.events.state_updated.attach(this.updateState, this);
        this.entity.events.entity_died.attach(function () {
            this.entity.events.state_updated.detach(this.updateState, this);
        }, this);
        this.eventSys = eventSys;
        this.events = {entity_moving: new west.mission.Event(this), entity_moved: new west.mission.Event(this)};
    }, initStates: function () {
        west.common.forEach(this.entity.states, function (abTypes, side) {
            west.common.forEach(abTypes, function (_, abType) {
                this.updateState(this.entity, side, abType, _);
            }, this);
        }, this);
    }, updateHealth: function (to) {
        if (!this.statusBarFrame)this.setStatusBar();
        to = to || this.entity.props.curHealth;
        var percent = this.entity.getCurHealth(true);
        $('.absolute_health', this.statusBarFrame).text(to + ' / ' + this.entity.props.maxHealth);
        if (this.actualHealth.width() > 0) {
            this.actualHealth.animate({width: Math.ceil((this.getEl().width() - 2) * percent / 100)}, 200);
        } else {
            this.actualHealth.width(Math.ceil((this.getEl().width() - 2) * percent / 100));
        }
        this.eventSys.emit('cellEntity.health_changed', this.entity.id, percent, this.entity.getMaxHealth(), this.entity.getCurHealth());
        return this;
    }, setName: function (name) {
        if (!this.statusBarFrame)this.setStatusBar();
        $('.playername', this.statusBarFrame).text(name);
    }, setStatusBar: function () {
        this.statusBarFrame = $(''
            + '<div class="playerinfo">'
            + '<div class="playername"></div>'
            + '<div class="health_bar_outer">'
            + '   <div class="health_bar_inner"><div class="absolute_health"></div></div>'
            + '</div>'
            + '<div class="states"></div>'
            + '<div class="disconnected"></div>'
            + '</div>');
        $('.health_bar_outer', this.statusBarFrame).width(this.getEl().width());
        $('.absolute_health', this.statusBarFrame).width(this.getEl().width());
        $('.states', this.statusBarFrame).width(this.getEl().width());
        this.actualHealth = $('.health_bar_inner', this.statusBarFrame);
        this.getEl().append(this.statusBarFrame);
        return this;
    }, hideBar: function () {
        this.statusBarFrame.hide();
    }, showState: function () {
        if (!this.statusBarFrame)return;
        this.statusBarFrame.toggleClass('disconnected', !this.entity.connected).toggleClass('idle', this.entity.idle).toggleClass('ragequit', this.entity.ragequit);
    }, updateState: function (_, side, abilityId, entities) {
        if (!this.statusBarFrame)return;
        var statesEl = $('.state.' + side + '.mpi-ability-' + abilityId, this.statusBarFrame);
        if (!entities) {
            return statesEl.remove();
        }
        if (!statesEl.length) {
            statesEl = $('<div class="state ' + side + ' mpi-ability s-12 mpi-ability-' + abilityId + '" />');
            $('.states', this.statusBarFrame).append(statesEl);
        } else {
            statesEl.empty();
        }
    }
});

west.define('west.mission.Handler', null, {
    init: function (size, mapEl, header, isIso) {
        this.size = size;
        this.mapEl = mapEl;
        this.header = header;
        this.enabled = true;
        this.isIso = isIso;
        this.offset = {left: 0, top: 0};
        this.mapEl.on('mousedown.mpiDraghandler', this.mousedown.bind(this));
    }, wasDragged: function () {
        return this.dragged;
    }, freeze: function () {
        this.enabled = false;
    }, warmUp: function () {
        this.enabled = true;
    }, mousedown: function (event) {
        this.dragged = false;
        this.absMove = 0;
        this.lastPos = {x: event.clientX, y: event.clientY};
        var mapOffset = this.getOffset();
        this.lastRendered = {
            x: -parseInt(mapOffset.left / this.header.background.side),
            y: -parseInt(mapOffset.top / this.header.background.side)
        };
        $('body').addClass('drag').css('cursor', 'move');
        $('body').attr('onselectstart', 'return false');
        this.cancelEvent(event);
        this.mousemoveHandler = this.mousemove.bind(this);
        this.mouseupHandler = this.mouseup.bind(this);
        document.addEventListener('mousemove', this.mousemoveHandler, true);
        document.addEventListener('mouseup', this.mouseupHandler, true);
    }, mouseup: function (event) {
        var mapEl = this.mapEl[0];
        if (mapEl.releaseCapture && mapEl.detachEvent) {
            mapEl.detachEvent('onlosecapture', this.mouseupHandler);
            mapEl.detachEvent('onmouseup', this.mouseupHandler);
            mapEl.detachEvent('onmousemove', this.mousemoveHandler);
            mapEl.releaseCapture();
        } else {
            document.removeEventListener('mousemove', this.mousemoveHandler, true);
            document.removeEventListener('mouseup', this.mouseupHandler, true);
        }
        $('body').removeClass('drag').css('cursor', '');
        $('body').removeAttr('onselectstart');
        this.cancelEvent(event);
    }, mousemove: function (event) {
        if (this.absMove < 20) {
            this.absMove += Math.abs(event.clientX - this.lastPos.x) + Math.abs(event.clientY - this.lastPos.y);
            return;
        }
        this.dragged = true;
        var deltaX = event.clientX - this.lastPos.x;
        var deltaY = event.clientY - this.lastPos.y;
        this.mapmove(deltaX, 'x', 'left');
        this.mapmove(deltaY, 'y', 'top');
        this.lastPos.x = event.clientX;
        this.lastPos.y = event.clientY;
        this.cancelEvent(event);
    }, mapmove: function (deltaPixel, axis, direction) {
        if (!this.enabled)return;
        var newPosition, newTile, currentPos = this.getOffset()[direction], tmp;
        newPosition = this.limitOffset(currentPos + deltaPixel, axis);
        if (newPosition === currentPos)return;
        tmp = {};
        tmp[direction] = newPosition;
        this.setOffset(tmp);
    }, limitOffset: function (pos, axis) {
        var max, min = 0;
        max = -this.size[(axis == 'x') ? 'width' : 'height'];
        max += (axis === 'y' ? window.innerHeight : window.innerWidth);
        return Math.min(min, Math.max(max, pos));
    }, cancelEvent: function (event) {
        event.stopPropagation && event.stopPropagation() || (event.cancelBubble = true);
        event.preventDefault && event.preventDefault() || (event.returnValue = false);
    }, getOffset: function () {
        return this.offset;
    }, setOffset: function (newOffset) {
        var tmp = {};
        tmp.left = newOffset.left !== undefined ? newOffset.left : this.offset.left;
        tmp.top = newOffset.top !== undefined ? newOffset.top : this.offset.top;
        if (tmp.left === this.offset.left && tmp.top === this.offset.top)return;
        this.offset = tmp;
        this.mapEl.css(this.offset);
    }
});

west.define('west.mission.ClickHandler', null, {
    init: function (game) {
        this.game = game;
    }, debug: function (x, y) {
        var debugEl = $('#debugPanel'), el;
        if (!debugEl.length)return;
        if (!(el = $('.mpi-coords')).length) {
            el = $('<div class="mpi-coords"/>').appendTo(debugEl);
        }
        el.text('Coords: ' + x + '/' + y);
    }, handle: function (x, y) {
        this.debug(x, y);
        if (this.game.ownEntity.isDead())return;
        this.game.useAbility(x, y);
    }
});

west.define('west.mission.Ui', null, {
    domSkel: '<div class="mpi-ui"></div>', init: function (game, eventSys) {
        this.dom = null;
        this.refreshInterval = null;
        this.teamInfoPane = null;
        this.activeAbility = null;
        this.currentTarget = null;
        this.hotkeys = [];
        this.displayed_popup = null;
        this.banner = null;
        this.header = null;
        this.respawnTimer = null;
        this.timeline = null;
        this.bottom_bar = null;
        this.teams = null;
        this.game = game;
        if (west.window.mpi.help[game.settings.type]) {
            if (!west.window.mpi.help[game.settings.type].id) {
                west.window.mpi.help[game.settings.type] = new west.window.mpi.help[game.settings.type].controller();
            }
            this.help = west.window.mpi.help[game.settings.type];
        }
        EventHandler.listen('mpi.onMapBlur', function (view) {
            this.handleMapBlur();
        }, this);
        EventHandler.listen('mpi.onCellHover', function (view, position, coord) {
            if (!this.game.started || this.game.ownEntity.isDead() || !this.game.ownEntity.placed)return;
            coord = view.grid.get(coord);
            if (!coord)return;
            this.currentTarget = coord;
            this.handlePopup();
            if (this.activeAbility) {
                this.activeAbility.update(coord);
            }
        }, this);
        this.eventSys = eventSys;
        this.ui_eventSys = new west.EventEmitter();
        this.createDom();
        eventSys.on('grid.entityPlaced', this.updatePlacementBanner, this);
        eventSys.on('game.started', this.onGameStarted, this);
        eventSys.on('game.finished', this.remove, this);
        eventSys.on('game.animationStarts', this.onAnimationStart, this);
        eventSys.on('game.animationEnds', this.onAnimationEnd, this);
        this.ui_eventSys.on('help', this.handleHelpRequest, this);
        this.ui_eventSys.on('chat.toggle', this.handleChatToggle, this);
        this.ui_eventSys.on('opacity.toggle', this.handleOpacityToggle, this);
        if (!game.started) {
            this.updatePlacementBanner();
            eventSys.emit('game.placement', game);
        } else {
            this.game.mode && this.game.mode.createUI(this.dom);
            eventSys.emit('game.round', game.roundInfo);
        }
        this.setHotkeys();
    }, handleMapBlur: function () {
        if (this.displayed_popup) {
            west.popup.handler.hide(this.displayed_popup);
            this.displayed_popup = null;
        }
    }, handlePopup: function () {
        var that = this, target = this.currentTarget, popups = this.game.popups.zones, handler = west.get('west.popup.handler'), zone_id, i;
        var showPopup = function (popup) {
            if (!that.displayed_popup || that.displayed_popup.text !== popup) {
                that.displayed_popup = new MousePopup(popup);
                handler.show(that.displayed_popup);
            }
        }, hidePopup = function () {
            if (that.displayed_popup) {
                handler.hide(that.displayed_popup);
                that.displayed_popup = null;
            }
        };
        if (!handler) {
            return;
        }
        if (target && target.zones && target.zones.length) {
            i = target.zones.length;
            while (i--) {
                zone_id = target.zones[i];
                if ('blocked' === zone_id) {
                    continue;
                }
                if (popups[zone_id]) {
                    showPopup(popups[zone_id]);
                    return;
                }
            }
        }
        hidePopup();
    }, remove: function () {
        window.clearInterval(this.refreshInterval);
        this.dom.off('.mpiUi');
        this.dom.remove();
        this.currentTarget = null;
        this.handlePopup();
        this.removeHotkeys();
        EventHandler.unlistenByContext('mpi.onCellHover', this);
        this.eventSys.offByContext(this);
    }, createDom: function () {
        var that = this;
        this.dom = $(this.domSkel).appendTo('#mission-map-container');
        this.banner = new west.gui.FancyBanner();
        this.dom.append(this.banner.getMainDiv());
        this.top_bar = new west.mission.ui.Top_bar(this.game.settings.name, this.eventSys, this.ui_eventSys);
        this.dom.append(this.top_bar.dom);
        this.respawnTimer = new west.mission.ui.RespawnTimer(this.game.ownEntity, this.eventSys);
        $('.mpi-ui-bottombar', this.dom).prepend(this.respawnTimer.dom);
        this.bottom_bar = new west.mission.ui.bottom_bar.Bottom_bar(this, this.game, this.eventSys, this.ui_eventSys);
        this.bottom_bar.loadPlayerAbilities(this.game.ownAbilities);
        this.playerinfo = new west.mission.ui.playerinfo.Info(this.game.entities, this.game.ownEntity, this.eventSys);
        this.dom.append(this.playerinfo.dom);
        this.teams = [new west.mission.ui.Team(this.game.teamInfo[1], (1 == this.game.ownEntity.team.id), this.game.eventSys), new west.mission.ui.Team(this.game.teamInfo[2], (2 == this.game.ownEntity.team.id), this.game.eventSys)];
        this.timeline = new west.mission.ui.timeline.Timeline(this.game, this.eventSys);
        this.timeline.loadInitCommands(this.game.commandQueue.getAll());
        this.notifications = new west.mission.ui.notifications.Manager(this.game, this.eventSys, this.game.entities, this.game.ownEntity, this.game.teamInfo, this.game.grid.zones);
        this.dom.append(this.teams[0].dom, this.teams[1].dom);
        if (this.help && !Config.get('mpi.help.' + this.game.settings.type)) {
            this.help.open();
        }
        window.setTimeout(function () {
            that.timeline.checkCollisions();
        }.bind(this), 25);
    }, onRespawn: function () {
        $('.mpi-shadow').removeClass('death');
        this.dom.removeClass('death');
    }, onDeath: function () {
        this.game.view.timeline.add(function () {
            this.removeActiveAbility();
            $('.mpi-shadow').addClass('death');
            this.dom.addClass('death');
        }.bind(this), 0);
    }, onGameStarted: function (game) {
        this.game.mode && this.game.mode.createUI(this.dom);
        this.banner.hide();
    }, updateConnectionStatus: function () {
        for (var i = 0; i < this.teams.length; i++) {
            this.teams[i].updateConnectionStatus(this.game.teamInfo[i + 1]);
        }
    }, updatePlacementBanner: function () {
        var str;
        if (this.game.started)return;
        if (this.game.ownEntity.placed) {
            str = 'Ожидаем других игроков!';
        } else {
            str = 'Выбери стартовую позицию!';
        }
        this.banner.setContent(str, 'Размещение').show();
    }, handleHelpRequest: function (action) {
        if (this.help) {
            action ? action : 'open';
            this.help[action]();
        } else {
            console.log('There is no hope for you.');
        }
    }, handleChatToggle: function () {
        if (this.game.chat) {
            this.game.chat.toggle();
        }
    }, handleOpacityToggle: function () {
        this.game.view.fadeEnabled_ = !this.game.view.fadeEnabled_;
        this.ui_eventSys.emit('opacity.changed', this.game.view.fadeEnabled_);
    }, removeActiveAbility: function () {
        if (this.activeAbility) {
            this.activeAbility.destruct();
            this.activeAbility = null;
        }
        return this;
    }, setActiveAbility: function (ability_id, target) {
        this.removeActiveAbility();
        target = target || this.currentTarget;
        var ability = west.mission.Ability.Factory.get(ability_id);
        if (ability) {
            this.activeAbility = new west.mission.Command(ability, this.game.view, this.game.ownEntity.id).setState('preview');
            if (target) {
                this.activeAbility.update(target);
            }
        }
        return this;
    }, onAnimationStart: function () {
        var $dom = this.dom;
        $dom.addClass('animation-phase');
    }, onAnimationEnd: function () {
        var $dom = this.dom;
        $dom.removeClass('animation-phase');
    }, setHotkeys: function () {
        var i = 1, that = this;
        west.common.forEach(this.game.ownAbilities.get(), function (_, type) {
            var ab = west.mission.Ability.Factory.get(type);
            var hk = new Hotkey(type, i + '', 'Use Ability ' + ab.name, function () {
                if (this.game.ownEntity.isDead() || this.dom.hasClass('animation-phase'))return;
                this.game.toggleActiveAbility(ab);
            }.bind(this));
            that.bottom_bar.getAbility(type).setHotkey(i);
            HotkeyManager.register(hk);
            i++;
            this.hotkeys.push(hk);
            if (i > 9) {
                return false;
            }
        }, this);
    }, removeHotkeys: function () {
        this.hotkeys.forEach(function (hk) {
            HotkeyManager.unregister(hk);
        }, this);
        this.hotkeys = [];
    }
});

west.define('west.mission.Entity', null, {
    init: function (entity, layout, teamInfo) {
        this.id = entity.id;
        this.direction = entity.direction;
        this.layoutId = entity.layoutId;
        this.imageIdx = entity.imageIdx;
        this.area = entity.area;
        this.abilities = entity.abilities;
        this.resource = entity.resource;
        this.data = entity.data;
        this.props = entity.props;
        this.placed = entity.placed;
        this.connected = entity.connected;
        this.idle = entity.idle;
        this.ragequit = entity.ragequit;
        this.team = teamInfo || {id: -1};
        this.layout = layout;
        this.states = {friendly: {}, enemy: {}};
        this.events = {
            health_changed: new west.mission.Event(this),
            entity_died: new west.mission.Event(this),
            entity_moved: new west.mission.Event(this),
            state_updated: new west.mission.Event(this)
        };
    }, isDead: function () {
        return this.props.curHealth <= 0;
    }, decHealth: function (amount) {
        if (this.isDead())return console.log('entity already dead');
        var tmpBefore = this.props.curHealth;
        this.props.curHealth -= amount;
        this.props.curHealth = Math.max(0, Math.min(this.props.curHealth, this.props.maxHealth));
        if (tmpBefore != this.props.curHealth) {
            this.events.health_changed.notify(tmpBefore, this.props.curHealth);
        }
        if (this.isDead()) {
            this.events.entity_died.notify(this.id);
        }
    }, move: function (grid, to) {
        grid.freeArea(this);
        this.direction = to.dir;
        this.area = this.getArea(to.x, to.y, to.dir);
        grid.occupyArea(this);
    }, getLeftTop: function (x, y, direction) {
        direction = direction || this.direction;
        var layout = this.layout.rotated[direction - 1];
        return {x: x + layout.top.x, y: y + layout.top.y};
    }, getArea: function (x, y, direction) {
        if ('object' == typeof(x)) {
            y = x.y;
            x = x.x;
        }
        direction = direction || this.direction;
        return this.layout.rotated[direction - 1].layout.map(function (coords, idx) {
            return {x: coords.x + x, y: coords.y + y};
        });
    }, getNullCoords: function () {
        var nullCoords;
        this.layout.rotated[this.direction - 1].layout.some(function (coords, idx) {
            if (coords.x == 0 && coords.y == 0) {
                return (nullCoords = idx);
            }
        });
        return this.area[nullCoords];
    }, addState: function (side, abilityId, entity, commandId) {
        if (!this.states[side])
            throw new Error('unkown entity state side: ' + side);
        if (!entity)entity = this;
        if (!this.states[side][abilityId])
            this.states[side][abilityId] = {};
        this.states[side][abilityId][commandId] = entity;
        this.events.state_updated.notify(side, abilityId, this.states[side][abilityId]);
    }, removeState: function (side, abilityId, entity, commandId) {
        if (!this.states[side])
            throw new Error('unkown entity state side: ' + side);
        if (!this.states[side][abilityId])
            return DEBUG && console.log('ability states from', abilityId, 'have been already removed:', commandId);
        if (!this.states[side][abilityId][commandId])
            return DEBUG && console.log('state from', abilityId, 'alreayd removed:', commandId);
        if (!entity)entity = this;
        delete this.states[side][abilityId][commandId];
        if ($.isEmptyObject(this.states[side][abilityId])) {
            delete this.states[side][abilityId];
        }
        this.events.state_updated.notify(side, abilityId, this.states[side][abilityId]);
    }, respawn: function (area) {
        this.states = {friendly: {}, enemy: {}};
        this.props.curHealth = this.props.maxHealth;
        this.placed = true;
        this.area = area;
        delete this.props.respawnIn;
    }, getMaxHealth: function () {
        return this.props.maxHealth;
    }, getCurHealth: function (percent) {
        if (percent) {
            return Math.ceil(this.props.curHealth * 100 / this.getMaxHealth());
        } else {
            return this.props.curHealth;
        }
    }
});

west.define('west.mission.EntityAbilities', null, {
    activeAbility: null, init: function (entity, eventSys) {
        this.entity = entity;
        var abilities = {};
        Common.forEach(entity.abilities, function (ability, abilityId) {
            var ab = west.mission.Ability.Factory.get(abilityId);
            if (!DEBUG && ab.hidden)
                return;
            abilities[abilityId] = ability;
        });
        this.abilities = abilities;
        this.resource = entity.resource;
        this.eventSys = eventSys;
        eventSys.on('commandqueue.cancelled', function (command) {
            if (command.src == this.entity.id)this.restoreCharge(west.mission.Ability.Factory.get(command.type));
        }, this);
    }, canDo: function (ability) {
        if (!this.abilities[ability.type] || this.resource.cur - ability.cost < 0 || this.abilities[ability.type]['curCharges'] == 0 || this.abilities[ability.type]['cooldown']) {
            return false;
        }
        return true;
    }, reset: function () {
        for (var abilityId in this.abilities) {
            var ability = this.abilities[abilityId];
            ability.curCharges = ability.maxCharges;
            delete ability.cooldown;
        }
        this.resource.cur = this.resource.max;
        this.eventSys.emit('abilities.refresh', this.get(), this.resource);
    }, refresh: function () {
        for (var abilityId in this.abilities) {
            var ability = this.abilities[abilityId];
            ability.curCharges = ability.maxCharges;
            if (ability.cooldown) {
                ability.cooldown--;
            }
        }
        this.resource.cur = this.resource.max;
        this.eventSys.emit('abilities.refresh', this.get(), this.resource);
    }, restoreCharge: function (ability) {
        var charges = this.get(ability.type);
        charges.curCharges++;
        charges.cooldown = 0;
        this.resource.cur += ability.cost;
        this.eventSys.emit('abilities.chargeChanged', ability.type, charges, this.resource);
    }, use: function (ability, cell) {
        var promise = ability.use(cell, this.entity), abilities = this.abilities, eventSys = this.eventSys;
        if (!promise.done)return false;
        promise.done(function () {
            var charges = abilities[ability.type];
            this.resource.cur -= ability.cost;
            charges['curCharges']--;
            charges['cooldown'] = ability.cooldown;
            eventSys.emit('abilities.chargeChanged', ability.type, charges, this.resource);
        }.bind(this));
        return true;
    }, get: function (abilityId) {
        return undefined !== abilityId ? this.abilities[abilityId] : this.abilities;
    }, setActive: function (abilityId) {
        var prevAbility = this.getActive() ? this.get(this.getActive()) : null, newAbility = this.get(abilityId);
        this.activeAbility = abilityId;
        if (prevAbility)prevAbility.active = false;
        if (newAbility)newAbility.active = true;
        this.eventSys.emit('abilities.abilityActivated', abilityId);
    }, getActive: function () {
        return this.activeAbility;
    }
});

(function () {
    'use strict';
    var MpiRoom = function (id, title, onSend) {
        this.id = id;
        this.title = title;
        this.init();
        this.onSend = onSend;
    };
    MpiRoom.prototype = new Chat.Resource.Room({
        getTitle: function () {
            return this.title;
        }, send: function (msg) {
            if (!msg)return;
            this.onSend(msg);
        }
    });
    west.namespace('west.mission.chat.MpiRoom', MpiRoom);
    west.define('west.mission.Chat', null, {
        chatWindow: null, tabs: null, init: function () {
            this.clients = {};
            this.tabs = {};
            this.chatWindow = ChatWindow.open();
            this.chatWindow.window.removeClass('dontminimize');
            this.open();
        }, reOpen: function () {
            this.chatWindow = ChatWindow.open();
            this.chatWindow.window.removeClass('dontminimize');
            var chatWindow = this.chatWindow;
            west.common.forEach(this.tabs, function (room) {
                ChatWindow.Tabs.open(chatWindow, room);
            });
        }, close: function () {
            var tab, tabId;
            for (tabId in this.tabs) {
                if (this.tabs.hasOwnProperty(tabId) && (tab = ChatWindow.Tabs.opened[tabId])) {
                    tab.wnd.closeTab(tabId);
                }
            }
            this.tabs = {};
        }, getChatWindow: function () {
            return this.chatWindow;
        }, addTab: function (room) {
            this.tabs[room.id] = room;
            ChatWindow.Tabs.open(this.getChatWindow(), room);
        }, getRoom_: function (tabId) {
            return this.tabs[tabId];
        }, getRoomOrDefault: function (tabId) {
            tabId = tabId || Object.keys(this.tabs)[0];
            return this.tabs[tabId];
        }, addSystemMessage: function (msg, tabId) {
            var room = this.getRoomOrDefault(tabId);
            if (!room)return;
            room.read(false);
            room.addMessage(Chat.Formatter.formatMessage(Chat.Formatter.formatText(msg), '', Date.now(), false, 'from_system'));
        }, addChatMessage: function (from, msg, time, tabId) {
            var room = this.getRoomOrDefault(tabId);
            if (!room)return;
            room.read(false);
            from = this.clients[from] || from;
            room.addMessage(Chat.Formatter.formatResponse(room, from, msg, time));
        }, toggle: function () {
            if (ChatWindow.isOpen()) {
                wman.toggleOpen(this.chatWindow.window.getId());
            } else {
                this.reOpen();
            }
        }, addClient: function (entity) {
            this.clients[entity.entity_id] = Chat.Resource.Manager.acquireClient(this._getClientData(entity));
            this.updateClient(entity);
            var room = this.getRoomOrDefault();
            if (room && ChatWindow.Tabs.opened[room.id]) {
                ChatWindow.Tabs.opened[room.id].addClient(this.clients[entity.entity_id]);
            }
        }, removeClient: function (entityId) {
            delete this.clients[entityId];
            var room = this.getRoomOrDefault();
            if (room && ChatWindow.Tabs.opened[room.id]) {
                ChatWindow.Tabs.opened[room.id].removeClient(entityId);
            }
        }, setClients: function (entities) {
            entities.forEach(function (entity) {
                if (!this.clients.hasOwnProperty(entity.entity_id)) {
                    this.addClient(entity);
                }
            }.bind(this));
            var entityIds = entities.map(function (e) {
                return e.entity_id;
            });
            Common.forEach(this.clients, function (client, key) {
                if (entityIds.indexOf(client.id) === -1) {
                    this.removeClient(client.id);
                }
            }.bind(this));
        }, _getClientData: function (entity) {
            return {
                id: entity.entity_id,
                westid: entity.entity_data.player_id,
                level: entity.entity_data.level,
                gm: false,
                name: entity.entity_data.name,
                cclass: entity.entity_data.cclass,
                avatar: {},
                myself: (MultiplayerWindow.ego && entity.entity_id == MultiplayerWindow.ego.entity_id),
                mpi: true
            };
        }, updateClient: function (entity) {
            var client = this.clients[entity.entity_id];
            if (!client)return;
            client.update(this._getClientData(entity));
        }
    });
    west.define('west.mission.GameChat', west.mission.Chat, {
        chatRoomId: 'room_mpi_chat',
        logRoomId: 'room_mpi_log',
        open: function () {
            this.addTab(new MpiRoom(this.chatRoomId, 'Чат команды', this.onSendMessage));
            var chatWindow = this.getChatWindow(), $window = $(chatWindow.window.getMainDiv());
            $window.offset({
                left: 10,
                top: $(window).height() - ($window.height() + ($('#mpi-playerinfo').height() || 260))
            });
            ChatWindow.Tabs.open(chatWindow, this.getChatRoom());
            this.addTab(new MpiRoom(this.logRoomId, 'Журнал действий', this.onSendMessage));
            chatWindow.switchTab(this.chatRoomId);
            $('.chat_side', ChatWindow.Tabs.opened[this.logRoomId].getMainDiv()).remove();
        },
        onSendMessage: function (msg) {
            west.mission.BattleserverSocket.emit('msg', msg, false);
        },
        getChatRoom: function () {
            return this.getRoom_(this.chatRoomId);
        },
        getLogRoom: function () {
            return this.getRoom_(this.logRoomId);
        },
        addLogMessage: function (msg) {
            this.getLogRoom().addMessage(Chat.Formatter.formatMessage(msg, '', Date.now()));
        }
    });
    west.define('west.mission.LobbyChat', west.mission.Chat, {
        roomId: 'room_mpi_lobby', open: function () {
            this.addTab(new MpiRoom(this.roomId, 'Холл перестрелки', this.onSendMessage));
        }, onSendMessage: function (msg) {
            MultiplayerWindow.sendLobbyMessage(msg);
        }, getRoom: function () {
            return this.getRoom_(this.roomId);
        }
    });
    west.define('west.mission.GroupChat', west.mission.Chat, {
        roomId: 'room_mpi_group', open: function () {
            this.addTab(new MpiRoom(this.roomId, 'Банда', this.onSendMessage));
        }, onSendMessage: function (msg) {
            MultiplayerWindow.sendGroupMessage(msg);
        }, getRoom: function () {
            return this.getRoom_(this.roomId);
        }
    });
    west.define('west.mission.AfterChat', west.mission.Chat, {
        roomId: 'room_mpi_afterwork', open: function () {
            this.addTab(new MpiRoom(this.roomId, 'Холл', this.onSendMessage));
        }, onSendMessage: function (msg) {
            west.mission.BattleserverSocket.emit('msg', msg, true);
        }, getRoom: function () {
            return this.getRoom_(this.roomId);
        }
    });
}());

west.define('west.mission.CommandQueue', null, {
    commands_: null, eventSys_: null, init: function (eventSys, commands) {
        this.commands_ = {};
        this.eventSys_ = eventSys;
        for (var i = 0; i < commands.length; i++) {
            if (commands[i])this.add(commands[i]);
        }
    }, add: function (command) {
        command = this.commands_[command.id] = {
            type: command.type,
            id: command.id,
            src: command.src,
            target: command.target
        };
        this.eventSys_.emit('commandqueue.added', command);
    }, cancel: function (commandId) {
        var command;
        if (!(command = this.commands_[commandId])) {
            DEBUG && console.log('cannot cancel missing command:', commandId);
            return;
        }
        delete this.commands_[commandId];
        this.eventSys_.emit('commandqueue.cancelled', command);
    }, remove: function (commandId) {
        var command;
        if (!(command = this.commands_[commandId])) {
            DEBUG && console.log('cannot cancel missing command:', commandId);
            return;
        }
        delete this.commands_[commandId];
        this.eventSys_.emit('commandqueue.removed', command);
    }, removeEntityCommands: function (entityId) {
        west.common.forEach(this.commands_, function (command, id) {
            if (command.src == entityId)this.cancel(id);
        }, this);
    }, getAll: function () {
        return this.commands_;
    }, removeAll: function () {
        west.common.forEach(this.commands_, function (command) {
            this.remove(command.id);
        }, this);
    }
});

west.define('west.mission.Command', null, {
    init: function (ability, view, srcId, commandId) {
        this.ability = ability;
        this.view = view;
        this.entity = this.view.entities[srcId];
        this.state = 'preview';
        this.target = null;
        this.commandId = commandId;
        this.effect = null;
        this.destroyed = false;
        this.entity.entity.events.entity_died.attach(this.destruct, this);
    }, destruct: function () {
        if (this.destroyed)return this;
        this.remove();
        this.destroyed = true;
        this.ability = null;
        this.view = null;
        this.entity = null;
        this.effect = null;
        this.target = null;
    }, setState: function (state) {
        if (this.destroyed)return this;
        if (this.state == state)return this;
        if (-1 != ['preview', 'command', 'executing'].indexOf(state)) {
            this.remove();
            this.state = state;
        }
        return this;
    }, remove: function () {
        if (this.destroyed)return this;
        switch (this.state) {
            case'preview':
                this.removePreview_();
                break;
            case'command':
                this.removeCommand_();
                break;
            case'executing':
                this.removeExecute_();
                break;
        }
        return this;
    }, update: function (target) {
        if (this.destroyed)return this;
        this.target = ('string' == typeof(target)) ? this.view.entities[target] : this.view.grid.get(target);
        switch (this.state) {
            case'preview':
                this.updatePreview_();
                break;
            case'command':
                this.updateCommand_();
                break;
            case'executing':
                this.updateExecute_();
                break;
        }
        return this;
    }, updatePreview_: function () {
        if (this.ability.isValidTarget && !this.ability.isValidTarget(this.view, this.entity, this.target)) {
            this.target = null;
        }
        if (this.ability.cursor) {
            $('#mission-map').removeClass('invalid-cursor ' + this.ability.cursor + '-cursor');
            if (this.target) {
                $('#mission-map').addClass(this.ability.cursor + '-cursor');
            } else {
                $('#mission-map').addClass('invalid-cursor');
            }
        }
        if (this.ability.renderPreview) {
            this.effect = this.ability.renderPreview(this.view, this.entity, this.target, this.effect);
        }
    }, removePreview_: function () {
        if (this.ability.cursor) {
            $('#mission-map').removeClass('invalid-cursor ' + this.ability.cursor + '-cursor');
        }
        if (this.effect) {
            this.effect.destruct();
            this.effect = null;
        }
    }, updateCommand_: function () {
        if (this.ability.states && this.target) {
            if (this.ability.states.enemy && this.target.entity) {
                this.target.entity.addState('enemy', this.ability.type, this.entity.entity, this.commandId);
            }
            if (this.ability.states.friendly && this.entity.entity) {
                this.entity.entity.addState('friendly', this.ability.type, this.target.entity, this.commandId);
            }
        }
        if (this.ability.renderCommand) {
            this.effect = this.ability.renderCommand(this.view, this.entity, this.target, this.effect);
        }
    }, removeCommand_: function () {
        if (this.ability.states && this.target) {
            if (this.ability.states.friendly && this.entity.entity) {
                this.entity.entity.removeState('friendly', this.ability.type, this.target.entity, this.commandId);
            }
            if (this.ability.states.enemy && this.target.entity) {
                this.target.entity.removeState('enemy', this.ability.type, this.entity.entity, this.commandId);
            }
        }
        if (this.effect) {
            this.effect.destruct();
            this.effect = null;
        }
    }, updateExecute_: function () {
        DEBUG && console.log('(not implemented) command.updateExecute_');
    }, removeExecute_: function () {
        if (this.effect) {
            this.effect.destruct();
            this.effect = null;
        }
    }
});

west.define('west.mission.Layout', null, {
    init: function (layout) {
        this.usePoint = layout.usePoint;
        this.rotated = layout.rotated;
        this.front = layout.front;
        this.layout = layout.layout;
        this.cacheView = layout.cacheView || {};
    }, getFront: function (direction) {
        var front = [];
        direction--;
        this.front.forEach(function (idx) {
            front.push(this.rotated[direction].layout[idx]);
        }, this);
        return front;
    }
});

west.namespace('west.mission.Utils', {
    accumulateRewards: function (stages) {
        var rewards = {veteran: 0, items: []};
        if (!stages)return rewards;
        stages.forEach(function (stageRewards) {
            stageRewards.forEach(function (reward) {
                switch (reward.type) {
                    case'veteran':
                        rewards.veteran += reward.amount;
                        break;
                    case'item':
                        rewards.items.push(reward.id);
                        break;
                }
            });
        });
        return rewards;
    }, addRewardsToDlg: function (dlg, rewards) {
        if (rewards.veteran) {
            dlg.addReward(new tw2widget.reward.VeteranReward(rewards.veteran));
        }
        rewards.items.forEach(function (itemId) {
            dlg.addReward(new tw2widget.reward.ItemReward(itemId));
        });
        return dlg;
    }, formatUsernameColor: function (user, color) {
        return '<span style="color:' + color + ';">#</span>' + user;
    }
});

west.define('west.mission.Replay', null, {
    game: null,
    init_: null,
    rounds_: null,
    currentRound_: null,
    init: function (data) {
        this.init_ = data.init;
        this.rounds_ = data.rounds;
    },
    launch: function () {
        this.currentRound_ = 0;
        this.game = new west.mission.Game(this.init_, this.getEntityId_());
        this.game.showCanvas();
        this.addControls_();
        return this;
    },
    close: function () {
        this.game.close();
    },
    next: function () {
        if (!this.game)return;
        var rnd = this.rounds_[this.currentRound_++];
        if (!rnd)return;
        rnd = rnd.clientResponse;
        new UserMessage('Round: ' + rnd.round.current).show();
        console.log("starting round", rnd.round, rnd.results, rnd.respawns);
        this.game.round(rnd.round, rnd.results, rnd.respawns);
        this.game.mode && this.game.mode.update(rnd.mode);
    },
    addControls_: function () {
        $('.mpi-ui').append($('<div style="position: absolute; right: 24px; bottom: 60px;"/>').append(new west.gui.Iconbutton(new west.gui.Icon('arrowright', 'Следующий'), this.next.bind(this)).getMainDiv(), new west.gui.Iconbutton(new west.gui.Icon('delete', 'Закрыть'), this.close.bind(this)).getMainDiv()));
    },
    getEntityId_: function () {
        var entities = Object.keys(this.init_.entities);
        return entities[0];
    }
});

west.define('west.mission.TimeQueue', null, {
    init: function () {
        this.timelines = [];
    }, add: function (timeline) {
        this.timelines.push(timeline);
    }, tick: function (delta, fnAfterEach) {
        var fns = [];
        this.timelines.forEach(function (timeline, tIdx) {
            fns = fns.concat(timeline.next(delta));
        });
        fns.sort(this.compare_).forEach(function (fn) {
            fn.execute();
            if (fnAfterEach)fnAfterEach(delta);
        });
    }, finish: function (yieldme, options) {
        options = options || {};
        var maxDuration = 0;
        while (this.timelines.length) {
            this.timelines.forEach(function (tl) {
                maxDuration = Math.max(tl.duration, maxDuration);
            });
            if (options.recursive) {
                this.tick(maxDuration, yieldme);
            } else {
                this.tick(maxDuration);
                yieldme(maxDuration);
            }
            this.timelines.forEach(function (timeline) {
                if (timeline.isDone()) {
                    this.timelines.splice(this.timelines.indexOf(timeline), 1);
                }
            }, this);
        }
    }, compare_: function (a, b) {
        if (a.startsAt == b.startsAt)return 0;
        return ((a.startsAt >= b.startsAt) ? 1 : -1);
    }
});
west.define('west.mission.TimeLine', null, {
    init: function () {
        this.line = [];
        this.duration = 0;
        this.current = 0;
    }, add: function (fn, duration) {
        if (DEBUG && undefined === duration) {
            console.log('undefined duration, setting it to 0');
        }
        duration = duration || 0;
        this.line.push({execute: fn, duration: duration, startsAt: this.duration});
        this.duration += duration;
    }, next: function (delta) {
        this.current += delta;
        var fns = [];
        while (this.line[0] && this.current >= this.line[0].startsAt) {
            fns.push(this.line.shift());
        }
        return fns;
    }, isDone: function () {
        return this.duration <= this.current;
    }
});
(function () {
    var TweenJs = west.get('createjs.Tween');
    if (TweenJs) {
        TweenJs.endAllTweens = function (recursive) {
            do {
                var tweens = this._tweens.slice(), i = 0, l = tweens.length, tween;
                for (i; i < l; i++) {
                    tween = tweens[i];
                    if (tween._paused) {
                        this.removeAllTweenOccurences(tween);
                        continue;
                    }
                    tween.tick(tween.duration);
                }
            } while (recursive && this._tweens.length);
        };
        TweenJs.removeAllTweenOccurences = function (Tween) {
            var tweens = this._tweens, i = tweens.length;
            while (i--) {
                if (tweens[i] === Tween) {
                    tweens.splice(i, 1);
                }
            }
        };
    }
})();

west.define('west.mission.CombatText', null, {
    domSkel_: '<div class="combat_message">'
    + '<div class="icon inlineblock mpi-ability s-12" />'
    + '<div class="text inlineblock" />'
    + '</div>', init: function (pos, iconCls, textCls, options) {
        options = options || {};
        this.move_coord = options.move_coord || {};
        this.move_coord.top = ('undefined' !== typeof this.move_coord.top ? this.move_coord.top : -150);
        this.move_coord.left = this.move_coord.left || 0;
        this.pos = pos;
        this.divMain = $(this.domSkel_).css({
            top: pos.top + (options.reset_top_start_offset ? 0 : -100),
            left: pos.left,
            opacity: 0
        });
        if (textCls)this.divMain.addClass(textCls);
        if (iconCls)$('.icon', this.divMain).addClass(iconCls);
    }, setText: function (text) {
        $('.text', this.divMain).text(text);
        return this;
    }, animate: function () {
        return createjs.Tween.get(this.divMain.get(0), {paused: true}).to({opacity: 1}, 1).to({
            top: this.pos.top + this.move_coord.top,
            left: this.pos.left + this.move_coord.left
        }, 1000).wait(2000).to({opacity: 0}, 400).call(function () {
            this.divMain.remove();
        }.bind(this));
    }
});

west.define('west.mission.mode.Domination', null, {
    init: function (modeStatus, modeSettings, ownEntity, teamInfo, grid, eventSys) {
        this.modeStatus = modeStatus;
        this.modeSettings = modeSettings;
        this.ownEntity = ownEntity;
        this.teamInfo = teamInfo;
        this.grid = grid;
        this.eventSys = eventSys;
        this.update(modeStatus);
    }, update: function (modeStatus) {
        this.modeStatus = modeStatus;
        this.updateZoneStatus(modeStatus);
        this.eventSys.emit('mode.updated', this.modeStatus);
    }, updateZoneStatus: function (modeStatus) {
        west.common.forEach(modeStatus.zones, function (zoneStatus, id) {
            if (this.grid.zones[id]) {
                var color;
                switch (zoneStatus.owner) {
                    case 0:
                        color = '#E9E9E9';
                        break;
                    case 1:
                        color = '#FF0000';
                        break;
                    case 2:
                        color = '#0000FF';
                        break;
                }
                this.grid.changeZoneProps(id, 'color', color);
            }
        }, this);
        this.eventSys.emit('game.zones.status', modeStatus.zones);
    }, createUI: function (dom) {
        if (this.created)return;
        new west.mission.ui.mode.Domination(this.modeSettings, this.ownEntity.team.id, this.teamInfo, this.eventSys, this.modeStatus, this.grid.zones).append(dom);
        this.created = true;
    }
});

west.define('west.mission.mode.Tutorial', null, {
    init: function (modeStatus, modeSettings, ownEntity, teamInfo, grid, popups, eventSys) {
        console.log("west.mission.mode.Tutorial::init", modeStatus, modeSettings, ownEntity, teamInfo, grid, popups, eventSys);
        this.grid = grid;
        this.displayStep = null;
        this.update(modeStatus);
    }, update: function (modeStatus) {
        console.log("west.mission.mode.Tutorial::update", modeStatus);
        this.ui = modeStatus.ui;
        this.step = modeStatus.step;
        west.common.forEach(modeStatus.zones, function (mode_zone, name) {
            if (this.grid.zones[name]) {
                west.common.forEach(mode_zone, function (mode_zone_prop, prop_name) {
                    this.grid.changeZoneProps(name, prop_name, mode_zone_prop);
                }, this);
            }
        }, this);
        this.toggleUI();
    }, toggleUI: function () {
        $('.team-right').toggle(this.ui.enemyTeam);
        $('.mpi-timeline').toggle(this.ui.timeline);
        if (this.displayStep != this.step) {
            this.displayStep = this.step;
            console.log("*** show ", this.displayStep, "window");
            new UserMessage('Tutorial step: ' + this.step).show();
        }
    }, createUI: function (dom) {
        console.log("west.mission.mode.Tutorial::createUI");
        this.toggleUI();
    }
});

west.namespace('west.mission.ui.popup.Ability', {
    domSkel: ''
    + '<div class="mpi-popup-ability">'
    + '<div class="name">%2</div>'
    + '<ul class="data">'
    + '<li class="cost">%4</li>'
    + '<li class="cooldown">%5</li>'
    + '</ul>'
    + '<div class="description">'
    + '<div class="image mpi-ability s-63 mpi-ability-%1"></div>'
    + '<div class="desc">%3</div>'
    + '</div>'
    + '</div>', create: function (ability, type) {
        if (!ability.type)ability.type = type;
        var el = $('<div></div>').append(s(this.domSkel, ability.type, ability.name, ability.description, s(ngettext('Стоимость: %1 очко действия', new Array('Стоимость: %1 очко действия', 'Стоимость: %1 очка действия', 'Стоимость: %1 очков действия'), ability.cost), '<span class="hide">' + ability.cost + '</span>' + (ability.cost == 1 ? '<span class="icon stamina"></span>' : '<span class="icon stamina"></span><span class="icon stamina"></span>') + '<span class="hide">') + '</span>', '<span class="icon tw2gui-iconset tw2gui-icon-hourglass">' + s(ngettext('Восстановление через: %1 раунд', new Array('Восстановление через: %1 раунд', 'Восстановление через: %1 раунда', 'Восстановление через: %1 раундов'), ability.cooldown), '</span>' + ability.cooldown)));
        if (ability.duration) {
            $('.data', el).append('<li class="duration">'
                + '<span class="icon tw2gui-iconset tw2gui-icon-clock">' + s(ngettext('Продолжительность: %1 раунд', new Array('Продолжительность: %1 раунд', 'Продолжительность: %1 раунда', 'Продолжительность: %1 раундов'), ability.duration), '</span>' + ability.duration)
                + '</li>');
        }
        if (ability.range) {
            $('.data', el).append('<li class="range">'
                + '<span class="icon tw2gui-iconset tw2gui-icon-range">' + s(ngettext('Зона действия: %1 поле', new Array('Зона действия: %1 поле', 'Зона действия: %1 поля', 'Зона действия: %1 полей'), ability.range), '</span>' + ability.range)
                + '</li>');
        }
        return el.html();
    }
});

west.namespace('west.mission.ui.popup.WorldInfo', {
    domSkel: ''
    + '<div class="mpi-popup-world-info">'
    + '<div class="name">%1</div>'
    + '</div>', create: function (world_id) {
        var el = $('<div></div>').append(s(this.domSkel, Game.worldsNames[world_id] || ''));
        return el.html();
    }
});

west.define('west.mission.ui.Header', null, {
    domSkel: '<div class="mpi-ui-header">' + '<div class="content">' + '<div class="mpi-buttons"></div>' + '<div class="mpi-name header-text">Domination</div>' + '<div class="mpi-roundinfo">' + '<span class="mpi-roundinfo-round">Round 0</span>' + '<span class="mpi-roundinfo-time">--:--</span>' + '</div>' + '</div>' + '</div>',
    init: function (title, eventSys, ui_eventSys) {
        this.dom = $(this.domSkel);
        this.refreshInterval = 0;
        this.eventSys = eventSys;
        this.ui_eventSys = ui_eventSys;
        $('.mpi-name', this.dom).text(title);
        this.eventSys.on('game.round', this.updateRound.bind(this));
        this.addHelpButton();
    },
    updatePlacement: function (end) {
        $('.mpi-roundinfo-round', this.dom).text(s('Размещение'));
        if (!end) {
            $('.mpi-roundinfo-time', this.dom).empty();
            return;
        }
        this.setTimer_(end);
    },
    updateRound: function (roundInfo) {
        $('.mpi-roundinfo-round', this.dom).text(s('%1-й раунд', roundInfo.current));
        if (!roundInfo.duration) {
            $('.mpi-roundinfo-time', this.dom).empty();
            return;
        }
        var l10n;
        if (roundInfo.maximumRounds) {
            l10n = s('Раунд %1 из %2. У тебя в каждом раунде %3 действий.', roundInfo.current, roundInfo.maximumRounds + '<br>', (roundInfo.duration / 1000).getTime2EndString(false)).split('<br>');
        } else {
            l10n = s('Раунд %1 %2 У тебя %3 в каждом раунде.', roundInfo.current, '<br>', (roundInfo.duration / 1000).getTime2EndString(false)).split('<br>');
        }
        $('.mpi-roundinfo', this.dom).addMousePopup({teaser: l10n[0], content: l10n[1]});
        this.setTimer_(roundInfo.started + roundInfo.duration);
    },
    setTimer_: function (end) {
        window.clearInterval(this.refreshInterval);
        this.refreshInterval = window.setInterval(function () {
            var timeLeft = Math.max(0, Math.floor((end - Date.now()) / 1000));
            $('.mpi-roundinfo-time', this.dom).text(timeLeft.formatDurationWorkProgress());
            if (timeLeft == 0) {
                window.clearInterval(this.refreshInterval);
            }
        }.bind(this), 1000);
    },
    addHelpButton: function () {
        var ui_eventSys = this.ui_eventSys;
        $('.mpi-buttons', this.dom).append($(new west.gui.Iconbutton(new west.gui.Icon('help'), function () {
            ui_eventSys.emit('help', 'open');
        }).setTitle("Помощь").addClass('help').getMainDiv()));
        return this;
    }
});

west.define('west.mission.ui.RespawnTimer', null, {
    domSkel: '<div class="mpi-respawn-timer"><div class="countdown inlineblock" /></div>',
    domSkelRound: '<div class="round-timer inlineblock">',
    init: function (entity, eventSys) {
        this.entity = entity;
        this.dom = $(this.domSkel);
        this.eventSys = eventSys;
        this.shown = false;
        this.eventSys.on('game.respawnIn', this.update, this);
        this.update(entity);
    },
    update: function (respawner) {
        if (this.entity.id != respawner.id)return;
        if (undefined === this.entity.props.respawnIn) {
            this.hide();
            return;
        }
        if (!this.shown)this.show();
        $('.round-timer', this.dom).remove();
        $('.countdown', this.dom).text(this.entity.props.respawnIn);
        for (var i = 0; i < this.entity.props.respawnIn; i++) {
            this.dom.prepend($(this.domSkelRound));
            this.dom.append($(this.domSkelRound));
        }
    },
    show: function () {
        this.dom.fadeIn();
        this.shown = true;
    },
    hide: function () {
        this.dom.fadeOut();
        this.shown = false;
    }
});

west.define('west.mission.ui.Team', null, {
    domSkel: '<div class="teamlist">' + '  <div class="team-name header-text"></div>' + '  <div class="team-image"></div>' + '  <div class="team-players"></div>' + '  <div class="team-players-footer">' + '    <div class="toggle"></div>' + '  </div>' + '</div>',
    domSkelPlayer: '<div class="player">' + '  <div class="avatar"></div>' + '  <div class="teamlist-health-outer"><div class="teamlist-health-inner" /></div>' + '  <div class="teamlist-highlight"></div>' + '  <div class="mpi-avatarhint mpi-disconnected-avatarhint"></div>' + '  <div class="mpi-avatarhint mpi-dead-avatarhint" title="' + 'Лишён сознания' + '"></div>' + '</div>',
    init: function (team, ownTeam, eventSys) {
        this.eventSys = eventSys;
        this.players = {};
        this.dom = $(this.domSkel);
        this.dom.addClass((team.id == 1) ? 'team-red' : 'team-blue');
        this.dom.addClass((ownTeam) ? 'team-left' : 'team-right');
        $('.team-name', this.dom).text(team.name);
        this.dom.on('click.team', '.toggle', this.onSizeToggle_.bind(this));
        team.entities.forEach(function (player) {
            var el = $(this.domSkelPlayer).data('entityId', player.id);
            this.players[player.id] = el;
            $('.avatar', el).append(player.data.avatar.small);
            this.markConnectionStatus(el, player);
            var popup = new ItemPopup(ItemManager.get(player.data.weapon), {
                show_sell_price: false,
                show_skills: false,
                show_reqs: false,
                show_set: false,
                show_auctionable: false,
                show_lifetime: false,
                character: {level: player.data.level}
            }).popup;
            popup.setXHTML('<div class="mpi_popup player_info">'
                + '<div class="name">' + player.data.name + '</div>'
                + '<div class="health">'
                + '<span class="current"></span> / <span class="max"></span>'
                + '<div class="teamlist-health-outer"><div class="teamlist-health-inner"></div></div>'
                + '(<span class="percent"></span>%)'
                + '</div>'
                + '<div><img src="https://westrus.innogamescdn.com/images/fort/battle/divider.png" alt="" /></div>'
                + '</div>'
                + popup.getXHTML(true));
            el.addMousePopup(popup);
            this.updateHealth_(player.id, player.getCurHealth(true), player.getMaxHealth(), player.getCurHealth());
            this.updateRespawn_({id: player.id, respawnsIn: player.props.respawnIn});
            $('.team-players', this.dom).append(el);
        }, this);
        $('.team-players', this.dom).on('mouseenter.team', '.player', this.onMouseenter_.bind(this)).on('mouseleave.team', '.player', this.onMouseleave_.bind(this)).on('click.team', '.player', this.onMouseclick_.bind(this));
        this.eventSys.on('cellEntity.health_changed', this.updateHealth_, this);
        this.eventSys.on('game.respawnIn', this.updateRespawn_, this);
        this.eventSys.on('ui.entityHover', this.onHover_, this);
        this.eventSys.on('ui.entityBlur', this.onBlur_, this);
    },
    updateConnectionStatus: function (team) {
        team.entities.forEach(function (player) {
            this.markConnectionStatus(this.players[player.id], player);
        }, this);
    },
    markConnectionStatus: function ($el, player) {
        var $icon = $('.mpi-disconnected-avatarhint', $el);
        $el.toggleClass('disconnected', !player.connected).toggleClass('idle', player.idle).toggleClass('ragequit', player.ragequit);
        if (player.connected) {
            $icon.removeMousePopup();
        } else {
            if (player.idle) {
                $icon.addMousePopup('Бездействует');
                return this;
            } else if (player.ragequit) {
                $icon.addMousePopup('Игрок покинул перестрелку');
                return this;
            }
            $icon.addMousePopup('Отключен');
        }
        return this;
    },
    updateHealth_: function (entityId, percent, max, current) {
        var el = this.players[entityId], warn = percent < 10, popup, popup_xhtml;
        if (!el)return;
        $('.teamlist-health-inner', el).width(percent + '%').toggleClass('danger', warn);
        popup = el.getMousePopup();
        if (popup) {
            popup_xhtml = $('<div></div>').html(popup.getXHTML(true));
            $('.player_info', popup_xhtml).toggleClass('danger', warn);
            $('.current', popup_xhtml).text(current);
            $('.max', popup_xhtml).text(max);
            $('.percent', popup_xhtml).text(percent);
            $('.teamlist-health-inner', popup_xhtml).width(percent + '%');
            popup.setXHTML(popup_xhtml.html());
        }
    },
    updateRespawn_: function (respawner) {
        var el = this.players[respawner.id];
        if (!el)return;
        if (respawner.respawnsIn) {
            el.addClass('dead');
            $('.teamlist-highlight', el).text(respawner.respawnsIn);
        } else {
            el.removeClass('dead');
            $('.teamlist-highlight', el).empty();
        }
    },
    onMouseenter_: function (ev) {
        this.eventSys.emit('ui.entityHover', $(ev.currentTarget).data('entityId'));
    },
    onMouseleave_: function (ev) {
        this.eventSys.emit('ui.entityBlur', $(ev.currentTarget).data('entityId'));
    },
    onMouseclick_: function (ev) {
        this.eventSys.emit('ui.entityClick', $(ev.currentTarget).data('entityId'));
    },
    onSizeToggle_: function (ev) {
        this.dom.toggleClass('small');
    },
    onHover_: function (entityId) {
        var el = this.players[entityId];
        if (!el)return;
        $('.teamlist-highlight', el).addClass('hover');
    },
    onBlur_: function (entityId) {
        var el = this.players[entityId];
        if (!el)return;
        $('.teamlist-highlight', el).removeClass('hover');
    }
});

west.define('west.mission.ui.playerinfo.Info', null, {
    domSkel: '<div id="mpi-playerinfo">' + '  <div id="mpi-playerinfo-content"></div>' + '  <div id="mpi-playerinfo-toggler"></div>' + '</div>',
    init: function (entities, ownEntity, eventSys) {
        this.eventSys = eventSys;
        this.current = null;
        this.elements = this.createElements(entities);
        this.dom = $(this.domSkel);
        this.update_(ownEntity.id);
        this.eventSys.on('cellEntity.health_changed', this.updateHealth_, this);
        this.eventSys.on('game.respawnIn', this.updateRespawn_, this);
        this.eventSys.on('ui.entityClick', this.update_, this);
        $('#mpi-playerinfo-toggler', this.dom).on('click', this.onToggle_.bind(this));
    },
    createElements: function (entities) {
        var elements = {};
        west.common.forEach(entities, function (entity) {
            elements[entity.id] = new west.mission.ui.playerinfo.Element(entity);
        });
        return elements;
    },
    update_: function (entityId) {
        var element = this.elements[entityId];
        if (!element)return;
        if (this.current) {
            this.current.unlisten();
        }
        this.current = element.update().listen();
        this.current.dom.appendTo($('#mpi-playerinfo-content', this.dom).empty());
    },
    updateHealth_: function (entityId, percent, max, current) {
        if (this.current.entity.id !== entityId)return;
        this.current.updateHealth();
    },
    updateRespawn_: function (respawner) {
        if (this.current.entity.id !== respawner.id)return;
        this.current.updateRespawn();
    },
    onToggle_: function () {
        this.dom.toggleClass('hidden');
    }
});

west.define('west.mission.ui.playerinfo.Element', null, {
    domSkel: '<div class="name header-text"></div>' + '  <div class="details">' + '    <div class="mpi-playerinfo-avatar"></div>' + '    <div class="mpi-playerinfo-highlight teamlist-highlight"></div>' + '    <div class="mpi-playerinfo-infos"></div>' + '  </div>' + '  <div class="mpi-playerinfo-health-outer">' + '    <div class="mpi-playerinfo-health-inner"></div>' + '    <div class="mpi-playerinfo-health">' + '       <span class="current">99999</span> / ' + '       <span class="max">99999</span> ' + '       <span class="percent">(100%)</span>' + '    </div>' + '  </div>' + '  <div class="states"></div>' + '</div>',
    domSkelInfo: '<div class="mpi-playerinfo-row">' + '  <div class="icon"></div>' + '  <div class="text"></div>' + '</div>',
    init: function (entity) {
        this.entity = entity;
        this.created = false;
    },
    update: function () {
        if (!this.created)this.createDOM_();
        this.updateHealth();
        this.updateStates();
        this.updateRespawn();
        return this;
    },
    updateHealth: function () {
        if (!this.created)this.createDOM_();
        $('.mpi-playerinfo-health-inner', this.dom).width(this.entity.getCurHealth(true) + '%');
        $('.percent', this.dom).text('(' + this.entity.getCurHealth(true) + '%)');
        $('.max', this.dom).text(this.entity.getMaxHealth());
        $('.current', this.dom).text(this.entity.getCurHealth());
    },
    updateStates: function () {
        if (!this.created)this.createDOM_();
        var statesEl = this.dom.last().empty();
        west.common.forEach(this.entity.states, function (abTypes, side) {
            west.common.forEach(abTypes, function (_, abType) {
                statesEl.append($('<div class="state ' + side + ' mpi-ability s-12 mpi-ability-' + abType + '" />'));
            }, this);
        }, this);
    },
    updateRespawn: function () {
        if (this.entity.props.respawnIn) {
            $('.mpi-playerinfo-highlight', this.dom).addClass('dead').text(this.entity.props.respawnIn);
        } else {
            $('.mpi-playerinfo-highlight', this.dom).removeClass('dead').empty();
        }
    },
    listen: function () {
        this.entity.events.state_updated.attach(this.updateStates, this);
        return this;
    },
    unlisten: function () {
        this.entity.events.state_updated.detach(this.updateStates, this);
        return this;
    },
    createDOM_: function () {
        this.dom = $(this.domSkel);
        var character = {level: this.entity.data.level};
        var damage = ItemManager.get(this.entity.data.weapon).getDamage(character);
        var team = $(this.domSkelInfo);
        $('.text', team).text(this.entity.team.name);
        $('.icon', team).text('GN').addMousePopup('Название банды');
        var cclass = $(this.domSkelInfo);
        $('.text', cclass).text(Game.InfoHandler.getLocalString4Charclass(this.entity.data.cclass));
        $('.icon', cclass).append('<img class="cclass-icon" src="https://westrus.innogamescdn.com/images/class_choose/class_' + this.entity.data.cclass + '.png" />' + '<div class="cclass-level">' + this.entity.data.level + '</div>').addMousePopup('Уровень персонажа');
        var weapon = $(this.domSkelInfo);
        $('.text', weapon).text(s('%1 - %2', damage.min, damage.max));
        $('.icon', weapon).append('<div class="mpi-weapon inlineblock"></div>').addMousePopup(new ItemPopup(ItemManager.get(this.entity.data.weapon), {
            show_sell_price: false,
            show_skills: false,
            show_reqs: false,
            show_set: false,
            show_auctionable: false,
            show_lifetime: false,
            character: character
        }).getXHTML());
        this.dom.first().text(this.entity.data.name);
        $('.mpi-playerinfo-avatar', this.dom).append(this.entity.data.avatar.big);
        $('.mpi-playerinfo-infos', this.dom).append(team, cclass, weapon);
        this.created = true;
    }
});

west.define('west.mission.ui.mode.Domination', null, {
    domStageSkel: '<div class="mpi-mode-domination">' + '<div class="mpi-mode-zones"></div>' + '</div>',
    domZoneSkel: '<div class="mpi-mode-zone zone_%1 catch-0 dominate-0"></div>',
    domTeamSkel: '<div class="team"></div>',
    init: function (modeSettings, ownTeamId, teamInfo, eventSys, modeStatus, zonesInfo, gameSettings) {
        this.domStage = $(this.domStageSkel);
        this.domTeam = [];
        this.settings = modeSettings;
        this.eventSys = eventSys;
        this.ownTeamId = ownTeamId;
        this.zonesInfo = zonesInfo;
        this.teamInfo = teamInfo;
        this.gameSettings = gameSettings;
        this.team_progress = {};
        this.zone_progress = {};
        this.createUi(modeStatus);
        this.eventSys.on('mode.updated', this.update.bind(this));
    },
    append: function (parentDom) {
        $('.mpi-ui-topbar .mpi-teamsinfo', parentDom).append(this.domTeam);
        $('.mpi-ui-topbar .mpi-stageinfo', parentDom).append(this.domStage);
        return this;
    },
    createUi: function (modeStatus) {
        var that = this, ownTeamId = this.ownTeamId, teamInfo = this.teamInfo, zonesInfo = this.zonesInfo, points_to_win = this.settings.pointsToWin;
        west.common.forEach(modeStatus.counter, function (points, team_id) {
            var $team = $(that.domTeamSkel).addClass('team_' + team_id).addClass(team_id === ownTeamId ? 'left' : 'right'), team_progress = new west.gui.Progressbar(points, points_to_win).setTextOnly(true).setColor(1 == team_id ? 'mpi_red' : 'blue').setDirection(team_id === ownTeamId ? 'rtl' : 'ltr');
            that.team_progress[team_id] = team_progress;
            $team.html(team_progress.getMainDiv());
            that.domTeam.push($team);
        });
        var $zones = [];
        west.common.forEach(modeStatus.zones, function (zone, id) {
            var $zone, zone_progress;
            $zone = $(s(this.domZoneSkel, id));
            zone_progress = new tw2widget.gui.CircleProgressbarCss(0, 3);
            $zone.append(zone_progress.getMainDiv());
            zone_progress.setTorus(true).setSize(64).addClass('zone_round_progress');
            $zone.append(zone_progress.getMainDiv());
            if (zonesInfo[id] && zonesInfo[id].props.name) {
                $zone.addMousePopup(zonesInfo[id].props.name);
            }
            $zones.push($zone);
            that.zone_progress[id] = zone_progress;
        }, this);
        $('.mpi-mode-zones', this.domStage).empty().append($zones);
        this.update(modeStatus);
        return this;
    },
    update: function (modeStatus) {
        west.common.forEach(modeStatus.counter, function (points, teamId) {
            this.updatePoints_(teamId, points);
        }, this);
        west.common.forEach(modeStatus.zones, this.updateZone_, this);
        return this;
    },
    updatePoints_: function (teamId, points) {
        $('.team_' + teamId + ' .value', this.dom).text(s('%1 / %2', points, this.settings.pointsToWin));
        if (this.team_progress && this.team_progress[teamId]) {
            this.team_progress[teamId].setValue(points);
        }
    },
    updateZone_: function (zone, id) {
        var capturingTeam, $zone, combatText;
        capturingTeam = zone.status > 0 ? 1 : 2;
        $zone = $('.mpi-mode-zone.zone_' + id, this.domStage);
        $zone.attr('class', $zone.attr('class').replace(/dominate-\d/, 'dominate-' + zone.owner));
        $zone.attr('class', $zone.attr('class').replace(/catch-\d/, 'catch-' + capturingTeam));
        if (this.zone_progress[id]) {
            this.zone_progress[id].setCurr(Math.abs(zone.status));
        }
        if (zone.owner) {
            combatText = new west.mission.CombatText({
                top: $zone.height() / 2 - 12,
                left: -6
            }, null, null, {reset_top_start_offset: true, move_coord: {top: 43, left: 0}});
            combatText.setText('+1');
            $zone.append(combatText.divMain);
            combatText.animate().setPaused(false);
        }
    }
});

west.define('west.mission.ui.timeline.Element', null, {
    domSkel: '<div class="mpi-ability s-33"></div>',
    size: {x: 33, y: 33, spacing: 2},
    position: null,
    layout: 'vertical',
    init: function (data, $rootParent, layout, eventSys) {
        var that = this;
        this.data = data;
        this.$rootParent = $rootParent;
        if (!data) {
            return this;
        }
        if (layout) {
            this.layout = layout;
        }
        this.eventSys = eventSys;
        this.create().addEventListeners();
        return this;
    },
    getId: function () {
        return this.data.id;
    },
    getType: function () {
        return this.data.type;
    },
    getSource: function () {
        return this.data.src;
    },
    isOwn: function () {
        return this.data.own;
    },
    isTeam: function () {
        return this.data.team;
    },
    isUnpositioned: function () {
        return null === this.position;
    },
    getLayout: function () {
        return this.layout;
    },
    setLayout: function (new_layout) {
        if (this.getLayout() !== new_layout) {
            this.layout = new_layout;
            this.dom.removeAttr('style');
            this.moveTo(this.position);
        }
    },
    getSize: function () {
        return this.size;
    },
    create: function () {
        this.dom = $(this.domSkel).addClass('mpi-ability-' + this.getType());
        this.dom[0].commandId = this.getId();
        if (this.isOwn()) {
            this.dom.addClass('own');
            this.dom.append($('<div class="cancel_command tw2gui_window_buttons_close"></div>').addMousePopup('Отменить действие'));
        } else if (this.isTeam()) {
            this.dom.addClass('team');
            this.dom.css('color', this.data.team_color);
        } else {
            this.dom.addClass('enemy');
            this.dom.css('color', this.data.team_color);
        }
        if (this.$rootParent) {
            this.dom.appendTo(this.$rootParent);
        }
        return this;
    },
    addEventListeners: function () {
        this.dom.on('click.timeline_element', '.cancel_command', this.handleCancelRequest.bind(this)).on('mouseenter.timeline_element', this.handleMouseEnter.bind(this)).on('mouseleave.timeline_element', this.handleMouseLeave.bind(this));
    },
    removeEventListeners: function () {
        this.dom.off('.timeline_element');
    },
    handleCancelRequest: function () {
        this.eventSys.emit('game.cancelCommand', this.getId());
        this.handleMouseLeave();
    },
    handleMouseEnter: function () {
        this.eventSys.emit('ui.entityHover', this.getSource());
    },
    handleMouseLeave: function () {
        this.eventSys.emit('ui.entityBlur', this.getSource());
    },
    setPosition: function (position) {
        var that = this;
        if (this.isUnpositioned()) {
            if (this.isTeam()) {
                window.setTimeout(function () {
                    that.moveTo(position);
                }, 25);
            } else {
                this.squeezeIn(position);
            }
        } else {
            this.moveTo(position);
        }
        this.position = position;
    },
    moveTo: function (position) {
        if (this.layout === 'vertical') {
            this.dom.css('bottom', position * (this.getSize().y + this.getSize().spacing));
        } else {
            this.dom.css('right', position * (this.getSize().x + this.getSize().spacing));
        }
    },
    squeezeIn: function (position) {
        var that = this;
        this.dom.addClass('new');
        this.moveTo(position);
        window.setTimeout(function () {
            that.dom.removeClass('new');
        }, 150);
    },
    fall: function () {
        this.setPosition(this.position - 1);
    },
    jump: function () {
        this.setPosition(this.position + 1);
    },
    cancel: function () {
        this.dom.addClass('cancelled');
        this.remove();
    },
    active: function () {
        this.dom.addClass('active').removeAttr("style");
    },
    done: function () {
        this.dom.addClass('done');
        this.remove();
    },
    remove: function () {
        var that = this;
        window.setTimeout(function () {
            if (that.dom) {
                that.dom.remove();
                delete that.dom;
            }
        }, 500);
    },
    destroy: function () {
        this.removeEventListeners();
        this.remove();
        delete this.$rootParent;
        delete this.eventSys;
    }
});

west.define('west.mission.ui.timeline.Timeline', null, {
    game: null,
    queueElements: null,
    queueOrder: null,
    domParent: '#mission-map-container .mpi-ui',
    dom: null,
    content: null,
    layout: 'vertical',
    size: {min: 1, current: 10},
    mousewheel: {delay: 200, next: 0},
    domSkel: ''
    + '<div class="mpi-timeline animate">'
    + '<div class="header">'
    + '<div class="drag"></div>'
    + '<div class="rotate"></div>'
    + '<div class="toggle"></div>'
    + '</div>'
    + '<div class="body">'
    + '<div class="orders"></div>'
    + '</div>'
    + '<div class="footer">'
    + '<div class="scroll_down"></div>'
    + '</div>'
    + '</div>',
    init: function (game, eventSys) {
        this.game = game;
        this.eventSys = eventSys;
        this.queueElements = {};
        this.queueOrder = [];
        this.render().makeDraggable().addEventListeners().reDraw();
        return {
            loadInitCommands: this.loadInitCommands,
            rotate: this.rotate,
            toggle: this.toggle,
            checkCollisions: this.checkCollisions,
            destroy: this.destroy
        };
    },
    loadInitCommands: function (commands) {
        west.common.forEach(commands, function (command) {
            this.addCommand(command);
        }, this);
        this.sortQueue();
        this.rePositionQueue();
    },
    rotate: function () {
        this.setLayout('vertical' === this.layout ? 'horizontal' : 'vertical');
    },
    toggle: function () {
        var new_size = (10 === this.size.current ? 1 : 10);
        this.dom.toggleClass('small', 1 === new_size);
        this.setSize(new_size);
    },
    render: function () {
        this.dom = $(this.domSkel).appendTo(this.domParent);
        this.content = $('.orders', this.dom);
        var l10n = 'Полоса действий %1 здесь показаны все запланированные действия твоей команды. %2 В анимированном виде все запланированные действия будут показаны в порядке исполнения.'.split('%2');
        $('.header, .footer', this.dom).addMousePopup({
            teaser: '<strong>' + s(l10n[0], '</strong><br>'),
            content: l10n[1]
        });
        return this;
    },
    makeDraggable: function () {
        this.dom.jqDrag($('.drag', this.dom), {
            onStart: this.handleDragStart.bind(this),
            onStop: this.handleDragStop.bind(this),
            onDrag: this.handleDrag.bind(this)
        });
        return this;
    },
    reDraw: function () {
        var ability = new west.mission.ui.timeline.Element(), size = this.size.current, layout = ('vertical' === this.layout ? 'vertical' : 'horizontal'), win = {
            width: $(window).width(),
            height: $(window).height()
        }, timeline = {
            is_positioned: !!this.dom.attr('style'),
            width: 0,
            height: 0,
            current: {offset: {top: win.height, left: win.width}},
            init: {vertical: {offset: {top: 60, left: 10}}, horizontal: {offset: {top: 105, left: 10}}}
        }, new_styles = {};
        if (timeline.is_positioned) {
            timeline.current = {
                offset: this.dom.offset(),
                size: {width: this.dom.outerWidth(), height: this.dom.outerHeight()}
            };
        }
        if ('vertical' === layout) {
            this.dom.removeClass('horizontal').addClass('vertical');
        } else {
            this.dom.removeClass('vertical').addClass('horizontal');
        }
        this.dom.removeAttr('style');
        timeline.offset = {
            top: parseInt(this.dom.css('padding-top'), 10) + parseInt(this.dom.css('padding-bottom'), 10),
            left: parseInt(this.dom.css('padding-left'), 10) + parseInt(this.dom.css('padding-right'), 10)
        };
        if ('vertical' === layout) {
            timeline.width = parseInt($('.header', this.dom).css('width'), 10);
            timeline.height = size * (ability.getSize().y + ability.getSize().spacing);
        } else {
            timeline.width = size * (ability.getSize().x + ability.getSize().spacing);
            timeline.height = parseInt($('.header', this.dom).css('height'), 10);
        }
        new_styles = {
            'height': timeline.height,
            'width': timeline.width,
            'top': Math.max(10, Math.min(timeline.current.offset.top, win.height - (timeline.height + timeline.offset.top + (timeline.is_positioned ? 0 : timeline.init[layout].offset.top)))),
            'left': Math.max(10, Math.min(timeline.current.offset.left, win.width - (timeline.width + timeline.offset.left + (timeline.is_positioned ? 0 : timeline.init[layout].offset.left))))
        };
        this.dom.css(new_styles);
    },
    checkCollisions: function () {
        var layout = ('vertical' === this.layout ? 'vertical' : 'horizontal'), team_right = $('.teamlist.team-right'), available_height, timeline_height;
        if ('vertical' === layout && team_right.length) {
            available_height = $(window).height() - (team_right.offset().top + team_right.outerHeight());
            timeline_height = this.dom.outerHeight();
            if (timeline_height > available_height) {
                this.dom.removeAttr('style');
                this.setLayout('horizontal');
            }
        }
        return this;
    },
    addEventListeners: function () {
        this.removeEventListeners();
        var eventSys = this.eventSys;
        EventHandler.listen('mpi.onAbilityStart', this.handleCommandAnimationStart, this);
        EventHandler.listen('mpi.onAbilityDone', this.handleCommandAnimationEnd, this);
        EventHandler.listen('mpi.onAbilityDropped', this.handleCommandCancel, this);
        EventHandler.listen('window_resized', this.handleWindowResize, this);
        eventSys.on('commandqueue.added', this.handleCommandAdd, this);
        eventSys.on('commandqueue.cancelled', this.handleCommandCancel, this);
        eventSys.on('game.animationEnds', this.handleAnimationPhaseEnd, this);
        eventSys.on('game.animationStarts', this.handleAnimationPhaseStart, this);
        this.dom.on('mousewheel.timeline', this.handleMouseWheel.bind(this)).on('click.timeline', '.rotate', this.rotate.bind(this)).on('click.timeline', '.toggle', this.toggle.bind(this));
        return this;
    },
    removeEventListeners: function () {
        EventHandler.unlistenByContext('mpi.onAbilityStart', this);
        EventHandler.unlistenByContext('mpi.onAbilityDone', this);
        EventHandler.unlisten('window_resized', this.handleWindowResize, this);
        this.dom.off('.timeline');
        return this;
    },
    getContent: function () {
        return this.content;
    },
    sortQueue: function () {
        this.queueOrder.sort(function (a, b) {
            return a - b;
        });
        return this;
    },
    rePositionQueue: function () {
        var i = 0, l = this.queueOrder.length;
        for (i; i < l; i++) {
            this.queueElements[this.queueOrder[i]].setPosition(i);
        }
        return this;
    },
    createElement: function (data) {
        if (data.src) {
            $.extend(data, {
                own: this.game.entities[data.src] === this.game.ownEntity,
                team: this.game.entities[data.src].team.id === this.game.ownEntity.team.id,
                team_color: this.game.entities[data.src].team.color
            });
        }
        return new west.mission.ui.timeline.Element(data, this.getContent(), this.layout, this.eventSys);
    },
    addCommand: function (data) {
        if (this.queueElements[data.id]) {
            return this;
        }
        this.queueElements[data.id] = this.createElement(data);
        this.queueOrder.push(data.id);
        return this;
    },
    removeCommand: function (data) {
        var ids = this.queueOrder, id = data.id, i = ids.indexOf(id), l = ids.length;
        if (!!~i) {
            ids.splice(i, 1);
            l--;
            for (i; i < l; i++) {
                this.queueElements[ids[i]].fall();
            }
        }
    },
    destroyCommand: function (data) {
        this.removeCommand(data);
        this.queueElements[data.id].destroy();
        delete this.queueElements[data.id];
    },
    parseRoundResults: function (commands) {
        var i = 0, l = commands.length;
        this.queueOrder = [];
        for (i; i < l; i++) {
            if (undefined === commands[i].id)continue;
            this.queueOrder.push(commands[i].id);
            if (this.queueElements[commands[i].id]) {
                continue;
            }
            this.queueElements[commands[i].id] = this.createElement(commands[i]);
        }
        this.rePositionQueue();
    },
    scroll: function (direction) {
        if (this.queueOrder.length > this.size) {
        }
    },
    setSize: function (size) {
        if (size) {
            this.size.current = (size < this.size.min ? this.size.min : size);
            this.reDraw();
        }
    },
    setLayout: function (new_layout) {
        if (new_layout !== this.layout) {
            this.layout = new_layout;
            this.reDraw();
            var i = 0, l = this.queueOrder.length;
            for (i; i < l; i++) {
                this.queueElements[this.queueOrder[i]].setLayout(this.layout);
            }
        }
    },
    handleMouseWheel: function (e, delta) {
        e.preventDefault();
        var wheel_delay = this.mousewheel.delay, next_mousewheel = this.mousewheel.next, date_now = new Date().getTime(), direction = delta > 0 ? 'up' : 'down';
        if (date_now > next_mousewheel) {
            this.mousewheel.next = (date_now + wheel_delay);
            this.scroll(direction);
        }
        return false;
    },
    handleDragStart: function (e) {
        this.dragData = {
            browser_width: $(window).width(),
            browser_height: $(window).height(),
            timeline_width: this.dom.outerWidth(),
            timeline_height: this.dom.outerHeight()
        };
        this.dom.removeClass('animate');
    },
    handleDrag: function (e, css) {
        css.left = Math.min(this.dragData.browser_width - this.dragData.timeline_width - 10, Math.max(10, css.left));
        css.top = Math.min(this.dragData.browser_height - this.dragData.timeline_height - 10, Math.max(10, css.top));
    },
    handleDragStop: function (e, css) {
        delete this.dragData;
        this.dom.addClass('animate');
    },
    handleAnimationPhaseStart: function (commands_queue) {
        this.parseRoundResults(commands_queue);
        this.dom.addClass('animating');
    },
    handleAnimationPhaseEnd: function () {
        this.dom.removeClass('animating');
    },
    handleCommandAdd: function (ability_data) {
        this.addCommand(ability_data).sortQueue().rePositionQueue();
    },
    handleCommandCancel: function (ability_data) {
        var ability = this.queueElements[ability_data.id];
        if (ability) {
            ability.cancel();
            this.destroyCommand(ability_data);
        }
    },
    handleCommandAnimationStart: function (ability_data) {
        var ability = this.queueElements[ability_data.id];
        if (ability) {
            ability.active();
            this.removeCommand(ability_data);
        }
    },
    handleCommandAnimationEnd: function (ability_data) {
        var ability = this.queueElements[ability_data.id];
        if (ability) {
            ability.done();
            this.destroyCommand(ability_data);
        }
    },
    handleWindowResize: function () {
        this.reDraw();
    },
    destroy: function () {
        west.common.forEach(this.queueElements, function (el, i) {
            el.destroy();
        });
        delete this.game;
        delete this.eventSys;
        delete this.queueElements;
        delete this.queueOrder;
        this.removeEventListeners();
        delete this.dom;
    }
});

$(function ($) {
    'use strict';
    west.define('west.mission.ui.notifications.Manager', 'west.game.base_class', {
        game: null,
        ui_eventSys: null,
        local_eventSys: null,
        entities: null,
        own_entity: null,
        phase: null,
        messages: [],
        own: {},
        $phase: null,
        $messages: null,
        domParent: '#mission-map-container .mpi-ui',
        dom: null,
        domSkel: ''
        + '<div class="mpi-notifications mpi-notifications-phase"></div>'
        + '<div class="mpi-notifications mpi-notifications-message"></div>',
        l10n: {
            'entity': {
                own: {
                    'dead': 'Тебя обезвредили!',
                    'resurrected': "Ты вновь в игре!",
                    'resurrection_in': function (rounds_count) {
                        return s('Возвращение через %1', ' ' + rounds_count + ' ' + ngettext('раунд', new Array('раунд', 'раунда', 'раундов'), rounds_count));
                    }
                },
                'dead': 'обезврежен!',
                'resurrected': 'снова в игре!',
                'ragequit': 'покинул сражение',
                'reconnected': 'вернулся в сражение',
                'idle_kick': 'был выброшен из-за бездействия.'
            }, 'zone': {
                'captured': function (owner) {
                    return s('Банда %1 захватывает стратегический пункт', owner);
                }, 'not_occupied': 'Стратегический пункт не занят'
            }
        },
        init: function (game, eventSys, entities, own_entity, teams, zones) {
            this.game = game;
            this.ui_eventSys = eventSys;
            this.local_eventSys = new west.EventEmitter();
            this.entities = entities;
            this.own_entity = own_entity;
            this.teams = teams;
            this.zones = zones;
            this.phase = null;
            this.messages = [];
            this.own = {};
            this.render().addEventListeners();
        },
        render: function () {
            this.dom = $(this.domSkel).appendTo(this.domParent);
            this.$phase = this.dom.filter('.mpi-notifications-phase');
            this.$messages = this.dom.filter('.mpi-notifications-message');
            return this;
        },
        addNotification: function (notification_id, notification_data) {
            var Note = this._getNotification(notification_id);
            if (Note) {
                Note = new Note(notification_data, this.local_eventSys);
                switch (Note.getType()) {
                    case'phase':
                        if (this.phase) {
                            this.phase.destroy();
                        }
                        this.phase = Note;
                        this.$phase.append(Note.getDom());
                        window.setTimeout(this.cleanup.bind(this), 2000);
                        break;
                    case'entity':
                        if ('entity.dead' === notification_id && Note.isOwn()) {
                            if (this.own.dead) {
                                this.own.dead.destroy();
                            }
                            this.own.dead = Note;
                        }
                    case'team':
                    case'message':
                    default:
                        this.messages.push(Note);
                        this.$messages.append(Note.getDom());
                        break;
                }
            }
        },
        addEventListeners: function () {
            this.removeEventListeners();
            var eventSys = this.ui_eventSys, l_eventSys = this.local_eventSys;
            eventSys.on('game.stageReached', this.handleStageReached, this);
            eventSys.on('game.animationStarts', this.handleAnimationPhaseStart, this);
            eventSys.on('game.animationEnds', this.handleAnimationPhaseEnd, this);
            eventSys.on('game.respawnIn', this.handleRespawn, this);
            eventSys.on('player.ragequit', this.handleRagequit, this);
            eventSys.on('player.reconnected', this.handleReconnect, this);
            eventSys.on('player.idle.kick', this.handleIdleKick, this);
            eventSys.on('game.zones.status', this.handleZonesStatus, this);
            l_eventSys.on('entity.action', this.handleEntityAction, this);
            l_eventSys.on('zone.action', this.handleZoneAction, this);
            return this;
        },
        removeEventListeners: function () {
            return this;
        },
        handleStageReached: function (team_info, stage) {
            if (this.own_entity.team.id !== team_info.id) {
                return;
            }
            this.addNotification('team', {message: stage.desc, team: team_info, own: true});
        },
        handleAnimationPhaseStart: function () {
            this.addNotification('phase.action');
        },
        handleAnimationPhaseEnd: function () {
            this.addNotification('phase.planning');
        },
        handleRespawn: function (respawner) {
            var l10n = this.l10n.entity, own = respawner.id === this.own_entity.id, dead = !!respawner.respawnsIn;
            if (own) {
                this.addNotification('entity.dead', {
                    title: dead ? l10n.own.dead : false,
                    message: dead ? l10n.own.resurrection_in(respawner.respawnsIn) : l10n.own.resurrected,
                    entity: this.entities[respawner.id],
                    own: own,
                    dead: dead
                });
            } else if (!dead || respawner.respawnsIn === 3) {
                this.addNotification('entity.dead', {
                    message: dead ? l10n.dead : l10n.resurrected,
                    entity: this.entities[respawner.id],
                    own: own,
                    dead: dead
                });
            }
        },
        handleRagequit: function (entity_id) {
            this.addNotification('message', {
                title: this.entities[entity_id].data.name,
                message: this.l10n.entity.ragequit
            });
        },
        handleReconnect: function (entity_id) {
            this.addNotification('message', {
                title: this.entities[entity_id].data.name,
                message: this.l10n.entity.reconnected
            });
        },
        handleIdleKick: function (entity_id) {
            this.addNotification('message', {
                title: this.entities[entity_id].data.name,
                message: this.l10n.entity.idle_kick
            });
        },
        handleZonesStatus: function (zones_data) {
            var zones = this.zones, zone_data;
            west.common.forEach(zones_data, function (zone, id) {
                if (zone.owner !== zone.prev_owner) {
                    zone_data = zones[id];
                    this.addNotification('zone', {
                        zone: zone_data,
                        message: zone.owner ? this.l10n.zone.captured(this.teams[zone.owner].name) : this.l10n.zone.not_occupied
                    });
                }
            }, this);
        },
        handleEntityAction: function (action, id) {
            var eventSys = this.ui_eventSys;
            if ('mouseenter' === action) {
                eventSys.emit('ui.entityHover', id);
            } else {
                eventSys.emit('ui.entityBlur', id);
            }
        },
        handleZoneAction: function (action) {
            if ('mouseenter' === action) {
            } else {
            }
        },
        _getNotification: function (path, limit) {
            var namespace = 'west.mission.ui.notifications.type';
            path = namespace + '.' + path;
            limit = namespace + (limit ? '.' + limit : '');
            if (path) {
                return this._getClass('notification', path, namespace);
            }
            return undefined;
        },
        cleanup: function () {
            var phases = this.$phase.children(':not(:last-child)');
            if (phases.length) {
                phases.trigger('transitionend');
            }
        },
        destroy: function () {
            if (this.phase) {
                this.phase.destroy();
            }
            delete this.game;
            delete this.ui_eventSys;
            delete this.local_eventSys;
            delete this.entities;
            delete this.own_entity;
            delete this.teams;
            delete this.zones;
            delete this.phase;
            delete this.messages;
            delete this.own;
            this.removeEventListeners();
            delete this.$phase;
            delete this.$messages;
            if (this.dom) {
                this.dom.remove();
            }
            delete this.dom;
        }
    });
});

$(function ($) {
    'use strict';
    var class_name = 'notification', class_path = 'west.mission.ui.notifications.type', class_parent = null, class_object = {
        _namespace: class_path,
        _class_path: class_path,
        dom: null,
        domSkel: ''
        + '<div class="mpi-notification">'
        + '</div>',
        class_names: 'invisible',
        data: null,
        eventSys: null,
        type: null,
        one: false,
        visible: 2000,
        autodestroy: null,
        init: function (data, eventSys) {
            this.data = data;
            this.eventSys = eventSys;
            return this;
        },
        getType: function () {
            return this.type;
        },
        isConnor: function () {
            return this.one;
        },
        render: function () {
            var that = this, $root = $(this.domSkel), data = this.data;
            $root.addClass(this.class_names);
            this.dom = $root;
            this.addEventListeners();
            window.setTimeout(function () {
                $root.removeClass('invisible');
                if (WestUi.Focus.isFocused() && WestUi.CssAnimations.isAnimated()) {
                    $root.one('transitionend.render webkitTransitionEnd.render oTransitionEnd.render otransitionend.render', function (e) {
                        that.setAutodestruction();
                        $(this).off('.render');
                    });
                } else {
                    that.setAutodestruction();
                }
            }, 50);
            return this;
        },
        addEventListeners: function () {
            this.removeEventListeners();
            var $root = this.dom;
            $root.on('mouseenter.notification', this.handleMouseEnter.bind(this)).on('mouseleave.notification', this.handleMouseLeave.bind(this)).on('click.notification', this.handleMouseClick.bind(this));
        },
        removeEventListeners: function () {
            if (this.dom) {
                this.dom.off('.notification');
            }
            return this;
        },
        handleMouseEnter: function () {
            this.clearAutodestruction();
            return false;
        },
        handleMouseLeave: function () {
            this.setAutodestruction();
            return false;
        },
        handleMouseClick: function () {
            this.handleMouseLeave();
            this.destroy();
            return false;
        },
        setAutodestruction: function () {
            if (!this.visible) {
                return this;
            }
            this.autodestroy = window.setTimeout(this.destroy.bind(this), this.visible);
            return this;
        },
        clearAutodestruction: function () {
            if (this.autodestroy) {
                window.clearTimeout(this.autodestroy);
            }
            return this;
        },
        getDom: function () {
            if (!this.dom) {
                this.render();
            }
            return this.dom;
        },
        remove: function () {
            var $root = this.dom;
            if ($root) {
                if (WestUi.Focus.isFocused() && WestUi.CssAnimations.isAnimated()) {
                    $root.addClass('remove').one('transitionend.remove webkitTransitionEnd.remove oTransitionEnd.remove otransitionend.remove', function (e) {
                        $(this).off('.remove').removeClass('remove').detach();
                    });
                } else {
                    $root.detach();
                }
            }
            return this;
        },
        destroy: function () {
            this.clearAutodestruction().remove().removeEventListeners();
            delete this.data;
            delete this.dom;
            return this;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'notification', class_path = 'west.mission.ui.notifications.type.phase', class_parent = 'west.mission.ui.notifications.type.notification', class_object = {
        _namespace: class_path,
        _class_path: class_path,
        type: 'phase',
        one: 'There can be only one',
        init: function () {
            this.callParent.apply(this, arguments);
            this.class_names += ' phase_notification';
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'notification', class_path = 'west.mission.ui.notifications.type.phase.action', class_parent = 'west.mission.ui.notifications.type.phase.notification', class_object = {
        _class_path: class_path,
        visible: 0,
        init: function () {
            this.callParent.apply(this, arguments);
            this.class_names += ' phase_action';
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'notification', class_path = 'west.mission.ui.notifications.type.phase.planning', class_parent = 'west.mission.ui.notifications.type.phase.notification', class_object = {
        _class_path: class_path,
        init: function () {
            this.callParent.apply(this, arguments);
            this.class_names += ' phase_planning';
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'notification', class_path = 'west.mission.ui.notifications.type.message', class_parent = 'west.mission.ui.notifications.type.notification', class_object = {
        _namespace: class_path, _class_path: class_path, type: 'message', domSkel: ''
        + '<div class="mpi-notification">'
        + '<div class="icon"><span></span></div>'
        + '<h3 class="title"></h3>'
        + '<div class="description"></div>'
        + '</div>', init: function () {
            this.class_names += ' message_notification';
            this.callParent.apply(this, arguments);
        }, render: function () {
            this.callParent.apply(this, arguments);
            var $root = this.dom, data = this.data;
            $('.title', $root).text(data.title);
            $('.description', $root).text(data.message);
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'notification', class_path = 'west.mission.ui.notifications.type.team', class_parent = 'west.mission.ui.notifications.type.message.notification', class_object = {
        _namespace: class_path,
        _class_path: class_path,
        type: 'team',
        teams: ['unknown', 'red', 'blue'],
        init: function (data) {
            if (!data.team) {
                data.team = {id: 0, name: 'Unknown Team'};
                if (DEBUG) {
                    console.warn('Notification', this._class_path, 'did not receive Team information in it\'s data object');
                }
            }
            this.own = data.own;
            data.title = data.title || data.team.name;
            this.class_names += ' team_notification team_' + this.teams[data.team.id] + (data.own ? ' own' : '');
            this.callParent.apply(this, arguments);
        },
        isOwn: function () {
            return !!this.own;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'notification', class_path = 'west.mission.ui.notifications.type.entity', class_parent = 'west.mission.ui.notifications.type.team.notification', class_object = {
        _namespace: class_path, _class_path: class_path, type: 'entity', init: function (data) {
            if (!data.entity) {
                data.entity = {id: 'unknown', data: {name: 'Mysterious player'}};
                if (DEBUG) {
                    console.warn('Notification', this._class_path, 'did not receive Entitry information in it\'s data object');
                }
            } else {
                data.team = data.entity.team;
            }
            data.title = data.title || (data.own ? 'Ты' : data.entity.data.name);
            this.class_names += ' entity_notification';
            this.callParent.apply(this, arguments);
        }, handleMouseEnter: function () {
            this.callParent.apply(this, arguments);
            this.eventSys.emit('entity.action', 'mouseenter', this.data.entity.id);
            return false;
        }, handleMouseLeave: function () {
            this.callParent.apply(this, arguments);
            this.eventSys.emit('entity.action', 'mouseleave', this.data.entity.id);
            return false;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'notification', class_path = 'west.mission.ui.notifications.type.entity.dead', class_parent = 'west.mission.ui.notifications.type.entity.notification', class_object = {
        _class_path: class_path,
        init: function (data) {
            this.callParent.apply(this, arguments);
            this.dead = !!data.dead;
            this.class_names += ' entity_dead' + ' status_' + (data.dead ? 'dead' : 'resurrected');
            if (this.isOwn() && this.isDead()) {
                this.visible = 0;
            }
        },
        isDead: function () {
            return !!this.dead;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    var class_name = 'notification', class_path = 'west.mission.ui.notifications.type.zone', class_parent = 'west.mission.ui.notifications.type.message.notification', class_object = {
        _namespace: class_path, _class_path: class_path, init: function (data) {
            if (!data.zone && DEBUG) {
                console.warn('Notification', this._class_path, 'did not receive Zone information in it\'s data object');
            }
            data.title = data.title || data.zone.props.name || '';
            this.callParent.apply(this, arguments);
            this.class_names += ' zone_notification zone_' + data.zone.name;
        }, handleMouseEnter: function () {
            this.callParent.apply(this, arguments);
            this.eventSys.emit('zone.action', 'mouseenter', this.data.zone.id);
            return false;
        }, handleMouseLeave: function () {
            this.callParent.apply(this, arguments);
            this.eventSys.emit('zone.action', 'mouseleave', this.data.zone.id);
            return false;
        }
    };
    west.define(class_path + '.' + class_name, class_parent, class_object);
});

$(function ($) {
    'use strict';
    west.define('west.mission.ui.Top_bar', 'west.game.base_class', {
        game: null,
        ui_eventSys: null,
        local_eventSys: null,
        entities: null,
        own_entity: null,
        domParent: '#mission-map-container .mpi-ui',
        dom: null,
        timerUpdateInterval: null,
        timerIntervalDuration: 1000,
        timerWarn: {round: 5, placement: 20},
        state: 'round',
        roundEndDate: null,
        roundCount: '?',
        domSkel: ''
        + '<div class="mpi-ui-topbar">'
        + '<div class="header">'
        + '<div class="mpi-buttons"></div>'
        + '<div class="mpi-name header-text">Domination</div>'
        + '</div>'
        + '<div class="mpi-teamsinfo"></div>'
        + '<div class="mpi-roundinfo">'
        + '<div class="mpi-roundinfo-rounds">?</div>'
        + '<div class="mpi-roundinfo-time">--:--</div>'
        + '</div>'
        + '<div class="mpi-stageinfo"></div>'
        + '</div>',
        l10n: {},
        init: function (game, eventSys, entities, own_entity) {
            this.game = game;
            this.ui_eventSys = eventSys;
            this.local_eventSys = new west.EventEmitter();
            this.entities = entities;
            this.own_entity = own_entity;
            this.round_progress = new tw2widget.gui.CircleProgressbarCss().setTorus(true).setSize(62).addClass('round_progress');
            this.render().addEventListeners();
        },
        render: function () {
            this.dom = $(this.domSkel).appendTo(this.domParent);
            $('.mpi-roundinfo', this.dom).prepend(this.round_progress.getMainDiv());
            return this;
        },
        addEventListeners: function () {
            this.removeEventListeners();
            var eventSys = this.ui_eventSys, l_eventSys = this.local_eventSys;
            eventSys.on('game.animationStarts', this.handleAnimationPhaseStart, this);
            eventSys.on('game.animationEnds', this.handleAnimationPhaseEnd, this);
            eventSys.on('game.placement', this.handlePlacementUpdate, this);
            eventSys.on('game.round', this.handleRoundUpdate, this);
            return this;
        },
        removeEventListeners: function () {
            return this;
        },
        handleAnimationPhaseStart: function () {
            $('.mpi-roundinfo-rounds', this.dom).addClass('action').text('');
            $('.mpi-roundinfo-time', this.dom).text('--:--');
        },
        handleAnimationPhaseEnd: function () {
            $('.mpi-roundinfo-rounds', this.dom).removeClass('action').text(this.roundCount);
            this.handleTimerUpdate();
            this.setTimerUpdate();
        },
        handlePlacementUpdate: function (game) {
            this.state = 'placement';
            var placement_time = game.placementTimer;
            this.round_progress.setMax(Math.max(0, Math.floor((placement_time - Date.now()) / 1000)));
            $('.mpi-roundinfo-rounds', this.dom).addClass('placement').text('');
            if (!placement_time) {
                $('.mpi-roundinfo-time', this.dom).empty();
                return;
            }
            this.roundEndDate = placement_time;
            this.setTimerUpdate();
        },
        handleRoundUpdate: function (roundInfo) {
            this.state = 'round';
            this.roundCount = roundInfo.current;
            this.round_progress.setMax(roundInfo.duration / 1000);
            $('.mpi-roundinfo-rounds', this.dom).removeClass('placement').text(roundInfo.current);
            if (!roundInfo.duration) {
                $('.mpi-roundinfo-time', this.dom).empty();
                return;
            }
            this.roundEndDate = roundInfo.started + roundInfo.duration;
            this.setTimerUpdate();
        },
        setTimerUpdate: function () {
            this.clearTimerUpdate();
            this.timerUpdateInterval = window.setInterval(this.handleTimerUpdate.bind(this), this.timerIntervalDuration);
        },
        clearTimerUpdate: function () {
            if (this.timerUpdateInterval) {
                window.clearInterval(this.timerUpdateInterval);
            }
        },
        handleTimerUpdate: function () {
            var timeLeft = Math.max(0, Math.floor((this.roundEndDate - Date.now()) / 1000));
            $('.mpi-roundinfo', this.dom).toggleClass('warn', timeLeft <= this.timerWarn[this.state]);
            this.round_progress.setCurr(timeLeft);
            $('.mpi-roundinfo-time', this.dom).text(timeLeft.formatDurationWorkProgress());
            if (timeLeft === 0) {
                this.clearTimerUpdate();
            }
        },
        handleStageReached: function (team, stage) {
        },
        destroy: function () {
            delete this.game;
            delete this.ui_eventSys;
            delete this.local_eventSys;
            this.removeEventListeners();
            delete this.dom;
        }
    });
});

west.define('west.mission.ui.bottom_bar.Element', null, {
    domSkel: '<div class="mpi-ability s-63"><span class="mpi-ability-cooldown"></span></div>',
    init: function (data, $rootParent, eventSys) {
        this.data = data;
        this.$rootParent = $rootParent;
        if (!data) {
            return this;
        }
        this.eventSys = eventSys;
        this.create().addEventListeners();
        eventSys.on('ability.activated', this.handleAbilityActivated.bind(this));
        eventSys.on('ability.deactivated', this.handleAbilityDeactivated.bind(this));
        return this;
    },
    handleAbilityDeactivated: function (type) {
        if (type == this.getType()) {
            this.unselect();
        }
    },
    handleAbilityActivated: function (type) {
        if (type != this.getType())
            this.unselect(); else
            this.select();
    },
    getId: function () {
        return this.data.id;
    },
    setId: function (new_id) {
        this.data.id = new_id;
    },
    hasId: function () {
        return !!this.getId();
    },
    getType: function () {
        return this.data.type;
    },
    getCost: function () {
        return west.mission.Ability.Factory.get(this.getType()).cost;
    },
    setSelected: function (bool) {
        this.selected = bool;
    },
    isSelected: function () {
        return !!this.selected;
    },
    setBlocked: function (bool) {
        this.blocked = bool;
    },
    isBlocked: function () {
        return !!this.blocked;
    },
    setCooldown: function (bool) {
        this.cooldown = bool;
    },
    hasCooldown: function () {
        return !!this.cooldown;
    },
    create: function () {
        this.dom = $(this.domSkel).addClass('mpi-ability-' + this.getType());
        this.dom.append($('<div class="cancel_command tw2gui_window_buttons_close"></div>').addMousePopup('Отменить действие'));
        if (this.$rootParent) {
            this.dom.appendTo(this.$rootParent);
        }
        this.updateMouseOver();
        return this;
    },
    updateMouseOver: function () {
        var hotkey = this.getHotkey(), popup;
        if (this.dom) {
            popup = west.mission.ui.popup.Ability.create(west.mission.Ability.Factory.get(this.getType()));
            if (hotkey) {
                popup += '<div class="popup_hotkey">' + s('Горячая кнопка: %1', ' <kbd>' + hotkey + '</kbd>') + '</div>';
            }
            this.dom.addMousePopup(popup);
        }
        return this;
    },
    addEventListeners: function () {
        this.dom.on('click.bottom_bar_element', '.cancel_command', this.handleCancelRequest.bind(this)).on('click.bottom_bar_element', this.handleClick.bind(this)).on('mouseenter.bottom_bar_element', this.handleMouseEnter.bind(this)).on('mouseleave.bottom_bar_element', this.handleMouseLeave.bind(this));
    },
    removeEventListeners: function () {
        this.dom.off('.bottom_bar_element');
    },
    handleCancelRequest: function (e) {
        e.stopImmediatePropagation();
        this.eventSys.emit('ability.deactivate', this.getType(), this.getId());
        this.handleMouseLeave();
    },
    handleClick: function () {
        if (this.isBlocked() || this.hasCooldown()) {
            return this;
        }
        this.eventSys.emit('ability.activate', this.getType());
    },
    handleMouseEnter: function () {
        if (this.isSelected() || this.isBlocked() || this.hasCooldown()) {
            return this;
        }
        this.highlight();
        this.eventSys.emit('ability.preview.on', this.getType());
    },
    handleMouseLeave: function () {
        if (this.isSelected() || this.isBlocked() || this.hasCooldown()) {
            return this;
        }
        this.unhighlight();
        this.eventSys.emit('ability.preview.off', this.getType());
    },
    active: function (id) {
        this.setId(id);
        this.dom.addClass('active cancellable');
        this.block();
        this.unselect();
        return this;
    },
    cancel: function () {
        this.setId(null);
        this.dom.removeClass('active cancellable');
        this.unblock().unselect().removeCooldown();
        return this;
    },
    used: function () {
        this.setId(null);
        this.dom.removeClass('active cancellable');
        return this;
    },
    select: function () {
        this.highlight();
        this.setSelected(true);
        return this;
    },
    unselect: function () {
        this.setSelected(false);
        this.unhighlight();
        return this;
    },
    block: function () {
        this.setBlocked(true);
        if (!this.hasId()) {
            this.dom.addClass('blocked cooldown');
        }
        return this;
    },
    unblock: function () {
        this.setBlocked(false);
        this.dom.removeClass('blocked cooldown');
        return this;
    },
    highlight: function () {
        this.dom.addClass('highlight');
        return this;
    },
    unhighlight: function () {
        this.dom.removeClass('highlight');
        return this;
    },
    addCooldown: function (cooldown_count) {
        this.setCooldown(true);
        if (!this.hasId()) {
            this.dom.addClass('cooldown');
            $('.mpi-ability-cooldown', this.dom).text(cooldown_count);
        }
        return this;
    },
    removeCooldown: function () {
        this.setCooldown(false);
        this.dom.removeClass('cooldown');
        $('.mpi-ability-cooldown', this.dom).empty();
        return this;
    },
    update: function (abilityCharges, options) {
        options = options || {};
        if (options.round_end) {
            this.used();
        }
        if (!!abilityCharges.cooldown) {
            this.addCooldown(abilityCharges.cooldown);
        } else {
            this.unblock().removeCooldown();
        }
        if ('undefined' !== typeof options.current_stamina) {
            this.checkAvailability(options.current_stamina);
        }
    },
    checkAvailability: function (stamina) {
        if (this.hasCooldown()) {
            return this;
        }
        if (this.getCost() > stamina) {
            this.block();
        } else {
            this.unblock();
        }
    },
    setHotkey: function (hot_key) {
        this.hotkey = hot_key;
        this.updateMouseOver();
        return this;
    },
    getHotkey: function () {
        return this.hotkey;
    },
    remove: function () {
        if (this.dom) {
            this.dom.remove();
            delete this.dom;
        }
    },
    destroy: function () {
        this.removeEventListeners();
        this.remove();
        delete this.$rootParent;
        delete this.eventSys;
        delete this.bottom_bar;
    }
});

west.define('west.mission.ui.bottom_bar.Bottom_bar', null, {
    localEventQueue: null,
    game: null,
    abilities: null,
    current_stamina: 0,
    domParent: '#mission-map-container .mpi-ui',
    dom: null,
    content: null,
    domSkel: ''
    + '<div class="mpi-ui-bottombar">'
    + '<div class="mpi-bottombar-toggle"></div>'
    + '<div class="mpi-abilities">'
    + '<div class="mpi-abilities-stamina"></div>'
    + '<div class="mpi-abilities-content"></div>'
    + '</div>'
    + '</div>',
    init: function (ui, game, eventSys, ui_eventSys) {
        this.ui = ui;
        this.game = game;
        this.eventSys = eventSys;
        this.ui_eventSys = ui_eventSys;
        this.localEventQueue = new west.EventEmitter();
        eventSys.on('ability.activated', this.localEventQueue.emit.bind(this.localEventQueue, 'ability.activated'));
        eventSys.on('ability.deactivated', this.localEventQueue.emit.bind(this.localEventQueue, 'ability.deactivated'));
        this.abilities = {};
        this.buttons = {};
        this.render().addEventListeners();
        return {
            'loadPlayerAbilities': this.loadPlayerAbilities,
            'activateAbility': this.activateAbility,
            'deactivateAbility': this.deactivateAbility,
            'updateAbility': this.updateAbility,
            'destroy': this.destroy
        };
    },
    loadPlayerAbilities: function (entityAbilities) {
        var charges = entityAbilities.get(), abilities = this.getAbilities(), i;
        this.updateResource(entityAbilities.resource);
        for (i in charges) {
            abilities[i] = this.createElement(i, charges[i]);
        }
        return this;
    },
    activateAbility: function (ability_type) {
        var game = this.game;
        if (!ability_type || !game.started || game.ownEntity.isDead()) {
            return this;
        }
        var ability = west.mission.Ability.Factory.get(ability_type);
        game.toggleActiveAbility(ability);
        return this;
    },
    deactivateAbility: function (ability_type, ability_id) {
        if (!ability_id || !(ability_type && this.getAbility(ability_type))) {
            return this;
        }
        ability_id = ability_id || this.getAbility(ability_type).getId();
        this.eventSys.emit('game.cancelCommand', ability_id);
        return this;
    },
    updateAbility: function (ability_type, abilityCharges, round_end) {
        var ability = this.getAbility(ability_type);
        if (ability) {
            ability.update(abilityCharges, {round_end: round_end, current_stamina: this.current_stamina});
        }
    },
    addEventListeners: function () {
        this.removeEventListeners();
        var eventSys = this.eventSys, ui_eventSys = this.ui_eventSys, localEventQueue = this.localEventQueue;
        eventSys.on('abilities.refresh', this.handleAbilitiesRefresh, this);
        eventSys.on('abilities.chargeChanged', this.handleAbilityChargeChanged, this);
        eventSys.on('abilities.abilityActivated', this.handleAbilityActivation, this);
        eventSys.on('commandqueue.added', this.handleCommandAdd, this);
        eventSys.on('commandqueue.cancelled', this.handleCommandCancel, this);
        ui_eventSys.on('opacity.changed', this.handleOpacityChange, this);
        localEventQueue.on('ability.activate', this.activateAbility, this).on('ability.deactivate', this.deactivateAbility, this).on('ability.preview.on', this.setActiveAbility, this).on('ability.preview.off', this.removeActiveAbility, this);
        return this;
    },
    removeEventListeners: function () {
        this.eventSys.offByContext(this);
        this.localEventQueue.offByContext(this);
    },
    getContent: function () {
        return this.content;
    },
    setActiveAbility: function (ability_id, force) {
        var game = this.game;
        if (!force) {
            if (!game.started || game.ownAbilities.getActive() || game.ownEntity.isDead()) {
                return;
            }
        }
        this.ui.setActiveAbility(ability_id);
        this.showStaminaUse(ability_id);
        return this;
    },
    removeActiveAbility: function (ability_id, force) {
        var game = this.game;
        if (!force) {
            if (!game.started || game.ownAbilities.getActive() || game.ownEntity.isDead()) {
                return;
            }
        }
        this.ui.removeActiveAbility(ability_id);
        this.hideStaminaUse(ability_id);
    },
    getAbilities: function () {
        return this.abilities;
    },
    getAbility: function (ability_id) {
        return this.getAbilities()[ability_id];
    },
    render: function () {
        this.dom = $(this.domSkel).appendTo(this.domParent);
        this.content = $('.mpi-abilities-content', this.dom);
        this.addRageQuitButton().addTransparencyToggleButton().addChatToggleButton();
        return this;
    },
    addRageQuitButton: function () {
        this.buttons.ragequit = new west.gui.Iconbutton(new west.gui.Icon('exit'), west.mission.BattleserverSocket.ragequit).setTitle('Выйти').addClass('exit');
        this.dom.append(this.buttons.ragequit.getMainDiv());
        return this;
    },
    addTransparencyToggleButton: function () {
        var ui_eventSys = this.ui_eventSys;
        this.buttons.transparency = new west.gui.Iconbutton(new west.gui.Icon('eye'), function () {
            ui_eventSys.emit('opacity.toggle');
        }.bind(this)).setTitle('✓ ' + "Прозрачные элементы").addClass('settings enabled');
        this.dom.append(this.buttons.transparency.getMainDiv());
        return this;
    },
    addChatToggleButton: function () {
        var ui_eventSys = this.ui_eventSys;
        this.buttons.chat = new west.gui.Iconbutton(new west.gui.Icon('comment'), function (cl) {
            ui_eventSys.emit('chat.toggle');
            $(cl.getMainDiv()).toggleClass('enabled');
        }).setTitle("Чат").addClass('chat enabled');
        this.dom.append(this.buttons.chat.getMainDiv());
        return this;
    },
    handleAbilityActivation: function (ability_id) {
        if (ability_id) {
            this.setActiveAbility(ability_id, true);
        } else {
            this.removeActiveAbility(ability_id, true);
        }
        return this;
    },
    handleAbilitiesRefresh: function (abilityCharges, resource) {
        this.updateResource(resource);
        for (var i in abilityCharges) {
            this.updateAbility(i, abilityCharges[i], true);
        }
    },
    handleAbilityChargeChanged: function (abilityId, abilityCharges, resource) {
        this.updateAbility(abilityId, abilityCharges);
        this.updateResource(resource);
    },
    handleCommandAdd: function (data) {
        var ability;
        if (data.own || data.src === this.game.ownEntity.id) {
            ability = this.getAbility(data.type);
            if (ability) {
                ability.active(data.id);
            }
        }
    },
    handleCommandCancel: function (data) {
        var ability;
        if (data.own) {
            ability = this.getAbility(data.type);
            if (ability) {
                ability.cancel();
            }
        }
    },
    handleOpacityChange: function (bool) {
        this.buttons.transparency.setTitle((bool ? '✓ ' : '') + "Прозрачные элементы");
        $(this.buttons.transparency.getMainDiv()).toggleClass('enabled', bool);
    },
    createElement: function (data_type, data) {
        $.extend(data, {type: data_type});
        return new west.mission.ui.bottom_bar.Element(data, this.getContent(), this.localEventQueue);
    },
    updateResource: function (resource) {
        var l10n = s('Очки действий: %1 Здесь ты можешь увидеть, сколько очков действий у тебя осталось.', resource.cur + ' / ' + resource.max + '<br>').split('<br>');
        var i = 0, stamina = [];
        for (i; i < resource.max; i++) {
            stamina.push('<div class="mpi-stamina' + (i < resource.cur ? ' active' : '') + '"></div>');
        }
        $('.mpi-abilities-stamina', this.dom).empty().append(stamina).addMousePopup({
            teaser: l10n[0],
            content: l10n[1]
        });
        this.current_stamina = resource.cur;
        west.common.forEach(this.abilities, function (el, i) {
            el.checkAvailability(resource.cur);
        });
    },
    showStaminaUse: function (ability_id) {
        var cost = this.getAbility(ability_id).getCost();
        $('.mpi-stamina.active').slice(-cost).addClass('use');
    },
    hideStaminaUse: function () {
        $('.mpi-stamina.use').removeClass('use');
    },
    destroy: function () {
        west.common.forEach(this.abilities, function (el, i) {
            el.destroy();
        });
        delete this.ui;
        delete this.game;
        delete this.eventSys;
        delete this.abilities;
        delete this.dom;
    }
});

var Common = west.common;
west.namespace('west.mission.shared.View', {
    getComplete: function (entity, yieldme) {
        return this.getAbsoluteField(entity.area, this.getField(entity).sources, yieldme);
    }, getShadowed: function (entity, yieldme, grid) {
        var cell, view = [], yielded = {}, id;
        entity = entity.props ? {1: entity} : entity;
        Common.forEach(entity, function (entity) {
            Common.forEach(this.getField(entity).lines, function (lineCoords) {
                this.getAbsoluteField(entity.area, lineCoords, function (viewCoord) {
                    id = viewCoord.x + '-' + viewCoord.y;
                    if (!yielded[id]) {
                        yielded[id] = true;
                        if (!(cell = grid.get(viewCoord)))return true;
                        if (grid.isCellBlocked(cell, entity)) {
                            yielded[id] = 'blocked';
                            yieldme ? yieldme(cell) : view.push(cell);
                            return true;
                        } else {
                            yieldme ? yieldme(cell) : view.push(cell);
                        }
                    } else if (yielded[id] === 'blocked') {
                        return true;
                    }
                });
            }, this);
        }, this);
        return view;
    }, getAbsoluteField: function (area, field, yieldme) {
        var cur, view = [], diffCoord = area[0];
        Common.some(field, function (coord) {
            cur = {x: coord.x + diffCoord.x, y: coord.y + diffCoord.y};
            if (yieldme) {
                return yieldme(cur);
            } else {
                view.push(cur);
            }
        });
        return view;
    }, getField: function (entity) {
        var viewField = {sources: {}, lines: {}};
        var cacheId = entity.props.viewRadius + '-' + entity.direction + '-' + entity.props.viewRange;
        if (entity.layout.cacheView[cacheId])return entity.layout.cacheView[cacheId];
        entity.layout.getFront(entity.direction).forEach(function (sourceCoord) {
            this[entity.props.viewRadius](sourceCoord, entity.direction, entity.props.viewRange, function (borderCoord) {
                this.getLineCoords(sourceCoord, borderCoord).forEach(function (viewCoord) {
                    var lineId = '' + sourceCoord.x + sourceCoord.y + '-' + borderCoord.x + borderCoord.y;
                    var sourceId = viewCoord.x + '-' + viewCoord.y;
                    Common.createObjKey(viewField.lines, lineId, []);
                    viewField.lines[lineId].push(viewCoord);
                    if (!viewField.sources[sourceId]) {
                        viewField.sources[sourceId] = viewCoord;
                    }
                });
            }.bind(this));
        }, this);
        entity.layout.cacheView[cacheId] = viewField;
        return viewField;
    }, getSimpleField: function (sourceCoord, radius, range, direction, yieldme) {
        var done = {}, viewField = [];
        this[radius](sourceCoord, direction, range, function (borderCoord) {
            this.getLineCoords(sourceCoord, borderCoord).forEach(function (viewCoord) {
                var id = viewCoord.x + '-' + viewCoord.y;
                if (!done[id]) {
                    done[id] = true;
                    viewField.push(viewCoord);
                    if (yieldme)yieldme(viewCoord);
                }
            });
        }.bind(this));
        return viewField;
    }, 360: function (source, direction, range, yieldme) {
        var field = [];
        field = this[180](source, 1, range, yieldme).concat(this[180](source, 3, range, yieldme));
        [{x: source.x + range, y: source.y}, {x: source.x - range, y: source.y}].forEach(function (cur) {
            yieldme ? yieldme(cur) : field.push(cur);
        });
        return field;
    }, 180: function (source, direction, range, yieldme) {
        var from = {x: source.x, y: source.y}, field = [];
        var side = 1;
        field = this[90](source, direction, range, yieldme);
        switch (direction) {
            case 2:
                from.x = source.y;
                from.y = source.x;
                break;
            case 4:
                from.x = source.y;
                from.y = source.x;
                side = -1;
                break;
            case 1:
                side = -1;
                break;
        }
        var tmpX = from.x - range;
        var tmpY = (-1 == side) ? -range : 0;
        for (var y = from.y + 1; y < from.y + range; y++) {
            ((direction % 2) ? [{x: tmpX, y: y + tmpY}, {x: from.x + range, y: y + tmpY}] : [{
                x: y + tmpY,
                y: from.x + range
            }, {x: y + tmpY, y: tmpX}]).forEach(function (cur) {
                yieldme ? yieldme(cur) : field.push(cur);
            });
        }
        return field;
    }, 90: function (source, direction, range, yieldme) {
        var rangeX = range.x || range;
        var rangeY = range.y || range;
        var from = {x: source.x, y: source.y}, field = [];
        var side = 1, cur;
        switch (direction) {
            case 2:
                from.x = source.y;
                from.y = source.x;
                break;
            case 4:
                from.x = source.y;
                from.y = source.x;
                side = -1;
                break;
            case 1:
                side = -1;
                break;
        }
        var tmp = from.y + rangeY * side;
        for (var x = from.x - rangeX; x <= from.x + rangeX; x++) {
            cur = (direction % 2) ? {x: x, y: tmp} : {x: tmp, y: x};
            yieldme ? yieldme(cur) : field.push(cur);
        }
        return field;
    }, getLineCoords: function (source, target) {
        var dir = (Math.abs(target.y - source.y)) > (Math.abs(target.x - source.x));
        var from = {x: source.x, y: source.y}, to = {x: target.x, y: target.y};
        var rev = false;
        var coords = [];
        if (dir) {
            from.x = source.y;
            from.y = source.x;
            to.x = target.y;
            to.y = target.x;
        }
        if (from.x > to.x) {
            Common.swap(from, to);
            rev = true;
        }
        var dx = Math.abs(to.x - from.x);
        var dy = Math.abs(to.y - from.y);
        var error = parseInt(dx / 2);
        var y = from.y;
        var ystep = (from.y < to.y) ? 1 : -1;
        for (var x = from.x; x <= to.x; x++) {
            if (dir)coords.push({x: y, y: x}); else coords.push({x: x, y: y});
            error -= dy;
            if (error < 0) {
                y += ystep;
                error += dx;
            }
        }
        if (rev)coords.reverse();
        return coords;
    }
});

west.namespace('west.mission.shared.Util', {
    calcDir: function (from, to) {
        var dx = from.x - to.x;
        var dy = from.y - to.y;
        return (Math.abs(dx) > Math.abs(dy)) ? ((dx > 0) ? 4 : 2) : ((dy > 0) ? 1 : 3);
    }
});

west.define('west.mission.canvas.Grid', null, {
    init: function (view) {
        this.view = view;
        this.side = view.header.side;
        this.maxX = view.header.maxX;
        this.maxY = view.header.maxY;
        this.width = this.maxX * this.side;
        this.height = this.maxY * this.side;
    }, drawSquare: function (ctx, x, y, side) {
        if ('object' == typeof(x)) {
            y = x.y;
            x = x.x;
        }
        side = side || this.side;
        var position = this.view.coordToScreen(x, y);
        ctx.beginPath();
        ctx.moveTo(position.left, position.top);
        ctx.lineTo(position.left + side, position.top - side / 2);
        ctx.lineTo(position.left + side * 2, position.top);
        ctx.lineTo(position.left + side, position.top + side / 2);
        ctx.closePath();
    }
});

west.define('west.mission.canvas.BgGrid', west.mission.canvas.Grid, {
    init: function (view, zones, eventSys) {
        this.callParent(view);
        this.zones = zones;
        this.placement = true;
        this.eventSys = eventSys;
    }, onAppend: function () {
        this.eventSys.on('grid.zone-prop-updated', this.redraw.bind(this));
    }, onRemove: function () {
        this.eventSys.offByContext(this);
    }, setPlacement: function (bool) {
        this.placement = bool;
        this.redraw();
    }, draw: function (ctx, delta) {
        if (this.placement) {
            ctx.globalAlpha = 0.5;
            ctx.fillStyle = '#000000';
            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        }
        for (var x = 0; x < this.maxX; x++) {
            for (var y = 0; y < this.maxY; y++) {
                this.drawSquare(ctx, x, y);
                ctx.strokeStyle = "#000000";
                ctx.globalAlpha = 0.3;
                ctx.stroke();
            }
        }
        west.common.forEach(this.zones, function (zone) {
            if (this.placement && !zone.props.spawnZone)return;
            if (!this.placement && zone.props.spawnZone)return;
            if (!zone.props.spawnZone && zone.props.hasOwnProperty('visible') && !zone.props.visible)return;
            zone.tiles.forEach(function (tile) {
                this.drawSquare(ctx, tile);
                ctx.globalAlpha = (zone.props.spawnZone) ? 0.7 : 0.3;
                ctx.fillStyle = (this.placement && zone.props.spawnZone) ? (this.view.ownEntity.team.id == zone.props.spawnZone) ? '#008000' : '#5A5A5A' : ctx.fillStyle = zone.props.color;
                ctx.fill();
                ctx.globalAlpha = (zone.props.spawnZone) ? 0.4 : 0;
                ctx.strokeStyle = (zone.props.spawnZone) ? '#ffffff' : '#000';
                ctx.stroke();
            }, this);
        }, this);
    }
});

west.define('west.mission.canvas.FgGrid', west.mission.canvas.Grid, {
    init: function (view) {
        this.callParent(view);
        this.hovering = {x: null, y: null};
    }, hover: function (x, y) {
        if ('object' == typeof(x)) {
            y = x.y;
            x = x.x;
        }
        if (x == this.hovering.x && y == this.hovering.y)return;
        this.hovering = {x: x, y: y};
        this.redraw();
    }, draw: function (ctx, delta) {
        if (null !== this.hovering.x) {
            this.drawSquare(ctx, this.hovering);
            var cell = this.view.grid.get(this.hovering);
            ctx.lineWidth = 4;
            ctx.strokeStyle = (cell.props.blocked) ? "darkred" : "black";
            ctx.stroke();
        }
    }
});

west.define('west.mission.canvas.Area', null, {
    init: function (view, entity, opts) {
        opts = opts || {};
        this.opts = {viewRange: opts.viewRange || 5, viewRadius: opts.viewRadius || 360};
        this.view = view;
        this.entity = entity;
        this.from = entity.entity.getNullCoords();
        this.grid = new west.mission.canvas.Grid(this.view);
    }, destruct: function () {
        this.view = null;
        this.entity = null;
        if (this.remove)this.remove();
    }, update: function () {
        if (this.redraw)this.redraw();
    }, draw: function (ctx, delta) {
        var side = this.view.header.side;
        var tlCoord = {x: Math.max(0, this.from.x), y: Math.max(0, this.from.y)};
        var brCoord = {x: Math.max(0, this.from.x), y: Math.max(0, this.from.y)};
        west.mission.shared.View.getComplete({
            props: this.opts,
            direction: this.entity.entity.direction,
            layout: this.entity.entity.layout,
            area: this.entity.entity.area
        }, function (coords) {
            tlCoord.x = Math.min(coords.x, tlCoord.x);
            tlCoord.y = Math.min(coords.y, tlCoord.y);
            brCoord.x = Math.max(coords.x, brCoord.x);
            brCoord.y = Math.max(coords.y, brCoord.y);
            if (this.view.grid.isCellBlocked(this.view.grid.get(coords)))return;
            this.grid.drawSquare(ctx, coords);
            ctx.strokeStyle = '#0000ff';
            ctx.fillStyle = '#0000ff';
            ctx.globalAlpha = 1;
            ctx.lineWidth = 1;
            ctx.stroke();
            ctx.globalAlpha = 0.2;
            ctx.fill();
        }.bind(this));
        this.grid.drawSquare(ctx, tlCoord.x, tlCoord.y, side * (brCoord.x - tlCoord.x + 1));
        ctx.strokeStyle = '#ff0000';
        ctx.globalAlpha = 1;
        ctx.lineWidth = 1;
        ctx.stroke();
    }
});

west.define('west.mission.canvas.AreaTarget', null, {
    init: function (view, target, opts) {
        opts = opts || {};
        this.opts = {range: opts.range || 5, radius: opts.radius || 360, direction: opts.direction || 1};
        this.view = view;
        this.from = target;
        this.grid = new west.mission.canvas.Grid(this.view);
    }, destruct: function () {
        this.view = null;
        this.from = null;
        if (this.remove)this.remove();
    }, update: function (target) {
        this.from = target;
        if (this.redraw)this.redraw();
    }, draw: function (ctx, delta) {
        if (!this.from)return;
        var side = this.view.header.side;
        var tlCoord = {x: this.from.x, y: this.from.y};
        var brCoord = {x: this.from.x, y: this.from.y};
        west.mission.shared.View.getSimpleField(this.from, this.opts.radius, this.opts.range, this.opts.direction, function (coords) {
            if (coords.x < tlCoord.x)tlCoord.x = coords.x;
            if (coords.y < tlCoord.y)tlCoord.y = coords.y;
            if (coords.x > brCoord.x)brCoord.x = coords.x;
            if (coords.y > brCoord.y)brCoord.y = coords.y;
            if (this.view.grid.get(coords) && this.view.grid.get(coords).props && this.view.grid.get(coords).props.blocked)return;
            this.grid.drawSquare(ctx, coords);
            ctx.strokeStyle = '#0000ff';
            ctx.fillStyle = '#0000ff';
            ctx.globalAlpha = 1;
            ctx.lineWidth = 1;
            ctx.stroke();
            ctx.globalAlpha = 0.2;
            ctx.fill();
        }.bind(this));
        this.grid.drawSquare(ctx, tlCoord.x, tlCoord.y, side * (brCoord.x - tlCoord.x + 1));
        ctx.strokeStyle = '#ff0000';
        ctx.globalAlpha = 1;
        ctx.lineWidth = 1;
        ctx.stroke();
    }
});

west.define('west.mission.canvas.CellHighlight', west.mission.canvas.Grid, {
    init: function (view, cellEntity, waypoint) {
        this.callParent(view);
        this.entity = cellEntity;
        this.waypoint = cellEntity.entity.getNullCoords();
        this.waypoint.dir = cellEntity.dir;
        this.entity.events.entity_moved.attach(this.update, this);
        this.entity.entity.events.entity_died.attach(this.destruct, this);
    }, destruct: function () {
        this.waypoint = undefined;
        this.entity.events.entity_moved.detach(this.update, this);
        this.remove();
    }, update: function (entity, waypoint) {
        this.waypoint = waypoint;
        this.redraw();
    }, draw: function (ctx) {
        if (!this.waypoint)return;
        this.entity.entity.getArea(this.waypoint.x, this.waypoint.y, this.waypoint.dir).forEach(function (cell) {
            this.drawSquare(ctx, cell);
            ctx.globalAlpha = 0.5;
            ctx.fillStyle = (this.entity.entity.team.color) ? this.entity.entity.team.color : '#ffffff';
            ctx.fill();
        }, this);
    }
});

west.define('west.mission.canvas.Move', null, {
    init: function (view, entity, to, preview) {
        this.view = view;
        this.entity = entity;
        this.from = entity.entity.getNullCoords();
        this.to = to;
        this.preview = preview || false;
        this.area = new west.mission.canvas.Area(view, entity, {viewRange: this.entity.entity.props.curWalkRange});
    }, destruct: function () {
        this.view = null;
        this.entity = null;
        this.remove();
    }, update: function (target) {
        this.to = target;
        this.redraw();
    }, draw: function (ctx, delta) {
        if (this.preview)this.area.draw(ctx, delta);
        if (this.to)this.drawArrow(ctx, delta);
    }, drawArrow: function (ctx, delta) {
        var from = this.view.coordToScreen(this.from.x, this.from.y, true);
        var to = this.view.coordToScreen(this.to.x, this.to.y, true);
        var angle = Math.atan2(to.top - from.top, to.left - from.left);
        ctx.beginPath();
        ctx.moveTo(from.left, from.top);
        ctx.lineTo(to.left, to.top);
        ctx.lineTo(to.left - 10 * Math.cos(angle - Math.PI / 6), to.top - 10 * Math.sin(angle - Math.PI / 6));
        ctx.moveTo(to.left, to.top);
        ctx.lineTo(to.left - 10 * Math.cos(angle + Math.PI / 6), to.top - 10 * Math.sin(angle + Math.PI / 6));
        ctx.closePath();
        ctx.strokeStyle = '#000';
        ctx.globalAlpha = 0.7;
        ctx.lineWidth = 2;
        ctx.stroke();
    }
});

west.define('west.mission.canvas.Attack', null, {
    init: function (view, entity, target, preview) {
        this.view = view;
        this.entity = entity;
        this.from = entity.entity.getNullCoords();
        this.target = (target) ? target.entity : null;
        this.preview = preview || false;
    }, destruct: function () {
        this.view = null;
        this.entity = null;
        this.target = null;
        this.remove();
    }, update: function (target) {
        if (target && target.entity) {
            this.target = target.entity;
        } else {
            this.target = null;
        }
        this.redraw();
    }, draw: function (ctx, delta) {
        if (this.preview)this.drawPreview(ctx, delta);
    }, drawPreview: function (ctx, delta) {
        if (!this.target)return;
        var line = this.view.grid.getClosestCells(this.entity.entity.area, this.target.area);
        var grid = new west.mission.canvas.Grid(this.view);
        ctx.globalAlpha = 1;
        ctx.lineWidth = 1;
        ctx.strokeStyle = '#0000ff';
        ctx.fillStyle = '#0000ff';
        west.mission.shared.View.getLineCoords(line.from, line.to).forEach(function (toCoord) {
            if (!(toCoord.x == line.from.x && toCoord.y == line.from.y) && this.view.grid.isCellBlocked(this.view.grid.get(toCoord))) {
                ctx.strokeStyle = '#ff0000';
                ctx.fillStyle = '#ff0000';
            }
            grid.drawSquare(ctx, toCoord);
            ctx.stroke();
            ctx.globalAlpha = 0.2;
            ctx.fill();
        }, this);
    }
});

west.define('west.mission.effect.Barrelroll', null, {
    init: function (view, entity) {
        this.view = view;
        this.entity = entity;
        this.barrels = [];
        this.dir = 1;
        this.from = {};
    }, destruct: function () {
        this.remove();
        this.view = null;
        this.entity = null;
        this.barrels = null;
    }, remove: function () {
        this.barrels.forEach(function (barrel) {
            barrel.remove();
        }, this);
    }, update: function (target) {
        var from = this.view.grid.getFromCell(this.entity.entity.area, target);
        var dir = west.mission.shared.Util.calcDir(from, target);
        if ((this.from.x == from.x && this.from.y == from.y) && this.dir == dir)return this;
        this.from = from;
        this.dir = dir;
        this.remove();
        this.draw();
        return this;
    }, draw: function () {
        west.mission.shared.View[90](this.from, this.dir, {x: 2, y: 1}, function (coords) {
            var barrelCell = this.view.grid.get(coords);
            if (barrelCell && !this.view.grid.isCellBlocked(barrelCell, this.entity.entity)) {
                this.barrels.push(this.view.addImage(10, coords).getEl().css('opacity', 0.5));
            }
        }.bind(this));
    }
});

west.define('west.mission.effect.BurningTequila', null, {
    init: function (view, entity, target, opts) {
        this.opts = opts || {};
        this.view = view;
        this.entity = entity;
        this.from = {};
        this.opts.viewRange = opts.viewRange || 5;
        this.container = [new west.mission.canvas.Area(view, entity, this.opts), new west.mission.canvas.AreaTarget(view, target, this.opts)];
    }, destruct: function () {
        this.container.forEach(function (effect) {
            effect.destruct();
        });
        this.view = null;
        this.entity = null;
        this.from = null;
        this.container = null;
        this.remove();
    }, update: function (target) {
        this.container.forEach(function (effect) {
            effect.update(target);
        });
        return this;
    }, draw: function (ctx, delta) {
        this.container.forEach(function (effect) {
            effect.draw(ctx, delta);
        });
    }
});

west.define('west.mission.Ability.Abstract', null, {
    type: null, cooldown: 1, cost: 1, init: function (type) {
        this.type = type;
    }, queueMsg: function (game, actor, target) {
    }, resultMsg: function (actor, target, data) {
    }, execute: function (game, command) {
    }, deactivate: function (game, command) {
    }, setEffect: function (game, state) {
    }, canUseOnEntity: function (entity, ownEntity) {
        return !!(entity.team.id === ownEntity.team.id ? this.friendly : this.enemy);
    }, use: function (cell) {
    }
});
west.namespace('west.mission.Ability.Factory', {
    sharedAbilities: {}, create: function (type) {
        this.sharedAbilities[type] = (!west.mission.Ability[type]) ? new west.mission.Ability.Abstract('unknown') : new west.mission.Ability[type]();
    }, get: function (type) {
        if (!this.sharedAbilities[type]) {
            this.create(type);
        }
        return this.sharedAbilities[type];
    }
});

west.define('west.mission.Ability.Move', west.mission.Ability.Abstract, {
    cursor: 'walk', init: function () {
        this.callParent('Move');
    }, queueMsg: function (game, actor, target) {
        return s('%1 перемещается', actor.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor)
            return;
        return s(gendertext('%1 перемещается', '%1 перемещается'), west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color));
    }, renderCommand: function (view, cellEntity, target, effect) {
        if (effect) {
            effect.update(target);
        } else {
            effect = new west.mission.canvas.Move(view, cellEntity, target);
            view.board.main.addChild(effect).requestRedraw();
        }
        return effect;
    }, renderPreview: function (view, cellEntity, target, effect) {
        if (effect) {
            effect.update(target);
        } else {
            effect = new west.mission.canvas.Move(view, cellEntity, target, true);
            view.board.main.addChild(effect).requestRedraw();
        }
        return effect;
    }, animateMove: function (command, view, entityId, waypoints) {
        if (!view.entities[entityId]) {
            return DEBUG && console.log(entityId, waypoints, 'animateMove: missing entity');
        }
        var entity = view.entities[entityId];
        view.timeline.add(function () {
            entity.events.entity_moving.notify();
            entity.startTransition('walk');
        }, 0);
        for (var i = 0; i < waypoints.length; i++) {
            var lt = entity.entity.getLeftTop(waypoints[i].x, waypoints[i].y, waypoints[i].dir);
            view.timeline.add(function (entity, lt, waypoints, i) {
                return function () {
                    createjs.Tween.get(entity.getEl().get(0)).play(createjs.Tween.get({}, {paused: true}).wait(100).call(entity.events.entity_moved.notify, [waypoints[i]], entity.events.entity_moved)).call(entity.setDirection, [waypoints[i].dir], entity).to(view.calcCSSPosition(entity, lt, waypoints[i].dir), 200);
                };
            }(entity, lt, waypoints, i), 200);
        }
        view.timeline.add(function () {
            entity.stopTransition();
        }, 0);
    }, isValidTarget: function (view, cellEntity, target) {
        return target && !view.grid.isCellBlocked(target, cellEntity.entity);
    }, execute: function (game, command) {
        var entity = game.grid.entities[command.src];
        var waypoints = command.result;
        if (0 === waypoints.length) {
            return DEBUG && console.log(command.src, 'is taking a break (aka zero-length movement)');
        }
        if (entity) {
            this.animateMove(command, game.view, entity.id, waypoints);
            entity.move(game.grid, waypoints[waypoints.length - 1]);
        }
        else {
            DEBUG && console.log('move failed, as entity is not correctly on the map', entity, 'command.src', command.src, 'game.grid.entities', game.grid.entities);
        }
    }, use: function (targetCell) {
        return west.mission.BattleserverSocket.emit('use', 'Move', {x: targetCell.x, y: targetCell.y}, false);
    }
});

west.define('west.mission.Ability.Attack', west.mission.Ability.Abstract, {
    states: {friendly: true, enemy: true}, cursor: 'aim', init: function () {
        this.callParent('Attack');
    }, queueMsg: function (game, actor, target) {
        target = game.grid.entities[target];
        return s('%1 атакует %2', actor.data.name, target.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor || !target)
            return;
        var returnString = s('%1 атакует %2', west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color), target.data.name);
        if (data) {
            if (data.result && data.result[2]) {
                returnString += ' (' + data.result[2] + ')';
            } else {
                returnString += ' (' + 'промах' + ')';
            }
            if (data.team) {
                returnString += ' ' + 'огонь по своим';
            }
        }
        return returnString;
    }, renderPreview: function (view, cellEntity, target, effect) {
        if (effect) {
            effect.update(target);
        } else {
            effect = new west.mission.canvas.Attack(view, cellEntity, target, true);
            view.board.main.addChild(effect).requestRedraw();
        }
        return effect;
    }, animateAttack: function (command, view, victimId, src) {
        var tween, css;
        var coords = command.result[0], state = command.result[1], damage = command.result[2];
        src = 'mpi-ability-' + (src || 'Attack');
        css = view.coordToScreen(coords.x, coords.y);
        var attackEl = $('<div class="attack" />').css(css).appendTo(view.mapEl);
        var combatText = new west.mission.CombatText(css, src, state);
        view.mapEl.append((state == 'miss') ? combatText.setText('промах').divMain : combatText.setText(damage).divMain);
        view.timeline.add(function () {
            createjs.Tween.get(attackEl.get(0)).play(combatText.animate()).call(function () {
                if (view.entities[command.src])view.entities[command.src].startTransition('shoot');
            }).to({opacity: 1}, 300).to({opacity: 0}, 300).call(function () {
                attackEl.remove();
            });
        }, 600);
    }, isValidTarget: function (view, cellEntity, target) {
        return !!(target && target.entity && this.canUseOnEntity(target.entity, cellEntity.entity));
    }, execute: function (game, command, src) {
        var r = command.result;
        var entity = game.grid.get(r[0]).entity;
        this.animateAttack(command, game.view, (entity) ? entity.id : undefined, src);
        if (entity)entity.decHealth(r[2]);
    }, use: function (targetCell) {
        return west.mission.BattleserverSocket.emit('use', 'Attack', targetCell.entity.id, false);
    }
});

west.define('west.mission.Ability.Quickshot', west.mission.Ability.Abstract, {
    states: {friendly: true, enemy: true}, cursor: 'aim', init: function () {
        this.callParent('Quickshot');
    }, queueMsg: function (game, actor, target) {
        return s('%1 использует двойной выстрел', actor.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor || !target)
            return;
        var returnString = s('%1 атакует %2 двойным выстрелом', west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color), target.data.name);
        if (data) {
            returnString += ' (';
            if (data.result && data.result[0] && data.result[0][2]) {
                returnString += data.result[0][2];
            } else {
                returnString += 'промах';
            }
            returnString += ' ';
            if (data.result && data.result[1] && data.result[1][2]) {
                returnString += data.result[1][2];
            } else {
                returnString += 'промах';
            }
            returnString += ')';
            if (data.team) {
                returnString += ' ' + 'огонь по своим';
            }
        }
        return returnString;
    }, renderPreview: function (view, cellEntity, target, effect) {
        return west.mission.Ability.Factory.get('Attack').renderPreview(view, cellEntity, target, effect);
    }, isValidTarget: function (view, cellEntity, target) {
        return !!(target && target.entity && this.canUseOnEntity(target.entity, cellEntity.entity));
    }, execute: function (game, command, onFinish) {
        var result, Attack = west.mission.Ability.Factory.get('Attack');
        command.result.forEach(function (result) {
            var tmpCommand = clone(command);
            tmpCommand.result = result;
            Attack.execute(game, tmpCommand, 'Quickshot');
        });
    }, use: function (targetCell) {
        if (!targetCell.entity) {
            return new MessageError('Укажи игрока для прицела').show();
        }
        return west.mission.BattleserverSocket.emit('use', 'Quickshot', targetCell.entity.id, false);
    }
});

west.define('west.mission.Ability.Heal', west.mission.Ability.Abstract, {
    states: {friendly: true}, cursor: 'aim', init: function () {
        this.callParent('Heal');
    }, queueMsg: function (game, actor, target) {
        return s('%1 использует лечение', actor.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor || !target)
            return;
        if (data && data.result !== undefined) {
            return s(gendertext('%1 лечит %2 (%3)', '%1 лечит %2 (%3)'), west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color), target.data.name, data.result[2]);
        } else {
            return s(gendertext('%1 лечит %2', '%1 лечит %2'), west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color), target.data.name);
        }
    }, renderPreview: function (view, cellEntity, target, effect) {
        if (effect) {
            effect.update();
        } else {
            effect = new west.mission.canvas.Area(view, cellEntity, {viewRange: this.range});
            view.board.main.addChild(effect).requestRedraw();
        }
        return effect;
    }, animateHeal: function (command, view, entityId, amount, timeline) {
        if (!view.entities[entityId])return;
        var entityEl = view.entities[entityId].getEl();
        var sprite = new AnimationSprite('https://westrus.innogamescdn.com/images/mpi/effects/heal.png', 66, 132, 7);
        var animation = new Animation('heal', {prependTo: entityEl}).add('heal', sprite, {
            fps: 15, onLoop: function () {
                this.element.fadeOut(80, function () {
                    this.stop();
                    this.element.remove();
                }.bind(this));
            }
        });
        var coords = view.entities[entityId].entity.getNullCoords();
        var css = view.coordToScreen(coords.x, coords.y);
        var combatText = new west.mission.CombatText(css, 'mpi-ability-Heal', 'heal').setText(amount);
        timeline = timeline || view.timeline;
        timeline.add(function () {
            animation.heal(0, 0);
            view.mapEl.append(combatText.divMain);
            combatText.animate();
        }, 600);
    }, isValidTarget: function (view, cellEntity, target) {
        if (!target.entity || !this.canUseOnEntity(target.entity, cellEntity.entity))return false;
        var closest = view.grid.getClosestCells(cellEntity.entity.area, target.entity.area);
        var range = view.grid.distanceToGrid(closest.from, closest.to);
        return range <= this.range;
    }, execute: function (game, command) {
        var entity = game.entities[command.target], amount = command.result[2];
        this.animateHeal(command, game.view, entity.id, amount);
        entity.decHealth(-amount);
    }, use: function (targetCell, sourceEntity) {
        var target = targetCell.entity;
        if (!target || !target.id || target.team != sourceEntity.team)
            return new MessageError('Укажи игрока для лечения').show();
        return west.mission.BattleserverSocket.emit('use', 'Heal', targetCell.entity.id, false);
    }
});

west.define('west.mission.Ability.Inspire', west.mission.Ability.Abstract, {
    target: 'self', states: {friendly: true}, init: function () {
        this.callParent('Inspire');
    }, queueMsg: function (game, actor, target) {
        return s('%1 использует вдохновение', actor.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor)
            return;
        var peopleInspired = [];
        if ('undefined' !== typeof data.targetNames) {
            for (var person in data.targetNames) {
                if (data.targetNames.hasOwnProperty(person)) {
                    peopleInspired.push(data.targetNames[person]['name'] + ' (+' + 100 * (data.targetNames[person]['health']) + '%)');
                }
            }
        }
        peopleInspired = peopleInspired.join(', ');
        return s(gendertext('%1 вдохновляет %2', '%1 вдохновляет %2'), west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color), peopleInspired);
    }, renderPreview: function (view, cellEntity, target, effect) {
        if (effect) {
            effect.update(target);
        } else {
            effect = new west.mission.canvas.Area(view, cellEntity, {viewRange: this.range});
            view.board.main.addChild(effect).requestRedraw();
        }
        return effect;
    }, animateInspire: function (command, view, entityId, amount, timeline) {
        var entityEl = view.entities[entityId].getEl();
        var sprite = new AnimationSprite('https://westrus.innogamescdn.com/images/mpi/effects/inspire.png', 66, 132, 7);
        var animation = new Animation('inspire', {prependTo: entityEl}).add('inspire', sprite, {
            fps: 15,
            onLoop: function () {
                this.element.fadeOut(80, function () {
                    this.stop();
                    this.element.remove();
                }.bind(this));
            }
        });
        timeline = timeline || view.timeline;
        timeline.add(animation.inspire.bind(animation, 0, 0), 600);
    }, execute: function (game, command) {
        if (command.entities) {
            this.deactivate(game, command);
        } else {
            var affectedEntities = command.result, entityId, entity, timelines = [];
            for (entityId in affectedEntities) {
                entity = game.entities[entityId];
                timelines.push(new west.mission.TimeLine());
                this.animateInspire(command, game.view, entityId, affectedEntities[entityId], timelines[timelines.length - 1]);
            }
            game.view.timeline.add(function () {
                timelines.forEach(function (timeline) {
                    game.view.timequeue.add(timeline);
                }, this);
            }, 600);
            game.view.timeline.add(function () {
                this.setEffect(game, command.state);
            }.bind(this), 0);
        }
    }, deactivate: function (game, command) {
        west.common.forEach(command.entities, function (amount, entityId) {
            game.view.timeline.add(function () {
                var entity = game.entities[entityId];
                entity.removeState('friendly', 'Inspire-buff', entity, 'inspire');
            }, 0);
        });
    }, setEffect: function (game, state) {
        west.common.forEach(state.entities, function (amount, entityId) {
            var entity = game.entities[entityId];
            if (entity) {
                entity.addState('friendly', 'Inspire-buff', entity, 'inspire');
            }
        });
    }, use: function (targetCell, sourceEntity) {
        return west.mission.BattleserverSocket.emit('use', 'Inspire', {x: targetCell.x, y: targetCell.y}, false);
    }
});

west.define('west.mission.Ability.EagleEye', west.mission.Ability.Abstract, {
    target: 'self', states: {friendly: true}, init: function () {
        this.callParent('EagleEye');
    }, queueMsg: function (game, actor, target) {
        return s('%1 использует орлиный глаз', actor.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor)
            return;
        return s('%1 использовал орлиный глаз', west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color));
    }, deactivate: function (game, command) {
        game.view.timeline.add(function () {
            var entity = game.entities[command.src];
            entity.removeState('friendly', 'EagleEye-buff', entity.entity, 'eagleeye');
        }, 0);
    }, setEffect: function (game, state) {
        var entity = game.entities[state.entityId];
        entity.addState('friendly', 'EagleEye-buff', entity.entity, 'eagleeye');
    }, execute: function (game, command) {
        if (!command.state) {
            this.deactivate(game, command);
        } else {
            game.view.timeline.add(function () {
                this.setEffect(game, command.state);
            }.bind(this), 0);
        }
    }, use: function (targetCell, sourceEntity) {
        return west.mission.BattleserverSocket.emit('use', 'EagleEye', {x: targetCell.x, y: targetCell.y}, false);
    }
});

west.define('west.mission.Ability.Barrelroll', west.mission.Ability.Abstract, {
    states: {friendly: true}, init: function () {
        this.callParent('Barrelroll');
    }, queueMsg: function (game, actor, target) {
        return s('%1 ставит бочки', actor.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor)
            return;
        return s('%1 поставил бочки', west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color));
    }, renderCommand: function (view, cellEntity, target, effect) {
        if (effect) {
            effect.update(target);
        } else {
            effect = new west.mission.effect.Barrelroll(view, cellEntity).update(target);
        }
        return effect;
    }, renderPreview: function (view, cellEntity, target, effect) {
        if (effect) {
            effect.update(target);
        } else {
            effect = new west.mission.effect.Barrelroll(view, cellEntity).update(target);
        }
        return effect;
    }, deactivate: function (game, command) {
        command.deactivate.forEach(function (entityId) {
            game.grid.removeEntity(entityId);
        });
    }, animateBarrels: function (command, view, barrels) {
        barrels.forEach(function (entityId, idx) {
            var entity = view.entities[entityId], entityEl = entity.getEl();
            entity.hideBar();
            entityEl.css('opacity', 0);
            var sprite = new AnimationSprite('https://westrus.innogamescdn.com/images/mpi/effects/ground_up.png', 150, 150, 10);
            var animation = new Animation('ground-up', {appendTo: entityEl}).add('buuh', sprite, {
                fps: 15,
                onLoop: function () {
                    this.element.hide();
                    this.stop();
                    this.element.remove();
                }
            });
            view.timeline.add(function () {
                createjs.Tween.get(entityEl.get(0)).call(function () {
                    animation.buuh(-45, -35);
                    animation.element.css('z-index', '999999');
                }).to({opacity: 1}, 300);
            }, 100);
        }, this);
    }, execute: function (game, command) {
        if (command.deactivate) {
            this.deactivate(game, command);
        } else {
            var barrels = [];
            command.result.forEach(function (entityData, idx) {
                var entity = new west.mission.Entity(entityData);
                game.grid.storeEntity(entity);
                barrels.push(entity.id);
            }, this);
            this.animateBarrels(command, game.view, barrels);
        }
    }, use: function (targetCell) {
        return west.mission.BattleserverSocket.emit('use', 'Barrelroll', {x: targetCell.x, y: targetCell.y}, false);
    }
});

west.define('west.mission.Ability.OneShot', west.mission.Ability.Abstract, {
    states: {friendly: true, enemy: true}, cursor: 'aim', init: function () {
        this.callParent('OneShot');
    }, queueMsg: function (game, actor, target) {
        target = game.grid.entities[target];
        return s('%1 атакует %2', actor.data.name, target.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor || !target)
            return;
        var returnString = s('%1 атакует %2', west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color), target.data.name);
        if (data) {
            if (data.result && data.result[2]) {
                returnString += ' (' + data.result[2] + ')';
            } else {
                returnString += ' (' + 'промах' + ')';
            }
            if (data.team) {
                returnString += ' ' + 'огонь по своим';
            }
        }
        return returnString;
    }, animateThor: function (command, view, entityId) {
        var entityEl = view.entities[entityId].getEl();
        var sprite = new AnimationSprite('https://westrus.innogamescdn.com/images/mpi/effects/thunder.png', 192, 192, 10);
        var animation = new Animation('thunder', {appendTo: entityEl}).add('thor', sprite, {
            fps: 15,
            onLoop: function () {
                this.element.hide();
                this.stop();
                this.element.remove();
            }
        });
        view.timeline.add(function () {
            animation.thor(30, 115);
        }, 500);
    }, isValidTarget: function (view, cellEntity, target) {
        return !!(target && target.entity);
    }, execute: function (game, command) {
        var r = command.result;
        var entity = game.grid.get(r[0]).entity;
        this.animateThor(command, game.view, entity.id);
        entity.decHealth(r[2]);
    }, use: function (targetCell, sourceEntity) {
        var target = targetCell.entity;
        if (!target || !target.id)
            return new MessageError('Укажи игрока для поражения').show();
        return west.mission.BattleserverSocket.emit('use', 'OneShot', target.id, false);
    }
});

west.define('west.mission.Ability.SnakeShot', west.mission.Ability.Abstract, {
    states: {friendly: true, enemy: true}, cursor: 'aim', init: function () {
        this.callParent('SnakeShot');
    }, queueMsg: function (game, actor, target) {
        return s('%1 использует ядовитый выстрел', actor.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor || !target)
            return;
        var returnString = '';
        if (data) {
            if (data.result) {
                returnString = s('%1 атакует %2 ядовитым выстрелом', west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color), target.data.name);
                if (data.result[2]) {
                    returnString += ' (' + data.result[2] + ')';
                } else {
                    returnString += ' (' + 'промах' + ')';
                }
                if (data.team) {
                    returnString += ' ' + 'огонь по своим';
                }
            } else if ('undefined' !== typeof data.bleed && data.bleed) {
                returnString = s('%1 истекает кровью', west.mission.Utils.formatUsernameColor(target.data.name, target.team.color)) + ' (' + data.bleed + ')';
            }
        }
        return returnString;
    }, renderPreview: function (view, cellEntity, target, effect) {
        return west.mission.Ability.Factory.get('Attack').renderPreview(view, cellEntity, target, effect);
    }, isValidTarget: function (view, cellEntity, target) {
        return !!(target && target.entity && this.canUseOnEntity(target.entity, cellEntity.entity));
    }, setEffect: function (game, state) {
        var entity = game.entities[state.target];
        entity.addState('enemy', 'SnakeShot-bleed', entity, 'snakeshot-bleed');
    }, use: function (targetCell, sourceEntity) {
        return west.mission.BattleserverSocket.emit('use', 'SnakeShot', targetCell.entity.id, false);
    }, execute: function (game, command) {
        if (command.bleed !== undefined) {
            this.bleed(game, command);
        } else if (command.deactivate) {
            this.deactivate(game, command);
        } else {
            west.mission.Ability.Factory.get('Attack').execute(game, command, this.type);
            if (command.state) {
                game.view.timeline.add(function () {
                    this.setEffect(game, command.state);
                }.bind(this), 0);
            }
        }
    }, bleed: function (game, command) {
        var entity = game.grid.entities[command.target];
        if ('undefined' === typeof entity) {
            return;
        }
        var coords = entity.getNullCoords();
        var css = game.view.coordToScreen(coords.x, coords.y);
        var combatText = new west.mission.CombatText(css, 'effect mpi-ability-SnakeShot').setText(command.bleed);
        game.view.timeline.add(function () {
            game.view.mapEl.append(combatText.divMain);
            combatText.animate();
        }, 100);
        entity.decHealth(command.bleed);
    }, deactivate: function (game, command) {
        game.view.timeline.add(function () {
            var entity = game.entities[command.target];
            entity.removeState('enemy', 'SnakeShot-bleed', entity, 'snakeshot-bleed');
        }, 0);
    }
});

west.define('west.mission.Ability.Snare', west.mission.Ability.Abstract, {
    states: {friendly: true, enemy: true}, cursor: 'aim', init: function () {
        this.callParent('Snare');
    }, queueMsg: function (game, actor, target) {
        target = game.grid.entities[target];
        return s('%1 обездвиживает %2', actor.data.name, target.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor || !target)
            return;
        var success = (data.result === true || (data.result.hasOwnProperty('result') && data.result.result === true));
        if (success) {
            return s(gendertext('%1 обездвиживает %2', '%1 обездвиживает %2'), west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color), target.data.name);
        } else {
            return s(gendertext('%1 пытался обездвижить %2 и промахнулся', '%1 пыталась обездвижить %2 и промахнулась'), west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color), target.data.name);
        }
    }, renderPreview: function (view, cellEntity, target, effect) {
        if (effect) {
            effect.update();
        } else {
            effect = new west.mission.canvas.Area(view, cellEntity, {viewRange: this.range});
            view.board.main.addChild(effect).requestRedraw();
        }
        return effect;
    }, animateSnare: function (command, view, timeline) {
        var entityEl = view.entities[command.target].getEl();
        var sprite = new AnimationSprite('https://westrus.innogamescdn.com/images/mpi/effects/snare.png', 66, 66, 6);
        var animation = new Animation('snare', {prependTo: entityEl}).setDefaultSprite('snare', sprite, {
            fps: 15,
            onLoop: function () {
                this.element.fadeOut(1000, function () {
                    this.element.remove();
                }.bind(this));
                return true;
            }
        });
        var coords = view.entities[command.target].entity.getNullCoords();
        var css = view.coordToScreen(coords.x, coords.y);
        var combatText = new west.mission.CombatText(css, 'mpi-ability-Snare').setText(gendertext('остановлен', 'остановлена'));
        timeline = timeline || view.timeline;
        timeline.add(function () {
            animation.snare(0, 0);
            animation.stop();
            timeline.add(function () {
                animation.snare(0, 0);
            }, 200);
            view.mapEl.append(combatText.divMain);
            combatText.animate();
        }, 400);
    }, animateMissedSnare: function (command, view, timeline) {
        var coords = view.entities[command.target].entity.getNullCoords();
        var css = view.coordToScreen(coords.x, coords.y);
        var combatText = new west.mission.CombatText(css, 'mpi-ability-Snare').setText('промах');
        timeline = timeline || view.timeline;
        timeline.add(function () {
            view.mapEl.append(combatText.divMain);
            combatText.animate();
        }, 600);
    }, isValidTarget: function (view, cellEntity, target) {
        return !!(target && target.entity && this.canUseOnEntity(target.entity, cellEntity.entity));
    }, deactivate: function (game, command) {
        game.view.timeline.add(function () {
            var entity = game.entities[command.target];
            entity.removeState('enemy', 'Snare-rooted', entity, 'snare');
        }, 0);
    }, setEffect: function (game, state) {
        var entity = game.entities[state.target];
        entity.addState('enemy', 'Snare-rooted', entity, 'snare');
    }, execute: function (game, command, src) {
        var entity = command.target;
        if (command.state) {
            game.view.timeline.add(this.setEffect.bind(this, game, command.state), 0);
            this.animateSnare(command, game.view);
        } else if (command.deactivate) {
            this.deactivate(game, command);
        } else {
            this.animateMissedSnare(command, game.view);
        }
    }, use: function (targetCell) {
        return west.mission.BattleserverSocket.emit('use', 'Snare', targetCell.entity.id, false);
    }
});

west.define('west.mission.Ability.BurningTequila', west.mission.Ability.Abstract, {
    states: {friendly: true}, cursor: 'aim', init: function () {
        this.callParent('BurningTequila');
    }, queueMsg: function (game, actor, target) {
        return s('%1 поджигает текилу', actor.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor)
            return;
        console.log('give detailed information, like for other abilities');
        return s('%1 поджёг текилу', actor.data.name);
    }, renderPreview: function (view, cellEntity, target, effect) {
        if (effect) {
            effect.update(target);
        } else {
            effect = new west.mission.effect.BurningTequila(view, cellEntity, target, {
                viewRange: this.range,
                range: this.radius
            });
            view.board.main.addChild(effect).requestRedraw();
        }
        return effect;
    }, isValidTarget: function (view, cellEntity, target) {
        if (!target || !target.props || target.props.blocked)return false;
        var from = view.grid.getFromCell(cellEntity.entity.area, target);
        return this.range >= view.grid.distanceToGrid(from, target);
    }, setEffect: function (game, state) {
        var entity = game.entities[state.target];
        entity.addState('enemy', 'BurningTequila-bleed', entity, 'snakeshot-bleed');
    }, use: function (targetCell, sourceEntity) {
        if (targetCell.props.blocked)return false;
        return west.mission.BattleserverSocket.emit('use', 'BurningTequila', {x: targetCell.x, y: targetCell.y}, false);
    }, execute: function (game, command) {
        if (command.result) {
            this.burnEntities(game, command.result);
        } else {
            if (command.burned) {
                this.burnEntities(game, command.burned);
            }
        }
    }, burnEntities: function (game, entities) {
        game.view.timeline.add(function () {
            entities.forEach(function (burned) {
                var css = game.view.coordToScreen(burned.coords.x, burned.coords.y);
                var cbTxt = new west.mission.CombatText(css, 'effect mpi-ability-BurningTequila').setText(burned.damage);
                game.view.mapEl.append(cbTxt.divMain);
                cbTxt.animate();
            });
        }, 0);
        game.view.timeline.add(function () {
        }, 500);
        entities.forEach(function (burned) {
            game.grid.entities[burned.entityId].decHealth(burned.damage);
        });
    }, deactivate: function (game, command) {
        this.burnEntities(game, command.burned);
    }
});

west.define('west.mission.Ability.AreaHeal', west.mission.Ability.Abstract, {
    target: 'self', states: {friendly: true}, init: function () {
        this.callParent('AreaHeal');
    }, queueMsg: function (game, actor, target) {
        return s('%1 использует область лечения', actor.data.name);
    }, resultMsg: function (actor, target, data) {
        if (!actor)
            return;
        var peopleHealed = [];
        if (data && 'undefined' !== typeof data.targetNames) {
            for (var person in data.targetNames) {
                if (data.targetNames.hasOwnProperty(person)) {
                    peopleHealed.push(data.targetNames[person]['name'] + ' (' + data.targetNames[person]['health'] + ')');
                }
            }
        }
        peopleHealed = peopleHealed.join(', ');
        return s(gendertext('%1 лечит %2', '%1 лечит %2'), west.mission.Utils.formatUsernameColor(actor.data.name, actor.team.color), peopleHealed);
    }, renderPreview: function (view, cellEntity, target, effect) {
        if (effect) {
            effect.update();
        } else {
            effect = new west.mission.canvas.Area(view, cellEntity, {viewRange: this.range});
            view.board.main.addChild(effect).requestRedraw();
        }
        return effect;
    }, execute: function (game, command) {
        var affectedEntities = command.result, Heal = west.mission.Ability.Factory.get('Heal'), entityId, entity, timeline;
        for (entityId in affectedEntities) {
            entity = game.entities[entityId];
            timeline = new west.mission.TimeLine();
            Heal.animateHeal(command, game.view, entityId, affectedEntities[entityId], timeline);
            game.view.timeline.add(game.view.timequeue.add.bind(game.view.timequeue, timeline), 0);
            entity.decHealth(-affectedEntities[entityId]);
        }
    }, use: function (targetCell, sourceEntity) {
        return west.mission.BattleserverSocket.emit('use', 'AreaHeal', {x: targetCell.x, y: targetCell.y}, false);
    }
});

west.define('west.mission.Ability.TutorialAction', west.mission.Ability.Abstract, {
    target: 'self',
    hidden: true,
    init: function () {
        console.log("TutorialAction initialized!");
        this.callParent('TutorialAction');
    },
    use: function (targetCell, sourceEntity) {
        console.log("Use TutorialAction", targetCell, sourceEntity);
        return west.mission.BattleserverSocket.emit('use', 'TutorialAction', 'whatever', false);
    }
});
